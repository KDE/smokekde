//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke.h>
#include <qt_smoke.h>
#include <qstring.h>
#include <qxml.h>

class x_QXmlContentHandler {
private:
    QXmlContentHandler *xthis;
public:
    x_QXmlContentHandler(void *x) : xthis((QXmlContentHandler*)x) {}
    void x_0(Smoke::Stack x) {
	// setDocumentLocator(QXmlLocator*)
	xthis->QXmlContentHandler::setDocumentLocator((QXmlLocator*)x[1].s_class);
    }
    void x_1(Smoke::Stack x) {
	// startDocument()
	bool xret = xthis->QXmlContentHandler::startDocument();
	x[0].s_bool = (bool)xret;
    }
    void x_2(Smoke::Stack x) {
	// endDocument()
	bool xret = xthis->QXmlContentHandler::endDocument();
	x[0].s_bool = (bool)xret;
    }
    void x_3(Smoke::Stack x) {
	// startPrefixMapping(const QString&, const QString&)
	bool xret = xthis->QXmlContentHandler::startPrefixMapping(*(const QString *)x[1].s_class,*(const QString *)x[2].s_class);
	x[0].s_bool = (bool)xret;
    }
    void x_4(Smoke::Stack x) {
	// endPrefixMapping(const QString&)
	bool xret = xthis->QXmlContentHandler::endPrefixMapping(*(const QString *)x[1].s_class);
	x[0].s_bool = (bool)xret;
    }
    void x_5(Smoke::Stack x) {
	// startElement(const QString&, const QString&, const QString&, const QXmlAttributes&)
	bool xret = xthis->QXmlContentHandler::startElement(*(const QString *)x[1].s_class,*(const QString *)x[2].s_class,*(const QString *)x[3].s_class,*(const QXmlAttributes *)x[4].s_class);
	x[0].s_bool = (bool)xret;
    }
    void x_6(Smoke::Stack x) {
	// endElement(const QString&, const QString&, const QString&)
	bool xret = xthis->QXmlContentHandler::endElement(*(const QString *)x[1].s_class,*(const QString *)x[2].s_class,*(const QString *)x[3].s_class);
	x[0].s_bool = (bool)xret;
    }
    void x_7(Smoke::Stack x) {
	// characters(const QString&)
	bool xret = xthis->QXmlContentHandler::characters(*(const QString *)x[1].s_class);
	x[0].s_bool = (bool)xret;
    }
    void x_8(Smoke::Stack x) {
	// ignorableWhitespace(const QString&)
	bool xret = xthis->QXmlContentHandler::ignorableWhitespace(*(const QString *)x[1].s_class);
	x[0].s_bool = (bool)xret;
    }
    void x_9(Smoke::Stack x) {
	// processingInstruction(const QString&, const QString&)
	bool xret = xthis->QXmlContentHandler::processingInstruction(*(const QString *)x[1].s_class,*(const QString *)x[2].s_class);
	x[0].s_bool = (bool)xret;
    }
    void x_10(Smoke::Stack x) {
	// skippedEntity(const QString&)
	bool xret = xthis->QXmlContentHandler::skippedEntity(*(const QString *)x[1].s_class);
	x[0].s_bool = (bool)xret;
    }
    void x_11(Smoke::Stack x) {
	// errorString()
	QString xret = xthis->QXmlContentHandler::errorString();
	x[0].s_class = (void*)new QString(xret);
    }
    ~x_QXmlContentHandler() {}
};
void xcall_QXmlContentHandler(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QXmlContentHandler xtmp(obj), *xself = &xtmp;
    switch(xi) {
	case 0: xself->x_0(args);	break;
	case 1: xself->x_1(args);	break;
	case 2: xself->x_2(args);	break;
	case 3: xself->x_3(args);	break;
	case 4: xself->x_4(args);	break;
	case 5: xself->x_5(args);	break;
	case 6: xself->x_6(args);	break;
	case 7: xself->x_7(args);	break;
	case 8: xself->x_8(args);	break;
	case 9: xself->x_9(args);	break;
	case 10: xself->x_10(args);	break;
	case 11: xself->x_11(args);	break;
    }
}
