//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke.h>
#include <qt_smoke.h>
#include <qcursor.h>
#include <qcolor.h>
#include <qstring.h>
#include <qsize.h>
#include <qvariant.h>
#include <qregion.h>
#include <qscrollview.h>
#include <qbrush.h>
#include <qpoint.h>
#include <qfont.h>
#include <qcstring.h>
#include <qbitmap.h>
#include <qtextedit.h>
#include <qstylesheet.h>
#include <qsizepolicy.h>
#include <qpalette.h>
#include <qnamespace.h>
#include <qwidget.h>
#include <qrect.h>
#include <qpixmap.h>
#include <qstyle.h>
#include <qscrollbar.h>

class x_QTextEdit : public QTextEdit {
public:
    static void x_0(Smoke::Stack x) {
	x[0].s_enum = (long)QTextEdit::NoWrap;
    }
    static void x_1(Smoke::Stack x) {
	x[0].s_enum = (long)QTextEdit::WidgetWidth;
    }
    static void x_2(Smoke::Stack x) {
	x[0].s_enum = (long)QTextEdit::FixedPixelWidth;
    }
    static void x_3(Smoke::Stack x) {
	x[0].s_enum = (long)QTextEdit::FixedColumnWidth;
    }
    static void x_4(Smoke::Stack x) {
	x[0].s_enum = (long)QTextEdit::AtWordBoundary;
    }
    static void x_5(Smoke::Stack x) {
	x[0].s_enum = (long)QTextEdit::Anywhere;
    }
    static void x_6(Smoke::Stack x) {
	x[0].s_enum = (long)QTextEdit::AtWhiteSpace;
    }
    static void x_7(Smoke::Stack x) {
	x[0].s_enum = (long)QTextEdit::AtWordOrDocumentBoundary;
    }
    static void x_8(Smoke::Stack x) {
	x[0].s_enum = (long)QTextEdit::AutoNone;
    }
    static void x_9(Smoke::Stack x) {
	x[0].s_enum = (long)QTextEdit::AutoBulletList;
    }
    static void x_10(Smoke::Stack x) {
	x[0].s_enum = (long)QTextEdit::AutoAll;
    }
    static void x_11(Smoke::Stack x) {
	x[0].s_enum = (long)QTextEdit::ActionBackspace;
    }
    static void x_12(Smoke::Stack x) {
	x[0].s_enum = (long)QTextEdit::ActionDelete;
    }
    static void x_13(Smoke::Stack x) {
	x[0].s_enum = (long)QTextEdit::ActionReturn;
    }
    static void x_14(Smoke::Stack x) {
	x[0].s_enum = (long)QTextEdit::ActionKill;
    }
    static void x_15(Smoke::Stack x) {
	x[0].s_enum = (long)QTextEdit::ActionWordBackspace;
    }
    static void x_16(Smoke::Stack x) {
	x[0].s_enum = (long)QTextEdit::ActionWordDelete;
    }
    static void x_17(Smoke::Stack x) {
	x[0].s_enum = (long)QTextEdit::MoveBackward;
    }
    static void x_18(Smoke::Stack x) {
	x[0].s_enum = (long)QTextEdit::MoveForward;
    }
    static void x_19(Smoke::Stack x) {
	x[0].s_enum = (long)QTextEdit::MoveWordBackward;
    }
    static void x_20(Smoke::Stack x) {
	x[0].s_enum = (long)QTextEdit::MoveWordForward;
    }
    static void x_21(Smoke::Stack x) {
	x[0].s_enum = (long)QTextEdit::MoveUp;
    }
    static void x_22(Smoke::Stack x) {
	x[0].s_enum = (long)QTextEdit::MoveDown;
    }
    static void x_23(Smoke::Stack x) {
	x[0].s_enum = (long)QTextEdit::MoveLineStart;
    }
    static void x_24(Smoke::Stack x) {
	x[0].s_enum = (long)QTextEdit::MoveLineEnd;
    }
    static void x_25(Smoke::Stack x) {
	x[0].s_enum = (long)QTextEdit::MoveHome;
    }
    static void x_26(Smoke::Stack x) {
	x[0].s_enum = (long)QTextEdit::MoveEnd;
    }
    static void x_27(Smoke::Stack x) {
	x[0].s_enum = (long)QTextEdit::MovePgUp;
    }
    static void x_28(Smoke::Stack x) {
	x[0].s_enum = (long)QTextEdit::MovePgDown;
    }
    static void x_29(Smoke::Stack x) {
	x[0].s_enum = (long)QTextEdit::AlignNormal;
    }
    static void x_30(Smoke::Stack x) {
	x[0].s_enum = (long)QTextEdit::AlignSuperScript;
    }
    static void x_31(Smoke::Stack x) {
	x[0].s_enum = (long)QTextEdit::AlignSubScript;
    }
    static void x_32(Smoke::Stack x) {
	x[0].s_enum = (long)QTextEdit::RedoIndentation;
    }
    static void x_33(Smoke::Stack x) {
	x[0].s_enum = (long)QTextEdit::CheckNewLines;
    }
    static void x_34(Smoke::Stack x) {
	x[0].s_enum = (long)QTextEdit::RemoveSelected;
    }
    void x_35(Smoke::Stack x) const {
	// metaObject()
	QMetaObject* xret = this->QTextEdit::metaObject();
	x[0].s_class = (void*)xret;
    }
    void x_36(Smoke::Stack x) const {
	// className()
	const char* xret = this->QTextEdit::className();
	x[0].s_voidp = (void*)xret;
    }
    void x_37(Smoke::Stack x) {
	// qt_cast(const char*)
	void* xret = this->QTextEdit::qt_cast((const char*)x[1].s_voidp);
	x[0].s_voidp = (void*)xret;
    }
    void x_38(Smoke::Stack x) {
	// qt_invoke(int, QUObject*)
	bool xret = this->QTextEdit::qt_invoke((int)x[1].s_int,(QUObject*)x[2].s_voidp);
	x[0].s_bool = xret;
    }
    void x_39(Smoke::Stack x) {
	// qt_emit(int, QUObject*)
	bool xret = this->QTextEdit::qt_emit((int)x[1].s_int,(QUObject*)x[2].s_voidp);
	x[0].s_bool = xret;
    }
    void x_40(Smoke::Stack x) {
	// qt_property(int, int, QVariant*)
	bool xret = this->QTextEdit::qt_property((int)x[1].s_int,(int)x[2].s_int,(QVariant*)x[3].s_class);
	x[0].s_bool = xret;
    }
    void x_41(Smoke::Stack x) {
	// qObject()
	QObject* xret = this->QTextEdit::qObject();
	x[0].s_class = (void*)xret;
    }
    static void x_42(Smoke::Stack x) {
	// QTextEdit(const QString&, const QString&, QWidget*, const char*)
	x_QTextEdit* xret = new x_QTextEdit(*(const QString *)x[1].s_voidp,*(const QString *)x[2].s_voidp,(QWidget*)x[3].s_class,(const char*)x[4].s_voidp);
	x[0].s_class = (void*)xret;
    }
    x_QTextEdit(const QString& x1, const QString& x2, QWidget* x3, const char* x4) : QTextEdit(x1, x2, x3, x4) {
    }
    static void x_43(Smoke::Stack x) {
	// QTextEdit(const QString&, const QString&, QWidget*)
	x_QTextEdit* xret = new x_QTextEdit(*(const QString *)x[1].s_voidp,*(const QString *)x[2].s_voidp,(QWidget*)x[3].s_class);
	x[0].s_class = (void*)xret;
    }
    x_QTextEdit(const QString& x1, const QString& x2, QWidget* x3) : QTextEdit(x1, x2, x3) {
    }
    static void x_44(Smoke::Stack x) {
	// QTextEdit(const QString&, const QString&)
	x_QTextEdit* xret = new x_QTextEdit(*(const QString *)x[1].s_voidp,*(const QString *)x[2].s_voidp);
	x[0].s_class = (void*)xret;
    }
    x_QTextEdit(const QString& x1, const QString& x2) : QTextEdit(x1, x2) {
    }
    static void x_45(Smoke::Stack x) {
	// QTextEdit(const QString&)
	x_QTextEdit* xret = new x_QTextEdit(*(const QString *)x[1].s_voidp);
	x[0].s_class = (void*)xret;
    }
    x_QTextEdit(const QString& x1) : QTextEdit(x1) {
    }
    static void x_46(Smoke::Stack x) {
	// QTextEdit(QWidget*, const char*)
	x_QTextEdit* xret = new x_QTextEdit((QWidget*)x[1].s_class,(const char*)x[2].s_voidp);
	x[0].s_class = (void*)xret;
    }
    x_QTextEdit(QWidget* x1, const char* x2) : QTextEdit(x1, x2) {
    }
    static void x_47(Smoke::Stack x) {
	// QTextEdit(QWidget*)
	x_QTextEdit* xret = new x_QTextEdit((QWidget*)x[1].s_class);
	x[0].s_class = (void*)xret;
    }
    x_QTextEdit(QWidget* x1) : QTextEdit(x1) {
    }
    static void x_48(Smoke::Stack x) {
	// QTextEdit()
	x_QTextEdit* xret = new x_QTextEdit();
	x[0].s_class = (void*)xret;
    }
    x_QTextEdit() : QTextEdit() {
    }
    void x_49(Smoke::Stack x) {
	// setPalette(const QPalette&)
	this->QTextEdit::setPalette(*(const QPalette *)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_50(Smoke::Stack x) const {
	// text()
	QString xret = this->QTextEdit::text();
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_51(Smoke::Stack x) const {
	// text(int)
	QString xret = this->QTextEdit::text((int)x[1].s_int);
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_52(Smoke::Stack x) const {
	// textFormat()
	Qt::TextFormat xret = this->QTextEdit::textFormat();
	x[0].s_enum = xret;
    }
    void x_53(Smoke::Stack x) const {
	// context()
	QString xret = this->QTextEdit::context();
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_54(Smoke::Stack x) const {
	// documentTitle()
	QString xret = this->QTextEdit::documentTitle();
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_55(Smoke::Stack x) const {
	// getSelection(int*, int*, int*, int*, int)
	this->QTextEdit::getSelection((int*)x[1].s_voidp,(int*)x[2].s_voidp,(int*)x[3].s_voidp,(int*)x[4].s_voidp,(int)x[5].s_int);
	(void)x; // noop (for compiler warning)
    }
    void x_56(Smoke::Stack x) const {
	// getSelection(int*, int*, int*, int*)
	this->QTextEdit::getSelection((int*)x[1].s_voidp,(int*)x[2].s_voidp,(int*)x[3].s_voidp,(int*)x[4].s_voidp);
	(void)x; // noop (for compiler warning)
    }
    void x_57(Smoke::Stack x) {
	// find(const QString&, bool, bool, bool, int*, int*)
	bool xret = this->QTextEdit::find(*(const QString *)x[1].s_voidp,(bool)x[2].s_bool,(bool)x[3].s_bool,(bool)x[4].s_bool,(int*)x[5].s_voidp,(int*)x[6].s_voidp);
	x[0].s_bool = xret;
    }
    void x_58(Smoke::Stack x) {
	// find(const QString&, bool, bool, bool, int*)
	bool xret = this->QTextEdit::find(*(const QString *)x[1].s_voidp,(bool)x[2].s_bool,(bool)x[3].s_bool,(bool)x[4].s_bool,(int*)x[5].s_voidp);
	x[0].s_bool = xret;
    }
    void x_59(Smoke::Stack x) {
	// find(const QString&, bool, bool, bool)
	bool xret = this->QTextEdit::find(*(const QString *)x[1].s_voidp,(bool)x[2].s_bool,(bool)x[3].s_bool,(bool)x[4].s_bool);
	x[0].s_bool = xret;
    }
    void x_60(Smoke::Stack x) {
	// find(const QString&, bool, bool)
	bool xret = this->QTextEdit::find(*(const QString *)x[1].s_voidp,(bool)x[2].s_bool,(bool)x[3].s_bool);
	x[0].s_bool = xret;
    }
    void x_61(Smoke::Stack x) const {
	// paragraphs()
	int xret = this->QTextEdit::paragraphs();
	x[0].s_int = xret;
    }
    void x_62(Smoke::Stack x) const {
	// lines()
	int xret = this->QTextEdit::lines();
	x[0].s_int = xret;
    }
    void x_63(Smoke::Stack x) const {
	// linesOfParagraph(int)
	int xret = this->QTextEdit::linesOfParagraph((int)x[1].s_int);
	x[0].s_int = xret;
    }
    void x_64(Smoke::Stack x) {
	// lineOfChar(int, int)
	int xret = this->QTextEdit::lineOfChar((int)x[1].s_int,(int)x[2].s_int);
	x[0].s_int = xret;
    }
    void x_65(Smoke::Stack x) const {
	// length()
	int xret = this->QTextEdit::length();
	x[0].s_int = xret;
    }
    void x_66(Smoke::Stack x) const {
	// paragraphRect(int)
	QRect xret = this->QTextEdit::paragraphRect((int)x[1].s_int);
	x[0].s_class = (void*)new QRect(xret);
    }
    void x_67(Smoke::Stack x) const {
	// paragraphAt(const QPoint&)
	int xret = this->QTextEdit::paragraphAt(*(const QPoint *)x[1].s_class);
	x[0].s_int = xret;
    }
    void x_68(Smoke::Stack x) const {
	// charAt(const QPoint&, int*)
	int xret = this->QTextEdit::charAt(*(const QPoint *)x[1].s_class,(int*)x[2].s_voidp);
	x[0].s_int = xret;
    }
    void x_69(Smoke::Stack x) const {
	// paragraphLength(int)
	int xret = this->QTextEdit::paragraphLength((int)x[1].s_int);
	x[0].s_int = xret;
    }
    void x_70(Smoke::Stack x) const {
	// styleSheet()
	QStyleSheet* xret = this->QTextEdit::styleSheet();
	x[0].s_class = (void*)xret;
    }
    void x_71(Smoke::Stack x) const {
	// mimeSourceFactory()
	QMimeSourceFactory* xret = this->QTextEdit::mimeSourceFactory();
	x[0].s_class = (void*)xret;
    }
    void x_72(Smoke::Stack x) const {
	// paper()
	QBrush xret = this->QTextEdit::paper();
	x[0].s_class = (void*)new QBrush(xret);
    }
    void x_73(Smoke::Stack x) const {
	// linkUnderline()
	bool xret = this->QTextEdit::linkUnderline();
	x[0].s_bool = xret;
    }
    void x_74(Smoke::Stack x) const {
	// heightForWidth(int)
	int xret = this->QTextEdit::heightForWidth((int)x[1].s_int);
	x[0].s_int = xret;
    }
    void x_75(Smoke::Stack x) const {
	// hasSelectedText()
	bool xret = this->QTextEdit::hasSelectedText();
	x[0].s_bool = xret;
    }
    void x_76(Smoke::Stack x) const {
	// selectedText()
	QString xret = this->QTextEdit::selectedText();
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_77(Smoke::Stack x) const {
	// isUndoAvailable()
	bool xret = this->QTextEdit::isUndoAvailable();
	x[0].s_bool = xret;
    }
    void x_78(Smoke::Stack x) const {
	// isRedoAvailable()
	bool xret = this->QTextEdit::isRedoAvailable();
	x[0].s_bool = xret;
    }
    void x_79(Smoke::Stack x) const {
	// wordWrap()
	QTextEdit::WordWrap xret = this->QTextEdit::wordWrap();
	x[0].s_enum = xret;
    }
    void x_80(Smoke::Stack x) const {
	// wrapColumnOrWidth()
	int xret = this->QTextEdit::wrapColumnOrWidth();
	x[0].s_int = xret;
    }
    void x_81(Smoke::Stack x) const {
	// wrapPolicy()
	QTextEdit::WrapPolicy xret = this->QTextEdit::wrapPolicy();
	x[0].s_enum = xret;
    }
    void x_82(Smoke::Stack x) const {
	// tabStopWidth()
	int xret = this->QTextEdit::tabStopWidth();
	x[0].s_int = xret;
    }
    void x_83(Smoke::Stack x) {
	// anchorAt(const QPoint&)
	QString xret = this->QTextEdit::anchorAt(*(const QPoint *)x[1].s_class);
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_84(Smoke::Stack x) {
	// anchorAt(const QPoint&, Qt::AnchorAttribute)
	QString xret = this->QTextEdit::anchorAt(*(const QPoint *)x[1].s_class,(Qt::AnchorAttribute)x[2].s_enum);
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_85(Smoke::Stack x) const {
	// sizeHint()
	QSize xret = this->QTextEdit::sizeHint();
	x[0].s_class = (void*)new QSize(xret);
    }
    void x_86(Smoke::Stack x) const {
	// isReadOnly()
	bool xret = this->QTextEdit::isReadOnly();
	x[0].s_bool = xret;
    }
    void x_87(Smoke::Stack x) const {
	// getCursorPosition(int*, int*)
	this->QTextEdit::getCursorPosition((int*)x[1].s_voidp,(int*)x[2].s_voidp);
	(void)x; // noop (for compiler warning)
    }
    void x_88(Smoke::Stack x) const {
	// isModified()
	bool xret = this->QTextEdit::isModified();
	x[0].s_bool = xret;
    }
    void x_89(Smoke::Stack x) const {
	// italic()
	bool xret = this->QTextEdit::italic();
	x[0].s_bool = xret;
    }
    void x_90(Smoke::Stack x) const {
	// bold()
	bool xret = this->QTextEdit::bold();
	x[0].s_bool = xret;
    }
    void x_91(Smoke::Stack x) const {
	// underline()
	bool xret = this->QTextEdit::underline();
	x[0].s_bool = xret;
    }
    void x_92(Smoke::Stack x) const {
	// family()
	QString xret = this->QTextEdit::family();
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_93(Smoke::Stack x) const {
	// pointSize()
	int xret = this->QTextEdit::pointSize();
	x[0].s_int = xret;
    }
    void x_94(Smoke::Stack x) const {
	// color()
	QColor xret = this->QTextEdit::color();
	x[0].s_class = (void*)new QColor(xret);
    }
    void x_95(Smoke::Stack x) const {
	// font()
	QFont xret = this->QTextEdit::font();
	x[0].s_class = (void*)new QFont(xret);
    }
    void x_96(Smoke::Stack x) const {
	// currentFont()
	QFont xret = this->QTextEdit::currentFont();
	x[0].s_class = (void*)new QFont(xret);
    }
    void x_97(Smoke::Stack x) const {
	// alignment()
	int xret = this->QTextEdit::alignment();
	x[0].s_int = xret;
    }
    void x_98(Smoke::Stack x) const {
	// undoDepth()
	int xret = this->QTextEdit::undoDepth();
	x[0].s_int = xret;
    }
    void x_99(Smoke::Stack x) {
	// getFormat(int, int, QFont*, QColor*, QTextEdit::VerticalAlignment*)
	bool xret = this->QTextEdit::getFormat((int)x[1].s_int,(int)x[2].s_int,(QFont*)x[3].s_class,(QColor*)x[4].s_class,(QTextEdit::VerticalAlignment*)x[5].s_voidp);
	x[0].s_bool = xret;
    }
    void x_100(Smoke::Stack x) {
	// getParagraphFormat(int, QFont*, QColor*, QTextEdit::VerticalAlignment*, int*, QStyleSheetItem::DisplayMode*, QStyleSheetItem::ListStyle*, int*)
	bool xret = this->QTextEdit::getParagraphFormat((int)x[1].s_int,(QFont*)x[2].s_class,(QColor*)x[3].s_class,(QTextEdit::VerticalAlignment*)x[4].s_voidp,(int*)x[5].s_voidp,(QStyleSheetItem::DisplayMode*)x[6].s_voidp,(QStyleSheetItem::ListStyle*)x[7].s_voidp,(int*)x[8].s_voidp);
	x[0].s_bool = xret;
    }
    void x_101(Smoke::Stack x) const {
	// isOverwriteMode()
	bool xret = this->QTextEdit::isOverwriteMode();
	x[0].s_bool = xret;
    }
    void x_102(Smoke::Stack x) const {
	// paragraphBackgroundColor(int)
	QColor xret = this->QTextEdit::paragraphBackgroundColor((int)x[1].s_int);
	x[0].s_class = (void*)new QColor(xret);
    }
    void x_103(Smoke::Stack x) const {
	// isUndoRedoEnabled()
	bool xret = this->QTextEdit::isUndoRedoEnabled();
	x[0].s_bool = xret;
    }
    void x_104(Smoke::Stack x) {
	// eventFilter(QObject*, QEvent*)
	bool xret = this->QTextEdit::eventFilter((QObject*)x[1].s_class,(QEvent*)x[2].s_class);
	x[0].s_bool = xret;
    }
    void x_105(Smoke::Stack x) const {
	// tabChangesFocus()
	bool xret = this->QTextEdit::tabChangesFocus();
	x[0].s_bool = xret;
    }
    void x_106(Smoke::Stack x) {
	// setAutoFormatting(uint)
	this->QTextEdit::setAutoFormatting((uint)x[1].s_uint);
	(void)x; // noop (for compiler warning)
    }
    void x_107(Smoke::Stack x) const {
	// autoFormatting()
	uint xret = this->QTextEdit::autoFormatting();
	x[0].s_uint = xret;
    }
    void x_108(Smoke::Stack x) {
	// setEnabled(bool)
	this->QTextEdit::setEnabled((bool)x[1].s_bool);
	(void)x; // noop (for compiler warning)
    }
    void x_109(Smoke::Stack x) {
	// setMimeSourceFactory(QMimeSourceFactory*)
	this->QTextEdit::setMimeSourceFactory((QMimeSourceFactory*)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_110(Smoke::Stack x) {
	// setStyleSheet(QStyleSheet*)
	this->QTextEdit::setStyleSheet((QStyleSheet*)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_111(Smoke::Stack x) {
	// scrollToAnchor(const QString&)
	this->QTextEdit::scrollToAnchor(*(const QString *)x[1].s_voidp);
	(void)x; // noop (for compiler warning)
    }
    void x_112(Smoke::Stack x) {
	// setPaper(const QBrush&)
	this->QTextEdit::setPaper(*(const QBrush *)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_113(Smoke::Stack x) {
	// setLinkUnderline(bool)
	this->QTextEdit::setLinkUnderline((bool)x[1].s_bool);
	(void)x; // noop (for compiler warning)
    }
    void x_114(Smoke::Stack x) {
	// setWordWrap(QTextEdit::WordWrap)
	this->QTextEdit::setWordWrap((QTextEdit::WordWrap)x[1].s_enum);
	(void)x; // noop (for compiler warning)
    }
    void x_115(Smoke::Stack x) {
	// setWrapColumnOrWidth(int)
	this->QTextEdit::setWrapColumnOrWidth((int)x[1].s_int);
	(void)x; // noop (for compiler warning)
    }
    void x_116(Smoke::Stack x) {
	// setWrapPolicy(QTextEdit::WrapPolicy)
	this->QTextEdit::setWrapPolicy((QTextEdit::WrapPolicy)x[1].s_enum);
	(void)x; // noop (for compiler warning)
    }
    void x_117(Smoke::Stack x) {
	// copy()
	this->QTextEdit::copy();
	(void)x; // noop (for compiler warning)
    }
    void x_118(Smoke::Stack x) {
	// append(const QString&)
	this->QTextEdit::append(*(const QString *)x[1].s_voidp);
	(void)x; // noop (for compiler warning)
    }
    void x_119(Smoke::Stack x) {
	// setText(const QString&)
	this->QTextEdit::setText(*(const QString *)x[1].s_voidp);
	(void)x; // noop (for compiler warning)
    }
    void x_120(Smoke::Stack x) {
	// setText(const QString&, const QString&)
	this->QTextEdit::setText(*(const QString *)x[1].s_voidp,*(const QString *)x[2].s_voidp);
	(void)x; // noop (for compiler warning)
    }
    void x_121(Smoke::Stack x) {
	// setTextFormat(Qt::TextFormat)
	this->QTextEdit::setTextFormat((Qt::TextFormat)x[1].s_enum);
	(void)x; // noop (for compiler warning)
    }
    void x_122(Smoke::Stack x) {
	// selectAll(bool)
	this->QTextEdit::selectAll((bool)x[1].s_bool);
	(void)x; // noop (for compiler warning)
    }
    void x_123(Smoke::Stack x) {
	// selectAll()
	this->QTextEdit::selectAll();
	(void)x; // noop (for compiler warning)
    }
    void x_124(Smoke::Stack x) {
	// setTabStopWidth(int)
	this->QTextEdit::setTabStopWidth((int)x[1].s_int);
	(void)x; // noop (for compiler warning)
    }
    void x_125(Smoke::Stack x) {
	// zoomIn(int)
	this->QTextEdit::zoomIn((int)x[1].s_int);
	(void)x; // noop (for compiler warning)
    }
    void x_126(Smoke::Stack x) {
	// zoomIn()
	this->QTextEdit::zoomIn();
	(void)x; // noop (for compiler warning)
    }
    void x_127(Smoke::Stack x) {
	// zoomOut(int)
	this->QTextEdit::zoomOut((int)x[1].s_int);
	(void)x; // noop (for compiler warning)
    }
    void x_128(Smoke::Stack x) {
	// zoomOut()
	this->QTextEdit::zoomOut();
	(void)x; // noop (for compiler warning)
    }
    void x_129(Smoke::Stack x) {
	// zoomTo(int)
	this->QTextEdit::zoomTo((int)x[1].s_int);
	(void)x; // noop (for compiler warning)
    }
    void x_130(Smoke::Stack x) {
	// sync()
	this->QTextEdit::sync();
	(void)x; // noop (for compiler warning)
    }
    void x_131(Smoke::Stack x) {
	// setReadOnly(bool)
	this->QTextEdit::setReadOnly((bool)x[1].s_bool);
	(void)x; // noop (for compiler warning)
    }
    void x_132(Smoke::Stack x) {
	// undo()
	this->QTextEdit::undo();
	(void)x; // noop (for compiler warning)
    }
    void x_133(Smoke::Stack x) {
	// redo()
	this->QTextEdit::redo();
	(void)x; // noop (for compiler warning)
    }
    void x_134(Smoke::Stack x) {
	// cut()
	this->QTextEdit::cut();
	(void)x; // noop (for compiler warning)
    }
    void x_135(Smoke::Stack x) {
	// paste()
	this->QTextEdit::paste();
	(void)x; // noop (for compiler warning)
    }
    void x_136(Smoke::Stack x) {
	// pasteSubType(const QCString&)
	this->QTextEdit::pasteSubType(*(const QCString *)x[1].s_voidp);
	(void)x; // noop (for compiler warning)
    }
    void x_137(Smoke::Stack x) {
	// clear()
	this->QTextEdit::clear();
	(void)x; // noop (for compiler warning)
    }
    void x_138(Smoke::Stack x) {
	// del()
	this->QTextEdit::del();
	(void)x; // noop (for compiler warning)
    }
    void x_139(Smoke::Stack x) {
	// indent()
	this->QTextEdit::indent();
	(void)x; // noop (for compiler warning)
    }
    void x_140(Smoke::Stack x) {
	// setItalic(bool)
	this->QTextEdit::setItalic((bool)x[1].s_bool);
	(void)x; // noop (for compiler warning)
    }
    void x_141(Smoke::Stack x) {
	// setBold(bool)
	this->QTextEdit::setBold((bool)x[1].s_bool);
	(void)x; // noop (for compiler warning)
    }
    void x_142(Smoke::Stack x) {
	// setUnderline(bool)
	this->QTextEdit::setUnderline((bool)x[1].s_bool);
	(void)x; // noop (for compiler warning)
    }
    void x_143(Smoke::Stack x) {
	// setFamily(const QString&)
	this->QTextEdit::setFamily(*(const QString *)x[1].s_voidp);
	(void)x; // noop (for compiler warning)
    }
    void x_144(Smoke::Stack x) {
	// setPointSize(int)
	this->QTextEdit::setPointSize((int)x[1].s_int);
	(void)x; // noop (for compiler warning)
    }
    void x_145(Smoke::Stack x) {
	// setColor(const QColor&)
	this->QTextEdit::setColor(*(const QColor *)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_146(Smoke::Stack x) {
	// setFont(const QFont&)
	this->QTextEdit::setFont(*(const QFont *)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_147(Smoke::Stack x) {
	// setVerticalAlignment(QTextEdit::VerticalAlignment)
	this->QTextEdit::setVerticalAlignment((QTextEdit::VerticalAlignment)x[1].s_enum);
	(void)x; // noop (for compiler warning)
    }
    void x_148(Smoke::Stack x) {
	// setAlignment(int)
	this->QTextEdit::setAlignment((int)x[1].s_int);
	(void)x; // noop (for compiler warning)
    }
    void x_149(Smoke::Stack x) {
	// setParagType(QStyleSheetItem::DisplayMode, QStyleSheetItem::ListStyle)
	this->QTextEdit::setParagType((QStyleSheetItem::DisplayMode)x[1].s_enum,(QStyleSheetItem::ListStyle)x[2].s_enum);
	(void)x; // noop (for compiler warning)
    }
    void x_150(Smoke::Stack x) {
	// setCursorPosition(int, int)
	this->QTextEdit::setCursorPosition((int)x[1].s_int,(int)x[2].s_int);
	(void)x; // noop (for compiler warning)
    }
    void x_151(Smoke::Stack x) {
	// setSelection(int, int, int, int, int)
	this->QTextEdit::setSelection((int)x[1].s_int,(int)x[2].s_int,(int)x[3].s_int,(int)x[4].s_int,(int)x[5].s_int);
	(void)x; // noop (for compiler warning)
    }
    void x_152(Smoke::Stack x) {
	// setSelection(int, int, int, int)
	this->QTextEdit::setSelection((int)x[1].s_int,(int)x[2].s_int,(int)x[3].s_int,(int)x[4].s_int);
	(void)x; // noop (for compiler warning)
    }
    void x_153(Smoke::Stack x) {
	// setSelectionAttributes(int, const QColor&, bool)
	this->QTextEdit::setSelectionAttributes((int)x[1].s_int,*(const QColor *)x[2].s_class,(bool)x[3].s_bool);
	(void)x; // noop (for compiler warning)
    }
    void x_154(Smoke::Stack x) {
	// setModified(bool)
	this->QTextEdit::setModified((bool)x[1].s_bool);
	(void)x; // noop (for compiler warning)
    }
    void x_155(Smoke::Stack x) {
	// resetFormat()
	this->QTextEdit::resetFormat();
	(void)x; // noop (for compiler warning)
    }
    void x_156(Smoke::Stack x) {
	// setUndoDepth(int)
	this->QTextEdit::setUndoDepth((int)x[1].s_int);
	(void)x; // noop (for compiler warning)
    }
    void x_157(Smoke::Stack x) {
	// setFormat(QTextFormat*, int)
	this->QTextEdit::setFormat((QTextFormat*)x[1].s_voidp,(int)x[2].s_int);
	(void)x; // noop (for compiler warning)
    }
    void x_158(Smoke::Stack x) {
	// ensureCursorVisible()
	this->QTextEdit::ensureCursorVisible();
	(void)x; // noop (for compiler warning)
    }
    void x_159(Smoke::Stack x) {
	// placeCursor(const QPoint&, QTextCursor*)
	this->QTextEdit::placeCursor(*(const QPoint *)x[1].s_class,(QTextCursor*)x[2].s_voidp);
	(void)x; // noop (for compiler warning)
    }
    void x_160(Smoke::Stack x) {
	// placeCursor(const QPoint&)
	this->QTextEdit::placeCursor(*(const QPoint *)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_161(Smoke::Stack x) {
	// moveCursor(QTextEdit::CursorAction, bool)
	this->QTextEdit::moveCursor((QTextEdit::CursorAction)x[1].s_enum,(bool)x[2].s_bool);
	(void)x; // noop (for compiler warning)
    }
    void x_162(Smoke::Stack x) {
	// doKeyboardAction(QTextEdit::KeyboardAction)
	this->QTextEdit::doKeyboardAction((QTextEdit::KeyboardAction)x[1].s_enum);
	(void)x; // noop (for compiler warning)
    }
    void x_163(Smoke::Stack x) {
	// removeSelectedText(int)
	this->QTextEdit::removeSelectedText((int)x[1].s_int);
	(void)x; // noop (for compiler warning)
    }
    void x_164(Smoke::Stack x) {
	// removeSelectedText()
	this->QTextEdit::removeSelectedText();
	(void)x; // noop (for compiler warning)
    }
    void x_165(Smoke::Stack x) {
	// removeSelection(int)
	this->QTextEdit::removeSelection((int)x[1].s_int);
	(void)x; // noop (for compiler warning)
    }
    void x_166(Smoke::Stack x) {
	// removeSelection()
	this->QTextEdit::removeSelection();
	(void)x; // noop (for compiler warning)
    }
    void x_167(Smoke::Stack x) {
	// setCurrentFont(const QFont&)
	this->QTextEdit::setCurrentFont(*(const QFont *)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_168(Smoke::Stack x) {
	// setOverwriteMode(bool)
	this->QTextEdit::setOverwriteMode((bool)x[1].s_bool);
	(void)x; // noop (for compiler warning)
    }
    void x_169(Smoke::Stack x) {
	// scrollToBottom()
	this->QTextEdit::scrollToBottom();
	(void)x; // noop (for compiler warning)
    }
    void x_170(Smoke::Stack x) {
	// insert(const QString&, uint)
	this->QTextEdit::insert(*(const QString *)x[1].s_voidp,(uint)x[2].s_uint);
	(void)x; // noop (for compiler warning)
    }
    void x_171(Smoke::Stack x) {
	// insert(const QString&)
	this->QTextEdit::insert(*(const QString *)x[1].s_voidp);
	(void)x; // noop (for compiler warning)
    }
    void x_172(Smoke::Stack x) {
	// insert(const QString&, bool, bool, bool)
	this->QTextEdit::insert(*(const QString *)x[1].s_voidp,(bool)x[2].s_bool,(bool)x[3].s_bool,(bool)x[4].s_bool);
	(void)x; // noop (for compiler warning)
    }
    void x_173(Smoke::Stack x) {
	// insert(const QString&, bool, bool)
	this->QTextEdit::insert(*(const QString *)x[1].s_voidp,(bool)x[2].s_bool,(bool)x[3].s_bool);
	(void)x; // noop (for compiler warning)
    }
    void x_174(Smoke::Stack x) {
	// insert(const QString&, bool)
	this->QTextEdit::insert(*(const QString *)x[1].s_voidp,(bool)x[2].s_bool);
	(void)x; // noop (for compiler warning)
    }
    void x_175(Smoke::Stack x) {
	// insertAt(const QString&, int, int)
	this->QTextEdit::insertAt(*(const QString *)x[1].s_voidp,(int)x[2].s_int,(int)x[3].s_int);
	(void)x; // noop (for compiler warning)
    }
    void x_176(Smoke::Stack x) {
	// removeParagraph(int)
	this->QTextEdit::removeParagraph((int)x[1].s_int);
	(void)x; // noop (for compiler warning)
    }
    void x_177(Smoke::Stack x) {
	// insertParagraph(const QString&, int)
	this->QTextEdit::insertParagraph(*(const QString *)x[1].s_voidp,(int)x[2].s_int);
	(void)x; // noop (for compiler warning)
    }
    void x_178(Smoke::Stack x) {
	// setParagraphBackgroundColor(int, const QColor&)
	this->QTextEdit::setParagraphBackgroundColor((int)x[1].s_int,*(const QColor *)x[2].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_179(Smoke::Stack x) {
	// clearParagraphBackground(int)
	this->QTextEdit::clearParagraphBackground((int)x[1].s_int);
	(void)x; // noop (for compiler warning)
    }
    void x_180(Smoke::Stack x) {
	// setUndoRedoEnabled(bool)
	this->QTextEdit::setUndoRedoEnabled((bool)x[1].s_bool);
	(void)x; // noop (for compiler warning)
    }
    void x_181(Smoke::Stack x) {
	// setTabChangesFocus(bool)
	this->QTextEdit::setTabChangesFocus((bool)x[1].s_bool);
	(void)x; // noop (for compiler warning)
    }
    void x_182(Smoke::Stack x) {
	// textChanged()
	this->QTextEdit::textChanged();
	(void)x; // noop (for compiler warning)
    }
    void x_183(Smoke::Stack x) {
	// selectionChanged()
	this->QTextEdit::selectionChanged();
	(void)x; // noop (for compiler warning)
    }
    void x_184(Smoke::Stack x) {
	// copyAvailable(bool)
	this->QTextEdit::copyAvailable((bool)x[1].s_bool);
	(void)x; // noop (for compiler warning)
    }
    void x_185(Smoke::Stack x) {
	// undoAvailable(bool)
	this->QTextEdit::undoAvailable((bool)x[1].s_bool);
	(void)x; // noop (for compiler warning)
    }
    void x_186(Smoke::Stack x) {
	// redoAvailable(bool)
	this->QTextEdit::redoAvailable((bool)x[1].s_bool);
	(void)x; // noop (for compiler warning)
    }
    void x_187(Smoke::Stack x) {
	// currentFontChanged(const QFont&)
	this->QTextEdit::currentFontChanged(*(const QFont *)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_188(Smoke::Stack x) {
	// currentColorChanged(const QColor&)
	this->QTextEdit::currentColorChanged(*(const QColor *)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_189(Smoke::Stack x) {
	// currentAlignmentChanged(int)
	this->QTextEdit::currentAlignmentChanged((int)x[1].s_int);
	(void)x; // noop (for compiler warning)
    }
    void x_190(Smoke::Stack x) {
	// currentVerticalAlignmentChanged(QTextEdit::VerticalAlignment)
	this->QTextEdit::currentVerticalAlignmentChanged((QTextEdit::VerticalAlignment)x[1].s_enum);
	(void)x; // noop (for compiler warning)
    }
    void x_191(Smoke::Stack x) {
	// cursorPositionChanged(QTextCursor*)
	this->QTextEdit::cursorPositionChanged((QTextCursor*)x[1].s_voidp);
	(void)x; // noop (for compiler warning)
    }
    void x_192(Smoke::Stack x) {
	// cursorPositionChanged(int, int)
	this->QTextEdit::cursorPositionChanged((int)x[1].s_int,(int)x[2].s_int);
	(void)x; // noop (for compiler warning)
    }
    void x_193(Smoke::Stack x) {
	// returnPressed()
	this->QTextEdit::returnPressed();
	(void)x; // noop (for compiler warning)
    }
    void x_194(Smoke::Stack x) {
	// modificationChanged(bool)
	this->QTextEdit::modificationChanged((bool)x[1].s_bool);
	(void)x; // noop (for compiler warning)
    }
    void x_195(Smoke::Stack x) {
	// clicked(int, int)
	this->QTextEdit::clicked((int)x[1].s_int,(int)x[2].s_int);
	(void)x; // noop (for compiler warning)
    }
    void x_196(Smoke::Stack x) {
	// doubleClicked(int, int)
	this->QTextEdit::doubleClicked((int)x[1].s_int,(int)x[2].s_int);
	(void)x; // noop (for compiler warning)
    }
    static void x_197(Smoke::Stack x) {
	// staticMetaObject()
	QMetaObject* xret = QTextEdit::staticMetaObject();
	x[0].s_class = (void*)xret;
    }
    static void x_198(Smoke::Stack x) {
	// tr(const char*, const char*)
	QString xret = QTextEdit::tr((const char*)x[1].s_voidp,(const char*)x[2].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    static void x_199(Smoke::Stack x) {
	// tr(const char*)
	QString xret = QTextEdit::tr((const char*)x[1].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    static void x_200(Smoke::Stack x) {
	// trUtf8(const char*, const char*)
	QString xret = QTextEdit::trUtf8((const char*)x[1].s_voidp,(const char*)x[2].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    static void x_201(Smoke::Stack x) {
	// trUtf8(const char*)
	QString xret = QTextEdit::trUtf8((const char*)x[1].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_202(Smoke::Stack x) {
	// repaintChanged()
	this->QTextEdit::repaintChanged();
	(void)x; // noop (for compiler warning)
    }
    void x_203(Smoke::Stack x) {
	// updateStyles()
	this->QTextEdit::updateStyles();
	(void)x; // noop (for compiler warning)
    }
    void x_204(Smoke::Stack x) {
	// drawContents(QPainter*, int, int, int, int)
	this->QTextEdit::drawContents((QPainter*)x[1].s_class,(int)x[2].s_int,(int)x[3].s_int,(int)x[4].s_int,(int)x[5].s_int);
	(void)x; // noop (for compiler warning)
    }
    void x_205(Smoke::Stack x) {
	// event(QEvent*)
	bool xret = this->QTextEdit::event((QEvent*)x[1].s_class);
	x[0].s_bool = xret;
    }
    void x_206(Smoke::Stack x) {
	// keyPressEvent(QKeyEvent*)
	this->QTextEdit::keyPressEvent((QKeyEvent*)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_207(Smoke::Stack x) {
	// resizeEvent(QResizeEvent*)
	this->QTextEdit::resizeEvent((QResizeEvent*)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_208(Smoke::Stack x) {
	// viewportResizeEvent(QResizeEvent*)
	this->QTextEdit::viewportResizeEvent((QResizeEvent*)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_209(Smoke::Stack x) {
	// contentsMousePressEvent(QMouseEvent*)
	this->QTextEdit::contentsMousePressEvent((QMouseEvent*)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_210(Smoke::Stack x) {
	// contentsMouseMoveEvent(QMouseEvent*)
	this->QTextEdit::contentsMouseMoveEvent((QMouseEvent*)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_211(Smoke::Stack x) {
	// contentsMouseReleaseEvent(QMouseEvent*)
	this->QTextEdit::contentsMouseReleaseEvent((QMouseEvent*)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_212(Smoke::Stack x) {
	// contentsMouseDoubleClickEvent(QMouseEvent*)
	this->QTextEdit::contentsMouseDoubleClickEvent((QMouseEvent*)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_213(Smoke::Stack x) {
	// contentsWheelEvent(QWheelEvent*)
	this->QTextEdit::contentsWheelEvent((QWheelEvent*)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_214(Smoke::Stack x) {
	// imStartEvent(QIMEvent*)
	this->QTextEdit::imStartEvent((QIMEvent*)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_215(Smoke::Stack x) {
	// imComposeEvent(QIMEvent*)
	this->QTextEdit::imComposeEvent((QIMEvent*)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_216(Smoke::Stack x) {
	// imEndEvent(QIMEvent*)
	this->QTextEdit::imEndEvent((QIMEvent*)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_217(Smoke::Stack x) {
	// contentsDragEnterEvent(QDragEnterEvent*)
	this->QTextEdit::contentsDragEnterEvent((QDragEnterEvent*)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_218(Smoke::Stack x) {
	// contentsDragMoveEvent(QDragMoveEvent*)
	this->QTextEdit::contentsDragMoveEvent((QDragMoveEvent*)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_219(Smoke::Stack x) {
	// contentsDragLeaveEvent(QDragLeaveEvent*)
	this->QTextEdit::contentsDragLeaveEvent((QDragLeaveEvent*)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_220(Smoke::Stack x) {
	// contentsDropEvent(QDropEvent*)
	this->QTextEdit::contentsDropEvent((QDropEvent*)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_221(Smoke::Stack x) {
	// contentsContextMenuEvent(QContextMenuEvent*)
	this->QTextEdit::contentsContextMenuEvent((QContextMenuEvent*)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_222(Smoke::Stack x) {
	// focusNextPrevChild(bool)
	bool xret = this->QTextEdit::focusNextPrevChild((bool)x[1].s_bool);
	x[0].s_bool = xret;
    }
    void x_223(Smoke::Stack x) const {
	// document()
	QTextDocument* xret = this->QTextEdit::document();
	x[0].s_voidp = (void*)xret;
    }
    void x_224(Smoke::Stack x) const {
	// textCursor()
	QTextCursor* xret = this->QTextEdit::textCursor();
	x[0].s_voidp = (void*)xret;
    }
    void x_225(Smoke::Stack x) {
	// setDocument(QTextDocument*)
	this->QTextEdit::setDocument((QTextDocument*)x[1].s_voidp);
	(void)x; // noop (for compiler warning)
    }
    void x_226(Smoke::Stack x) {
	// createPopupMenu(const QPoint&)
	QPopupMenu* xret = this->QTextEdit::createPopupMenu(*(const QPoint *)x[1].s_class);
	x[0].s_class = (void*)xret;
    }
    void x_227(Smoke::Stack x) {
	// createPopupMenu()
	QPopupMenu* xret = this->QTextEdit::createPopupMenu();
	x[0].s_class = (void*)xret;
    }
    void x_228(Smoke::Stack x) {
	// drawCursor(bool)
	this->QTextEdit::drawCursor((bool)x[1].s_bool);
	(void)x; // noop (for compiler warning)
    }
    void x_229(Smoke::Stack x) {
	// windowActivationChange(bool)
	this->QTextEdit::windowActivationChange((bool)x[1].s_bool);
	(void)x; // noop (for compiler warning)
    }
    void x_230(Smoke::Stack x) {
	// doChangeInterval()
	this->QTextEdit::doChangeInterval();
	(void)x; // noop (for compiler warning)
    }
    void x_231(Smoke::Stack x) {
	// sliderReleased()
	this->QTextEdit::sliderReleased();
	(void)x; // noop (for compiler warning)
    }
    virtual void addChild(QWidget* x1, int x2, int x3) {
	Smoke::StackItem x[4];
	x[1].s_class = (void*)x1;
	x[2].s_int = x2;
	x[3].s_int = x3;
	if(qt_Smoke->binding->callMethod(8004, (void*)this, x)) return;
	this->QScrollView::addChild(x1, x2, x3);
    }
    virtual void adjustSize() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(11935, (void*)this, x)) return;
	this->QWidget::adjustSize();
    }
    virtual void append(const QString& x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)&x1;
	if(qt_Smoke->binding->callMethod(10585, (void*)this, x)) return;
	this->QTextEdit::append(x1);
    }
    virtual bool checkConnectArgs(const char* x1, const QObject* x2, const char* x3) {
	Smoke::StackItem x[4];
	x[1].s_voidp = (void*)x1;
	x[2].s_class = (void*)x2;
	x[3].s_voidp = (void*)x3;
	if(qt_Smoke->binding->callMethod(6714, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QObject::checkConnectArgs(x1, x2, x3);
    }
    virtual void childEvent(QChildEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(6710, (void*)this, x)) return;
	this->QObject::childEvent(x1);
    }
    virtual const char* className() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(10502, (void*)this, x)) return (const char*)x[0].s_class;
	return this->QTextEdit::className();
    }
    virtual void clear() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(10604, (void*)this, x)) return;
	this->QTextEdit::clear();
    }
    virtual void clearParagraphBackground(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = x1;
	if(qt_Smoke->binding->callMethod(10646, (void*)this, x)) return;
	this->QTextEdit::clearParagraphBackground(x1);
    }
    virtual bool close(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(11841, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QWidget::close(x1);
    }
    virtual void closeEvent(QCloseEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11961, (void*)this, x)) return;
	this->QWidget::closeEvent(x1);
    }
    virtual bool cmd(int x1, QPainter* x2, QPDevCmdParam* x3) {
	Smoke::StackItem x[4];
	x[1].s_int = x1;
	x[2].s_class = (void*)x2;
	x[3].s_voidp = (void*)x3;
	if(qt_Smoke->binding->callMethod(6829, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QPaintDevice::cmd(x1, x2, x3);
    }
    virtual void connectNotify(const char* x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(6712, (void*)this, x)) return;
	this->QObject::connectNotify(x1);
    }
    virtual void contentsContextMenuEvent(QContextMenuEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(10688, (void*)this, x)) return;
	this->QTextEdit::contentsContextMenuEvent(x1);
    }
    virtual void contentsDragEnterEvent(QDragEnterEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(10684, (void*)this, x)) return;
	this->QTextEdit::contentsDragEnterEvent(x1);
    }
    virtual void contentsDragLeaveEvent(QDragLeaveEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(10686, (void*)this, x)) return;
	this->QTextEdit::contentsDragLeaveEvent(x1);
    }
    virtual void contentsDragMoveEvent(QDragMoveEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(10685, (void*)this, x)) return;
	this->QTextEdit::contentsDragMoveEvent(x1);
    }
    virtual void contentsDropEvent(QDropEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(10687, (void*)this, x)) return;
	this->QTextEdit::contentsDropEvent(x1);
    }
    virtual void contentsMouseDoubleClickEvent(QMouseEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(10679, (void*)this, x)) return;
	this->QTextEdit::contentsMouseDoubleClickEvent(x1);
    }
    virtual void contentsMouseMoveEvent(QMouseEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(10677, (void*)this, x)) return;
	this->QTextEdit::contentsMouseMoveEvent(x1);
    }
    virtual void contentsMousePressEvent(QMouseEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(10676, (void*)this, x)) return;
	this->QTextEdit::contentsMousePressEvent(x1);
    }
    virtual void contentsMouseReleaseEvent(QMouseEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(10678, (void*)this, x)) return;
	this->QTextEdit::contentsMouseReleaseEvent(x1);
    }
    virtual void contentsWheelEvent(QWheelEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(10680, (void*)this, x)) return;
	this->QTextEdit::contentsWheelEvent(x1);
    }
    virtual void contextMenuEvent(QContextMenuEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(8115, (void*)this, x)) return;
	this->QScrollView::contextMenuEvent(x1);
    }
    virtual void copy() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(10584, (void*)this, x)) return;
	this->QTextEdit::copy();
    }
    virtual void create(WId x1, bool x2, bool x3) {
	Smoke::StackItem x[4];
	x[1].s_ulong = x1;
	x[2].s_bool = x2;
	x[3].s_bool = x3;
	if(qt_Smoke->binding->callMethod(11981, (void*)this, x)) return;
	this->QWidget::create(x1, x2, x3);
    }
    virtual QPopupMenu* createPopupMenu() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(10694, (void*)this, x)) return (QPopupMenu*)x[0].s_class;
	return this->QTextEdit::createPopupMenu();
    }
    virtual QPopupMenu* createPopupMenu(const QPoint& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(10693, (void*)this, x)) return (QPopupMenu*)x[0].s_class;
	return this->QTextEdit::createPopupMenu(x1);
    }
    virtual void customEvent(QCustomEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(6711, (void*)this, x)) return;
	this->QObject::customEvent(x1);
    }
    virtual bool customWhatsThis() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(11883, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QWidget::customWhatsThis();
    }
    virtual void cut() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(10601, (void*)this, x)) return;
	this->QTextEdit::cut();
    }
    virtual void del() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(10605, (void*)this, x)) return;
	this->QTextEdit::del();
    }
    virtual void destroy(bool x1, bool x2) {
	Smoke::StackItem x[3];
	x[1].s_bool = x1;
	x[2].s_bool = x2;
	if(qt_Smoke->binding->callMethod(11985, (void*)this, x)) return;
	this->QWidget::destroy(x1, x2);
    }
    virtual void disconnectNotify(const char* x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(6713, (void*)this, x)) return;
	this->QObject::disconnectNotify(x1);
    }
    virtual void doChangeInterval() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(10697, (void*)this, x)) return;
	this->QTextEdit::doChangeInterval();
    }
    virtual void doKeyboardAction(QTextEdit::KeyboardAction x1) {
	Smoke::StackItem x[2];
	x[1].s_enum = x1;
	if(qt_Smoke->binding->callMethod(10629, (void*)this, x)) return;
	this->QTextEdit::doKeyboardAction(x1);
    }
    virtual void dragEnterEvent(QDragEnterEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11967, (void*)this, x)) return;
	this->QWidget::dragEnterEvent(x1);
    }
    virtual void dragLeaveEvent(QDragLeaveEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11969, (void*)this, x)) return;
	this->QWidget::dragLeaveEvent(x1);
    }
    virtual void dragMoveEvent(QDragMoveEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11968, (void*)this, x)) return;
	this->QWidget::dragMoveEvent(x1);
    }
    virtual void drawContents(QPainter* x1, int x2, int x3, int x4, int x5) {
	Smoke::StackItem x[6];
	x[1].s_class = (void*)x1;
	x[2].s_int = x2;
	x[3].s_int = x3;
	x[4].s_int = x4;
	x[5].s_int = x5;
	if(qt_Smoke->binding->callMethod(10671, (void*)this, x)) return;
	this->QTextEdit::drawContents(x1, x2, x3, x4, x5);
    }
    virtual void drawContentsOffset(QPainter* x1, int x2, int x3, int x4, int x5, int x6, int x7) {
	Smoke::StackItem x[8];
	x[1].s_class = (void*)x1;
	x[2].s_int = x2;
	x[3].s_int = x3;
	x[4].s_int = x4;
	x[5].s_int = x5;
	x[6].s_int = x6;
	x[7].s_int = x7;
	if(qt_Smoke->binding->callMethod(8077, (void*)this, x)) return;
	this->QScrollView::drawContentsOffset(x1, x2, x3, x4, x5, x6, x7);
    }
    virtual void drawFrame(QPainter* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(3538, (void*)this, x)) return;
	this->QFrame::drawFrame(x1);
    }
    virtual void dropEvent(QDropEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11970, (void*)this, x)) return;
	this->QWidget::dropEvent(x1);
    }
    virtual void enabledChange(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(11975, (void*)this, x)) return;
	this->QWidget::enabledChange(x1);
    }
    virtual void ensureCursorVisible() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(10625, (void*)this, x)) return;
	this->QTextEdit::ensureCursorVisible();
    }
    virtual void enterEvent(QEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11956, (void*)this, x)) return;
	this->QWidget::enterEvent(x1);
    }
    virtual bool event(QEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(10672, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QTextEdit::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
	Smoke::StackItem x[3];
	x[1].s_class = (void*)x1;
	x[2].s_class = (void*)x2;
	if(qt_Smoke->binding->callMethod(10571, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QTextEdit::eventFilter(x1, x2);
    }
    virtual bool find(const QString& x1, bool x2, bool x3, bool x4, int* x5, int* x6) {
	Smoke::StackItem x[7];
	x[1].s_voidp = (void*)&x1;
	x[2].s_bool = x2;
	x[3].s_bool = x3;
	x[4].s_bool = x4;
	x[5].s_voidp = (void*)x5;
	x[6].s_voidp = (void*)x6;
	if(qt_Smoke->binding->callMethod(10524, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QTextEdit::find(x1, x2, x3, x4, x5, x6);
    }
    virtual void focusInEvent(QFocusEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11954, (void*)this, x)) return;
	this->QWidget::focusInEvent(x1);
    }
    virtual bool focusNextPrevChild(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(10689, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QTextEdit::focusNextPrevChild(x1);
    }
    virtual void focusOutEvent(QFocusEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11955, (void*)this, x)) return;
	this->QWidget::focusOutEvent(x1);
    }
    virtual void fontChange(const QFont& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(8119, (void*)this, x)) return;
	this->QScrollView::fontChange(x1);
    }
    virtual int fontInf(QFont* x1, int x2) const {
	Smoke::StackItem x[3];
	x[1].s_class = (void*)x1;
	x[2].s_int = x2;
	if(qt_Smoke->binding->callMethod(6834, (void*)this, x)) return (int)x[0].s_int;
	return this->QPaintDevice::fontInf(x1, x2);
    }
    virtual int fontMet(QFont* x1, int x2, const char* x3, int x4) const {
	Smoke::StackItem x[5];
	x[1].s_class = (void*)x1;
	x[2].s_int = x2;
	x[3].s_voidp = (void*)x3;
	x[4].s_int = x4;
	if(qt_Smoke->binding->callMethod(6831, (void*)this, x)) return (int)x[0].s_int;
	return this->QPaintDevice::fontMet(x1, x2, x3, x4);
    }
    virtual void frameChanged() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(8100, (void*)this, x)) return;
	this->QScrollView::frameChanged();
    }
    virtual bool getFormat(int x1, int x2, QFont* x3, QColor* x4, QTextEdit::VerticalAlignment* x5) {
	Smoke::StackItem x[6];
	x[1].s_int = x1;
	x[2].s_int = x2;
	x[3].s_class = (void*)x3;
	x[4].s_class = (void*)x4;
	x[5].s_voidp = (void*)x5;
	if(qt_Smoke->binding->callMethod(10566, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QTextEdit::getFormat(x1, x2, x3, x4, x5);
    }
    virtual bool getParagraphFormat(int x1, QFont* x2, QColor* x3, QTextEdit::VerticalAlignment* x4, int* x5, QStyleSheetItem::DisplayMode* x6, QStyleSheetItem::ListStyle* x7, int* x8) {
	Smoke::StackItem x[9];
	x[1].s_int = x1;
	x[2].s_class = (void*)x2;
	x[3].s_class = (void*)x3;
	x[4].s_voidp = (void*)x4;
	x[5].s_voidp = (void*)x5;
	x[6].s_voidp = (void*)x6;
	x[7].s_voidp = (void*)x7;
	x[8].s_voidp = (void*)x8;
	if(qt_Smoke->binding->callMethod(10567, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QTextEdit::getParagraphFormat(x1, x2, x3, x4, x5, x6, x7, x8);
    }
    virtual int heightForWidth(int x1) const {
	Smoke::StackItem x[2];
	x[1].s_int = x1;
	if(qt_Smoke->binding->callMethod(10541, (void*)this, x)) return (int)x[0].s_int;
	return this->QTextEdit::heightForWidth(x1);
    }
    virtual void hide() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(11915, (void*)this, x)) return;
	this->QWidget::hide();
    }
    virtual void hideEvent(QHideEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11972, (void*)this, x)) return;
	this->QWidget::hideEvent(x1);
    }
    virtual void imComposeEvent(QIMEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(10682, (void*)this, x)) return;
	this->QTextEdit::imComposeEvent(x1);
    }
    virtual void imEndEvent(QIMEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(10683, (void*)this, x)) return;
	this->QTextEdit::imEndEvent(x1);
    }
    virtual void imStartEvent(QIMEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(10681, (void*)this, x)) return;
	this->QTextEdit::imStartEvent(x1);
    }
    virtual void indent() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(10606, (void*)this, x)) return;
	this->QTextEdit::indent();
    }
    virtual void insert(const QString& x1, bool x2, bool x3, bool x4) {
	Smoke::StackItem x[5];
	x[1].s_voidp = (void*)&x1;
	x[2].s_bool = x2;
	x[3].s_bool = x3;
	x[4].s_bool = x4;
	if(qt_Smoke->binding->callMethod(10639, (void*)this, x)) return;
	this->QTextEdit::insert(x1, x2, x3, x4);
    }
    virtual void insertAt(const QString& x1, int x2, int x3) {
	Smoke::StackItem x[4];
	x[1].s_voidp = (void*)&x1;
	x[2].s_int = x2;
	x[3].s_int = x3;
	if(qt_Smoke->binding->callMethod(10642, (void*)this, x)) return;
	this->QTextEdit::insertAt(x1, x2, x3);
    }
    virtual void insertChild(QObject* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(6667, (void*)this, x)) return;
	this->QObject::insertChild(x1);
    }
    virtual void insertParagraph(const QString& x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_voidp = (void*)&x1;
	x[2].s_int = x2;
	if(qt_Smoke->binding->callMethod(10644, (void*)this, x)) return;
	this->QTextEdit::insertParagraph(x1, x2);
    }
    virtual void keyPressEvent(QKeyEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(10673, (void*)this, x)) return;
	this->QTextEdit::keyPressEvent(x1);
    }
    virtual void keyReleaseEvent(QKeyEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11953, (void*)this, x)) return;
	this->QWidget::keyReleaseEvent(x1);
    }
    virtual void leaveEvent(QEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11957, (void*)this, x)) return;
	this->QWidget::leaveEvent(x1);
    }
    virtual QMetaObject* metaObject() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(10501, (void*)this, x)) return (QMetaObject*)x[0].s_class;
	return this->QTextEdit::metaObject();
    }
    virtual int metric(int x1) const {
	Smoke::StackItem x[2];
	x[1].s_int = x1;
	if(qt_Smoke->binding->callMethod(11979, (void*)this, x)) return (int)x[0].s_int;
	return this->QWidget::metric(x1);
    }
    virtual QSize minimumSizeHint() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(8050, (void*)this, x)) {
	    QSize *xptr = (QSize *)x[0].s_class;
	    QSize xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QScrollView::minimumSizeHint();
    }
    virtual void mouseDoubleClickEvent(QMouseEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(8112, (void*)this, x)) return;
	this->QScrollView::mouseDoubleClickEvent(x1);
    }
    virtual void mouseMoveEvent(QMouseEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(8113, (void*)this, x)) return;
	this->QScrollView::mouseMoveEvent(x1);
    }
    virtual void mousePressEvent(QMouseEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(8110, (void*)this, x)) return;
	this->QScrollView::mousePressEvent(x1);
    }
    virtual void mouseReleaseEvent(QMouseEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(8111, (void*)this, x)) return;
	this->QScrollView::mouseReleaseEvent(x1);
    }
    virtual void move(int x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_int = x1;
	x[2].s_int = x2;
	if(qt_Smoke->binding->callMethod(11929, (void*)this, x)) return;
	this->QWidget::move(x1, x2);
    }
    virtual void moveChild(QWidget* x1, int x2, int x3) {
	Smoke::StackItem x[4];
	x[1].s_class = (void*)x1;
	x[2].s_int = x2;
	x[3].s_int = x3;
	if(qt_Smoke->binding->callMethod(8007, (void*)this, x)) return;
	this->QScrollView::moveChild(x1, x2, x3);
    }
    virtual void moveCursor(QTextEdit::CursorAction x1, bool x2) {
	Smoke::StackItem x[3];
	x[1].s_enum = x1;
	x[2].s_bool = x2;
	if(qt_Smoke->binding->callMethod(10628, (void*)this, x)) return;
	this->QTextEdit::moveCursor(x1, x2);
    }
    virtual void moveEvent(QMoveEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11959, (void*)this, x)) return;
	this->QWidget::moveEvent(x1);
    }
    virtual void paintEvent(QPaintEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(3536, (void*)this, x)) return;
	this->QFrame::paintEvent(x1);
    }
    virtual void paletteChange(const QPalette& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(11976, (void*)this, x)) return;
	this->QWidget::paletteChange(x1);
    }
    virtual void paste() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(10602, (void*)this, x)) return;
	this->QTextEdit::paste();
    }
    virtual void pasteSubType(const QCString& x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)&x1;
	if(qt_Smoke->binding->callMethod(10603, (void*)this, x)) return;
	this->QTextEdit::pasteSubType(x1);
    }
    virtual void placeCursor(const QPoint& x1, QTextCursor* x2) {
	Smoke::StackItem x[3];
	x[1].s_class = (void*)&x1;
	x[2].s_voidp = (void*)x2;
	if(qt_Smoke->binding->callMethod(10626, (void*)this, x)) return;
	this->QTextEdit::placeCursor(x1, x2);
    }
    virtual void polish() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(11923, (void*)this, x)) return;
	this->QWidget::polish();
    }
    virtual QVariant property(const char* x1) const {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(6681, (void*)this, x)) {
	    QVariant *xptr = (QVariant *)x[0].s_class;
	    QVariant xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QObject::property(x1);
    }
    virtual void* qt_cast(const char* x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(10503, (void*)this, x)) return (void*)x[0].s_voidp;
	return this->QTextEdit::qt_cast(x1);
    }
    virtual bool qt_emit(int x1, QUObject* x2) {
	Smoke::StackItem x[3];
	x[1].s_int = x1;
	x[2].s_voidp = (void*)x2;
	if(qt_Smoke->binding->callMethod(10505, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QTextEdit::qt_emit(x1, x2);
    }
    virtual bool qt_invoke(int x1, QUObject* x2) {
	Smoke::StackItem x[3];
	x[1].s_int = x1;
	x[2].s_voidp = (void*)x2;
	if(qt_Smoke->binding->callMethod(10504, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QTextEdit::qt_invoke(x1, x2);
    }
    virtual bool qt_property(int x1, int x2, QVariant* x3) {
	Smoke::StackItem x[4];
	x[1].s_int = x1;
	x[2].s_int = x2;
	x[3].s_class = (void*)x3;
	if(qt_Smoke->binding->callMethod(10506, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QTextEdit::qt_property(x1, x2, x3);
    }
    virtual void redo() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(10600, (void*)this, x)) return;
	this->QTextEdit::redo();
    }
    virtual void removeChild(QObject* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(8051, (void*)this, x)) return;
	this->QScrollView::removeChild(x1);
    }
    virtual void removeParagraph(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = x1;
	if(qt_Smoke->binding->callMethod(10643, (void*)this, x)) return;
	this->QTextEdit::removeParagraph(x1);
    }
    virtual void removeSelectedText(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = x1;
	if(qt_Smoke->binding->callMethod(10630, (void*)this, x)) return;
	this->QTextEdit::removeSelectedText(x1);
    }
    virtual void removeSelection(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = x1;
	if(qt_Smoke->binding->callMethod(10632, (void*)this, x)) return;
	this->QTextEdit::removeSelection(x1);
    }
    virtual void reparent(QWidget* x1, Qt::WFlags x2, const QPoint& x3, bool x4) {
	Smoke::StackItem x[5];
	x[1].s_class = (void*)x1;
	x[2].s_int = x2;
	x[3].s_class = (void*)&x3;
	x[4].s_bool = x4;
	if(qt_Smoke->binding->callMethod(11860, (void*)this, x)) return;
	this->QWidget::reparent(x1, x2, x3, x4);
    }
    virtual void resetFormat() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(10622, (void*)this, x)) return;
	this->QTextEdit::resetFormat();
    }
    virtual void resize(int x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_int = x1;
	x[2].s_int = x2;
	if(qt_Smoke->binding->callMethod(8029, (void*)this, x)) return;
	this->QScrollView::resize(x1, x2);
    }
    virtual void resizeContents(int x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_int = x1;
	x[2].s_int = x2;
	if(qt_Smoke->binding->callMethod(8057, (void*)this, x)) return;
	this->QScrollView::resizeContents(x1, x2);
    }
    virtual void resizeEvent(QResizeEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(10674, (void*)this, x)) return;
	this->QTextEdit::resizeEvent(x1);
    }
    virtual int resolution() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(6827, (void*)this, x)) return (int)x[0].s_int;
	return this->QPaintDevice::resolution();
    }
    virtual void scrollToAnchor(const QString& x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)&x1;
	if(qt_Smoke->binding->callMethod(10578, (void*)this, x)) return;
	this->QTextEdit::scrollToAnchor(x1);
    }
    virtual void scrollToBottom() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(10636, (void*)this, x)) return;
	this->QTextEdit::scrollToBottom();
    }
    virtual void selectAll(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(10589, (void*)this, x)) return;
	this->QTextEdit::selectAll(x1);
    }
    virtual void setAcceptDrops(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(11877, (void*)this, x)) return;
	this->QWidget::setAcceptDrops(x1);
    }
    virtual void setActiveWindow() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(11828, (void*)this, x)) return;
	this->QWidget::setActiveWindow();
    }
    virtual void setAlignment(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = x1;
	if(qt_Smoke->binding->callMethod(10615, (void*)this, x)) return;
	this->QTextEdit::setAlignment(x1);
    }
    virtual void setAutoMask(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(11878, (void*)this, x)) return;
	this->QWidget::setAutoMask(x1);
    }
    virtual void setBackgroundColor(const QColor& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(11824, (void*)this, x)) return;
	this->QWidget::setBackgroundColor(x1);
    }
    virtual void setBackgroundMode(Qt::BackgroundMode x1) {
	Smoke::StackItem x[2];
	x[1].s_enum = x1;
	if(qt_Smoke->binding->callMethod(11786, (void*)this, x)) return;
	this->QWidget::setBackgroundMode(x1);
    }
    virtual void setBackgroundOrigin(QWidget::BackgroundOrigin x1) {
	Smoke::StackItem x[2];
	x[1].s_enum = x1;
	if(qt_Smoke->binding->callMethod(11880, (void*)this, x)) return;
	this->QWidget::setBackgroundOrigin(x1);
    }
    virtual void setBackgroundPixmap(const QPixmap& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(11826, (void*)this, x)) return;
	this->QWidget::setBackgroundPixmap(x1);
    }
    virtual void setBold(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(10608, (void*)this, x)) return;
	this->QTextEdit::setBold(x1);
    }
    virtual void setCaption(const QString& x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)&x1;
	if(qt_Smoke->binding->callMethod(11896, (void*)this, x)) return;
	this->QWidget::setCaption(x1);
    }
    virtual void setColor(const QColor& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(10612, (void*)this, x)) return;
	this->QTextEdit::setColor(x1);
    }
    virtual void setContentsPos(int x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_int = x1;
	x[2].s_int = x2;
	if(qt_Smoke->binding->callMethod(8059, (void*)this, x)) return;
	this->QScrollView::setContentsPos(x1, x2);
    }
    virtual void setCornerWidget(QWidget* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(8018, (void*)this, x)) return;
	this->QScrollView::setCornerWidget(x1);
    }
    virtual void setCurrentFont(const QFont& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(10634, (void*)this, x)) return;
	this->QTextEdit::setCurrentFont(x1);
    }
    virtual void setCursor(const QCursor& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(11813, (void*)this, x)) return;
	this->QWidget::setCursor(x1);
    }
    virtual void setCursorPosition(int x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_int = x1;
	x[2].s_int = x2;
	if(qt_Smoke->binding->callMethod(10617, (void*)this, x)) return;
	this->QTextEdit::setCursorPosition(x1, x2);
    }
    virtual void setDragAutoScroll(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(8054, (void*)this, x)) return;
	this->QScrollView::setDragAutoScroll(x1);
    }
    virtual void setEnabled(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(10575, (void*)this, x)) return;
	this->QTextEdit::setEnabled(x1);
    }
    virtual void setEraseColor(const QColor& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(11790, (void*)this, x)) return;
	this->QWidget::setEraseColor(x1);
    }
    virtual void setErasePixmap(const QPixmap& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(11792, (void*)this, x)) return;
	this->QWidget::setErasePixmap(x1);
    }
    virtual void setFamily(const QString& x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)&x1;
	if(qt_Smoke->binding->callMethod(10610, (void*)this, x)) return;
	this->QTextEdit::setFamily(x1);
    }
    virtual void setFocus() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(11900, (void*)this, x)) return;
	this->QWidget::setFocus();
    }
    virtual void setFocusPolicy(QWidget::FocusPolicy x1) {
	Smoke::StackItem x[2];
	x[1].s_enum = x1;
	if(qt_Smoke->binding->callMethod(11831, (void*)this, x)) return;
	this->QWidget::setFocusPolicy(x1);
    }
    virtual void setFocusProxy(QWidget* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11833, (void*)this, x)) return;
	this->QWidget::setFocusProxy(x1);
    }
    virtual void setFont(const QFont& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(10613, (void*)this, x)) return;
	this->QTextEdit::setFont(x1);
    }
    virtual void setFormat(QTextFormat* x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_voidp = (void*)x1;
	x[2].s_int = x2;
	if(qt_Smoke->binding->callMethod(10624, (void*)this, x)) return;
	this->QTextEdit::setFormat(x1, x2);
    }
    virtual void setFrameRect(const QRect& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(3529, (void*)this, x)) return;
	this->QFrame::setFrameRect(x1);
    }
    virtual void setFrameStyle(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = x1;
	if(qt_Smoke->binding->callMethod(3513, (void*)this, x)) return;
	this->QFrame::setFrameStyle(x1);
    }
    virtual void setGeometry(const QRect& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(11934, (void*)this, x)) return;
	this->QWidget::setGeometry(x1);
    }
    virtual void setGeometry(int x1, int x2, int x3, int x4) {
	Smoke::StackItem x[5];
	x[1].s_int = x1;
	x[2].s_int = x2;
	x[3].s_int = x3;
	x[4].s_int = x4;
	if(qt_Smoke->binding->callMethod(11933, (void*)this, x)) return;
	this->QWidget::setGeometry(x1, x2, x3, x4);
    }
    virtual void setHBarGeometry(QScrollBar& x1, int x2, int x3, int x4, int x5) {
	Smoke::StackItem x[6];
	x[1].s_class = (void*)&x1;
	x[2].s_int = x2;
	x[3].s_int = x3;
	x[4].s_int = x4;
	x[5].s_int = x5;
	if(qt_Smoke->binding->callMethod(8107, (void*)this, x)) return;
	this->QScrollView::setHBarGeometry(x1, x2, x3, x4, x5);
    }
    virtual void setHScrollBarMode(QScrollView::ScrollBarMode x1) {
	Smoke::StackItem x[2];
	x[1].s_enum = x1;
	if(qt_Smoke->binding->callMethod(8016, (void*)this, x)) return;
	this->QScrollView::setHScrollBarMode(x1);
    }
    virtual void setIcon(const QPixmap& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(11897, (void*)this, x)) return;
	this->QWidget::setIcon(x1);
    }
    virtual void setIconText(const QString& x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)&x1;
	if(qt_Smoke->binding->callMethod(11898, (void*)this, x)) return;
	this->QWidget::setIconText(x1);
    }
    virtual void setItalic(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(10607, (void*)this, x)) return;
	this->QTextEdit::setItalic(x1);
    }
    virtual void setKeyCompression(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(11998, (void*)this, x)) return;
	this->QWidget::setKeyCompression(x1);
    }
    virtual void setLineWidth(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = x1;
	if(qt_Smoke->binding->callMethod(3523, (void*)this, x)) return;
	this->QFrame::setLineWidth(x1);
    }
    virtual void setLinkUnderline(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(10580, (void*)this, x)) return;
	this->QTextEdit::setLinkUnderline(x1);
    }
    virtual void setMargin(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = x1;
	if(qt_Smoke->binding->callMethod(3525, (void*)this, x)) return;
	this->QFrame::setMargin(x1);
    }
    virtual void setMargins(int x1, int x2, int x3, int x4) {
	Smoke::StackItem x[5];
	x[1].s_int = x1;
	x[2].s_int = x2;
	x[3].s_int = x3;
	x[4].s_int = x4;
	if(qt_Smoke->binding->callMethod(8101, (void*)this, x)) return;
	this->QScrollView::setMargins(x1, x2, x3, x4);
    }
    virtual void setMask(const QBitmap& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(11820, (void*)this, x)) return;
	this->QWidget::setMask(x1);
    }
    virtual void setMask(const QRegion& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(11821, (void*)this, x)) return;
	this->QWidget::setMask(x1);
    }
    virtual void setMaximumSize(int x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_int = x1;
	x[2].s_int = x2;
	if(qt_Smoke->binding->callMethod(11763, (void*)this, x)) return;
	this->QWidget::setMaximumSize(x1, x2);
    }
    virtual void setMicroFocusHint(int x1, int x2, int x3, int x4, bool x5, QFont* x6) {
	Smoke::StackItem x[7];
	x[1].s_int = x1;
	x[2].s_int = x2;
	x[3].s_int = x3;
	x[4].s_int = x4;
	x[5].s_bool = x5;
	x[6].s_class = (void*)x6;
	if(qt_Smoke->binding->callMethod(11999, (void*)this, x)) return;
	this->QWidget::setMicroFocusHint(x1, x2, x3, x4, x5, x6);
    }
    virtual void setMidLineWidth(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = x1;
	if(qt_Smoke->binding->callMethod(3527, (void*)this, x)) return;
	this->QFrame::setMidLineWidth(x1);
    }
    virtual void setMimeSourceFactory(QMimeSourceFactory* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(10576, (void*)this, x)) return;
	this->QTextEdit::setMimeSourceFactory(x1);
    }
    virtual void setMinimumSize(int x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_int = x1;
	x[2].s_int = x2;
	if(qt_Smoke->binding->callMethod(11761, (void*)this, x)) return;
	this->QWidget::setMinimumSize(x1, x2);
    }
    virtual void setModified(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(10621, (void*)this, x)) return;
	this->QTextEdit::setModified(x1);
    }
    virtual void setMouseTracking(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(11899, (void*)this, x)) return;
	this->QWidget::setMouseTracking(x1);
    }
    virtual void setName(const char* x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(11730, (void*)this, x)) return;
	this->QWidget::setName(x1);
    }
    virtual void setOverwriteMode(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(10635, (void*)this, x)) return;
	this->QTextEdit::setOverwriteMode(x1);
    }
    virtual void setPalette(const QPalette& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(10516, (void*)this, x)) return;
	this->QTextEdit::setPalette(x1);
    }
    virtual void setPaletteBackgroundColor(const QColor& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(11801, (void*)this, x)) return;
	this->QWidget::setPaletteBackgroundColor(x1);
    }
    virtual void setPaletteBackgroundPixmap(const QPixmap& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(11803, (void*)this, x)) return;
	this->QWidget::setPaletteBackgroundPixmap(x1);
    }
    virtual void setPaper(const QBrush& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(10579, (void*)this, x)) return;
	this->QTextEdit::setPaper(x1);
    }
    virtual void setParagType(QStyleSheetItem::DisplayMode x1, QStyleSheetItem::ListStyle x2) {
	Smoke::StackItem x[3];
	x[1].s_enum = x1;
	x[2].s_enum = x2;
	if(qt_Smoke->binding->callMethod(10616, (void*)this, x)) return;
	this->QTextEdit::setParagType(x1, x2);
    }
    virtual void setParagraphBackgroundColor(int x1, const QColor& x2) {
	Smoke::StackItem x[3];
	x[1].s_int = x1;
	x[2].s_class = (void*)&x2;
	if(qt_Smoke->binding->callMethod(10645, (void*)this, x)) return;
	this->QTextEdit::setParagraphBackgroundColor(x1, x2);
    }
    virtual void setPointSize(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = x1;
	if(qt_Smoke->binding->callMethod(10611, (void*)this, x)) return;
	this->QTextEdit::setPointSize(x1);
    }
    virtual bool setProperty(const char* x1, const QVariant& x2) {
	Smoke::StackItem x[3];
	x[1].s_voidp = (void*)x1;
	x[2].s_class = (void*)&x2;
	if(qt_Smoke->binding->callMethod(6680, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QObject::setProperty(x1, x2);
    }
    virtual void setReadOnly(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(10598, (void*)this, x)) return;
	this->QTextEdit::setReadOnly(x1);
    }
    virtual void setResizePolicy(QScrollView::ResizePolicy x1) {
	Smoke::StackItem x[2];
	x[1].s_enum = x1;
	if(qt_Smoke->binding->callMethod(8000, (void*)this, x)) return;
	this->QScrollView::setResizePolicy(x1);
    }
    virtual void setResolution(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = x1;
	if(qt_Smoke->binding->callMethod(6826, (void*)this, x)) return;
	this->QPaintDevice::setResolution(x1);
    }
    virtual void setSelection(int x1, int x2, int x3, int x4, int x5) {
	Smoke::StackItem x[6];
	x[1].s_int = x1;
	x[2].s_int = x2;
	x[3].s_int = x3;
	x[4].s_int = x4;
	x[5].s_int = x5;
	if(qt_Smoke->binding->callMethod(10618, (void*)this, x)) return;
	this->QTextEdit::setSelection(x1, x2, x3, x4, x5);
    }
    virtual void setSelectionAttributes(int x1, const QColor& x2, bool x3) {
	Smoke::StackItem x[4];
	x[1].s_int = x1;
	x[2].s_class = (void*)&x2;
	x[3].s_bool = x3;
	if(qt_Smoke->binding->callMethod(10620, (void*)this, x)) return;
	this->QTextEdit::setSelectionAttributes(x1, x2, x3);
    }
    virtual void setSizeIncrement(int x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_int = x1;
	x[2].s_int = x2;
	if(qt_Smoke->binding->callMethod(11770, (void*)this, x)) return;
	this->QWidget::setSizeIncrement(x1, x2);
    }
    virtual void setSizePolicy(QSizePolicy x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(11854, (void*)this, x)) return;
	this->QWidget::setSizePolicy(x1);
    }
    virtual void setStyleSheet(QStyleSheet* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(10577, (void*)this, x)) return;
	this->QTextEdit::setStyleSheet(x1);
    }
    virtual void setTabStopWidth(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = x1;
	if(qt_Smoke->binding->callMethod(10591, (void*)this, x)) return;
	this->QTextEdit::setTabStopWidth(x1);
    }
    virtual void setText(const QString& x1, const QString& x2) {
	Smoke::StackItem x[3];
	x[1].s_voidp = (void*)&x1;
	x[2].s_voidp = (void*)&x2;
	if(qt_Smoke->binding->callMethod(10587, (void*)this, x)) return;
	this->QTextEdit::setText(x1, x2);
    }
    virtual void setTextFormat(Qt::TextFormat x1) {
	Smoke::StackItem x[2];
	x[1].s_enum = x1;
	if(qt_Smoke->binding->callMethod(10588, (void*)this, x)) return;
	this->QTextEdit::setTextFormat(x1);
    }
    virtual void setUnderline(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(10609, (void*)this, x)) return;
	this->QTextEdit::setUnderline(x1);
    }
    virtual void setUndoDepth(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = x1;
	if(qt_Smoke->binding->callMethod(10623, (void*)this, x)) return;
	this->QTextEdit::setUndoDepth(x1);
    }
    virtual void setUndoRedoEnabled(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(10647, (void*)this, x)) return;
	this->QTextEdit::setUndoRedoEnabled(x1);
    }
    virtual void setUpdatesEnabled(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(11902, (void*)this, x)) return;
	this->QWidget::setUpdatesEnabled(x1);
    }
    virtual void setVBarGeometry(QScrollBar& x1, int x2, int x3, int x4, int x5) {
	Smoke::StackItem x[6];
	x[1].s_class = (void*)&x1;
	x[2].s_int = x2;
	x[3].s_int = x3;
	x[4].s_int = x4;
	x[5].s_int = x5;
	if(qt_Smoke->binding->callMethod(8108, (void*)this, x)) return;
	this->QScrollView::setVBarGeometry(x1, x2, x3, x4, x5);
    }
    virtual void setVScrollBarMode(QScrollView::ScrollBarMode x1) {
	Smoke::StackItem x[2];
	x[1].s_enum = x1;
	if(qt_Smoke->binding->callMethod(8014, (void*)this, x)) return;
	this->QScrollView::setVScrollBarMode(x1);
    }
    virtual void setVerticalAlignment(QTextEdit::VerticalAlignment x1) {
	Smoke::StackItem x[2];
	x[1].s_enum = x1;
	if(qt_Smoke->binding->callMethod(10614, (void*)this, x)) return;
	this->QTextEdit::setVerticalAlignment(x1);
    }
    virtual void setWFlags(Qt::WFlags x1) {
	Smoke::StackItem x[2];
	x[1].s_int = x1;
	if(qt_Smoke->binding->callMethod(11992, (void*)this, x)) return;
	this->QWidget::setWFlags(x1);
    }
    virtual void setWState(uint x1) {
	Smoke::StackItem x[2];
	x[1].s_uint = x1;
	if(qt_Smoke->binding->callMethod(11989, (void*)this, x)) return;
	this->QWidget::setWState(x1);
    }
    virtual void setWordWrap(QTextEdit::WordWrap x1) {
	Smoke::StackItem x[2];
	x[1].s_enum = x1;
	if(qt_Smoke->binding->callMethod(10581, (void*)this, x)) return;
	this->QTextEdit::setWordWrap(x1);
    }
    virtual void setWrapColumnOrWidth(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = x1;
	if(qt_Smoke->binding->callMethod(10582, (void*)this, x)) return;
	this->QTextEdit::setWrapColumnOrWidth(x1);
    }
    virtual void setWrapPolicy(QTextEdit::WrapPolicy x1) {
	Smoke::StackItem x[2];
	x[1].s_enum = x1;
	if(qt_Smoke->binding->callMethod(10583, (void*)this, x)) return;
	this->QTextEdit::setWrapPolicy(x1);
    }
    virtual void show() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(8031, (void*)this, x)) return;
	this->QScrollView::show();
    }
    virtual void showEvent(QShowEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11971, (void*)this, x)) return;
	this->QWidget::showEvent(x1);
    }
    virtual void showMaximized() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(11920, (void*)this, x)) return;
	this->QWidget::showMaximized();
    }
    virtual void showMinimized() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(11919, (void*)this, x)) return;
	this->QWidget::showMinimized();
    }
    virtual void showNormal() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(11922, (void*)this, x)) return;
	this->QWidget::showNormal();
    }
    virtual QSize sizeHint() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(10552, (void*)this, x)) {
	    QSize *xptr = (QSize *)x[0].s_class;
	    QSize xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QTextEdit::sizeHint();
    }
    virtual QSizePolicy sizePolicy() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(11853, (void*)this, x)) {
	    QSizePolicy *xptr = (QSizePolicy *)x[0].s_class;
	    QSizePolicy xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QWidget::sizePolicy();
    }
    virtual void styleChange(QStyle& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(8002, (void*)this, x)) return;
	this->QScrollView::styleChange(x1);
    }
    virtual void sync() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(10597, (void*)this, x)) return;
	this->QTextEdit::sync();
    }
    virtual void tabletEvent(QTabletEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11966, (void*)this, x)) return;
	this->QWidget::tabletEvent(x1);
    }
    virtual void timerEvent(QTimerEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(6709, (void*)this, x)) return;
	this->QObject::timerEvent(x1);
    }
    virtual void undo() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(10599, (void*)this, x)) return;
	this->QTextEdit::undo();
    }
    virtual void unsetCursor() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(11814, (void*)this, x)) return;
	this->QWidget::unsetCursor();
    }
    virtual void updateMask() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(11973, (void*)this, x)) return;
	this->QWidget::updateMask();
    }
    virtual void viewportContextMenuEvent(QContextMenuEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(8099, (void*)this, x)) return;
	this->QScrollView::viewportContextMenuEvent(x1);
    }
    virtual void viewportDragEnterEvent(QDragEnterEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(8094, (void*)this, x)) return;
	this->QScrollView::viewportDragEnterEvent(x1);
    }
    virtual void viewportDragLeaveEvent(QDragLeaveEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(8096, (void*)this, x)) return;
	this->QScrollView::viewportDragLeaveEvent(x1);
    }
    virtual void viewportDragMoveEvent(QDragMoveEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(8095, (void*)this, x)) return;
	this->QScrollView::viewportDragMoveEvent(x1);
    }
    virtual void viewportDropEvent(QDropEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(8097, (void*)this, x)) return;
	this->QScrollView::viewportDropEvent(x1);
    }
    virtual void viewportMouseDoubleClickEvent(QMouseEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(8092, (void*)this, x)) return;
	this->QScrollView::viewportMouseDoubleClickEvent(x1);
    }
    virtual void viewportMouseMoveEvent(QMouseEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(8093, (void*)this, x)) return;
	this->QScrollView::viewportMouseMoveEvent(x1);
    }
    virtual void viewportMousePressEvent(QMouseEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(8090, (void*)this, x)) return;
	this->QScrollView::viewportMousePressEvent(x1);
    }
    virtual void viewportMouseReleaseEvent(QMouseEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(8091, (void*)this, x)) return;
	this->QScrollView::viewportMouseReleaseEvent(x1);
    }
    virtual void viewportPaintEvent(QPaintEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(8088, (void*)this, x)) return;
	this->QScrollView::viewportPaintEvent(x1);
    }
    virtual void viewportResizeEvent(QResizeEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(10675, (void*)this, x)) return;
	this->QTextEdit::viewportResizeEvent(x1);
    }
    virtual void viewportWheelEvent(QWheelEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(8098, (void*)this, x)) return;
	this->QScrollView::viewportWheelEvent(x1);
    }
    virtual void wheelEvent(QWheelEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(8114, (void*)this, x)) return;
	this->QScrollView::wheelEvent(x1);
    }
    virtual void windowActivationChange(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(10696, (void*)this, x)) return;
	this->QTextEdit::windowActivationChange(x1);
    }
    virtual void zoomIn() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(10593, (void*)this, x)) return;
	this->QTextEdit::zoomIn();
    }
    virtual void zoomIn(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = x1;
	if(qt_Smoke->binding->callMethod(10592, (void*)this, x)) return;
	this->QTextEdit::zoomIn(x1);
    }
    virtual void zoomOut() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(10595, (void*)this, x)) return;
	this->QTextEdit::zoomOut();
    }
    virtual void zoomOut(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = x1;
	if(qt_Smoke->binding->callMethod(10594, (void*)this, x)) return;
	this->QTextEdit::zoomOut(x1);
    }
    virtual void zoomTo(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = x1;
	if(qt_Smoke->binding->callMethod(10596, (void*)this, x)) return;
	this->QTextEdit::zoomTo(x1);
    }
    static void xenum_operation(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
	switch(xtype) {
	  case 664: //QTextEdit::KeyboardAction
	    switch(xop) {
	      case Smoke::EnumNew:
		xdata = (void*)new QTextEdit::KeyboardAction;
		break;
	      case Smoke::EnumDelete:
		delete (QTextEdit::KeyboardAction*)xdata;
		break;
	      case Smoke::EnumFromLong:
		*(QTextEdit::KeyboardAction*)xdata = (QTextEdit::KeyboardAction)xvalue;
		break;
	      case Smoke::EnumToLong:
		xvalue = (long)*(QTextEdit::KeyboardAction*)xdata;
		break;
	    }
	    break;
	  case 665: //QTextEdit::TextInsertionFlags
	    switch(xop) {
	      case Smoke::EnumNew:
		xdata = (void*)new QTextEdit::TextInsertionFlags;
		break;
	      case Smoke::EnumDelete:
		delete (QTextEdit::TextInsertionFlags*)xdata;
		break;
	      case Smoke::EnumFromLong:
		*(QTextEdit::TextInsertionFlags*)xdata = (QTextEdit::TextInsertionFlags)xvalue;
		break;
	      case Smoke::EnumToLong:
		xvalue = (long)*(QTextEdit::TextInsertionFlags*)xdata;
		break;
	    }
	    break;
	  case 666: //QTextEdit::VerticalAlignment
	    switch(xop) {
	      case Smoke::EnumNew:
		xdata = (void*)new QTextEdit::VerticalAlignment;
		break;
	      case Smoke::EnumDelete:
		delete (QTextEdit::VerticalAlignment*)xdata;
		break;
	      case Smoke::EnumFromLong:
		*(QTextEdit::VerticalAlignment*)xdata = (QTextEdit::VerticalAlignment)xvalue;
		break;
	      case Smoke::EnumToLong:
		xvalue = (long)*(QTextEdit::VerticalAlignment*)xdata;
		break;
	    }
	    break;
	  case 663: //QTextEdit::CursorAction
	    switch(xop) {
	      case Smoke::EnumNew:
		xdata = (void*)new QTextEdit::CursorAction;
		break;
	      case Smoke::EnumDelete:
		delete (QTextEdit::CursorAction*)xdata;
		break;
	      case Smoke::EnumFromLong:
		*(QTextEdit::CursorAction*)xdata = (QTextEdit::CursorAction)xvalue;
		break;
	      case Smoke::EnumToLong:
		xvalue = (long)*(QTextEdit::CursorAction*)xdata;
		break;
	    }
	    break;
	  case 669: //QTextEdit::WrapPolicy
	    switch(xop) {
	      case Smoke::EnumNew:
		xdata = (void*)new QTextEdit::WrapPolicy;
		break;
	      case Smoke::EnumDelete:
		delete (QTextEdit::WrapPolicy*)xdata;
		break;
	      case Smoke::EnumFromLong:
		*(QTextEdit::WrapPolicy*)xdata = (QTextEdit::WrapPolicy)xvalue;
		break;
	      case Smoke::EnumToLong:
		xvalue = (long)*(QTextEdit::WrapPolicy*)xdata;
		break;
	    }
	    break;
	  case 668: //QTextEdit::WordWrap
	    switch(xop) {
	      case Smoke::EnumNew:
		xdata = (void*)new QTextEdit::WordWrap;
		break;
	      case Smoke::EnumDelete:
		delete (QTextEdit::WordWrap*)xdata;
		break;
	      case Smoke::EnumFromLong:
		*(QTextEdit::WordWrap*)xdata = (QTextEdit::WordWrap)xvalue;
		break;
	      case Smoke::EnumToLong:
		xvalue = (long)*(QTextEdit::WordWrap*)xdata;
		break;
	    }
	    break;
	  case 662: //QTextEdit::AutoFormatting
	    switch(xop) {
	      case Smoke::EnumNew:
		xdata = (void*)new QTextEdit::AutoFormatting;
		break;
	      case Smoke::EnumDelete:
		delete (QTextEdit::AutoFormatting*)xdata;
		break;
	      case Smoke::EnumFromLong:
		*(QTextEdit::AutoFormatting*)xdata = (QTextEdit::AutoFormatting)xvalue;
		break;
	      case Smoke::EnumToLong:
		xvalue = (long)*(QTextEdit::AutoFormatting*)xdata;
		break;
	    }
	    break;
	}
    }
    ~x_QTextEdit() { qt_Smoke->binding->deleted(324, (void*)this); }
};
void xenum_QTextEdit(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
    x_QTextEdit::xenum_operation(xop, xtype, xdata, xvalue);
}
void xcall_QTextEdit(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QTextEdit *xself = (x_QTextEdit*)obj;
    switch(xi) {
	case 0: x_QTextEdit::x_0(args);	break;
	case 1: x_QTextEdit::x_1(args);	break;
	case 2: x_QTextEdit::x_2(args);	break;
	case 3: x_QTextEdit::x_3(args);	break;
	case 4: x_QTextEdit::x_4(args);	break;
	case 5: x_QTextEdit::x_5(args);	break;
	case 6: x_QTextEdit::x_6(args);	break;
	case 7: x_QTextEdit::x_7(args);	break;
	case 8: x_QTextEdit::x_8(args);	break;
	case 9: x_QTextEdit::x_9(args);	break;
	case 10: x_QTextEdit::x_10(args);	break;
	case 11: x_QTextEdit::x_11(args);	break;
	case 12: x_QTextEdit::x_12(args);	break;
	case 13: x_QTextEdit::x_13(args);	break;
	case 14: x_QTextEdit::x_14(args);	break;
	case 15: x_QTextEdit::x_15(args);	break;
	case 16: x_QTextEdit::x_16(args);	break;
	case 17: x_QTextEdit::x_17(args);	break;
	case 18: x_QTextEdit::x_18(args);	break;
	case 19: x_QTextEdit::x_19(args);	break;
	case 20: x_QTextEdit::x_20(args);	break;
	case 21: x_QTextEdit::x_21(args);	break;
	case 22: x_QTextEdit::x_22(args);	break;
	case 23: x_QTextEdit::x_23(args);	break;
	case 24: x_QTextEdit::x_24(args);	break;
	case 25: x_QTextEdit::x_25(args);	break;
	case 26: x_QTextEdit::x_26(args);	break;
	case 27: x_QTextEdit::x_27(args);	break;
	case 28: x_QTextEdit::x_28(args);	break;
	case 29: x_QTextEdit::x_29(args);	break;
	case 30: x_QTextEdit::x_30(args);	break;
	case 31: x_QTextEdit::x_31(args);	break;
	case 32: x_QTextEdit::x_32(args);	break;
	case 33: x_QTextEdit::x_33(args);	break;
	case 34: x_QTextEdit::x_34(args);	break;
	case 35: xself->x_35(args);	break;
	case 36: xself->x_36(args);	break;
	case 37: xself->x_37(args);	break;
	case 38: xself->x_38(args);	break;
	case 39: xself->x_39(args);	break;
	case 40: xself->x_40(args);	break;
	case 41: xself->x_41(args);	break;
	case 42: x_QTextEdit::x_42(args);	break;
	case 43: x_QTextEdit::x_43(args);	break;
	case 44: x_QTextEdit::x_44(args);	break;
	case 45: x_QTextEdit::x_45(args);	break;
	case 46: x_QTextEdit::x_46(args);	break;
	case 47: x_QTextEdit::x_47(args);	break;
	case 48: x_QTextEdit::x_48(args);	break;
	case 49: xself->x_49(args);	break;
	case 50: xself->x_50(args);	break;
	case 51: xself->x_51(args);	break;
	case 52: xself->x_52(args);	break;
	case 53: xself->x_53(args);	break;
	case 54: xself->x_54(args);	break;
	case 55: xself->x_55(args);	break;
	case 56: xself->x_56(args);	break;
	case 57: xself->x_57(args);	break;
	case 58: xself->x_58(args);	break;
	case 59: xself->x_59(args);	break;
	case 60: xself->x_60(args);	break;
	case 61: xself->x_61(args);	break;
	case 62: xself->x_62(args);	break;
	case 63: xself->x_63(args);	break;
	case 64: xself->x_64(args);	break;
	case 65: xself->x_65(args);	break;
	case 66: xself->x_66(args);	break;
	case 67: xself->x_67(args);	break;
	case 68: xself->x_68(args);	break;
	case 69: xself->x_69(args);	break;
	case 70: xself->x_70(args);	break;
	case 71: xself->x_71(args);	break;
	case 72: xself->x_72(args);	break;
	case 73: xself->x_73(args);	break;
	case 74: xself->x_74(args);	break;
	case 75: xself->x_75(args);	break;
	case 76: xself->x_76(args);	break;
	case 77: xself->x_77(args);	break;
	case 78: xself->x_78(args);	break;
	case 79: xself->x_79(args);	break;
	case 80: xself->x_80(args);	break;
	case 81: xself->x_81(args);	break;
	case 82: xself->x_82(args);	break;
	case 83: xself->x_83(args);	break;
	case 84: xself->x_84(args);	break;
	case 85: xself->x_85(args);	break;
	case 86: xself->x_86(args);	break;
	case 87: xself->x_87(args);	break;
	case 88: xself->x_88(args);	break;
	case 89: xself->x_89(args);	break;
	case 90: xself->x_90(args);	break;
	case 91: xself->x_91(args);	break;
	case 92: xself->x_92(args);	break;
	case 93: xself->x_93(args);	break;
	case 94: xself->x_94(args);	break;
	case 95: xself->x_95(args);	break;
	case 96: xself->x_96(args);	break;
	case 97: xself->x_97(args);	break;
	case 98: xself->x_98(args);	break;
	case 99: xself->x_99(args);	break;
	case 100: xself->x_100(args);	break;
	case 101: xself->x_101(args);	break;
	case 102: xself->x_102(args);	break;
	case 103: xself->x_103(args);	break;
	case 104: xself->x_104(args);	break;
	case 105: xself->x_105(args);	break;
	case 106: xself->x_106(args);	break;
	case 107: xself->x_107(args);	break;
	case 108: xself->x_108(args);	break;
	case 109: xself->x_109(args);	break;
	case 110: xself->x_110(args);	break;
	case 111: xself->x_111(args);	break;
	case 112: xself->x_112(args);	break;
	case 113: xself->x_113(args);	break;
	case 114: xself->x_114(args);	break;
	case 115: xself->x_115(args);	break;
	case 116: xself->x_116(args);	break;
	case 117: xself->x_117(args);	break;
	case 118: xself->x_118(args);	break;
	case 119: xself->x_119(args);	break;
	case 120: xself->x_120(args);	break;
	case 121: xself->x_121(args);	break;
	case 122: xself->x_122(args);	break;
	case 123: xself->x_123(args);	break;
	case 124: xself->x_124(args);	break;
	case 125: xself->x_125(args);	break;
	case 126: xself->x_126(args);	break;
	case 127: xself->x_127(args);	break;
	case 128: xself->x_128(args);	break;
	case 129: xself->x_129(args);	break;
	case 130: xself->x_130(args);	break;
	case 131: xself->x_131(args);	break;
	case 132: xself->x_132(args);	break;
	case 133: xself->x_133(args);	break;
	case 134: xself->x_134(args);	break;
	case 135: xself->x_135(args);	break;
	case 136: xself->x_136(args);	break;
	case 137: xself->x_137(args);	break;
	case 138: xself->x_138(args);	break;
	case 139: xself->x_139(args);	break;
	case 140: xself->x_140(args);	break;
	case 141: xself->x_141(args);	break;
	case 142: xself->x_142(args);	break;
	case 143: xself->x_143(args);	break;
	case 144: xself->x_144(args);	break;
	case 145: xself->x_145(args);	break;
	case 146: xself->x_146(args);	break;
	case 147: xself->x_147(args);	break;
	case 148: xself->x_148(args);	break;
	case 149: xself->x_149(args);	break;
	case 150: xself->x_150(args);	break;
	case 151: xself->x_151(args);	break;
	case 152: xself->x_152(args);	break;
	case 153: xself->x_153(args);	break;
	case 154: xself->x_154(args);	break;
	case 155: xself->x_155(args);	break;
	case 156: xself->x_156(args);	break;
	case 157: xself->x_157(args);	break;
	case 158: xself->x_158(args);	break;
	case 159: xself->x_159(args);	break;
	case 160: xself->x_160(args);	break;
	case 161: xself->x_161(args);	break;
	case 162: xself->x_162(args);	break;
	case 163: xself->x_163(args);	break;
	case 164: xself->x_164(args);	break;
	case 165: xself->x_165(args);	break;
	case 166: xself->x_166(args);	break;
	case 167: xself->x_167(args);	break;
	case 168: xself->x_168(args);	break;
	case 169: xself->x_169(args);	break;
	case 170: xself->x_170(args);	break;
	case 171: xself->x_171(args);	break;
	case 172: xself->x_172(args);	break;
	case 173: xself->x_173(args);	break;
	case 174: xself->x_174(args);	break;
	case 175: xself->x_175(args);	break;
	case 176: xself->x_176(args);	break;
	case 177: xself->x_177(args);	break;
	case 178: xself->x_178(args);	break;
	case 179: xself->x_179(args);	break;
	case 180: xself->x_180(args);	break;
	case 181: xself->x_181(args);	break;
	case 182: xself->x_182(args);	break;
	case 183: xself->x_183(args);	break;
	case 184: xself->x_184(args);	break;
	case 185: xself->x_185(args);	break;
	case 186: xself->x_186(args);	break;
	case 187: xself->x_187(args);	break;
	case 188: xself->x_188(args);	break;
	case 189: xself->x_189(args);	break;
	case 190: xself->x_190(args);	break;
	case 191: xself->x_191(args);	break;
	case 192: xself->x_192(args);	break;
	case 193: xself->x_193(args);	break;
	case 194: xself->x_194(args);	break;
	case 195: xself->x_195(args);	break;
	case 196: xself->x_196(args);	break;
	case 197: x_QTextEdit::x_197(args);	break;
	case 198: x_QTextEdit::x_198(args);	break;
	case 199: x_QTextEdit::x_199(args);	break;
	case 200: x_QTextEdit::x_200(args);	break;
	case 201: x_QTextEdit::x_201(args);	break;
	case 202: xself->x_202(args);	break;
	case 203: xself->x_203(args);	break;
	case 204: xself->x_204(args);	break;
	case 205: xself->x_205(args);	break;
	case 206: xself->x_206(args);	break;
	case 207: xself->x_207(args);	break;
	case 208: xself->x_208(args);	break;
	case 209: xself->x_209(args);	break;
	case 210: xself->x_210(args);	break;
	case 211: xself->x_211(args);	break;
	case 212: xself->x_212(args);	break;
	case 213: xself->x_213(args);	break;
	case 214: xself->x_214(args);	break;
	case 215: xself->x_215(args);	break;
	case 216: xself->x_216(args);	break;
	case 217: xself->x_217(args);	break;
	case 218: xself->x_218(args);	break;
	case 219: xself->x_219(args);	break;
	case 220: xself->x_220(args);	break;
	case 221: xself->x_221(args);	break;
	case 222: xself->x_222(args);	break;
	case 223: xself->x_223(args);	break;
	case 224: xself->x_224(args);	break;
	case 225: xself->x_225(args);	break;
	case 226: xself->x_226(args);	break;
	case 227: xself->x_227(args);	break;
	case 228: xself->x_228(args);	break;
	case 229: xself->x_229(args);	break;
	case 230: xself->x_230(args);	break;
	case 231: xself->x_231(args);	break;
	case 232: delete (QTextEdit*)xself;	break;
    }
}
