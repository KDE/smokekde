//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qglobal.h>
#include <qdatastream.h>
#include <qcstring.h>

class x_QDataStream : public QDataStream {
public:
    static void x_0(xargs *x) {
	x[0].x_long = (long)QDataStream::BigEndian;
    }
    static void x_1(xargs *x) {
	x[0].x_long = (long)QDataStream::LittleEndian;
    }
    static void x_2(xargs *x) {
	// QDataStream()
	x_QDataStream* xret = new x_QDataStream();
	x[0].x_voidp = (void*)xret;
    }
    x_QDataStream() : QDataStream() {
    }
    static void x_3(xargs *x) {
	// QDataStream(QIODevice*)
	x_QDataStream* xret = new x_QDataStream((QIODevice*)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QDataStream(QIODevice* x1) : QDataStream(x1) {
    }
    static void x_4(xargs *x) {
	// QDataStream(QByteArray, int)
	x_QDataStream* xret = new x_QDataStream(*(QByteArray *)x[1].x_voidp,(int)x[2].x_int);
	x[0].x_voidp = (void*)xret;
    }
    x_QDataStream(QByteArray x1, int x2) : QDataStream(x1, x2) {
    }
    void x_5(xargs *x) const {
	// device()
	QIODevice* xret = this->QDataStream::device();
	x[0].x_voidp = (void*)xret;
    }
    void x_6(xargs *x) {
	// setDevice(QIODevice*)
	this->QDataStream::setDevice((QIODevice*)x[1].x_voidp);
    }
    void x_7(xargs *x) {
	// unsetDevice()
	this->QDataStream::unsetDevice();
    }
    void x_8(xargs *x) const {
	// atEnd()
	bool xret = this->QDataStream::atEnd();
	x[0].x_bool = (bool)xret;
    }
    void x_9(xargs *x) const {
	// eof()
	bool xret = this->QDataStream::eof();
	x[0].x_bool = (bool)xret;
    }
    void x_10(xargs *x) const {
	// byteOrder()
	int xret = this->QDataStream::byteOrder();
	x[0].x_int = (int)xret;
    }
    void x_11(xargs *x) {
	// setByteOrder(int)
	this->QDataStream::setByteOrder((int)x[1].x_int);
    }
    void x_12(xargs *x) const {
	// isPrintableData()
	bool xret = this->QDataStream::isPrintableData();
	x[0].x_bool = (bool)xret;
    }
    void x_13(xargs *x) {
	// setPrintableData(bool)
	this->QDataStream::setPrintableData((bool)x[1].x_bool);
    }
    void x_14(xargs *x) const {
	// version()
	int xret = this->QDataStream::version();
	x[0].x_int = (int)xret;
    }
    void x_15(xargs *x) {
	// setVersion(int)
	this->QDataStream::setVersion((int)x[1].x_int);
    }
    void x_16(xargs *x) {
	// operator>>(Q_INT8&)
	QDataStream& xret = this->QDataStream::operator>>(*(Q_INT8 *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_17(xargs *x) {
	// operator>>(Q_UINT8&)
	QDataStream& xret = this->QDataStream::operator>>(*(Q_UINT8 *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_18(xargs *x) {
	// operator>>(Q_INT16&)
	QDataStream& xret = this->QDataStream::operator>>(*(Q_INT16 *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_19(xargs *x) {
	// operator>>(Q_UINT16&)
	QDataStream& xret = this->QDataStream::operator>>(*(Q_UINT16 *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_20(xargs *x) {
	// operator>>(Q_INT32&)
	QDataStream& xret = this->QDataStream::operator>>(*(Q_INT32 *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_21(xargs *x) {
	// operator>>(Q_UINT32&)
	QDataStream& xret = this->QDataStream::operator>>(*(Q_UINT32 *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_22(xargs *x) {
	// operator>>(Q_LONG&)
	QDataStream& xret = this->QDataStream::operator>>(*(Q_LONG *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_23(xargs *x) {
	// operator>>(Q_ULONG&)
	QDataStream& xret = this->QDataStream::operator>>(*(Q_ULONG *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_24(xargs *x) {
	// operator>>(float&)
	QDataStream& xret = this->QDataStream::operator>>(*(float *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_25(xargs *x) {
	// operator>>(double&)
	QDataStream& xret = this->QDataStream::operator>>(*(double *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_26(xargs *x) {
	// operator>>(char*&)
	QDataStream& xret = this->QDataStream::operator>>(*(char* *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_27(xargs *x) {
	// operator<<(Q_INT8)
	QDataStream& xret = this->QDataStream::operator<<(*(Q_INT8 *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_28(xargs *x) {
	// operator<<(Q_UINT8)
	QDataStream& xret = this->QDataStream::operator<<(*(Q_UINT8 *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_29(xargs *x) {
	// operator<<(Q_INT16)
	QDataStream& xret = this->QDataStream::operator<<(*(Q_INT16 *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_30(xargs *x) {
	// operator<<(Q_UINT16)
	QDataStream& xret = this->QDataStream::operator<<(*(Q_UINT16 *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_31(xargs *x) {
	// operator<<(Q_INT32)
	QDataStream& xret = this->QDataStream::operator<<(*(Q_INT32 *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_32(xargs *x) {
	// operator<<(Q_UINT32)
	QDataStream& xret = this->QDataStream::operator<<(*(Q_UINT32 *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_33(xargs *x) {
	// operator<<(Q_LONG)
	QDataStream& xret = this->QDataStream::operator<<(*(Q_LONG *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_34(xargs *x) {
	// operator<<(Q_ULONG)
	QDataStream& xret = this->QDataStream::operator<<(*(Q_ULONG *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_35(xargs *x) {
	// operator<<(float)
	QDataStream& xret = this->QDataStream::operator<<((float)x[1].x_float);
	x[0].x_voidp = (void*)&xret;
    }
    void x_36(xargs *x) {
	// operator<<(double)
	QDataStream& xret = this->QDataStream::operator<<((double)x[1].x_double);
	x[0].x_voidp = (void*)&xret;
    }
    void x_37(xargs *x) {
	// operator<<(const char*)
	QDataStream& xret = this->QDataStream::operator<<((const char*)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_38(xargs *x) {
	// readBytes(char*&, uint&)
	QDataStream& xret = this->QDataStream::readBytes(*(char* *)x[1].x_voidp,*(uint *)x[2].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_39(xargs *x) {
	// readRawBytes(char*, uint)
	QDataStream& xret = this->QDataStream::readRawBytes((char*)x[1].x_voidp,(uint)x[2].x_uint);
	x[0].x_voidp = (void*)&xret;
    }
    void x_40(xargs *x) {
	// writeBytes(const char*, uint)
	QDataStream& xret = this->QDataStream::writeBytes((const char*)x[1].x_voidp,(uint)x[2].x_uint);
	x[0].x_voidp = (void*)&xret;
    }
    void x_41(xargs *x) {
	// writeRawBytes(const char*, uint)
	QDataStream& xret = this->QDataStream::writeRawBytes((const char*)x[1].x_voidp,(uint)x[2].x_uint);
	x[0].x_voidp = (void*)&xret;
    }
    ~x_QDataStream() {}
};
void xcall_QDataStream(xargs *x, void *s, int xi) {
    x_QDataStream *xself = (x_QDataStream*)s;
    switch(xi) {
	case 0: x_QDataStream::x_0(x);	break;
	case 1: x_QDataStream::x_1(x);	break;
	case 2: x_QDataStream::x_2(x);	break;
	case 3: x_QDataStream::x_3(x);	break;
	case 4: x_QDataStream::x_4(x);	break;
	case 5: xself->x_5(x);	break;
	case 6: xself->x_6(x);	break;
	case 7: xself->x_7(x);	break;
	case 8: xself->x_8(x);	break;
	case 9: xself->x_9(x);	break;
	case 10: xself->x_10(x);	break;
	case 11: xself->x_11(x);	break;
	case 12: xself->x_12(x);	break;
	case 13: xself->x_13(x);	break;
	case 14: xself->x_14(x);	break;
	case 15: xself->x_15(x);	break;
	case 16: xself->x_16(x);	break;
	case 17: xself->x_17(x);	break;
	case 18: xself->x_18(x);	break;
	case 19: xself->x_19(x);	break;
	case 20: xself->x_20(x);	break;
	case 21: xself->x_21(x);	break;
	case 22: xself->x_22(x);	break;
	case 23: xself->x_23(x);	break;
	case 24: xself->x_24(x);	break;
	case 25: xself->x_25(x);	break;
	case 26: xself->x_26(x);	break;
	case 27: xself->x_27(x);	break;
	case 28: xself->x_28(x);	break;
	case 29: xself->x_29(x);	break;
	case 30: xself->x_30(x);	break;
	case 31: xself->x_31(x);	break;
	case 32: xself->x_32(x);	break;
	case 33: xself->x_33(x);	break;
	case 34: xself->x_34(x);	break;
	case 35: xself->x_35(x);	break;
	case 36: xself->x_36(x);	break;
	case 37: xself->x_37(x);	break;
	case 38: xself->x_38(x);	break;
	case 39: xself->x_39(x);	break;
	case 40: xself->x_40(x);	break;
	case 41: xself->x_41(x);	break;
	case 42: delete (QDataStream*)xself;	break;
    }
}
