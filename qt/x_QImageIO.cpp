//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qimage.h>
#include <qstring.h>
#include <qstrlist.h>

class x_QImageIO : public QImageIO {
public:
    static void x_0(xargs *x) {
	// QImageIO()
	x_QImageIO* xret = new x_QImageIO();
	x[0].x_voidp = (void*)xret;
    }
    x_QImageIO() : QImageIO() {
    }
    static void x_1(xargs *x) {
	// QImageIO(QIODevice*, const char*)
	x_QImageIO* xret = new x_QImageIO((QIODevice*)x[1].x_voidp,(const char*)x[2].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QImageIO(QIODevice* x1, const char* x2) : QImageIO(x1, x2) {
    }
    static void x_2(xargs *x) {
	// QImageIO(const QString&, const char*)
	x_QImageIO* xret = new x_QImageIO(*(const QString *)x[1].x_voidp,(const char*)x[2].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QImageIO(const QString& x1, const char* x2) : QImageIO(x1, x2) {
    }
    void x_3(xargs *x) const {
	// image()
	const QImage& xret = this->QImageIO::image();
	x[0].x_voidp = (void*)&xret;
    }
    void x_4(xargs *x) const {
	// status()
	int xret = this->QImageIO::status();
	x[0].x_int = (int)xret;
    }
    void x_5(xargs *x) const {
	// format()
	const char* xret = this->QImageIO::format();
	x[0].x_voidp = (void*)xret;
    }
    void x_6(xargs *x) const {
	// ioDevice()
	QIODevice* xret = this->QImageIO::ioDevice();
	x[0].x_voidp = (void*)xret;
    }
    void x_7(xargs *x) const {
	// fileName()
	QString xret = this->QImageIO::fileName();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_8(xargs *x) const {
	// quality()
	int xret = this->QImageIO::quality();
	x[0].x_int = (int)xret;
    }
    void x_9(xargs *x) const {
	// description()
	QString xret = this->QImageIO::description();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_10(xargs *x) const {
	// parameters()
	const char* xret = this->QImageIO::parameters();
	x[0].x_voidp = (void*)xret;
    }
    void x_11(xargs *x) const {
	// gamma()
	float xret = this->QImageIO::gamma();
	x[0].x_float = (float)xret;
    }
    void x_12(xargs *x) {
	// setImage(const QImage&)
	this->QImageIO::setImage(*(const QImage *)x[1].x_voidp);
    }
    void x_13(xargs *x) {
	// setStatus(int)
	this->QImageIO::setStatus((int)x[1].x_int);
    }
    void x_14(xargs *x) {
	// setFormat(const char*)
	this->QImageIO::setFormat((const char*)x[1].x_voidp);
    }
    void x_15(xargs *x) {
	// setIODevice(QIODevice*)
	this->QImageIO::setIODevice((QIODevice*)x[1].x_voidp);
    }
    void x_16(xargs *x) {
	// setFileName(const QString&)
	this->QImageIO::setFileName(*(const QString *)x[1].x_voidp);
    }
    void x_17(xargs *x) {
	// setQuality(int)
	this->QImageIO::setQuality((int)x[1].x_int);
    }
    void x_18(xargs *x) {
	// setDescription(const QString&)
	this->QImageIO::setDescription(*(const QString *)x[1].x_voidp);
    }
    void x_19(xargs *x) {
	// setParameters(const char*)
	this->QImageIO::setParameters((const char*)x[1].x_voidp);
    }
    void x_20(xargs *x) {
	// setGamma(float)
	this->QImageIO::setGamma((float)x[1].x_float);
    }
    void x_21(xargs *x) {
	// read()
	bool xret = this->QImageIO::read();
	x[0].x_bool = (bool)xret;
    }
    void x_22(xargs *x) {
	// write()
	bool xret = this->QImageIO::write();
	x[0].x_bool = (bool)xret;
    }
    static void x_23(xargs *x) {
	// imageFormat(const QString&)
	const char* xret = QImageIO::imageFormat(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    static void x_24(xargs *x) {
	// imageFormat(QIODevice*)
	const char* xret = QImageIO::imageFormat((QIODevice*)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    static void x_25(xargs *x) {
	// inputFormats()
	QStrList xret = QImageIO::inputFormats();
	x[0].x_voidp = (void*)new QStrList(xret);
    }
    static void x_26(xargs *x) {
	// outputFormats()
	QStrList xret = QImageIO::outputFormats();
	x[0].x_voidp = (void*)new QStrList(xret);
    }
    ~x_QImageIO() {}
};
void xcall_QImageIO(xargs *x, void *s, int xi) {
    x_QImageIO *xself = (x_QImageIO*)s;
    switch(xi) {
	case 0: x_QImageIO::x_0(x);	break;
	case 1: x_QImageIO::x_1(x);	break;
	case 2: x_QImageIO::x_2(x);	break;
	case 3: xself->x_3(x);	break;
	case 4: xself->x_4(x);	break;
	case 5: xself->x_5(x);	break;
	case 6: xself->x_6(x);	break;
	case 7: xself->x_7(x);	break;
	case 8: xself->x_8(x);	break;
	case 9: xself->x_9(x);	break;
	case 10: xself->x_10(x);	break;
	case 11: xself->x_11(x);	break;
	case 12: xself->x_12(x);	break;
	case 13: xself->x_13(x);	break;
	case 14: xself->x_14(x);	break;
	case 15: xself->x_15(x);	break;
	case 16: xself->x_16(x);	break;
	case 17: xself->x_17(x);	break;
	case 18: xself->x_18(x);	break;
	case 19: xself->x_19(x);	break;
	case 20: xself->x_20(x);	break;
	case 21: xself->x_21(x);	break;
	case 22: xself->x_22(x);	break;
	case 23: x_QImageIO::x_23(x);	break;
	case 24: x_QImageIO::x_24(x);	break;
	case 25: x_QImageIO::x_25(x);	break;
	case 26: x_QImageIO::x_26(x);	break;
	case 27: delete (QImageIO*)xself;	break;
    }
}
