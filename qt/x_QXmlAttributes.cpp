//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qstring.h>
#include <qxml.h>

class x_QXmlAttributes : public QXmlAttributes {
public:
    static void x_0(xargs *x) {
	// QXmlAttributes()
	x_QXmlAttributes* xret = new x_QXmlAttributes();
	x[0].x_voidp = (void*)xret;
    }
    x_QXmlAttributes() : QXmlAttributes() {
    }
    void x_1(xargs *x) const {
	// index(const QString&)
	int xret = this->QXmlAttributes::index(*(const QString *)x[1].x_voidp);
	x[0].x_int = (int)xret;
    }
    void x_2(xargs *x) const {
	// index(const QString&, const QString&)
	int xret = this->QXmlAttributes::index(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp);
	x[0].x_int = (int)xret;
    }
    void x_3(xargs *x) const {
	// length()
	int xret = this->QXmlAttributes::length();
	x[0].x_int = (int)xret;
    }
    void x_4(xargs *x) const {
	// count()
	int xret = this->QXmlAttributes::count();
	x[0].x_int = (int)xret;
    }
    void x_5(xargs *x) const {
	// localName(int)
	QString xret = this->QXmlAttributes::localName((int)x[1].x_int);
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_6(xargs *x) const {
	// qName(int)
	QString xret = this->QXmlAttributes::qName((int)x[1].x_int);
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_7(xargs *x) const {
	// uri(int)
	QString xret = this->QXmlAttributes::uri((int)x[1].x_int);
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_8(xargs *x) const {
	// type(int)
	QString xret = this->QXmlAttributes::type((int)x[1].x_int);
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_9(xargs *x) const {
	// type(const QString&)
	QString xret = this->QXmlAttributes::type(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_10(xargs *x) const {
	// type(const QString&, const QString&)
	QString xret = this->QXmlAttributes::type(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp);
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_11(xargs *x) const {
	// value(int)
	QString xret = this->QXmlAttributes::value((int)x[1].x_int);
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_12(xargs *x) const {
	// value(const QString&)
	QString xret = this->QXmlAttributes::value(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_13(xargs *x) const {
	// value(const QString&, const QString&)
	QString xret = this->QXmlAttributes::value(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp);
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_14(xargs *x) {
	// clear()
	this->QXmlAttributes::clear();
    }
    void x_15(xargs *x) {
	// append(const QString&, const QString&, const QString&, const QString&)
	this->QXmlAttributes::append(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp,*(const QString *)x[3].x_voidp,*(const QString *)x[4].x_voidp);
    }
    ~x_QXmlAttributes() {}
};
void xcall_QXmlAttributes(xargs *x, void *s, int xi) {
    x_QXmlAttributes *xself = (x_QXmlAttributes*)s;
    switch(xi) {
	case 0: x_QXmlAttributes::x_0(x);	break;
	case 1: xself->x_1(x);	break;
	case 2: xself->x_2(x);	break;
	case 3: xself->x_3(x);	break;
	case 4: xself->x_4(x);	break;
	case 5: xself->x_5(x);	break;
	case 6: xself->x_6(x);	break;
	case 7: xself->x_7(x);	break;
	case 8: xself->x_8(x);	break;
	case 9: xself->x_9(x);	break;
	case 10: xself->x_10(x);	break;
	case 11: xself->x_11(x);	break;
	case 12: xself->x_12(x);	break;
	case 13: xself->x_13(x);	break;
	case 14: xself->x_14(x);	break;
	case 15: xself->x_15(x);	break;
	case 16: delete (QXmlAttributes*)xself;	break;
    }
}
