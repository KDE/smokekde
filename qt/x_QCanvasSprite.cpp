//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qrect.h>
#include <qpainter.h>
#include <qcanvas.h>

class x_QCanvasSprite : public QCanvasSprite {
public:
    static void x_0(xargs *x) {
	x[0].x_long = (long)QCanvasSprite::Cycle;
    }
    static void x_1(xargs *x) {
	x[0].x_long = (long)QCanvasSprite::Oscillate;
    }
    static void x_2(xargs *x) {
	// QCanvasSprite(QCanvasPixmapArray*, QCanvas*)
	x_QCanvasSprite* xret = new x_QCanvasSprite((QCanvasPixmapArray*)x[1].x_voidp,(QCanvas*)x[2].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QCanvasSprite(QCanvasPixmapArray* x1, QCanvas* x2) : QCanvasSprite(x1, x2) {
    }
    void x_3(xargs *x) {
	// setSequence(QCanvasPixmapArray*)
	this->QCanvasSprite::setSequence((QCanvasPixmapArray*)x[1].x_voidp);
    }
    void x_4(xargs *x) {
	// move(double, double)
	this->QCanvasSprite::move((double)x[1].x_double,(double)x[2].x_double);
    }
    void x_5(xargs *x) {
	// move(double, double, int)
	this->QCanvasSprite::move((double)x[1].x_double,(double)x[2].x_double,(int)x[3].x_int);
    }
    void x_6(xargs *x) {
	// setFrame(int)
	this->QCanvasSprite::setFrame((int)x[1].x_int);
    }
    void x_7(xargs *x) {
	// setFrameAnimation(QCanvasSprite::FrameAnimationType, int, int)
	this->QCanvasSprite::setFrameAnimation((QCanvasSprite::FrameAnimationType)x[1].x_long,(int)x[2].x_int,(int)x[3].x_int);
    }
    void x_8(xargs *x) {
	// setFrameAnimation(QCanvasSprite::FrameAnimationType, int)
	this->QCanvasSprite::setFrameAnimation((QCanvasSprite::FrameAnimationType)x[1].x_long,(int)x[2].x_int);
    }
    void x_9(xargs *x) {
	// setFrameAnimation(QCanvasSprite::FrameAnimationType)
	this->QCanvasSprite::setFrameAnimation((QCanvasSprite::FrameAnimationType)x[1].x_long);
    }
    void x_10(xargs *x) {
	// setFrameAnimation()
	this->QCanvasSprite::setFrameAnimation();
    }
    void x_11(xargs *x) const {
	// frame()
	int xret = this->QCanvasSprite::frame();
	x[0].x_int = (int)xret;
    }
    void x_12(xargs *x) const {
	// frameCount()
	int xret = this->QCanvasSprite::frameCount();
	x[0].x_int = (int)xret;
    }
    void x_13(xargs *x) const {
	// rtti()
	int xret = this->QCanvasSprite::rtti();
	x[0].x_int = (int)xret;
    }
    void x_14(xargs *x) const {
	// collidesWith(const QCanvasItem*)
	bool xret = this->QCanvasSprite::collidesWith((const QCanvasItem*)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_15(xargs *x) const {
	// boundingRect()
	QRect xret = this->QCanvasSprite::boundingRect();
	x[0].x_voidp = (void*)new QRect(xret);
    }
    void x_16(xargs *x) const {
	// width()
	int xret = this->QCanvasSprite::width();
	x[0].x_int = (int)xret;
    }
    void x_17(xargs *x) const {
	// height()
	int xret = this->QCanvasSprite::height();
	x[0].x_int = (int)xret;
    }
    void x_18(xargs *x) const {
	// leftEdge()
	int xret = this->QCanvasSprite::leftEdge();
	x[0].x_int = (int)xret;
    }
    void x_19(xargs *x) const {
	// topEdge()
	int xret = this->QCanvasSprite::topEdge();
	x[0].x_int = (int)xret;
    }
    void x_20(xargs *x) const {
	// rightEdge()
	int xret = this->QCanvasSprite::rightEdge();
	x[0].x_int = (int)xret;
    }
    void x_21(xargs *x) const {
	// bottomEdge()
	int xret = this->QCanvasSprite::bottomEdge();
	x[0].x_int = (int)xret;
    }
    void x_22(xargs *x) const {
	// leftEdge(int)
	int xret = this->QCanvasSprite::leftEdge((int)x[1].x_int);
	x[0].x_int = (int)xret;
    }
    void x_23(xargs *x) const {
	// topEdge(int)
	int xret = this->QCanvasSprite::topEdge((int)x[1].x_int);
	x[0].x_int = (int)xret;
    }
    void x_24(xargs *x) const {
	// rightEdge(int)
	int xret = this->QCanvasSprite::rightEdge((int)x[1].x_int);
	x[0].x_int = (int)xret;
    }
    void x_25(xargs *x) const {
	// bottomEdge(int)
	int xret = this->QCanvasSprite::bottomEdge((int)x[1].x_int);
	x[0].x_int = (int)xret;
    }
    void x_26(xargs *x) const {
	// image()
	QCanvasPixmap* xret = this->QCanvasSprite::image();
	x[0].x_voidp = (void*)xret;
    }
    void x_27(xargs *x) const {
	// imageAdvanced()
	QCanvasPixmap* xret = this->QCanvasSprite::imageAdvanced();
	x[0].x_voidp = (void*)xret;
    }
    void x_28(xargs *x) const {
	// image(int)
	QCanvasPixmap* xret = this->QCanvasSprite::image((int)x[1].x_int);
	x[0].x_voidp = (void*)xret;
    }
    void x_29(xargs *x) {
	// advance(int)
	this->QCanvasSprite::advance((int)x[1].x_int);
    }
    void x_30(xargs *x) {
	// draw(QPainter&)
	this->QCanvasSprite::draw(*(QPainter *)x[1].x_voidp);
    }
    virtual void advance(int x1) {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 673, x)) return;
	this->QCanvasSprite::advance(x1);
    }
    virtual QRect boundingRect() const {
	xargs x[1];
	if(call_method((void*)this, 659, x)) {
	    QRect *xptr = (QRect *)x[0].x_voidp;
	    QRect xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QCanvasSprite::boundingRect();
    }
    virtual QRect boundingRectAdvanced() const {
	xargs x[1];
	if(call_method((void*)this, 565, x)) {
	    QRect *xptr = (QRect *)x[0].x_voidp;
	    QRect xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QCanvasItem::boundingRectAdvanced();
    }
    virtual bool collidesWith(const QCanvasItem* x1) const {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 658, x)) return (bool)x[0].x_bool;
	return this->QCanvasSprite::collidesWith(x1);
    }
    virtual void draw(QPainter& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 674, x)) return;
	this->QCanvasSprite::draw(x1);
    }
    virtual QCanvasPixmap* imageAdvanced() const {
	xargs x[1];
	if(call_method((void*)this, 671, x)) 	return (QCanvasPixmap*)x[0].x_voidp;
	return this->QCanvasSprite::imageAdvanced();
    }
    virtual void move(double x1, double x2, int x3) {
	xargs x[4];
	x[1].x_double = (double)x1;
	x[2].x_double = (double)x2;
	x[3].x_int = (int)x3;
	if(call_method((void*)this, 649, x)) return;
	this->QCanvasSprite::move(x1, x2, x3);
    }
    virtual void moveBy(double x1, double x2) {
	xargs x[3];
	x[1].x_double = (double)x1;
	x[2].x_double = (double)x2;
	if(call_method((void*)this, 532, x)) return;
	this->QCanvasItem::moveBy(x1, x2);
    }
    virtual int rtti() const {
	xargs x[1];
	if(call_method((void*)this, 657, x)) return (int)x[0].x_int;
	return this->QCanvasSprite::rtti();
    }
    virtual void setActive(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 557, x)) return;
	this->QCanvasItem::setActive(x1);
    }
    virtual void setAnimated(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 538, x)) return;
	this->QCanvasItem::setAnimated(x1);
    }
    virtual void setCanvas(QCanvas* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 547, x)) return;
	this->QCanvasItem::setCanvas(x1);
    }
    virtual void setEnabled(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 555, x)) return;
	this->QCanvasItem::setEnabled(x1);
    }
    virtual void setFrameAnimation(QCanvasSprite::FrameAnimationType x1, int x2, int x3) {
	xargs x[4];
	x[1].x_long = (long)x1;
	x[2].x_int = (int)x2;
	x[3].x_int = (int)x3;
	if(call_method((void*)this, 651, x)) return;
	this->QCanvasSprite::setFrameAnimation(x1, x2, x3);
    }
    virtual void setSelected(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 553, x)) return;
	this->QCanvasItem::setSelected(x1);
    }
    virtual void setVelocity(double x1, double x2) {
	xargs x[3];
	x[1].x_double = (double)x1;
	x[2].x_double = (double)x2;
	if(call_method((void*)this, 539, x)) return;
	this->QCanvasItem::setVelocity(x1, x2);
    }
    virtual void setVisible(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 551, x)) return;
	this->QCanvasItem::setVisible(x1);
    }
    ~x_QCanvasSprite() {}
};
void xcall_QCanvasSprite(xargs *x, void *s, int xi) {
    x_QCanvasSprite *xself = (x_QCanvasSprite*)s;
    switch(xi) {
	case 0: x_QCanvasSprite::x_0(x);	break;
	case 1: x_QCanvasSprite::x_1(x);	break;
	case 2: x_QCanvasSprite::x_2(x);	break;
	case 3: xself->x_3(x);	break;
	case 4: xself->x_4(x);	break;
	case 5: xself->x_5(x);	break;
	case 6: xself->x_6(x);	break;
	case 7: xself->x_7(x);	break;
	case 8: xself->x_8(x);	break;
	case 9: xself->x_9(x);	break;
	case 10: xself->x_10(x);	break;
	case 11: xself->x_11(x);	break;
	case 12: xself->x_12(x);	break;
	case 13: xself->x_13(x);	break;
	case 14: xself->x_14(x);	break;
	case 15: xself->x_15(x);	break;
	case 16: xself->x_16(x);	break;
	case 17: xself->x_17(x);	break;
	case 18: xself->x_18(x);	break;
	case 19: xself->x_19(x);	break;
	case 20: xself->x_20(x);	break;
	case 21: xself->x_21(x);	break;
	case 22: xself->x_22(x);	break;
	case 23: xself->x_23(x);	break;
	case 24: xself->x_24(x);	break;
	case 25: xself->x_25(x);	break;
	case 26: xself->x_26(x);	break;
	case 27: xself->x_27(x);	break;
	case 28: xself->x_28(x);	break;
	case 29: xself->x_29(x);	break;
	case 30: xself->x_30(x);	break;
	case 31: delete (QCanvasSprite*)xself;	break;
    }
}
