//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke.h>
#include <qt_smoke.h>
#include <qpoint.h>
#include <qevent.h>
#include <qcstring.h>

class x_QDropEvent : public QDropEvent {
public:
    static void x_0(Smoke::Stack x) {
	x[0].s_enum = (long)QDropEvent::Copy;
    }
    static void x_1(Smoke::Stack x) {
	x[0].s_enum = (long)QDropEvent::Link;
    }
    static void x_2(Smoke::Stack x) {
	x[0].s_enum = (long)QDropEvent::Move;
    }
    static void x_3(Smoke::Stack x) {
	x[0].s_enum = (long)QDropEvent::Private;
    }
    static void x_4(Smoke::Stack x) {
	x[0].s_enum = (long)QDropEvent::UserAction;
    }
    static void x_5(Smoke::Stack x) {
	// QDropEvent(const QPoint&, QEvent::Type)
	x_QDropEvent* xret = new x_QDropEvent(*(const QPoint *)x[1].s_class,(QEvent::Type)x[2].s_enum);
	x[0].s_class = (void*)xret;
    }
    x_QDropEvent(const QPoint& x1, QEvent::Type x2) : QDropEvent(x1, x2) {
    }
    static void x_6(Smoke::Stack x) {
	// QDropEvent(const QPoint&)
	x_QDropEvent* xret = new x_QDropEvent(*(const QPoint *)x[1].s_class);
	x[0].s_class = (void*)xret;
    }
    x_QDropEvent(const QPoint& x1) : QDropEvent(x1) {
    }
    void x_7(Smoke::Stack x) const {
	// pos()
	const QPoint& xret = this->QDropEvent::pos();
	x[0].s_class = (void*)&xret;
    }
    void x_8(Smoke::Stack x) const {
	// isAccepted()
	bool xret = this->QDropEvent::isAccepted();
	x[0].s_bool = xret;
    }
    void x_9(Smoke::Stack x) {
	// accept(bool)
	this->QDropEvent::accept((bool)x[1].s_bool);
	(void)x; // noop (for compiler warning)
    }
    void x_10(Smoke::Stack x) {
	// accept()
	this->QDropEvent::accept();
	(void)x; // noop (for compiler warning)
    }
    void x_11(Smoke::Stack x) {
	// ignore()
	this->QDropEvent::ignore();
	(void)x; // noop (for compiler warning)
    }
    void x_12(Smoke::Stack x) const {
	// isActionAccepted()
	bool xret = this->QDropEvent::isActionAccepted();
	x[0].s_bool = xret;
    }
    void x_13(Smoke::Stack x) {
	// acceptAction(bool)
	this->QDropEvent::acceptAction((bool)x[1].s_bool);
	(void)x; // noop (for compiler warning)
    }
    void x_14(Smoke::Stack x) {
	// acceptAction()
	this->QDropEvent::acceptAction();
	(void)x; // noop (for compiler warning)
    }
    void x_15(Smoke::Stack x) {
	// setAction(QDropEvent::Action)
	this->QDropEvent::setAction((QDropEvent::Action)x[1].s_enum);
	(void)x; // noop (for compiler warning)
    }
    void x_16(Smoke::Stack x) const {
	// action()
	QDropEvent::Action xret = this->QDropEvent::action();
	x[0].s_enum = xret;
    }
    void x_17(Smoke::Stack x) const {
	// source()
	QWidget* xret = this->QDropEvent::source();
	x[0].s_class = (void*)xret;
    }
    void x_18(Smoke::Stack x) const {
	// format(int)
	const char* xret = this->QDropEvent::format((int)x[1].s_int);
	x[0].s_voidp = (void*)xret;
    }
    void x_19(Smoke::Stack x) const {
	// format()
	const char* xret = this->QDropEvent::format();
	x[0].s_voidp = (void*)xret;
    }
    void x_20(Smoke::Stack x) const {
	// encodedData(const char*)
	QByteArray xret = this->QDropEvent::encodedData((const char*)x[1].s_voidp);
	x[0].s_voidp = (void*)new QByteArray(xret);
    }
    void x_21(Smoke::Stack x) const {
	// provides(const char*)
	bool xret = this->QDropEvent::provides((const char*)x[1].s_voidp);
	x[0].s_bool = xret;
    }
    void x_22(Smoke::Stack x) const {
	// data(const char*)
	QByteArray xret = this->QDropEvent::data((const char*)x[1].s_voidp);
	x[0].s_voidp = (void*)new QByteArray(xret);
    }
    void x_23(Smoke::Stack x) {
	// setPoint(const QPoint&)
	this->QDropEvent::setPoint(*(const QPoint *)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    static void x_24(Smoke::Stack x) {
	// QDropEvent(const QDropEvent&)
	x_QDropEvent* xret = new x_QDropEvent(*(const QDropEvent *)x[1].s_class);
	x[0].s_class = (void*)xret;
    }
    x_QDropEvent(const QDropEvent& x1) : QDropEvent(x1) {
    }
    virtual QByteArray encodedData(const char* x1) const {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(2847, (void*)this, x)) {
	    QByteArray *xptr = (QByteArray *)x[0].s_class;
	    QByteArray xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDropEvent::encodedData(x1);
    }
    virtual const char* format(int x1) const {
	Smoke::StackItem x[2];
	x[1].s_int = x1;
	if(qt_Smoke->binding->callMethod(2845, (void*)this, x)) return (const char*)x[0].s_class;
	return this->QDropEvent::format(x1);
    }
    virtual bool provides(const char* x1) const {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(2848, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDropEvent::provides(x1);
    }
    static void xenum_operation(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
	switch(xtype) {
	  case 202: //QDropEvent::Action
	    switch(xop) {
	      case Smoke::EnumNew:
		xdata = (void*)new QDropEvent::Action;
		break;
	      case Smoke::EnumDelete:
		delete (QDropEvent::Action*)xdata;
		break;
	      case Smoke::EnumFromLong:
		*(QDropEvent::Action*)xdata = (QDropEvent::Action)xvalue;
		break;
	      case Smoke::EnumToLong:
		xvalue = (long)*(QDropEvent::Action*)xdata;
		break;
	    }
	    break;
	}
    }
    ~x_QDropEvent() { qt_Smoke->binding->deleted(104, (void*)this); }
};
void xenum_QDropEvent(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
    x_QDropEvent::xenum_operation(xop, xtype, xdata, xvalue);
}
void xcall_QDropEvent(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QDropEvent *xself = (x_QDropEvent*)obj;
    switch(xi) {
	case 0: x_QDropEvent::x_0(args);	break;
	case 1: x_QDropEvent::x_1(args);	break;
	case 2: x_QDropEvent::x_2(args);	break;
	case 3: x_QDropEvent::x_3(args);	break;
	case 4: x_QDropEvent::x_4(args);	break;
	case 5: x_QDropEvent::x_5(args);	break;
	case 6: x_QDropEvent::x_6(args);	break;
	case 7: xself->x_7(args);	break;
	case 8: xself->x_8(args);	break;
	case 9: xself->x_9(args);	break;
	case 10: xself->x_10(args);	break;
	case 11: xself->x_11(args);	break;
	case 12: xself->x_12(args);	break;
	case 13: xself->x_13(args);	break;
	case 14: xself->x_14(args);	break;
	case 15: xself->x_15(args);	break;
	case 16: xself->x_16(args);	break;
	case 17: xself->x_17(args);	break;
	case 18: xself->x_18(args);	break;
	case 19: xself->x_19(args);	break;
	case 20: xself->x_20(args);	break;
	case 21: xself->x_21(args);	break;
	case 22: xself->x_22(args);	break;
	case 23: xself->x_23(args);	break;
	case 24: x_QDropEvent::x_24(args);	break;
	case 25: delete (QDropEvent*)xself;	break;
    }
}
