//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qfontmetrics.h>
#include <qstring.h>
#include <qfont.h>
#include <qrect.h>
#include <qsize.h>

class x_QFontMetrics : public QFontMetrics {
public:
    static void x_0(xargs *x) {
	// QFontMetrics(const QFont&)
	x_QFontMetrics* xret = new x_QFontMetrics(*(const QFont *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QFontMetrics(const QFont& x1) : QFontMetrics(x1) {
    }
    static void x_1(xargs *x) {
	// QFontMetrics(const QFontMetrics&)
	x_QFontMetrics* xret = new x_QFontMetrics(*(const QFontMetrics *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QFontMetrics(const QFontMetrics& x1) : QFontMetrics(x1) {
    }
    void x_2(xargs *x) {
	// operator=(const QFontMetrics&)
	QFontMetrics& xret = this->QFontMetrics::operator=(*(const QFontMetrics *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_3(xargs *x) const {
	// ascent()
	int xret = this->QFontMetrics::ascent();
	x[0].x_int = (int)xret;
    }
    void x_4(xargs *x) const {
	// descent()
	int xret = this->QFontMetrics::descent();
	x[0].x_int = (int)xret;
    }
    void x_5(xargs *x) const {
	// height()
	int xret = this->QFontMetrics::height();
	x[0].x_int = (int)xret;
    }
    void x_6(xargs *x) const {
	// leading()
	int xret = this->QFontMetrics::leading();
	x[0].x_int = (int)xret;
    }
    void x_7(xargs *x) const {
	// lineSpacing()
	int xret = this->QFontMetrics::lineSpacing();
	x[0].x_int = (int)xret;
    }
    void x_8(xargs *x) const {
	// minLeftBearing()
	int xret = this->QFontMetrics::minLeftBearing();
	x[0].x_int = (int)xret;
    }
    void x_9(xargs *x) const {
	// minRightBearing()
	int xret = this->QFontMetrics::minRightBearing();
	x[0].x_int = (int)xret;
    }
    void x_10(xargs *x) const {
	// maxWidth()
	int xret = this->QFontMetrics::maxWidth();
	x[0].x_int = (int)xret;
    }
    void x_11(xargs *x) const {
	// inFont(QChar)
	bool xret = this->QFontMetrics::inFont(*(QChar *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_12(xargs *x) const {
	// leftBearing(QChar)
	int xret = this->QFontMetrics::leftBearing(*(QChar *)x[1].x_voidp);
	x[0].x_int = (int)xret;
    }
    void x_13(xargs *x) const {
	// rightBearing(QChar)
	int xret = this->QFontMetrics::rightBearing(*(QChar *)x[1].x_voidp);
	x[0].x_int = (int)xret;
    }
    void x_14(xargs *x) const {
	// width(const QString&, int)
	int xret = this->QFontMetrics::width(*(const QString *)x[1].x_voidp,(int)x[2].x_int);
	x[0].x_int = (int)xret;
    }
    void x_15(xargs *x) const {
	// width(const QString&)
	int xret = this->QFontMetrics::width(*(const QString *)x[1].x_voidp);
	x[0].x_int = (int)xret;
    }
    void x_16(xargs *x) const {
	// width(QChar)
	int xret = this->QFontMetrics::width(*(QChar *)x[1].x_voidp);
	x[0].x_int = (int)xret;
    }
    void x_17(xargs *x) const {
	// width(char)
	int xret = this->QFontMetrics::width((char)x[1].x_char);
	x[0].x_int = (int)xret;
    }
    void x_18(xargs *x) const {
	// charWidth(const QString&, int)
	int xret = this->QFontMetrics::charWidth(*(const QString *)x[1].x_voidp,(int)x[2].x_int);
	x[0].x_int = (int)xret;
    }
    void x_19(xargs *x) const {
	// boundingRect(const QString&, int)
	QRect xret = this->QFontMetrics::boundingRect(*(const QString *)x[1].x_voidp,(int)x[2].x_int);
	x[0].x_voidp = (void*)new QRect(xret);
    }
    void x_20(xargs *x) const {
	// boundingRect(const QString&)
	QRect xret = this->QFontMetrics::boundingRect(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QRect(xret);
    }
    void x_21(xargs *x) const {
	// boundingRect(QChar)
	QRect xret = this->QFontMetrics::boundingRect(*(QChar *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QRect(xret);
    }
    void x_22(xargs *x) const {
	// boundingRect(int, int, int, int, int, const QString&, int, int, int*, QTextParag**)
	QRect xret = this->QFontMetrics::boundingRect((int)x[1].x_int,(int)x[2].x_int,(int)x[3].x_int,(int)x[4].x_int,(int)x[5].x_int,*(const QString *)x[6].x_voidp,(int)x[7].x_int,(int)x[8].x_int,(int*)x[9].x_voidp,(QTextParag**)x[10].x_voidp);
	x[0].x_voidp = (void*)new QRect(xret);
    }
    void x_23(xargs *x) const {
	// boundingRect(int, int, int, int, int, const QString&, int, int, int*)
	QRect xret = this->QFontMetrics::boundingRect((int)x[1].x_int,(int)x[2].x_int,(int)x[3].x_int,(int)x[4].x_int,(int)x[5].x_int,*(const QString *)x[6].x_voidp,(int)x[7].x_int,(int)x[8].x_int,(int*)x[9].x_voidp);
	x[0].x_voidp = (void*)new QRect(xret);
    }
    void x_24(xargs *x) const {
	// boundingRect(int, int, int, int, int, const QString&, int, int)
	QRect xret = this->QFontMetrics::boundingRect((int)x[1].x_int,(int)x[2].x_int,(int)x[3].x_int,(int)x[4].x_int,(int)x[5].x_int,*(const QString *)x[6].x_voidp,(int)x[7].x_int,(int)x[8].x_int);
	x[0].x_voidp = (void*)new QRect(xret);
    }
    void x_25(xargs *x) const {
	// boundingRect(int, int, int, int, int, const QString&, int)
	QRect xret = this->QFontMetrics::boundingRect((int)x[1].x_int,(int)x[2].x_int,(int)x[3].x_int,(int)x[4].x_int,(int)x[5].x_int,*(const QString *)x[6].x_voidp,(int)x[7].x_int);
	x[0].x_voidp = (void*)new QRect(xret);
    }
    void x_26(xargs *x) const {
	// boundingRect(int, int, int, int, int, const QString&)
	QRect xret = this->QFontMetrics::boundingRect((int)x[1].x_int,(int)x[2].x_int,(int)x[3].x_int,(int)x[4].x_int,(int)x[5].x_int,*(const QString *)x[6].x_voidp);
	x[0].x_voidp = (void*)new QRect(xret);
    }
    void x_27(xargs *x) const {
	// size(int, const QString&, int, int, int*, QTextParag**)
	QSize xret = this->QFontMetrics::size((int)x[1].x_int,*(const QString *)x[2].x_voidp,(int)x[3].x_int,(int)x[4].x_int,(int*)x[5].x_voidp,(QTextParag**)x[6].x_voidp);
	x[0].x_voidp = (void*)new QSize(xret);
    }
    void x_28(xargs *x) const {
	// size(int, const QString&, int, int, int*)
	QSize xret = this->QFontMetrics::size((int)x[1].x_int,*(const QString *)x[2].x_voidp,(int)x[3].x_int,(int)x[4].x_int,(int*)x[5].x_voidp);
	x[0].x_voidp = (void*)new QSize(xret);
    }
    void x_29(xargs *x) const {
	// size(int, const QString&, int, int)
	QSize xret = this->QFontMetrics::size((int)x[1].x_int,*(const QString *)x[2].x_voidp,(int)x[3].x_int,(int)x[4].x_int);
	x[0].x_voidp = (void*)new QSize(xret);
    }
    void x_30(xargs *x) const {
	// size(int, const QString&, int)
	QSize xret = this->QFontMetrics::size((int)x[1].x_int,*(const QString *)x[2].x_voidp,(int)x[3].x_int);
	x[0].x_voidp = (void*)new QSize(xret);
    }
    void x_31(xargs *x) const {
	// size(int, const QString&)
	QSize xret = this->QFontMetrics::size((int)x[1].x_int,*(const QString *)x[2].x_voidp);
	x[0].x_voidp = (void*)new QSize(xret);
    }
    void x_32(xargs *x) const {
	// underlinePos()
	int xret = this->QFontMetrics::underlinePos();
	x[0].x_int = (int)xret;
    }
    void x_33(xargs *x) const {
	// strikeOutPos()
	int xret = this->QFontMetrics::strikeOutPos();
	x[0].x_int = (int)xret;
    }
    void x_34(xargs *x) const {
	// lineWidth()
	int xret = this->QFontMetrics::lineWidth();
	x[0].x_int = (int)xret;
    }
    ~x_QFontMetrics() {}
};
void xcall_QFontMetrics(xargs *x, void *s, int xi) {
    x_QFontMetrics *xself = (x_QFontMetrics*)s;
    switch(xi) {
	case 0: x_QFontMetrics::x_0(x);	break;
	case 1: x_QFontMetrics::x_1(x);	break;
	case 2: xself->x_2(x);	break;
	case 3: xself->x_3(x);	break;
	case 4: xself->x_4(x);	break;
	case 5: xself->x_5(x);	break;
	case 6: xself->x_6(x);	break;
	case 7: xself->x_7(x);	break;
	case 8: xself->x_8(x);	break;
	case 9: xself->x_9(x);	break;
	case 10: xself->x_10(x);	break;
	case 11: xself->x_11(x);	break;
	case 12: xself->x_12(x);	break;
	case 13: xself->x_13(x);	break;
	case 14: xself->x_14(x);	break;
	case 15: xself->x_15(x);	break;
	case 16: xself->x_16(x);	break;
	case 17: xself->x_17(x);	break;
	case 18: xself->x_18(x);	break;
	case 19: xself->x_19(x);	break;
	case 20: xself->x_20(x);	break;
	case 21: xself->x_21(x);	break;
	case 22: xself->x_22(x);	break;
	case 23: xself->x_23(x);	break;
	case 24: xself->x_24(x);	break;
	case 25: xself->x_25(x);	break;
	case 26: xself->x_26(x);	break;
	case 27: xself->x_27(x);	break;
	case 28: xself->x_28(x);	break;
	case 29: xself->x_29(x);	break;
	case 30: xself->x_30(x);	break;
	case 31: xself->x_31(x);	break;
	case 32: xself->x_32(x);	break;
	case 33: xself->x_33(x);	break;
	case 34: xself->x_34(x);	break;
	case 35: delete (QFontMetrics*)xself;	break;
    }
}
