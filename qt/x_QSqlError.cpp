//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qstring.h>
#include <qsqlerror.h>

class x_QSqlError : public QSqlError {
public:
    static void x_0(xargs *x) {
	x[0].x_long = (long)QSqlError::None;
    }
    static void x_1(xargs *x) {
	x[0].x_long = (long)QSqlError::Connection;
    }
    static void x_2(xargs *x) {
	x[0].x_long = (long)QSqlError::Statement;
    }
    static void x_3(xargs *x) {
	x[0].x_long = (long)QSqlError::Transaction;
    }
    static void x_4(xargs *x) {
	x[0].x_long = (long)QSqlError::Unknown;
    }
    static void x_5(xargs *x) {
	// QSqlError(const QString&, const QString&, int, int)
	x_QSqlError* xret = new x_QSqlError(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp,(int)x[3].x_int,(int)x[4].x_int);
	x[0].x_voidp = (void*)xret;
    }
    x_QSqlError(const QString& x1, const QString& x2, int x3, int x4) : QSqlError(x1, x2, x3, x4) {
    }
    static void x_6(xargs *x) {
	// QSqlError(const QString&, const QString&, int)
	x_QSqlError* xret = new x_QSqlError(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp,(int)x[3].x_int);
	x[0].x_voidp = (void*)xret;
    }
    x_QSqlError(const QString& x1, const QString& x2, int x3) : QSqlError(x1, x2, x3) {
    }
    static void x_7(xargs *x) {
	// QSqlError(const QString&, const QString&)
	x_QSqlError* xret = new x_QSqlError(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QSqlError(const QString& x1, const QString& x2) : QSqlError(x1, x2) {
    }
    static void x_8(xargs *x) {
	// QSqlError(const QString&)
	x_QSqlError* xret = new x_QSqlError(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QSqlError(const QString& x1) : QSqlError(x1) {
    }
    static void x_9(xargs *x) {
	// QSqlError()
	x_QSqlError* xret = new x_QSqlError();
	x[0].x_voidp = (void*)xret;
    }
    x_QSqlError() : QSqlError() {
    }
    static void x_10(xargs *x) {
	// QSqlError(const QSqlError&)
	x_QSqlError* xret = new x_QSqlError(*(const QSqlError *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QSqlError(const QSqlError& x1) : QSqlError(x1) {
    }
    void x_11(xargs *x) {
	// operator=(const QSqlError&)
	QSqlError& xret = this->QSqlError::operator=(*(const QSqlError *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_12(xargs *x) const {
	// driverText()
	QString xret = this->QSqlError::driverText();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_13(xargs *x) {
	// setDriverText(const QString&)
	this->QSqlError::setDriverText(*(const QString *)x[1].x_voidp);
    }
    void x_14(xargs *x) const {
	// databaseText()
	QString xret = this->QSqlError::databaseText();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_15(xargs *x) {
	// setDatabaseText(const QString&)
	this->QSqlError::setDatabaseText(*(const QString *)x[1].x_voidp);
    }
    void x_16(xargs *x) const {
	// type()
	int xret = this->QSqlError::type();
	x[0].x_int = (int)xret;
    }
    void x_17(xargs *x) {
	// setType(int)
	this->QSqlError::setType((int)x[1].x_int);
    }
    void x_18(xargs *x) const {
	// number()
	int xret = this->QSqlError::number();
	x[0].x_int = (int)xret;
    }
    void x_19(xargs *x) {
	// setNumber(int)
	this->QSqlError::setNumber((int)x[1].x_int);
    }
    virtual void setDatabaseText(const QString& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 7408, x)) return;
	this->QSqlError::setDatabaseText(x1);
    }
    virtual void setDriverText(const QString& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 7406, x)) return;
	this->QSqlError::setDriverText(x1);
    }
    virtual void setNumber(int x1) {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 7412, x)) return;
	this->QSqlError::setNumber(x1);
    }
    virtual void setType(int x1) {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 7410, x)) return;
	this->QSqlError::setType(x1);
    }
    ~x_QSqlError() {}
};
void xcall_QSqlError(xargs *x, void *s, int xi) {
    x_QSqlError *xself = (x_QSqlError*)s;
    switch(xi) {
	case 0: x_QSqlError::x_0(x);	break;
	case 1: x_QSqlError::x_1(x);	break;
	case 2: x_QSqlError::x_2(x);	break;
	case 3: x_QSqlError::x_3(x);	break;
	case 4: x_QSqlError::x_4(x);	break;
	case 5: x_QSqlError::x_5(x);	break;
	case 6: x_QSqlError::x_6(x);	break;
	case 7: x_QSqlError::x_7(x);	break;
	case 8: x_QSqlError::x_8(x);	break;
	case 9: x_QSqlError::x_9(x);	break;
	case 10: x_QSqlError::x_10(x);	break;
	case 11: xself->x_11(x);	break;
	case 12: xself->x_12(x);	break;
	case 13: xself->x_13(x);	break;
	case 14: xself->x_14(x);	break;
	case 15: xself->x_15(x);	break;
	case 16: xself->x_16(x);	break;
	case 17: xself->x_17(x);	break;
	case 18: xself->x_18(x);	break;
	case 19: xself->x_19(x);	break;
	case 20: delete (QSqlError*)xself;	break;
    }
}
