//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qdir.h>
#include <qstring.h>
#include <qstrlist.h>
#include <qstringlist.h>

class x_QDir : public QDir {
public:
    static void x_0(xargs *x) {
	x[0].x_long = (long)QDir::Dirs;
    }
    static void x_1(xargs *x) {
	x[0].x_long = (long)QDir::Files;
    }
    static void x_2(xargs *x) {
	x[0].x_long = (long)QDir::Drives;
    }
    static void x_3(xargs *x) {
	x[0].x_long = (long)QDir::NoSymLinks;
    }
    static void x_4(xargs *x) {
	x[0].x_long = (long)QDir::All;
    }
    static void x_5(xargs *x) {
	x[0].x_long = (long)QDir::TypeMask;
    }
    static void x_6(xargs *x) {
	x[0].x_long = (long)QDir::Readable;
    }
    static void x_7(xargs *x) {
	x[0].x_long = (long)QDir::Writable;
    }
    static void x_8(xargs *x) {
	x[0].x_long = (long)QDir::Executable;
    }
    static void x_9(xargs *x) {
	x[0].x_long = (long)QDir::RWEMask;
    }
    static void x_10(xargs *x) {
	x[0].x_long = (long)QDir::Modified;
    }
    static void x_11(xargs *x) {
	x[0].x_long = (long)QDir::Hidden;
    }
    static void x_12(xargs *x) {
	x[0].x_long = (long)QDir::System;
    }
    static void x_13(xargs *x) {
	x[0].x_long = (long)QDir::AccessMask;
    }
    static void x_14(xargs *x) {
	x[0].x_long = (long)QDir::DefaultFilter;
    }
    static void x_15(xargs *x) {
	x[0].x_long = (long)QDir::Name;
    }
    static void x_16(xargs *x) {
	x[0].x_long = (long)QDir::Time;
    }
    static void x_17(xargs *x) {
	x[0].x_long = (long)QDir::Size;
    }
    static void x_18(xargs *x) {
	x[0].x_long = (long)QDir::Unsorted;
    }
    static void x_19(xargs *x) {
	x[0].x_long = (long)QDir::SortByMask;
    }
    static void x_20(xargs *x) {
	x[0].x_long = (long)QDir::DirsFirst;
    }
    static void x_21(xargs *x) {
	x[0].x_long = (long)QDir::Reversed;
    }
    static void x_22(xargs *x) {
	x[0].x_long = (long)QDir::IgnoreCase;
    }
    static void x_23(xargs *x) {
	x[0].x_long = (long)QDir::DefaultSort;
    }
    static void x_24(xargs *x) {
	// QDir()
	x_QDir* xret = new x_QDir();
	x[0].x_voidp = (void*)xret;
    }
    x_QDir() : QDir() {
    }
    static void x_25(xargs *x) {
	// QDir(const QString&, const QString&, int, int)
	x_QDir* xret = new x_QDir(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp,(int)x[3].x_int,(int)x[4].x_int);
	x[0].x_voidp = (void*)xret;
    }
    x_QDir(const QString& x1, const QString& x2, int x3, int x4) : QDir(x1, x2, x3, x4) {
    }
    static void x_26(xargs *x) {
	// QDir(const QString&, const QString&, int)
	x_QDir* xret = new x_QDir(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp,(int)x[3].x_int);
	x[0].x_voidp = (void*)xret;
    }
    x_QDir(const QString& x1, const QString& x2, int x3) : QDir(x1, x2, x3) {
    }
    static void x_27(xargs *x) {
	// QDir(const QString&, const QString&)
	x_QDir* xret = new x_QDir(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QDir(const QString& x1, const QString& x2) : QDir(x1, x2) {
    }
    static void x_28(xargs *x) {
	// QDir(const QString&)
	x_QDir* xret = new x_QDir(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QDir(const QString& x1) : QDir(x1) {
    }
    static void x_29(xargs *x) {
	// QDir(const QDir&)
	x_QDir* xret = new x_QDir(*(const QDir *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QDir(const QDir& x1) : QDir(x1) {
    }
    void x_30(xargs *x) {
	// operator=(const QDir&)
	QDir& xret = this->QDir::operator=(*(const QDir *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_31(xargs *x) {
	// operator=(const QString&)
	QDir& xret = this->QDir::operator=(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_32(xargs *x) {
	// setPath(const QString&)
	this->QDir::setPath(*(const QString *)x[1].x_voidp);
    }
    void x_33(xargs *x) const {
	// path()
	QString xret = this->QDir::path();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_34(xargs *x) const {
	// absPath()
	QString xret = this->QDir::absPath();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_35(xargs *x) const {
	// canonicalPath()
	QString xret = this->QDir::canonicalPath();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_36(xargs *x) const {
	// dirName()
	QString xret = this->QDir::dirName();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_37(xargs *x) const {
	// filePath(const QString&, bool)
	QString xret = this->QDir::filePath(*(const QString *)x[1].x_voidp,(bool)x[2].x_bool);
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_38(xargs *x) const {
	// filePath(const QString&)
	QString xret = this->QDir::filePath(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_39(xargs *x) const {
	// absFilePath(const QString&, bool)
	QString xret = this->QDir::absFilePath(*(const QString *)x[1].x_voidp,(bool)x[2].x_bool);
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_40(xargs *x) const {
	// absFilePath(const QString&)
	QString xret = this->QDir::absFilePath(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_41(xargs *x) {
	// cd(const QString&, bool)
	bool xret = this->QDir::cd(*(const QString *)x[1].x_voidp,(bool)x[2].x_bool);
	x[0].x_bool = (bool)xret;
    }
    void x_42(xargs *x) {
	// cd(const QString&)
	bool xret = this->QDir::cd(*(const QString *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_43(xargs *x) {
	// cdUp()
	bool xret = this->QDir::cdUp();
	x[0].x_bool = (bool)xret;
    }
    void x_44(xargs *x) const {
	// nameFilter()
	QString xret = this->QDir::nameFilter();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_45(xargs *x) {
	// setNameFilter(const QString&)
	this->QDir::setNameFilter(*(const QString *)x[1].x_voidp);
    }
    void x_46(xargs *x) const {
	// filter()
	QDir::FilterSpec xret = this->QDir::filter();
	x[0].x_long = (long)xret;
    }
    void x_47(xargs *x) {
	// setFilter(int)
	this->QDir::setFilter((int)x[1].x_int);
    }
    void x_48(xargs *x) const {
	// sorting()
	QDir::SortSpec xret = this->QDir::sorting();
	x[0].x_long = (long)xret;
    }
    void x_49(xargs *x) {
	// setSorting(int)
	this->QDir::setSorting((int)x[1].x_int);
    }
    void x_50(xargs *x) const {
	// matchAllDirs()
	bool xret = this->QDir::matchAllDirs();
	x[0].x_bool = (bool)xret;
    }
    void x_51(xargs *x) {
	// setMatchAllDirs(bool)
	this->QDir::setMatchAllDirs((bool)x[1].x_bool);
    }
    void x_52(xargs *x) const {
	// count()
	uint xret = this->QDir::count();
	x[0].x_uint = (uint)xret;
    }
    void x_53(xargs *x) const {
	// operator[](int)
	QString xret = this->QDir::operator[]((int)x[1].x_int);
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_54(xargs *x) const {
	// encodedEntryList(int, int)
	QStrList xret = this->QDir::encodedEntryList((int)x[1].x_int,(int)x[2].x_int);
	x[0].x_voidp = (void*)new QStrList(xret);
    }
    void x_55(xargs *x) const {
	// encodedEntryList(int)
	QStrList xret = this->QDir::encodedEntryList((int)x[1].x_int);
	x[0].x_voidp = (void*)new QStrList(xret);
    }
    void x_56(xargs *x) const {
	// encodedEntryList()
	QStrList xret = this->QDir::encodedEntryList();
	x[0].x_voidp = (void*)new QStrList(xret);
    }
    void x_57(xargs *x) const {
	// encodedEntryList(const QString&, int, int)
	QStrList xret = this->QDir::encodedEntryList(*(const QString *)x[1].x_voidp,(int)x[2].x_int,(int)x[3].x_int);
	x[0].x_voidp = (void*)new QStrList(xret);
    }
    void x_58(xargs *x) const {
	// encodedEntryList(const QString&, int)
	QStrList xret = this->QDir::encodedEntryList(*(const QString *)x[1].x_voidp,(int)x[2].x_int);
	x[0].x_voidp = (void*)new QStrList(xret);
    }
    void x_59(xargs *x) const {
	// encodedEntryList(const QString&)
	QStrList xret = this->QDir::encodedEntryList(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QStrList(xret);
    }
    void x_60(xargs *x) const {
	// entryList(int, int)
	QStringList xret = this->QDir::entryList((int)x[1].x_int,(int)x[2].x_int);
	x[0].x_voidp = (void*)new QStringList(xret);
    }
    void x_61(xargs *x) const {
	// entryList(int)
	QStringList xret = this->QDir::entryList((int)x[1].x_int);
	x[0].x_voidp = (void*)new QStringList(xret);
    }
    void x_62(xargs *x) const {
	// entryList()
	QStringList xret = this->QDir::entryList();
	x[0].x_voidp = (void*)new QStringList(xret);
    }
    void x_63(xargs *x) const {
	// entryList(const QString&, int, int)
	QStringList xret = this->QDir::entryList(*(const QString *)x[1].x_voidp,(int)x[2].x_int,(int)x[3].x_int);
	x[0].x_voidp = (void*)new QStringList(xret);
    }
    void x_64(xargs *x) const {
	// entryList(const QString&, int)
	QStringList xret = this->QDir::entryList(*(const QString *)x[1].x_voidp,(int)x[2].x_int);
	x[0].x_voidp = (void*)new QStringList(xret);
    }
    void x_65(xargs *x) const {
	// entryList(const QString&)
	QStringList xret = this->QDir::entryList(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QStringList(xret);
    }
    void x_66(xargs *x) const {
	// entryInfoList(int, int)
	const QFileInfoList* xret = this->QDir::entryInfoList((int)x[1].x_int,(int)x[2].x_int);
	x[0].x_voidp = (void*)xret;
    }
    void x_67(xargs *x) const {
	// entryInfoList(int)
	const QFileInfoList* xret = this->QDir::entryInfoList((int)x[1].x_int);
	x[0].x_voidp = (void*)xret;
    }
    void x_68(xargs *x) const {
	// entryInfoList()
	const QFileInfoList* xret = this->QDir::entryInfoList();
	x[0].x_voidp = (void*)xret;
    }
    void x_69(xargs *x) const {
	// entryInfoList(const QString&, int, int)
	const QFileInfoList* xret = this->QDir::entryInfoList(*(const QString *)x[1].x_voidp,(int)x[2].x_int,(int)x[3].x_int);
	x[0].x_voidp = (void*)xret;
    }
    void x_70(xargs *x) const {
	// entryInfoList(const QString&, int)
	const QFileInfoList* xret = this->QDir::entryInfoList(*(const QString *)x[1].x_voidp,(int)x[2].x_int);
	x[0].x_voidp = (void*)xret;
    }
    void x_71(xargs *x) const {
	// entryInfoList(const QString&)
	const QFileInfoList* xret = this->QDir::entryInfoList(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    void x_72(xargs *x) const {
	// mkdir(const QString&, bool)
	bool xret = this->QDir::mkdir(*(const QString *)x[1].x_voidp,(bool)x[2].x_bool);
	x[0].x_bool = (bool)xret;
    }
    void x_73(xargs *x) const {
	// mkdir(const QString&)
	bool xret = this->QDir::mkdir(*(const QString *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_74(xargs *x) const {
	// rmdir(const QString&, bool)
	bool xret = this->QDir::rmdir(*(const QString *)x[1].x_voidp,(bool)x[2].x_bool);
	x[0].x_bool = (bool)xret;
    }
    void x_75(xargs *x) const {
	// rmdir(const QString&)
	bool xret = this->QDir::rmdir(*(const QString *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_76(xargs *x) const {
	// isReadable()
	bool xret = this->QDir::isReadable();
	x[0].x_bool = (bool)xret;
    }
    void x_77(xargs *x) const {
	// exists()
	bool xret = this->QDir::exists();
	x[0].x_bool = (bool)xret;
    }
    void x_78(xargs *x) const {
	// isRoot()
	bool xret = this->QDir::isRoot();
	x[0].x_bool = (bool)xret;
    }
    void x_79(xargs *x) const {
	// isRelative()
	bool xret = this->QDir::isRelative();
	x[0].x_bool = (bool)xret;
    }
    void x_80(xargs *x) {
	// convertToAbs()
	this->QDir::convertToAbs();
    }
    void x_81(xargs *x) const {
	// operator==(const QDir&)
	bool xret = this->QDir::operator==(*(const QDir *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_82(xargs *x) const {
	// operator!=(const QDir&)
	bool xret = this->QDir::operator!=(*(const QDir *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_83(xargs *x) {
	// remove(const QString&, bool)
	bool xret = this->QDir::remove(*(const QString *)x[1].x_voidp,(bool)x[2].x_bool);
	x[0].x_bool = (bool)xret;
    }
    void x_84(xargs *x) {
	// remove(const QString&)
	bool xret = this->QDir::remove(*(const QString *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_85(xargs *x) {
	// rename(const QString&, const QString&, bool)
	bool xret = this->QDir::rename(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp,(bool)x[3].x_bool);
	x[0].x_bool = (bool)xret;
    }
    void x_86(xargs *x) {
	// rename(const QString&, const QString&)
	bool xret = this->QDir::rename(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_87(xargs *x) {
	// exists(const QString&, bool)
	bool xret = this->QDir::exists(*(const QString *)x[1].x_voidp,(bool)x[2].x_bool);
	x[0].x_bool = (bool)xret;
    }
    void x_88(xargs *x) {
	// exists(const QString&)
	bool xret = this->QDir::exists(*(const QString *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    static void x_89(xargs *x) {
	// convertSeparators(const QString&)
	QString xret = QDir::convertSeparators(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QString(xret);
    }
    static void x_90(xargs *x) {
	// drives()
	const QFileInfoList* xret = QDir::drives();
	x[0].x_voidp = (void*)xret;
    }
    static void x_91(xargs *x) {
	// separator()
	char xret = QDir::separator();
	x[0].x_char = (char)xret;
    }
    static void x_92(xargs *x) {
	// setCurrent(const QString&)
	bool xret = QDir::setCurrent(*(const QString *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    static void x_93(xargs *x) {
	// current()
	QDir xret = QDir::current();
	x[0].x_voidp = (void*)new QDir(xret);
    }
    static void x_94(xargs *x) {
	// home()
	QDir xret = QDir::home();
	x[0].x_voidp = (void*)new QDir(xret);
    }
    static void x_95(xargs *x) {
	// root()
	QDir xret = QDir::root();
	x[0].x_voidp = (void*)new QDir(xret);
    }
    static void x_96(xargs *x) {
	// currentDirPath()
	QString xret = QDir::currentDirPath();
	x[0].x_voidp = (void*)new QString(xret);
    }
    static void x_97(xargs *x) {
	// homeDirPath()
	QString xret = QDir::homeDirPath();
	x[0].x_voidp = (void*)new QString(xret);
    }
    static void x_98(xargs *x) {
	// rootDirPath()
	QString xret = QDir::rootDirPath();
	x[0].x_voidp = (void*)new QString(xret);
    }
    static void x_99(xargs *x) {
	// match(const QStringList&, const QString&)
	bool xret = QDir::match(*(const QStringList *)x[1].x_voidp,*(const QString *)x[2].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    static void x_100(xargs *x) {
	// match(const QString&, const QString&)
	bool xret = QDir::match(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    static void x_101(xargs *x) {
	// cleanDirPath(const QString&)
	QString xret = QDir::cleanDirPath(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QString(xret);
    }
    static void x_102(xargs *x) {
	// isRelativePath(const QString&)
	bool xret = QDir::isRelativePath(*(const QString *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    virtual QString absFilePath(const QString& x1, bool x2) const {
	xargs x[3];
	x[1].x_voidp = (void*)&x1;
	x[2].x_bool = (bool)x2;
	if(call_method((void*)this, 1768, x)) {
	    QString *xptr = (QString *)x[0].x_voidp;
	    QString xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDir::absFilePath(x1, x2);
    }
    virtual QString absPath() const {
	xargs x[1];
	if(call_method((void*)this, 1763, x)) {
	    QString *xptr = (QString *)x[0].x_voidp;
	    QString xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDir::absPath();
    }
    virtual QString canonicalPath() const {
	xargs x[1];
	if(call_method((void*)this, 1764, x)) {
	    QString *xptr = (QString *)x[0].x_voidp;
	    QString xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDir::canonicalPath();
    }
    virtual bool cd(const QString& x1, bool x2) {
	xargs x[3];
	x[1].x_voidp = (void*)&x1;
	x[2].x_bool = (bool)x2;
	if(call_method((void*)this, 1770, x)) return (bool)x[0].x_bool;
	return this->QDir::cd(x1, x2);
    }
    virtual bool cdUp() {
	xargs x[1];
	if(call_method((void*)this, 1772, x)) return (bool)x[0].x_bool;
	return this->QDir::cdUp();
    }
    virtual void convertToAbs() {
	xargs x[1];
	if(call_method((void*)this, 1809, x)) return;
	this->QDir::convertToAbs();
    }
    virtual QString dirName() const {
	xargs x[1];
	if(call_method((void*)this, 1765, x)) {
	    QString *xptr = (QString *)x[0].x_voidp;
	    QString xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDir::dirName();
    }
    virtual QStrList encodedEntryList(const QString& x1, int x2, int x3) const {
	xargs x[4];
	x[1].x_voidp = (void*)&x1;
	x[2].x_int = (int)x2;
	x[3].x_int = (int)x3;
	if(call_method((void*)this, 1786, x)) {
	    QStrList *xptr = (QStrList *)x[0].x_voidp;
	    QStrList xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDir::encodedEntryList(x1, x2, x3);
    }
    virtual QStrList encodedEntryList(int x1, int x2) const {
	xargs x[3];
	x[1].x_int = (int)x1;
	x[2].x_int = (int)x2;
	if(call_method((void*)this, 1783, x)) {
	    QStrList *xptr = (QStrList *)x[0].x_voidp;
	    QStrList xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDir::encodedEntryList(x1, x2);
    }
    virtual const QFileInfoList* entryInfoList(const QString& x1, int x2, int x3) const {
	xargs x[4];
	x[1].x_voidp = (void*)&x1;
	x[2].x_int = (int)x2;
	x[3].x_int = (int)x3;
	if(call_method((void*)this, 1798, x)) 	return (const QFileInfoList*)x[0].x_voidp;
	return this->QDir::entryInfoList(x1, x2, x3);
    }
    virtual const QFileInfoList* entryInfoList(int x1, int x2) const {
	xargs x[3];
	x[1].x_int = (int)x1;
	x[2].x_int = (int)x2;
	if(call_method((void*)this, 1795, x)) 	return (const QFileInfoList*)x[0].x_voidp;
	return this->QDir::entryInfoList(x1, x2);
    }
    virtual QStringList entryList(const QString& x1, int x2, int x3) const {
	xargs x[4];
	x[1].x_voidp = (void*)&x1;
	x[2].x_int = (int)x2;
	x[3].x_int = (int)x3;
	if(call_method((void*)this, 1792, x)) {
	    QStringList *xptr = (QStringList *)x[0].x_voidp;
	    QStringList xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDir::entryList(x1, x2, x3);
    }
    virtual QStringList entryList(int x1, int x2) const {
	xargs x[3];
	x[1].x_int = (int)x1;
	x[2].x_int = (int)x2;
	if(call_method((void*)this, 1789, x)) {
	    QStringList *xptr = (QStringList *)x[0].x_voidp;
	    QStringList xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDir::entryList(x1, x2);
    }
    virtual bool exists() const {
	xargs x[1];
	if(call_method((void*)this, 1806, x)) return (bool)x[0].x_bool;
	return this->QDir::exists();
    }
    virtual bool exists(const QString& x1, bool x2) {
	xargs x[3];
	x[1].x_voidp = (void*)&x1;
	x[2].x_bool = (bool)x2;
	if(call_method((void*)this, 1816, x)) return (bool)x[0].x_bool;
	return this->QDir::exists(x1, x2);
    }
    virtual QString filePath(const QString& x1, bool x2) const {
	xargs x[3];
	x[1].x_voidp = (void*)&x1;
	x[2].x_bool = (bool)x2;
	if(call_method((void*)this, 1766, x)) {
	    QString *xptr = (QString *)x[0].x_voidp;
	    QString xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDir::filePath(x1, x2);
    }
    virtual bool isReadable() const {
	xargs x[1];
	if(call_method((void*)this, 1805, x)) return (bool)x[0].x_bool;
	return this->QDir::isReadable();
    }
    virtual bool isRelative() const {
	xargs x[1];
	if(call_method((void*)this, 1808, x)) return (bool)x[0].x_bool;
	return this->QDir::isRelative();
    }
    virtual bool isRoot() const {
	xargs x[1];
	if(call_method((void*)this, 1807, x)) return (bool)x[0].x_bool;
	return this->QDir::isRoot();
    }
    virtual bool mkdir(const QString& x1, bool x2) const {
	xargs x[3];
	x[1].x_voidp = (void*)&x1;
	x[2].x_bool = (bool)x2;
	if(call_method((void*)this, 1801, x)) return (bool)x[0].x_bool;
	return this->QDir::mkdir(x1, x2);
    }
    virtual bool operator!=(const QDir& x1) const {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 1811, x)) return (bool)x[0].x_bool;
	return this->QDir::operator!=(x1);
    }
    virtual bool operator==(const QDir& x1) const {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 1810, x)) return (bool)x[0].x_bool;
	return this->QDir::operator==(x1);
    }
    virtual QString path() const {
	xargs x[1];
	if(call_method((void*)this, 1762, x)) {
	    QString *xptr = (QString *)x[0].x_voidp;
	    QString xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDir::path();
    }
    virtual bool remove(const QString& x1, bool x2) {
	xargs x[3];
	x[1].x_voidp = (void*)&x1;
	x[2].x_bool = (bool)x2;
	if(call_method((void*)this, 1812, x)) return (bool)x[0].x_bool;
	return this->QDir::remove(x1, x2);
    }
    virtual bool rename(const QString& x1, const QString& x2, bool x3) {
	xargs x[4];
	x[1].x_voidp = (void*)&x1;
	x[2].x_voidp = (void*)&x2;
	x[3].x_bool = (bool)x3;
	if(call_method((void*)this, 1814, x)) return (bool)x[0].x_bool;
	return this->QDir::rename(x1, x2, x3);
    }
    virtual bool rmdir(const QString& x1, bool x2) const {
	xargs x[3];
	x[1].x_voidp = (void*)&x1;
	x[2].x_bool = (bool)x2;
	if(call_method((void*)this, 1803, x)) return (bool)x[0].x_bool;
	return this->QDir::rmdir(x1, x2);
    }
    virtual void setFilter(int x1) {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 1776, x)) return;
	this->QDir::setFilter(x1);
    }
    virtual void setMatchAllDirs(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 1780, x)) return;
	this->QDir::setMatchAllDirs(x1);
    }
    virtual void setNameFilter(const QString& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 1774, x)) return;
	this->QDir::setNameFilter(x1);
    }
    virtual void setPath(const QString& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 1761, x)) return;
	this->QDir::setPath(x1);
    }
    virtual void setSorting(int x1) {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 1778, x)) return;
	this->QDir::setSorting(x1);
    }
    ~x_QDir() {}
};
void xcall_QDir(xargs *x, void *s, int xi) {
    x_QDir *xself = (x_QDir*)s;
    switch(xi) {
	case 0: x_QDir::x_0(x);	break;
	case 1: x_QDir::x_1(x);	break;
	case 2: x_QDir::x_2(x);	break;
	case 3: x_QDir::x_3(x);	break;
	case 4: x_QDir::x_4(x);	break;
	case 5: x_QDir::x_5(x);	break;
	case 6: x_QDir::x_6(x);	break;
	case 7: x_QDir::x_7(x);	break;
	case 8: x_QDir::x_8(x);	break;
	case 9: x_QDir::x_9(x);	break;
	case 10: x_QDir::x_10(x);	break;
	case 11: x_QDir::x_11(x);	break;
	case 12: x_QDir::x_12(x);	break;
	case 13: x_QDir::x_13(x);	break;
	case 14: x_QDir::x_14(x);	break;
	case 15: x_QDir::x_15(x);	break;
	case 16: x_QDir::x_16(x);	break;
	case 17: x_QDir::x_17(x);	break;
	case 18: x_QDir::x_18(x);	break;
	case 19: x_QDir::x_19(x);	break;
	case 20: x_QDir::x_20(x);	break;
	case 21: x_QDir::x_21(x);	break;
	case 22: x_QDir::x_22(x);	break;
	case 23: x_QDir::x_23(x);	break;
	case 24: x_QDir::x_24(x);	break;
	case 25: x_QDir::x_25(x);	break;
	case 26: x_QDir::x_26(x);	break;
	case 27: x_QDir::x_27(x);	break;
	case 28: x_QDir::x_28(x);	break;
	case 29: x_QDir::x_29(x);	break;
	case 30: xself->x_30(x);	break;
	case 31: xself->x_31(x);	break;
	case 32: xself->x_32(x);	break;
	case 33: xself->x_33(x);	break;
	case 34: xself->x_34(x);	break;
	case 35: xself->x_35(x);	break;
	case 36: xself->x_36(x);	break;
	case 37: xself->x_37(x);	break;
	case 38: xself->x_38(x);	break;
	case 39: xself->x_39(x);	break;
	case 40: xself->x_40(x);	break;
	case 41: xself->x_41(x);	break;
	case 42: xself->x_42(x);	break;
	case 43: xself->x_43(x);	break;
	case 44: xself->x_44(x);	break;
	case 45: xself->x_45(x);	break;
	case 46: xself->x_46(x);	break;
	case 47: xself->x_47(x);	break;
	case 48: xself->x_48(x);	break;
	case 49: xself->x_49(x);	break;
	case 50: xself->x_50(x);	break;
	case 51: xself->x_51(x);	break;
	case 52: xself->x_52(x);	break;
	case 53: xself->x_53(x);	break;
	case 54: xself->x_54(x);	break;
	case 55: xself->x_55(x);	break;
	case 56: xself->x_56(x);	break;
	case 57: xself->x_57(x);	break;
	case 58: xself->x_58(x);	break;
	case 59: xself->x_59(x);	break;
	case 60: xself->x_60(x);	break;
	case 61: xself->x_61(x);	break;
	case 62: xself->x_62(x);	break;
	case 63: xself->x_63(x);	break;
	case 64: xself->x_64(x);	break;
	case 65: xself->x_65(x);	break;
	case 66: xself->x_66(x);	break;
	case 67: xself->x_67(x);	break;
	case 68: xself->x_68(x);	break;
	case 69: xself->x_69(x);	break;
	case 70: xself->x_70(x);	break;
	case 71: xself->x_71(x);	break;
	case 72: xself->x_72(x);	break;
	case 73: xself->x_73(x);	break;
	case 74: xself->x_74(x);	break;
	case 75: xself->x_75(x);	break;
	case 76: xself->x_76(x);	break;
	case 77: xself->x_77(x);	break;
	case 78: xself->x_78(x);	break;
	case 79: xself->x_79(x);	break;
	case 80: xself->x_80(x);	break;
	case 81: xself->x_81(x);	break;
	case 82: xself->x_82(x);	break;
	case 83: xself->x_83(x);	break;
	case 84: xself->x_84(x);	break;
	case 85: xself->x_85(x);	break;
	case 86: xself->x_86(x);	break;
	case 87: xself->x_87(x);	break;
	case 88: xself->x_88(x);	break;
	case 89: x_QDir::x_89(x);	break;
	case 90: x_QDir::x_90(x);	break;
	case 91: x_QDir::x_91(x);	break;
	case 92: x_QDir::x_92(x);	break;
	case 93: x_QDir::x_93(x);	break;
	case 94: x_QDir::x_94(x);	break;
	case 95: x_QDir::x_95(x);	break;
	case 96: x_QDir::x_96(x);	break;
	case 97: x_QDir::x_97(x);	break;
	case 98: x_QDir::x_98(x);	break;
	case 99: x_QDir::x_99(x);	break;
	case 100: x_QDir::x_100(x);	break;
	case 101: x_QDir::x_101(x);	break;
	case 102: x_QDir::x_102(x);	break;
	case 103: delete (QDir*)xself;	break;
    }
}
