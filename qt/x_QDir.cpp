//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke.h>
#include <qt_smoke.h>
#include <qdir.h>
#include <qstring.h>
#include <qstrlist.h>
#include <qstringlist.h>

class x_QDir : public QDir {
public:
    static void x_0(Smoke::Stack x) {
	x[0].s_enum = (long)QDir::Dirs;
    }
    static void x_1(Smoke::Stack x) {
	x[0].s_enum = (long)QDir::Files;
    }
    static void x_2(Smoke::Stack x) {
	x[0].s_enum = (long)QDir::Drives;
    }
    static void x_3(Smoke::Stack x) {
	x[0].s_enum = (long)QDir::NoSymLinks;
    }
    static void x_4(Smoke::Stack x) {
	x[0].s_enum = (long)QDir::All;
    }
    static void x_5(Smoke::Stack x) {
	x[0].s_enum = (long)QDir::TypeMask;
    }
    static void x_6(Smoke::Stack x) {
	x[0].s_enum = (long)QDir::Readable;
    }
    static void x_7(Smoke::Stack x) {
	x[0].s_enum = (long)QDir::Writable;
    }
    static void x_8(Smoke::Stack x) {
	x[0].s_enum = (long)QDir::Executable;
    }
    static void x_9(Smoke::Stack x) {
	x[0].s_enum = (long)QDir::RWEMask;
    }
    static void x_10(Smoke::Stack x) {
	x[0].s_enum = (long)QDir::Modified;
    }
    static void x_11(Smoke::Stack x) {
	x[0].s_enum = (long)QDir::Hidden;
    }
    static void x_12(Smoke::Stack x) {
	x[0].s_enum = (long)QDir::System;
    }
    static void x_13(Smoke::Stack x) {
	x[0].s_enum = (long)QDir::AccessMask;
    }
    static void x_14(Smoke::Stack x) {
	x[0].s_enum = (long)QDir::DefaultFilter;
    }
    static void x_15(Smoke::Stack x) {
	x[0].s_enum = (long)QDir::Name;
    }
    static void x_16(Smoke::Stack x) {
	x[0].s_enum = (long)QDir::Time;
    }
    static void x_17(Smoke::Stack x) {
	x[0].s_enum = (long)QDir::Size;
    }
    static void x_18(Smoke::Stack x) {
	x[0].s_enum = (long)QDir::Unsorted;
    }
    static void x_19(Smoke::Stack x) {
	x[0].s_enum = (long)QDir::SortByMask;
    }
    static void x_20(Smoke::Stack x) {
	x[0].s_enum = (long)QDir::DirsFirst;
    }
    static void x_21(Smoke::Stack x) {
	x[0].s_enum = (long)QDir::Reversed;
    }
    static void x_22(Smoke::Stack x) {
	x[0].s_enum = (long)QDir::IgnoreCase;
    }
    static void x_23(Smoke::Stack x) {
	x[0].s_enum = (long)QDir::DefaultSort;
    }
    static void x_24(Smoke::Stack x) {
	// QDir()
	x_QDir* xret = new x_QDir();
	x[0].s_class = (void*)xret;
    }
    x_QDir() : QDir() {
    }
    static void x_25(Smoke::Stack x) {
	// QDir(const QString&, const QString&, int, int)
	x_QDir* xret = new x_QDir(*(const QString *)x[1].s_voidp,*(const QString *)x[2].s_voidp,(int)x[3].s_int,(int)x[4].s_int);
	x[0].s_class = (void*)xret;
    }
    x_QDir(const QString& x1, const QString& x2, int x3, int x4) : QDir(x1, x2, x3, x4) {
    }
    static void x_26(Smoke::Stack x) {
	// QDir(const QString&, const QString&, int)
	x_QDir* xret = new x_QDir(*(const QString *)x[1].s_voidp,*(const QString *)x[2].s_voidp,(int)x[3].s_int);
	x[0].s_class = (void*)xret;
    }
    x_QDir(const QString& x1, const QString& x2, int x3) : QDir(x1, x2, x3) {
    }
    static void x_27(Smoke::Stack x) {
	// QDir(const QString&, const QString&)
	x_QDir* xret = new x_QDir(*(const QString *)x[1].s_voidp,*(const QString *)x[2].s_voidp);
	x[0].s_class = (void*)xret;
    }
    x_QDir(const QString& x1, const QString& x2) : QDir(x1, x2) {
    }
    static void x_28(Smoke::Stack x) {
	// QDir(const QString&)
	x_QDir* xret = new x_QDir(*(const QString *)x[1].s_voidp);
	x[0].s_class = (void*)xret;
    }
    x_QDir(const QString& x1) : QDir(x1) {
    }
    static void x_29(Smoke::Stack x) {
	// QDir(const QDir&)
	x_QDir* xret = new x_QDir(*(const QDir *)x[1].s_voidp);
	x[0].s_class = (void*)xret;
    }
    x_QDir(const QDir& x1) : QDir(x1) {
    }
    void x_30(Smoke::Stack x) {
	// operator=(const QDir&)
	QDir& xret = this->QDir::operator=(*(const QDir *)x[1].s_voidp);
	x[0].s_voidp = (void*)&xret;
    }
    void x_31(Smoke::Stack x) {
	// operator=(const QString&)
	QDir& xret = this->QDir::operator=(*(const QString *)x[1].s_voidp);
	x[0].s_voidp = (void*)&xret;
    }
    void x_32(Smoke::Stack x) {
	// setPath(const QString&)
	this->QDir::setPath(*(const QString *)x[1].s_voidp);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_33(Smoke::Stack x) const {
	// path()
	QString xret = this->QDir::path();
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_34(Smoke::Stack x) const {
	// absPath()
	QString xret = this->QDir::absPath();
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_35(Smoke::Stack x) const {
	// canonicalPath()
	QString xret = this->QDir::canonicalPath();
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_36(Smoke::Stack x) const {
	// dirName()
	QString xret = this->QDir::dirName();
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_37(Smoke::Stack x) const {
	// filePath(const QString&, bool)
	QString xret = this->QDir::filePath(*(const QString *)x[1].s_voidp,(bool)x[2].s_bool);
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_38(Smoke::Stack x) const {
	// filePath(const QString&)
	QString xret = this->QDir::filePath(*(const QString *)x[1].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_39(Smoke::Stack x) const {
	// absFilePath(const QString&, bool)
	QString xret = this->QDir::absFilePath(*(const QString *)x[1].s_voidp,(bool)x[2].s_bool);
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_40(Smoke::Stack x) const {
	// absFilePath(const QString&)
	QString xret = this->QDir::absFilePath(*(const QString *)x[1].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_41(Smoke::Stack x) {
	// cd(const QString&, bool)
	bool xret = this->QDir::cd(*(const QString *)x[1].s_voidp,(bool)x[2].s_bool);
	x[0].s_bool = xret;
    }
    void x_42(Smoke::Stack x) {
	// cd(const QString&)
	bool xret = this->QDir::cd(*(const QString *)x[1].s_voidp);
	x[0].s_bool = xret;
    }
    void x_43(Smoke::Stack x) {
	// cdUp()
	bool xret = this->QDir::cdUp();
	x[0].s_bool = xret;
    }
    void x_44(Smoke::Stack x) const {
	// nameFilter()
	QString xret = this->QDir::nameFilter();
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_45(Smoke::Stack x) {
	// setNameFilter(const QString&)
	this->QDir::setNameFilter(*(const QString *)x[1].s_voidp);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_46(Smoke::Stack x) const {
	// filter()
	QDir::FilterSpec xret = this->QDir::filter();
	x[0].s_enum = xret;
    }
    void x_47(Smoke::Stack x) {
	// setFilter(int)
	this->QDir::setFilter((int)x[1].s_int);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_48(Smoke::Stack x) const {
	// sorting()
	QDir::SortSpec xret = this->QDir::sorting();
	x[0].s_enum = xret;
    }
    void x_49(Smoke::Stack x) {
	// setSorting(int)
	this->QDir::setSorting((int)x[1].s_int);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_50(Smoke::Stack x) const {
	// matchAllDirs()
	bool xret = this->QDir::matchAllDirs();
	x[0].s_bool = xret;
    }
    void x_51(Smoke::Stack x) {
	// setMatchAllDirs(bool)
	this->QDir::setMatchAllDirs((bool)x[1].s_bool);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_52(Smoke::Stack x) const {
	// count()
	uint xret = this->QDir::count();
	x[0].s_uint = xret;
    }
    void x_53(Smoke::Stack x) const {
	// operator[](int)
	QString xret = this->QDir::operator[]((int)x[1].s_int);
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_54(Smoke::Stack x) const {
	// encodedEntryList(int, int)
	QStrList xret = this->QDir::encodedEntryList((int)x[1].s_int,(int)x[2].s_int);
	x[0].s_class = (void*)new QStrList(xret);
    }
    void x_55(Smoke::Stack x) const {
	// encodedEntryList(int)
	QStrList xret = this->QDir::encodedEntryList((int)x[1].s_int);
	x[0].s_class = (void*)new QStrList(xret);
    }
    void x_56(Smoke::Stack x) const {
	// encodedEntryList()
	QStrList xret = this->QDir::encodedEntryList();
	x[0].s_class = (void*)new QStrList(xret);
    }
    void x_57(Smoke::Stack x) const {
	// encodedEntryList(const QString&, int, int)
	QStrList xret = this->QDir::encodedEntryList(*(const QString *)x[1].s_voidp,(int)x[2].s_int,(int)x[3].s_int);
	x[0].s_class = (void*)new QStrList(xret);
    }
    void x_58(Smoke::Stack x) const {
	// encodedEntryList(const QString&, int)
	QStrList xret = this->QDir::encodedEntryList(*(const QString *)x[1].s_voidp,(int)x[2].s_int);
	x[0].s_class = (void*)new QStrList(xret);
    }
    void x_59(Smoke::Stack x) const {
	// encodedEntryList(const QString&)
	QStrList xret = this->QDir::encodedEntryList(*(const QString *)x[1].s_voidp);
	x[0].s_class = (void*)new QStrList(xret);
    }
    void x_60(Smoke::Stack x) const {
	// entryList(int, int)
	QStringList xret = this->QDir::entryList((int)x[1].s_int,(int)x[2].s_int);
	x[0].s_class = (void*)new QStringList(xret);
    }
    void x_61(Smoke::Stack x) const {
	// entryList(int)
	QStringList xret = this->QDir::entryList((int)x[1].s_int);
	x[0].s_class = (void*)new QStringList(xret);
    }
    void x_62(Smoke::Stack x) const {
	// entryList()
	QStringList xret = this->QDir::entryList();
	x[0].s_class = (void*)new QStringList(xret);
    }
    void x_63(Smoke::Stack x) const {
	// entryList(const QString&, int, int)
	QStringList xret = this->QDir::entryList(*(const QString *)x[1].s_voidp,(int)x[2].s_int,(int)x[3].s_int);
	x[0].s_class = (void*)new QStringList(xret);
    }
    void x_64(Smoke::Stack x) const {
	// entryList(const QString&, int)
	QStringList xret = this->QDir::entryList(*(const QString *)x[1].s_voidp,(int)x[2].s_int);
	x[0].s_class = (void*)new QStringList(xret);
    }
    void x_65(Smoke::Stack x) const {
	// entryList(const QString&)
	QStringList xret = this->QDir::entryList(*(const QString *)x[1].s_voidp);
	x[0].s_class = (void*)new QStringList(xret);
    }
    void x_66(Smoke::Stack x) const {
	// entryInfoList(int, int)
	const QFileInfoList* xret = this->QDir::entryInfoList((int)x[1].s_int,(int)x[2].s_int);
	x[0].s_voidp = (void*)xret;
    }
    void x_67(Smoke::Stack x) const {
	// entryInfoList(int)
	const QFileInfoList* xret = this->QDir::entryInfoList((int)x[1].s_int);
	x[0].s_voidp = (void*)xret;
    }
    void x_68(Smoke::Stack x) const {
	// entryInfoList()
	const QFileInfoList* xret = this->QDir::entryInfoList();
	x[0].s_voidp = (void*)xret;
    }
    void x_69(Smoke::Stack x) const {
	// entryInfoList(const QString&, int, int)
	const QFileInfoList* xret = this->QDir::entryInfoList(*(const QString *)x[1].s_voidp,(int)x[2].s_int,(int)x[3].s_int);
	x[0].s_voidp = (void*)xret;
    }
    void x_70(Smoke::Stack x) const {
	// entryInfoList(const QString&, int)
	const QFileInfoList* xret = this->QDir::entryInfoList(*(const QString *)x[1].s_voidp,(int)x[2].s_int);
	x[0].s_voidp = (void*)xret;
    }
    void x_71(Smoke::Stack x) const {
	// entryInfoList(const QString&)
	const QFileInfoList* xret = this->QDir::entryInfoList(*(const QString *)x[1].s_voidp);
	x[0].s_voidp = (void*)xret;
    }
    void x_72(Smoke::Stack x) const {
	// mkdir(const QString&, bool)
	bool xret = this->QDir::mkdir(*(const QString *)x[1].s_voidp,(bool)x[2].s_bool);
	x[0].s_bool = xret;
    }
    void x_73(Smoke::Stack x) const {
	// mkdir(const QString&)
	bool xret = this->QDir::mkdir(*(const QString *)x[1].s_voidp);
	x[0].s_bool = xret;
    }
    void x_74(Smoke::Stack x) const {
	// rmdir(const QString&, bool)
	bool xret = this->QDir::rmdir(*(const QString *)x[1].s_voidp,(bool)x[2].s_bool);
	x[0].s_bool = xret;
    }
    void x_75(Smoke::Stack x) const {
	// rmdir(const QString&)
	bool xret = this->QDir::rmdir(*(const QString *)x[1].s_voidp);
	x[0].s_bool = xret;
    }
    void x_76(Smoke::Stack x) const {
	// isReadable()
	bool xret = this->QDir::isReadable();
	x[0].s_bool = xret;
    }
    void x_77(Smoke::Stack x) const {
	// exists()
	bool xret = this->QDir::exists();
	x[0].s_bool = xret;
    }
    void x_78(Smoke::Stack x) const {
	// isRoot()
	bool xret = this->QDir::isRoot();
	x[0].s_bool = xret;
    }
    void x_79(Smoke::Stack x) const {
	// isRelative()
	bool xret = this->QDir::isRelative();
	x[0].s_bool = xret;
    }
    void x_80(Smoke::Stack x) {
	// convertToAbs()
	this->QDir::convertToAbs();
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_81(Smoke::Stack x) const {
	// operator==(const QDir&)
	bool xret = this->QDir::operator==(*(const QDir *)x[1].s_voidp);
	x[0].s_bool = xret;
    }
    void x_82(Smoke::Stack x) const {
	// operator!=(const QDir&)
	bool xret = this->QDir::operator!=(*(const QDir *)x[1].s_voidp);
	x[0].s_bool = xret;
    }
    void x_83(Smoke::Stack x) {
	// remove(const QString&, bool)
	bool xret = this->QDir::remove(*(const QString *)x[1].s_voidp,(bool)x[2].s_bool);
	x[0].s_bool = xret;
    }
    void x_84(Smoke::Stack x) {
	// remove(const QString&)
	bool xret = this->QDir::remove(*(const QString *)x[1].s_voidp);
	x[0].s_bool = xret;
    }
    void x_85(Smoke::Stack x) {
	// rename(const QString&, const QString&, bool)
	bool xret = this->QDir::rename(*(const QString *)x[1].s_voidp,*(const QString *)x[2].s_voidp,(bool)x[3].s_bool);
	x[0].s_bool = xret;
    }
    void x_86(Smoke::Stack x) {
	// rename(const QString&, const QString&)
	bool xret = this->QDir::rename(*(const QString *)x[1].s_voidp,*(const QString *)x[2].s_voidp);
	x[0].s_bool = xret;
    }
    void x_87(Smoke::Stack x) {
	// exists(const QString&, bool)
	bool xret = this->QDir::exists(*(const QString *)x[1].s_voidp,(bool)x[2].s_bool);
	x[0].s_bool = xret;
    }
    void x_88(Smoke::Stack x) {
	// exists(const QString&)
	bool xret = this->QDir::exists(*(const QString *)x[1].s_voidp);
	x[0].s_bool = xret;
    }
    static void x_89(Smoke::Stack x) {
	// convertSeparators(const QString&)
	QString xret = QDir::convertSeparators(*(const QString *)x[1].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    static void x_90(Smoke::Stack x) {
	// drives()
	const QFileInfoList* xret = QDir::drives();
	x[0].s_voidp = (void*)xret;
    }
    static void x_91(Smoke::Stack x) {
	// separator()
	char xret = QDir::separator();
	x[0].s_char = xret;
    }
    static void x_92(Smoke::Stack x) {
	// setCurrent(const QString&)
	bool xret = QDir::setCurrent(*(const QString *)x[1].s_voidp);
	x[0].s_bool = xret;
    }
    static void x_93(Smoke::Stack x) {
	// current()
	QDir xret = QDir::current();
	x[0].s_class = (void*)new QDir(xret);
    }
    static void x_94(Smoke::Stack x) {
	// home()
	QDir xret = QDir::home();
	x[0].s_class = (void*)new QDir(xret);
    }
    static void x_95(Smoke::Stack x) {
	// root()
	QDir xret = QDir::root();
	x[0].s_class = (void*)new QDir(xret);
    }
    static void x_96(Smoke::Stack x) {
	// currentDirPath()
	QString xret = QDir::currentDirPath();
	x[0].s_voidp = (void*)new QString(xret);
    }
    static void x_97(Smoke::Stack x) {
	// homeDirPath()
	QString xret = QDir::homeDirPath();
	x[0].s_voidp = (void*)new QString(xret);
    }
    static void x_98(Smoke::Stack x) {
	// rootDirPath()
	QString xret = QDir::rootDirPath();
	x[0].s_voidp = (void*)new QString(xret);
    }
    static void x_99(Smoke::Stack x) {
	// match(const QStringList&, const QString&)
	bool xret = QDir::match(*(const QStringList *)x[1].s_voidp,*(const QString *)x[2].s_voidp);
	x[0].s_bool = xret;
    }
    static void x_100(Smoke::Stack x) {
	// match(const QString&, const QString&)
	bool xret = QDir::match(*(const QString *)x[1].s_voidp,*(const QString *)x[2].s_voidp);
	x[0].s_bool = xret;
    }
    static void x_101(Smoke::Stack x) {
	// cleanDirPath(const QString&)
	QString xret = QDir::cleanDirPath(*(const QString *)x[1].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    static void x_102(Smoke::Stack x) {
	// isRelativePath(const QString&)
	bool xret = QDir::isRelativePath(*(const QString *)x[1].s_voidp);
	x[0].s_bool = xret;
    }
    virtual QString absFilePath(const QString& x1, bool x2) const {
	Smoke::StackItem x[3];
	x[1].s_voidp = (void*)&x1;
	x[2].s_bool = x2;
	if(qt_Smoke->callMethod(1777, (void*)this, x)) {
	    QString *xptr = (QString *)x[0].s_class;
	    QString xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDir::absFilePath(x1, x2);
    }
    virtual QString absPath() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(1772, (void*)this, x)) {
	    QString *xptr = (QString *)x[0].s_class;
	    QString xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDir::absPath();
    }
    virtual QString canonicalPath() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(1773, (void*)this, x)) {
	    QString *xptr = (QString *)x[0].s_class;
	    QString xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDir::canonicalPath();
    }
    virtual bool cd(const QString& x1, bool x2) {
	Smoke::StackItem x[3];
	x[1].s_voidp = (void*)&x1;
	x[2].s_bool = x2;
	if(qt_Smoke->callMethod(1779, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDir::cd(x1, x2);
    }
    virtual bool cdUp() {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(1781, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDir::cdUp();
    }
    virtual void convertToAbs() {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(1818, (void*)this, x)) return;
	this->QDir::convertToAbs();
    }
    virtual QString dirName() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(1774, (void*)this, x)) {
	    QString *xptr = (QString *)x[0].s_class;
	    QString xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDir::dirName();
    }
    virtual QStrList encodedEntryList(const QString& x1, int x2, int x3) const {
	Smoke::StackItem x[4];
	x[1].s_voidp = (void*)&x1;
	x[2].s_int = x2;
	x[3].s_int = x3;
	if(qt_Smoke->callMethod(1795, (void*)this, x)) {
	    QStrList *xptr = (QStrList *)x[0].s_class;
	    QStrList xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDir::encodedEntryList(x1, x2, x3);
    }
    virtual QStrList encodedEntryList(int x1, int x2) const {
	Smoke::StackItem x[3];
	x[1].s_int = x1;
	x[2].s_int = x2;
	if(qt_Smoke->callMethod(1792, (void*)this, x)) {
	    QStrList *xptr = (QStrList *)x[0].s_class;
	    QStrList xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDir::encodedEntryList(x1, x2);
    }
    virtual const QFileInfoList* entryInfoList(const QString& x1, int x2, int x3) const {
	Smoke::StackItem x[4];
	x[1].s_voidp = (void*)&x1;
	x[2].s_int = x2;
	x[3].s_int = x3;
	if(qt_Smoke->callMethod(1807, (void*)this, x)) return (const QFileInfoList*)x[0].s_class;
	return this->QDir::entryInfoList(x1, x2, x3);
    }
    virtual const QFileInfoList* entryInfoList(int x1, int x2) const {
	Smoke::StackItem x[3];
	x[1].s_int = x1;
	x[2].s_int = x2;
	if(qt_Smoke->callMethod(1804, (void*)this, x)) return (const QFileInfoList*)x[0].s_class;
	return this->QDir::entryInfoList(x1, x2);
    }
    virtual QStringList entryList(const QString& x1, int x2, int x3) const {
	Smoke::StackItem x[4];
	x[1].s_voidp = (void*)&x1;
	x[2].s_int = x2;
	x[3].s_int = x3;
	if(qt_Smoke->callMethod(1801, (void*)this, x)) {
	    QStringList *xptr = (QStringList *)x[0].s_class;
	    QStringList xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDir::entryList(x1, x2, x3);
    }
    virtual QStringList entryList(int x1, int x2) const {
	Smoke::StackItem x[3];
	x[1].s_int = x1;
	x[2].s_int = x2;
	if(qt_Smoke->callMethod(1798, (void*)this, x)) {
	    QStringList *xptr = (QStringList *)x[0].s_class;
	    QStringList xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDir::entryList(x1, x2);
    }
    virtual bool exists() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(1815, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDir::exists();
    }
    virtual bool exists(const QString& x1, bool x2) {
	Smoke::StackItem x[3];
	x[1].s_voidp = (void*)&x1;
	x[2].s_bool = x2;
	if(qt_Smoke->callMethod(1825, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDir::exists(x1, x2);
    }
    virtual QString filePath(const QString& x1, bool x2) const {
	Smoke::StackItem x[3];
	x[1].s_voidp = (void*)&x1;
	x[2].s_bool = x2;
	if(qt_Smoke->callMethod(1775, (void*)this, x)) {
	    QString *xptr = (QString *)x[0].s_class;
	    QString xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDir::filePath(x1, x2);
    }
    virtual bool isReadable() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(1814, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDir::isReadable();
    }
    virtual bool isRelative() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(1817, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDir::isRelative();
    }
    virtual bool isRoot() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(1816, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDir::isRoot();
    }
    virtual bool mkdir(const QString& x1, bool x2) const {
	Smoke::StackItem x[3];
	x[1].s_voidp = (void*)&x1;
	x[2].s_bool = x2;
	if(qt_Smoke->callMethod(1810, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDir::mkdir(x1, x2);
    }
    virtual bool operator!=(const QDir& x1) const {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)&x1;
	if(qt_Smoke->callMethod(1820, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDir::operator!=(x1);
    }
    virtual bool operator==(const QDir& x1) const {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)&x1;
	if(qt_Smoke->callMethod(1819, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDir::operator==(x1);
    }
    virtual QString path() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(1771, (void*)this, x)) {
	    QString *xptr = (QString *)x[0].s_class;
	    QString xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDir::path();
    }
    virtual bool remove(const QString& x1, bool x2) {
	Smoke::StackItem x[3];
	x[1].s_voidp = (void*)&x1;
	x[2].s_bool = x2;
	if(qt_Smoke->callMethod(1821, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDir::remove(x1, x2);
    }
    virtual bool rename(const QString& x1, const QString& x2, bool x3) {
	Smoke::StackItem x[4];
	x[1].s_voidp = (void*)&x1;
	x[2].s_voidp = (void*)&x2;
	x[3].s_bool = x3;
	if(qt_Smoke->callMethod(1823, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDir::rename(x1, x2, x3);
    }
    virtual bool rmdir(const QString& x1, bool x2) const {
	Smoke::StackItem x[3];
	x[1].s_voidp = (void*)&x1;
	x[2].s_bool = x2;
	if(qt_Smoke->callMethod(1812, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDir::rmdir(x1, x2);
    }
    virtual void setFilter(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = x1;
	if(qt_Smoke->callMethod(1785, (void*)this, x)) return;
	this->QDir::setFilter(x1);
    }
    virtual void setMatchAllDirs(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->callMethod(1789, (void*)this, x)) return;
	this->QDir::setMatchAllDirs(x1);
    }
    virtual void setNameFilter(const QString& x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)&x1;
	if(qt_Smoke->callMethod(1783, (void*)this, x)) return;
	this->QDir::setNameFilter(x1);
    }
    virtual void setPath(const QString& x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)&x1;
	if(qt_Smoke->callMethod(1770, (void*)this, x)) return;
	this->QDir::setPath(x1);
    }
    virtual void setSorting(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = x1;
	if(qt_Smoke->callMethod(1787, (void*)this, x)) return;
	this->QDir::setSorting(x1);
    }
    ~x_QDir() {}
};
void xcall_QDir(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QDir *xself = (x_QDir*)obj;
    switch(xi) {
	case 0: x_QDir::x_0(args);	break;
	case 1: x_QDir::x_1(args);	break;
	case 2: x_QDir::x_2(args);	break;
	case 3: x_QDir::x_3(args);	break;
	case 4: x_QDir::x_4(args);	break;
	case 5: x_QDir::x_5(args);	break;
	case 6: x_QDir::x_6(args);	break;
	case 7: x_QDir::x_7(args);	break;
	case 8: x_QDir::x_8(args);	break;
	case 9: x_QDir::x_9(args);	break;
	case 10: x_QDir::x_10(args);	break;
	case 11: x_QDir::x_11(args);	break;
	case 12: x_QDir::x_12(args);	break;
	case 13: x_QDir::x_13(args);	break;
	case 14: x_QDir::x_14(args);	break;
	case 15: x_QDir::x_15(args);	break;
	case 16: x_QDir::x_16(args);	break;
	case 17: x_QDir::x_17(args);	break;
	case 18: x_QDir::x_18(args);	break;
	case 19: x_QDir::x_19(args);	break;
	case 20: x_QDir::x_20(args);	break;
	case 21: x_QDir::x_21(args);	break;
	case 22: x_QDir::x_22(args);	break;
	case 23: x_QDir::x_23(args);	break;
	case 24: x_QDir::x_24(args);	break;
	case 25: x_QDir::x_25(args);	break;
	case 26: x_QDir::x_26(args);	break;
	case 27: x_QDir::x_27(args);	break;
	case 28: x_QDir::x_28(args);	break;
	case 29: x_QDir::x_29(args);	break;
	case 30: xself->x_30(args);	break;
	case 31: xself->x_31(args);	break;
	case 32: xself->x_32(args);	break;
	case 33: xself->x_33(args);	break;
	case 34: xself->x_34(args);	break;
	case 35: xself->x_35(args);	break;
	case 36: xself->x_36(args);	break;
	case 37: xself->x_37(args);	break;
	case 38: xself->x_38(args);	break;
	case 39: xself->x_39(args);	break;
	case 40: xself->x_40(args);	break;
	case 41: xself->x_41(args);	break;
	case 42: xself->x_42(args);	break;
	case 43: xself->x_43(args);	break;
	case 44: xself->x_44(args);	break;
	case 45: xself->x_45(args);	break;
	case 46: xself->x_46(args);	break;
	case 47: xself->x_47(args);	break;
	case 48: xself->x_48(args);	break;
	case 49: xself->x_49(args);	break;
	case 50: xself->x_50(args);	break;
	case 51: xself->x_51(args);	break;
	case 52: xself->x_52(args);	break;
	case 53: xself->x_53(args);	break;
	case 54: xself->x_54(args);	break;
	case 55: xself->x_55(args);	break;
	case 56: xself->x_56(args);	break;
	case 57: xself->x_57(args);	break;
	case 58: xself->x_58(args);	break;
	case 59: xself->x_59(args);	break;
	case 60: xself->x_60(args);	break;
	case 61: xself->x_61(args);	break;
	case 62: xself->x_62(args);	break;
	case 63: xself->x_63(args);	break;
	case 64: xself->x_64(args);	break;
	case 65: xself->x_65(args);	break;
	case 66: xself->x_66(args);	break;
	case 67: xself->x_67(args);	break;
	case 68: xself->x_68(args);	break;
	case 69: xself->x_69(args);	break;
	case 70: xself->x_70(args);	break;
	case 71: xself->x_71(args);	break;
	case 72: xself->x_72(args);	break;
	case 73: xself->x_73(args);	break;
	case 74: xself->x_74(args);	break;
	case 75: xself->x_75(args);	break;
	case 76: xself->x_76(args);	break;
	case 77: xself->x_77(args);	break;
	case 78: xself->x_78(args);	break;
	case 79: xself->x_79(args);	break;
	case 80: xself->x_80(args);	break;
	case 81: xself->x_81(args);	break;
	case 82: xself->x_82(args);	break;
	case 83: xself->x_83(args);	break;
	case 84: xself->x_84(args);	break;
	case 85: xself->x_85(args);	break;
	case 86: xself->x_86(args);	break;
	case 87: xself->x_87(args);	break;
	case 88: xself->x_88(args);	break;
	case 89: x_QDir::x_89(args);	break;
	case 90: x_QDir::x_90(args);	break;
	case 91: x_QDir::x_91(args);	break;
	case 92: x_QDir::x_92(args);	break;
	case 93: x_QDir::x_93(args);	break;
	case 94: x_QDir::x_94(args);	break;
	case 95: x_QDir::x_95(args);	break;
	case 96: x_QDir::x_96(args);	break;
	case 97: x_QDir::x_97(args);	break;
	case 98: x_QDir::x_98(args);	break;
	case 99: x_QDir::x_99(args);	break;
	case 100: x_QDir::x_100(args);	break;
	case 101: x_QDir::x_101(args);	break;
	case 102: x_QDir::x_102(args);	break;
	case 103: delete (QDir*)xself;	break;
    }
}
