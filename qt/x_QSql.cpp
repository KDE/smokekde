//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke.h>
#include <qt_smoke.h>
#include <qsql.h>

class x_QSql : public QSql {
public:
    static void x_0(Smoke::Stack x) {
	x[0].s_enum = (long)QSql::None;
    }
    static void x_1(Smoke::Stack x) {
	x[0].s_enum = (long)QSql::Insert;
    }
    static void x_2(Smoke::Stack x) {
	x[0].s_enum = (long)QSql::Update;
    }
    static void x_3(Smoke::Stack x) {
	x[0].s_enum = (long)QSql::Delete;
    }
    static void x_4(Smoke::Stack x) {
	x[0].s_enum = (long)QSql::BeforeFirst;
    }
    static void x_5(Smoke::Stack x) {
	x[0].s_enum = (long)QSql::AfterLast;
    }
    static void x_6(Smoke::Stack x) {
	x[0].s_enum = (long)QSql::Cancel;
    }
    static void x_7(Smoke::Stack x) {
	x[0].s_enum = (long)QSql::No;
    }
    static void x_8(Smoke::Stack x) {
	x[0].s_enum = (long)QSql::Yes;
    }
    static void x_9(Smoke::Stack x) {
	// QSql()
	x_QSql* xret = new x_QSql();
	x[0].s_class = (void*)xret;
    }
    x_QSql() : QSql() {
    }
    ~x_QSql() {}
};
void xcall_QSql(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QSql *xself = (x_QSql*)obj;
    switch(xi) {
	case 0: x_QSql::x_0(args);	break;
	case 1: x_QSql::x_1(args);	break;
	case 2: x_QSql::x_2(args);	break;
	case 3: x_QSql::x_3(args);	break;
	case 4: x_QSql::x_4(args);	break;
	case 5: x_QSql::x_5(args);	break;
	case 6: x_QSql::x_6(args);	break;
	case 7: x_QSql::x_7(args);	break;
	case 8: x_QSql::x_8(args);	break;
	case 9: x_QSql::x_9(args);	break;
    }
}
