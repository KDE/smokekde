//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qpoint.h>
#include <qcursor.h>
#include <qpixmap.h>
#include <qbitmap.h>

class x_QCursor : public QCursor {
public:
    static void x_0(xargs *x) {
	// QCursor()
	x_QCursor* xret = new x_QCursor();
	x[0].x_voidp = (void*)xret;
    }
    x_QCursor() : QCursor() {
    }
    static void x_1(xargs *x) {
	// QCursor(int)
	x_QCursor* xret = new x_QCursor((int)x[1].x_int);
	x[0].x_voidp = (void*)xret;
    }
    x_QCursor(int x1) : QCursor(x1) {
    }
    static void x_2(xargs *x) {
	// QCursor(const QBitmap&, const QBitmap&, int, int)
	x_QCursor* xret = new x_QCursor(*(const QBitmap *)x[1].x_voidp,*(const QBitmap *)x[2].x_voidp,(int)x[3].x_int,(int)x[4].x_int);
	x[0].x_voidp = (void*)xret;
    }
    x_QCursor(const QBitmap& x1, const QBitmap& x2, int x3, int x4) : QCursor(x1, x2, x3, x4) {
    }
    static void x_3(xargs *x) {
	// QCursor(const QBitmap&, const QBitmap&, int)
	x_QCursor* xret = new x_QCursor(*(const QBitmap *)x[1].x_voidp,*(const QBitmap *)x[2].x_voidp,(int)x[3].x_int);
	x[0].x_voidp = (void*)xret;
    }
    x_QCursor(const QBitmap& x1, const QBitmap& x2, int x3) : QCursor(x1, x2, x3) {
    }
    static void x_4(xargs *x) {
	// QCursor(const QBitmap&, const QBitmap&)
	x_QCursor* xret = new x_QCursor(*(const QBitmap *)x[1].x_voidp,*(const QBitmap *)x[2].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QCursor(const QBitmap& x1, const QBitmap& x2) : QCursor(x1, x2) {
    }
    static void x_5(xargs *x) {
	// QCursor(const QPixmap&, int, int)
	x_QCursor* xret = new x_QCursor(*(const QPixmap *)x[1].x_voidp,(int)x[2].x_int,(int)x[3].x_int);
	x[0].x_voidp = (void*)xret;
    }
    x_QCursor(const QPixmap& x1, int x2, int x3) : QCursor(x1, x2, x3) {
    }
    static void x_6(xargs *x) {
	// QCursor(const QPixmap&, int)
	x_QCursor* xret = new x_QCursor(*(const QPixmap *)x[1].x_voidp,(int)x[2].x_int);
	x[0].x_voidp = (void*)xret;
    }
    x_QCursor(const QPixmap& x1, int x2) : QCursor(x1, x2) {
    }
    static void x_7(xargs *x) {
	// QCursor(const QPixmap&)
	x_QCursor* xret = new x_QCursor(*(const QPixmap *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QCursor(const QPixmap& x1) : QCursor(x1) {
    }
    static void x_8(xargs *x) {
	// QCursor(const QCursor&)
	x_QCursor* xret = new x_QCursor(*(const QCursor *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QCursor(const QCursor& x1) : QCursor(x1) {
    }
    void x_9(xargs *x) {
	// operator=(const QCursor&)
	QCursor& xret = this->QCursor::operator=(*(const QCursor *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_10(xargs *x) const {
	// shape()
	int xret = this->QCursor::shape();
	x[0].x_int = (int)xret;
    }
    void x_11(xargs *x) {
	// setShape(int)
	this->QCursor::setShape((int)x[1].x_int);
    }
    void x_12(xargs *x) const {
	// bitmap()
	const QBitmap* xret = this->QCursor::bitmap();
	x[0].x_voidp = (void*)xret;
    }
    void x_13(xargs *x) const {
	// mask()
	const QBitmap* xret = this->QCursor::mask();
	x[0].x_voidp = (void*)xret;
    }
    void x_14(xargs *x) const {
	// hotSpot()
	QPoint xret = this->QCursor::hotSpot();
	x[0].x_voidp = (void*)new QPoint(xret);
    }
    static void x_15(xargs *x) {
	// pos()
	QPoint xret = QCursor::pos();
	x[0].x_voidp = (void*)new QPoint(xret);
    }
    static void x_16(xargs *x) {
	// setPos(int, int)
	QCursor::setPos((int)x[1].x_int,(int)x[2].x_int);
    }
    static void x_17(xargs *x) {
	// setPos(const QPoint&)
	QCursor::setPos(*(const QPoint *)x[1].x_voidp);
    }
    static void x_18(xargs *x) {
	// pos()
	QPoint xret = QCursor::pos();
	x[0].x_voidp = (void*)new QPoint(xret);
    }
    static void x_19(xargs *x) {
	// setPos(int, int)
	QCursor::setPos((int)x[1].x_int,(int)x[2].x_int);
    }
    static void x_20(xargs *x) {
	// setPos(const QPoint&)
	QCursor::setPos(*(const QPoint *)x[1].x_voidp);
    }
    static void x_21(xargs *x) {
	// initialize()
	QCursor::initialize();
    }
    static void x_22(xargs *x) {
	// cleanup()
	QCursor::cleanup();
    }
    ~x_QCursor() {}
};
void xcall_QCursor(xargs *x, void *s, int xi) {
    x_QCursor *xself = (x_QCursor*)s;
    switch(xi) {
	case 0: x_QCursor::x_0(x);	break;
	case 1: x_QCursor::x_1(x);	break;
	case 2: x_QCursor::x_2(x);	break;
	case 3: x_QCursor::x_3(x);	break;
	case 4: x_QCursor::x_4(x);	break;
	case 5: x_QCursor::x_5(x);	break;
	case 6: x_QCursor::x_6(x);	break;
	case 7: x_QCursor::x_7(x);	break;
	case 8: x_QCursor::x_8(x);	break;
	case 9: xself->x_9(x);	break;
	case 10: xself->x_10(x);	break;
	case 11: xself->x_11(x);	break;
	case 12: xself->x_12(x);	break;
	case 13: xself->x_13(x);	break;
	case 14: xself->x_14(x);	break;
	case 15: x_QCursor::x_15(x);	break;
	case 16: x_QCursor::x_16(x);	break;
	case 17: x_QCursor::x_17(x);	break;
	case 18: x_QCursor::x_18(x);	break;
	case 19: x_QCursor::x_19(x);	break;
	case 20: x_QCursor::x_20(x);	break;
	case 21: x_QCursor::x_21(x);	break;
	case 22: x_QCursor::x_22(x);	break;
	case 23: delete (QCursor*)xself;	break;
    }
}
