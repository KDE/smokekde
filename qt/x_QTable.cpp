//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke.h>
#include <qcursor.h>
#include <qcolor.h>
#include <qstring.h>
#include <qsize.h>
#include <qvariant.h>
#include <qregion.h>
#include <qscrollview.h>
#include <qpoint.h>
#include <qfont.h>
#include <qbitmap.h>
#include <qsizepolicy.h>
#include <qpalette.h>
#include <qwidget.h>
#include <qnamespace.h>
#include <qrect.h>
#include <qpixmap.h>
#include <qstyle.h>
#include <qscrollbar.h>
#include <qtable.h>

class x_QTable : public QTable {
public:
    static void x_0(Smoke::Stack x) {
	x[0].s_enum = (long)QTable::Single;
    }
    static void x_1(Smoke::Stack x) {
	x[0].s_enum = (long)QTable::Multi;
    }
    static void x_2(Smoke::Stack x) {
	x[0].s_enum = (long)QTable::SingleRow;
    }
    static void x_3(Smoke::Stack x) {
	x[0].s_enum = (long)QTable::MultiRow;
    }
    static void x_4(Smoke::Stack x) {
	x[0].s_enum = (long)QTable::NoSelection;
    }
    static void x_5(Smoke::Stack x) {
	x[0].s_enum = (long)QTable::FollowStyle;
    }
    static void x_6(Smoke::Stack x) {
	x[0].s_enum = (long)QTable::SpreadSheet;
    }
    static void x_7(Smoke::Stack x) {
	x[0].s_enum = (long)QTable::NotEditing;
    }
    static void x_8(Smoke::Stack x) {
	x[0].s_enum = (long)QTable::Editing;
    }
    static void x_9(Smoke::Stack x) {
	x[0].s_enum = (long)QTable::Replacing;
    }
    static void x_10(Smoke::Stack x) {
	// QTable(QWidget*, const char*)
	x_QTable* xret = new x_QTable((QWidget*)x[1].s_class,(const char*)x[2].s_class);
	x[0].s_class = (void*)xret;
    }
    x_QTable(QWidget* x1, const char* x2) : QTable(x1, x2) {
    }
    static void x_11(Smoke::Stack x) {
	// QTable(QWidget*)
	x_QTable* xret = new x_QTable((QWidget*)x[1].s_class);
	x[0].s_class = (void*)xret;
    }
    x_QTable(QWidget* x1) : QTable(x1) {
    }
    static void x_12(Smoke::Stack x) {
	// QTable()
	x_QTable* xret = new x_QTable();
	x[0].s_class = (void*)xret;
    }
    x_QTable() : QTable() {
    }
    static void x_13(Smoke::Stack x) {
	// QTable(int, int, QWidget*, const char*)
	x_QTable* xret = new x_QTable((int)x[1].s_int,(int)x[2].s_int,(QWidget*)x[3].s_class,(const char*)x[4].s_class);
	x[0].s_class = (void*)xret;
    }
    x_QTable(int x1, int x2, QWidget* x3, const char* x4) : QTable(x1, x2, x3, x4) {
    }
    static void x_14(Smoke::Stack x) {
	// QTable(int, int, QWidget*)
	x_QTable* xret = new x_QTable((int)x[1].s_int,(int)x[2].s_int,(QWidget*)x[3].s_class);
	x[0].s_class = (void*)xret;
    }
    x_QTable(int x1, int x2, QWidget* x3) : QTable(x1, x2, x3) {
    }
    static void x_15(Smoke::Stack x) {
	// QTable(int, int)
	x_QTable* xret = new x_QTable((int)x[1].s_int,(int)x[2].s_int);
	x[0].s_class = (void*)xret;
    }
    x_QTable(int x1, int x2) : QTable(x1, x2) {
    }
    void x_16(Smoke::Stack x) const {
	// horizontalHeader()
	QHeader* xret = this->QTable::horizontalHeader();
	x[0].s_class = (void*)xret;
    }
    void x_17(Smoke::Stack x) const {
	// verticalHeader()
	QHeader* xret = this->QTable::verticalHeader();
	x[0].s_class = (void*)xret;
    }
    void x_18(Smoke::Stack x) {
	// setSelectionMode(QTable::SelectionMode)
	this->QTable::setSelectionMode(*(QTable::SelectionMode *)x[1].s_class);
    }
    void x_19(Smoke::Stack x) const {
	// selectionMode()
	QTable::SelectionMode xret = this->QTable::selectionMode();
	x[0].s_class = (void*)new QTable::SelectionMode(xret);
    }
    void x_20(Smoke::Stack x) {
	// setItem(int, int, QTableItem*)
	this->QTable::setItem((int)x[1].s_int,(int)x[2].s_int,(QTableItem*)x[3].s_class);
    }
    void x_21(Smoke::Stack x) {
	// setText(int, int, const QString&)
	this->QTable::setText((int)x[1].s_int,(int)x[2].s_int,*(const QString *)x[3].s_class);
    }
    void x_22(Smoke::Stack x) {
	// setPixmap(int, int, const QPixmap&)
	this->QTable::setPixmap((int)x[1].s_int,(int)x[2].s_int,*(const QPixmap *)x[3].s_class);
    }
    void x_23(Smoke::Stack x) const {
	// item(int, int)
	QTableItem* xret = this->QTable::item((int)x[1].s_int,(int)x[2].s_int);
	x[0].s_class = (void*)xret;
    }
    void x_24(Smoke::Stack x) const {
	// text(int, int)
	QString xret = this->QTable::text((int)x[1].s_int,(int)x[2].s_int);
	x[0].s_class = (void*)new QString(xret);
    }
    void x_25(Smoke::Stack x) const {
	// pixmap(int, int)
	QPixmap xret = this->QTable::pixmap((int)x[1].s_int,(int)x[2].s_int);
	x[0].s_class = (void*)new QPixmap(xret);
    }
    void x_26(Smoke::Stack x) {
	// clearCell(int, int)
	this->QTable::clearCell((int)x[1].s_int,(int)x[2].s_int);
    }
    void x_27(Smoke::Stack x) const {
	// cellGeometry(int, int)
	QRect xret = this->QTable::cellGeometry((int)x[1].s_int,(int)x[2].s_int);
	x[0].s_class = (void*)new QRect(xret);
    }
    void x_28(Smoke::Stack x) const {
	// columnWidth(int)
	int xret = this->QTable::columnWidth((int)x[1].s_int);
	x[0].s_int = (int)xret;
    }
    void x_29(Smoke::Stack x) const {
	// rowHeight(int)
	int xret = this->QTable::rowHeight((int)x[1].s_int);
	x[0].s_int = (int)xret;
    }
    void x_30(Smoke::Stack x) const {
	// columnPos(int)
	int xret = this->QTable::columnPos((int)x[1].s_int);
	x[0].s_int = (int)xret;
    }
    void x_31(Smoke::Stack x) const {
	// rowPos(int)
	int xret = this->QTable::rowPos((int)x[1].s_int);
	x[0].s_int = (int)xret;
    }
    void x_32(Smoke::Stack x) const {
	// columnAt(int)
	int xret = this->QTable::columnAt((int)x[1].s_int);
	x[0].s_int = (int)xret;
    }
    void x_33(Smoke::Stack x) const {
	// rowAt(int)
	int xret = this->QTable::rowAt((int)x[1].s_int);
	x[0].s_int = (int)xret;
    }
    void x_34(Smoke::Stack x) const {
	// numRows()
	int xret = this->QTable::numRows();
	x[0].s_int = (int)xret;
    }
    void x_35(Smoke::Stack x) const {
	// numCols()
	int xret = this->QTable::numCols();
	x[0].s_int = (int)xret;
    }
    void x_36(Smoke::Stack x) {
	// updateCell(int, int)
	this->QTable::updateCell((int)x[1].s_int,(int)x[2].s_int);
    }
    void x_37(Smoke::Stack x) {
	// eventFilter(QObject*, QEvent*)
	bool xret = this->QTable::eventFilter((QObject*)x[1].s_class,(QEvent*)x[2].s_class);
	x[0].s_bool = (bool)xret;
    }
    void x_38(Smoke::Stack x) const {
	// currentRow()
	int xret = this->QTable::currentRow();
	x[0].s_int = (int)xret;
    }
    void x_39(Smoke::Stack x) const {
	// currentColumn()
	int xret = this->QTable::currentColumn();
	x[0].s_int = (int)xret;
    }
    void x_40(Smoke::Stack x) {
	// ensureCellVisible(int, int)
	this->QTable::ensureCellVisible((int)x[1].s_int,(int)x[2].s_int);
    }
    void x_41(Smoke::Stack x) const {
	// isSelected(int, int)
	bool xret = this->QTable::isSelected((int)x[1].s_int,(int)x[2].s_int);
	x[0].s_bool = (bool)xret;
    }
    void x_42(Smoke::Stack x) const {
	// isRowSelected(int, bool)
	bool xret = this->QTable::isRowSelected((int)x[1].s_int,(bool)x[2].s_bool);
	x[0].s_bool = (bool)xret;
    }
    void x_43(Smoke::Stack x) const {
	// isRowSelected(int)
	bool xret = this->QTable::isRowSelected((int)x[1].s_int);
	x[0].s_bool = (bool)xret;
    }
    void x_44(Smoke::Stack x) const {
	// isColumnSelected(int, bool)
	bool xret = this->QTable::isColumnSelected((int)x[1].s_int,(bool)x[2].s_bool);
	x[0].s_bool = (bool)xret;
    }
    void x_45(Smoke::Stack x) const {
	// isColumnSelected(int)
	bool xret = this->QTable::isColumnSelected((int)x[1].s_int);
	x[0].s_bool = (bool)xret;
    }
    void x_46(Smoke::Stack x) const {
	// numSelections()
	int xret = this->QTable::numSelections();
	x[0].s_int = (int)xret;
    }
    void x_47(Smoke::Stack x) const {
	// selection(int)
	QTableSelection xret = this->QTable::selection((int)x[1].s_int);
	x[0].s_class = (void*)new QTableSelection(xret);
    }
    void x_48(Smoke::Stack x) {
	// addSelection(const QTableSelection&)
	int xret = this->QTable::addSelection(*(const QTableSelection *)x[1].s_class);
	x[0].s_int = (int)xret;
    }
    void x_49(Smoke::Stack x) {
	// removeSelection(const QTableSelection&)
	this->QTable::removeSelection(*(const QTableSelection *)x[1].s_class);
    }
    void x_50(Smoke::Stack x) {
	// removeSelection(int)
	this->QTable::removeSelection((int)x[1].s_int);
    }
    void x_51(Smoke::Stack x) const {
	// currentSelection()
	int xret = this->QTable::currentSelection();
	x[0].s_int = (int)xret;
    }
    void x_52(Smoke::Stack x) const {
	// showGrid()
	bool xret = this->QTable::showGrid();
	x[0].s_bool = (bool)xret;
    }
    void x_53(Smoke::Stack x) const {
	// columnMovingEnabled()
	bool xret = this->QTable::columnMovingEnabled();
	x[0].s_bool = (bool)xret;
    }
    void x_54(Smoke::Stack x) const {
	// rowMovingEnabled()
	bool xret = this->QTable::rowMovingEnabled();
	x[0].s_bool = (bool)xret;
    }
    void x_55(Smoke::Stack x) {
	// sortColumn(int, bool, bool)
	this->QTable::sortColumn((int)x[1].s_int,(bool)x[2].s_bool,(bool)x[3].s_bool);
    }
    void x_56(Smoke::Stack x) {
	// sortColumn(int, bool)
	this->QTable::sortColumn((int)x[1].s_int,(bool)x[2].s_bool);
    }
    void x_57(Smoke::Stack x) {
	// sortColumn(int)
	this->QTable::sortColumn((int)x[1].s_int);
    }
    void x_58(Smoke::Stack x) const {
	// sorting()
	bool xret = this->QTable::sorting();
	x[0].s_bool = (bool)xret;
    }
    void x_59(Smoke::Stack x) {
	// takeItem(QTableItem*)
	this->QTable::takeItem((QTableItem*)x[1].s_class);
    }
    void x_60(Smoke::Stack x) {
	// setCellWidget(int, int, QWidget*)
	this->QTable::setCellWidget((int)x[1].s_int,(int)x[2].s_int,(QWidget*)x[3].s_class);
    }
    void x_61(Smoke::Stack x) const {
	// cellWidget(int, int)
	QWidget* xret = this->QTable::cellWidget((int)x[1].s_int,(int)x[2].s_int);
	x[0].s_class = (void*)xret;
    }
    void x_62(Smoke::Stack x) {
	// clearCellWidget(int, int)
	this->QTable::clearCellWidget((int)x[1].s_int,(int)x[2].s_int);
    }
    void x_63(Smoke::Stack x) const {
	// cellRect(int, int)
	QRect xret = this->QTable::cellRect((int)x[1].s_int,(int)x[2].s_int);
	x[0].s_class = (void*)new QRect(xret);
    }
    void x_64(Smoke::Stack x) {
	// paintCell(QPainter*, int, int, const QRect&, bool)
	this->QTable::paintCell((QPainter*)x[1].s_class,(int)x[2].s_int,(int)x[3].s_int,*(const QRect *)x[4].s_class,(bool)x[5].s_bool);
    }
    void x_65(Smoke::Stack x) {
	// paintCell(QPainter*, int, int, const QRect&, bool, const QColorGroup&)
	this->QTable::paintCell((QPainter*)x[1].s_class,(int)x[2].s_int,(int)x[3].s_int,*(const QRect *)x[4].s_class,(bool)x[5].s_bool,*(const QColorGroup *)x[6].s_class);
    }
    void x_66(Smoke::Stack x) {
	// paintFocus(QPainter*, const QRect&)
	this->QTable::paintFocus((QPainter*)x[1].s_class,*(const QRect *)x[2].s_class);
    }
    void x_67(Smoke::Stack x) const {
	// sizeHint()
	QSize xret = this->QTable::sizeHint();
	x[0].s_class = (void*)new QSize(xret);
    }
    void x_68(Smoke::Stack x) const {
	// isReadOnly()
	bool xret = this->QTable::isReadOnly();
	x[0].s_bool = (bool)xret;
    }
    void x_69(Smoke::Stack x) const {
	// isRowReadOnly(int)
	bool xret = this->QTable::isRowReadOnly((int)x[1].s_int);
	x[0].s_bool = (bool)xret;
    }
    void x_70(Smoke::Stack x) const {
	// isColumnReadOnly(int)
	bool xret = this->QTable::isColumnReadOnly((int)x[1].s_int);
	x[0].s_bool = (bool)xret;
    }
    void x_71(Smoke::Stack x) {
	// setEnabled(bool)
	this->QTable::setEnabled((bool)x[1].s_bool);
    }
    void x_72(Smoke::Stack x) {
	// repaintSelections()
	this->QTable::repaintSelections();
    }
    void x_73(Smoke::Stack x) {
	// setFocusStyle(QTable::FocusStyle)
	this->QTable::setFocusStyle(*(QTable::FocusStyle *)x[1].s_class);
    }
    void x_74(Smoke::Stack x) const {
	// focusStyle()
	QTable::FocusStyle xret = this->QTable::focusStyle();
	x[0].s_class = (void*)new QTable::FocusStyle(xret);
    }
    void x_75(Smoke::Stack x) {
	// setNumRows(int)
	this->QTable::setNumRows((int)x[1].s_int);
    }
    void x_76(Smoke::Stack x) {
	// setNumCols(int)
	this->QTable::setNumCols((int)x[1].s_int);
    }
    void x_77(Smoke::Stack x) {
	// setShowGrid(bool)
	this->QTable::setShowGrid((bool)x[1].s_bool);
    }
    void x_78(Smoke::Stack x) {
	// hideRow(int)
	this->QTable::hideRow((int)x[1].s_int);
    }
    void x_79(Smoke::Stack x) {
	// hideColumn(int)
	this->QTable::hideColumn((int)x[1].s_int);
    }
    void x_80(Smoke::Stack x) {
	// showRow(int)
	this->QTable::showRow((int)x[1].s_int);
    }
    void x_81(Smoke::Stack x) {
	// showColumn(int)
	this->QTable::showColumn((int)x[1].s_int);
    }
    void x_82(Smoke::Stack x) {
	// setColumnWidth(int, int)
	this->QTable::setColumnWidth((int)x[1].s_int,(int)x[2].s_int);
    }
    void x_83(Smoke::Stack x) {
	// setRowHeight(int, int)
	this->QTable::setRowHeight((int)x[1].s_int,(int)x[2].s_int);
    }
    void x_84(Smoke::Stack x) {
	// adjustColumn(int)
	this->QTable::adjustColumn((int)x[1].s_int);
    }
    void x_85(Smoke::Stack x) {
	// adjustRow(int)
	this->QTable::adjustRow((int)x[1].s_int);
    }
    void x_86(Smoke::Stack x) {
	// setColumnStretchable(int, bool)
	this->QTable::setColumnStretchable((int)x[1].s_int,(bool)x[2].s_bool);
    }
    void x_87(Smoke::Stack x) {
	// setRowStretchable(int, bool)
	this->QTable::setRowStretchable((int)x[1].s_int,(bool)x[2].s_bool);
    }
    void x_88(Smoke::Stack x) const {
	// isColumnStretchable(int)
	bool xret = this->QTable::isColumnStretchable((int)x[1].s_int);
	x[0].s_bool = (bool)xret;
    }
    void x_89(Smoke::Stack x) const {
	// isRowStretchable(int)
	bool xret = this->QTable::isRowStretchable((int)x[1].s_int);
	x[0].s_bool = (bool)xret;
    }
    void x_90(Smoke::Stack x) {
	// setSorting(bool)
	this->QTable::setSorting((bool)x[1].s_bool);
    }
    void x_91(Smoke::Stack x) {
	// swapRows(int, int, bool)
	this->QTable::swapRows((int)x[1].s_int,(int)x[2].s_int,(bool)x[3].s_bool);
    }
    void x_92(Smoke::Stack x) {
	// swapRows(int, int)
	this->QTable::swapRows((int)x[1].s_int,(int)x[2].s_int);
    }
    void x_93(Smoke::Stack x) {
	// swapColumns(int, int, bool)
	this->QTable::swapColumns((int)x[1].s_int,(int)x[2].s_int,(bool)x[3].s_bool);
    }
    void x_94(Smoke::Stack x) {
	// swapColumns(int, int)
	this->QTable::swapColumns((int)x[1].s_int,(int)x[2].s_int);
    }
    void x_95(Smoke::Stack x) {
	// swapCells(int, int, int, int)
	this->QTable::swapCells((int)x[1].s_int,(int)x[2].s_int,(int)x[3].s_int,(int)x[4].s_int);
    }
    void x_96(Smoke::Stack x) {
	// setLeftMargin(int)
	this->QTable::setLeftMargin((int)x[1].s_int);
    }
    void x_97(Smoke::Stack x) {
	// setTopMargin(int)
	this->QTable::setTopMargin((int)x[1].s_int);
    }
    void x_98(Smoke::Stack x) {
	// setCurrentCell(int, int)
	this->QTable::setCurrentCell((int)x[1].s_int,(int)x[2].s_int);
    }
    void x_99(Smoke::Stack x) {
	// clearSelection(bool)
	this->QTable::clearSelection((bool)x[1].s_bool);
    }
    void x_100(Smoke::Stack x) {
	// clearSelection()
	this->QTable::clearSelection();
    }
    void x_101(Smoke::Stack x) {
	// setColumnMovingEnabled(bool)
	this->QTable::setColumnMovingEnabled((bool)x[1].s_bool);
    }
    void x_102(Smoke::Stack x) {
	// setRowMovingEnabled(bool)
	this->QTable::setRowMovingEnabled((bool)x[1].s_bool);
    }
    void x_103(Smoke::Stack x) {
	// setReadOnly(bool)
	this->QTable::setReadOnly((bool)x[1].s_bool);
    }
    void x_104(Smoke::Stack x) {
	// setRowReadOnly(int, bool)
	this->QTable::setRowReadOnly((int)x[1].s_int,(bool)x[2].s_bool);
    }
    void x_105(Smoke::Stack x) {
	// setColumnReadOnly(int, bool)
	this->QTable::setColumnReadOnly((int)x[1].s_int,(bool)x[2].s_bool);
    }
    void x_106(Smoke::Stack x) {
	// setDragEnabled(bool)
	this->QTable::setDragEnabled((bool)x[1].s_bool);
    }
    void x_107(Smoke::Stack x) const {
	// dragEnabled()
	bool xret = this->QTable::dragEnabled();
	x[0].s_bool = (bool)xret;
    }
    void x_108(Smoke::Stack x) {
	// insertRows(int, int)
	this->QTable::insertRows((int)x[1].s_int,(int)x[2].s_int);
    }
    void x_109(Smoke::Stack x) {
	// insertRows(int)
	this->QTable::insertRows((int)x[1].s_int);
    }
    void x_110(Smoke::Stack x) {
	// insertColumns(int, int)
	this->QTable::insertColumns((int)x[1].s_int,(int)x[2].s_int);
    }
    void x_111(Smoke::Stack x) {
	// insertColumns(int)
	this->QTable::insertColumns((int)x[1].s_int);
    }
    void x_112(Smoke::Stack x) {
	// removeRow(int)
	this->QTable::removeRow((int)x[1].s_int);
    }
    void x_113(Smoke::Stack x) {
	// removeRows(const QMemArray<int>&)
	this->QTable::removeRows(*(const QMemArray<int> *)x[1].s_class);
    }
    void x_114(Smoke::Stack x) {
	// removeColumn(int)
	this->QTable::removeColumn((int)x[1].s_int);
    }
    void x_115(Smoke::Stack x) {
	// removeColumns(const QMemArray<int>&)
	this->QTable::removeColumns(*(const QMemArray<int> *)x[1].s_class);
    }
    void x_116(Smoke::Stack x) {
	// editCell(int, int, bool)
	this->QTable::editCell((int)x[1].s_int,(int)x[2].s_int,(bool)x[3].s_bool);
    }
    void x_117(Smoke::Stack x) {
	// editCell(int, int)
	this->QTable::editCell((int)x[1].s_int,(int)x[2].s_int);
    }
    void x_118(Smoke::Stack x) {
	// currentChanged(int, int)
	this->QTable::currentChanged((int)x[1].s_int,(int)x[2].s_int);
    }
    void x_119(Smoke::Stack x) {
	// clicked(int, int, int, const QPoint&)
	this->QTable::clicked((int)x[1].s_int,(int)x[2].s_int,(int)x[3].s_int,*(const QPoint *)x[4].s_class);
    }
    void x_120(Smoke::Stack x) {
	// doubleClicked(int, int, int, const QPoint&)
	this->QTable::doubleClicked((int)x[1].s_int,(int)x[2].s_int,(int)x[3].s_int,*(const QPoint *)x[4].s_class);
    }
    void x_121(Smoke::Stack x) {
	// pressed(int, int, int, const QPoint&)
	this->QTable::pressed((int)x[1].s_int,(int)x[2].s_int,(int)x[3].s_int,*(const QPoint *)x[4].s_class);
    }
    void x_122(Smoke::Stack x) {
	// selectionChanged()
	this->QTable::selectionChanged();
    }
    void x_123(Smoke::Stack x) {
	// valueChanged(int, int)
	this->QTable::valueChanged((int)x[1].s_int,(int)x[2].s_int);
    }
    void x_124(Smoke::Stack x) {
	// contextMenuRequested(int, int, const QPoint&)
	this->QTable::contextMenuRequested((int)x[1].s_int,(int)x[2].s_int,*(const QPoint *)x[3].s_class);
    }
    void x_125(Smoke::Stack x) {
	// dropped(QDropEvent*)
	this->QTable::dropped((QDropEvent*)x[1].s_class);
    }
    void x_126(Smoke::Stack x) {
	// drawContents(QPainter*, int, int, int, int)
	this->QTable::drawContents((QPainter*)x[1].s_class,(int)x[2].s_int,(int)x[3].s_int,(int)x[4].s_int,(int)x[5].s_int);
    }
    void x_127(Smoke::Stack x) {
	// contentsMousePressEvent(QMouseEvent*)
	this->QTable::contentsMousePressEvent((QMouseEvent*)x[1].s_class);
    }
    void x_128(Smoke::Stack x) {
	// contentsMouseMoveEvent(QMouseEvent*)
	this->QTable::contentsMouseMoveEvent((QMouseEvent*)x[1].s_class);
    }
    void x_129(Smoke::Stack x) {
	// contentsMouseDoubleClickEvent(QMouseEvent*)
	this->QTable::contentsMouseDoubleClickEvent((QMouseEvent*)x[1].s_class);
    }
    void x_130(Smoke::Stack x) {
	// contentsMouseReleaseEvent(QMouseEvent*)
	this->QTable::contentsMouseReleaseEvent((QMouseEvent*)x[1].s_class);
    }
    void x_131(Smoke::Stack x) {
	// contentsContextMenuEvent(QContextMenuEvent*)
	this->QTable::contentsContextMenuEvent((QContextMenuEvent*)x[1].s_class);
    }
    void x_132(Smoke::Stack x) {
	// keyPressEvent(QKeyEvent*)
	this->QTable::keyPressEvent((QKeyEvent*)x[1].s_class);
    }
    void x_133(Smoke::Stack x) {
	// focusInEvent(QFocusEvent*)
	this->QTable::focusInEvent((QFocusEvent*)x[1].s_class);
    }
    void x_134(Smoke::Stack x) {
	// focusOutEvent(QFocusEvent*)
	this->QTable::focusOutEvent((QFocusEvent*)x[1].s_class);
    }
    void x_135(Smoke::Stack x) {
	// viewportResizeEvent(QResizeEvent*)
	this->QTable::viewportResizeEvent((QResizeEvent*)x[1].s_class);
    }
    void x_136(Smoke::Stack x) {
	// showEvent(QShowEvent*)
	this->QTable::showEvent((QShowEvent*)x[1].s_class);
    }
    void x_137(Smoke::Stack x) {
	// setEditMode(QTable::EditMode, int, int)
	this->QTable::setEditMode(*(QTable::EditMode *)x[1].s_class,(int)x[2].s_int,(int)x[3].s_int);
    }
    void x_138(Smoke::Stack x) {
	// contentsDragEnterEvent(QDragEnterEvent*)
	this->QTable::contentsDragEnterEvent((QDragEnterEvent*)x[1].s_class);
    }
    void x_139(Smoke::Stack x) {
	// contentsDragMoveEvent(QDragMoveEvent*)
	this->QTable::contentsDragMoveEvent((QDragMoveEvent*)x[1].s_class);
    }
    void x_140(Smoke::Stack x) {
	// contentsDragLeaveEvent(QDragLeaveEvent*)
	this->QTable::contentsDragLeaveEvent((QDragLeaveEvent*)x[1].s_class);
    }
    void x_141(Smoke::Stack x) {
	// contentsDropEvent(QDropEvent*)
	this->QTable::contentsDropEvent((QDropEvent*)x[1].s_class);
    }
    void x_142(Smoke::Stack x) {
	// dragObject()
	QDragObject* xret = this->QTable::dragObject();
	x[0].s_class = (void*)xret;
    }
    void x_143(Smoke::Stack x) {
	// startDrag()
	this->QTable::startDrag();
    }
    void x_144(Smoke::Stack x) {
	// paintEmptyArea(QPainter*, int, int, int, int)
	this->QTable::paintEmptyArea((QPainter*)x[1].s_class,(int)x[2].s_int,(int)x[3].s_int,(int)x[4].s_int,(int)x[5].s_int);
    }
    void x_145(Smoke::Stack x) {
	// activateNextCell()
	this->QTable::activateNextCell();
    }
    void x_146(Smoke::Stack x) const {
	// createEditor(int, int, bool)
	QWidget* xret = this->QTable::createEditor((int)x[1].s_int,(int)x[2].s_int,(bool)x[3].s_bool);
	x[0].s_class = (void*)xret;
    }
    void x_147(Smoke::Stack x) {
	// setCellContentFromEditor(int, int)
	this->QTable::setCellContentFromEditor((int)x[1].s_int,(int)x[2].s_int);
    }
    void x_148(Smoke::Stack x) {
	// beginEdit(int, int, bool)
	QWidget* xret = this->QTable::beginEdit((int)x[1].s_int,(int)x[2].s_int,(bool)x[3].s_bool);
	x[0].s_class = (void*)xret;
    }
    void x_149(Smoke::Stack x) {
	// endEdit(int, int, bool, bool)
	this->QTable::endEdit((int)x[1].s_int,(int)x[2].s_int,(bool)x[3].s_bool,(bool)x[4].s_bool);
    }
    void x_150(Smoke::Stack x) {
	// resizeData(int)
	this->QTable::resizeData((int)x[1].s_int);
    }
    void x_151(Smoke::Stack x) {
	// insertWidget(int, int, QWidget*)
	this->QTable::insertWidget((int)x[1].s_int,(int)x[2].s_int,(QWidget*)x[3].s_class);
    }
    void x_152(Smoke::Stack x) const {
	// indexOf(int, int)
	int xret = this->QTable::indexOf((int)x[1].s_int,(int)x[2].s_int);
	x[0].s_int = (int)xret;
    }
    void x_153(Smoke::Stack x) {
	// windowActivationChange(bool)
	this->QTable::windowActivationChange((bool)x[1].s_bool);
    }
    void x_154(Smoke::Stack x) const {
	// isEditing()
	bool xret = this->QTable::isEditing();
	x[0].s_bool = (bool)xret;
    }
    void x_155(Smoke::Stack x) const {
	// editMode()
	QTable::EditMode xret = this->QTable::editMode();
	x[0].s_class = (void*)new QTable::EditMode(xret);
    }
    void x_156(Smoke::Stack x) const {
	// currEditRow()
	int xret = this->QTable::currEditRow();
	x[0].s_int = (int)xret;
    }
    void x_157(Smoke::Stack x) const {
	// currEditCol()
	int xret = this->QTable::currEditCol();
	x[0].s_int = (int)xret;
    }
    void x_158(Smoke::Stack x) {
	// columnWidthChanged(int)
	this->QTable::columnWidthChanged((int)x[1].s_int);
    }
    void x_159(Smoke::Stack x) {
	// rowHeightChanged(int)
	this->QTable::rowHeightChanged((int)x[1].s_int);
    }
    void x_160(Smoke::Stack x) {
	// columnIndexChanged(int, int, int)
	this->QTable::columnIndexChanged((int)x[1].s_int,(int)x[2].s_int,(int)x[3].s_int);
    }
    void x_161(Smoke::Stack x) {
	// rowIndexChanged(int, int, int)
	this->QTable::rowIndexChanged((int)x[1].s_int,(int)x[2].s_int,(int)x[3].s_int);
    }
    void x_162(Smoke::Stack x) {
	// columnClicked(int)
	this->QTable::columnClicked((int)x[1].s_int);
    }
    virtual void activateNextCell() {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 8347, x)) return;
	this->QTable::activateNextCell();
    }
    virtual void addChild(QWidget* x1, int x2, int x3) {
	Smoke::StackItem x[4];
	x[1].s_class = (void*)x1;
	x[2].s_int = (int)x2;
	x[3].s_int = (int)x3;
	if(call_method((void*)this, 6584, x)) return;
	this->QScrollView::addChild(x1, x2, x3);
    }
    virtual int addSelection(const QTableSelection& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(call_method((void*)this, 8247, x)) return (int)x[0].s_int;
	return this->QTable::addSelection(x1);
    }
    virtual void adjustColumn(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(call_method((void*)this, 8283, x)) return;
	this->QTable::adjustColumn(x1);
    }
    virtual void adjustRow(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(call_method((void*)this, 8284, x)) return;
	this->QTable::adjustRow(x1);
    }
    virtual void adjustSize() {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 9609, x)) return;
	this->QWidget::adjustSize();
    }
    virtual QWidget* beginEdit(int x1, int x2, bool x3) {
	Smoke::StackItem x[4];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	x[3].s_bool = (bool)x3;
	if(call_method((void*)this, 8350, x)) 	return (QWidget*)x[0].s_class;
	return this->QTable::beginEdit(x1, x2, x3);
    }
    virtual QRect cellGeometry(int x1, int x2) const {
	Smoke::StackItem x[3];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	if(call_method((void*)this, 8226, x)) {
	    QRect *xptr = (QRect *)x[0].s_class;
	    QRect xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QTable::cellGeometry(x1, x2);
    }
    virtual QRect cellRect(int x1, int x2) const {
	Smoke::StackItem x[3];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	if(call_method((void*)this, 8262, x)) {
	    QRect *xptr = (QRect *)x[0].s_class;
	    QRect xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QTable::cellRect(x1, x2);
    }
    virtual QWidget* cellWidget(int x1, int x2) const {
	Smoke::StackItem x[3];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	if(call_method((void*)this, 8260, x)) 	return (QWidget*)x[0].s_class;
	return this->QTable::cellWidget(x1, x2);
    }
    virtual bool checkConnectArgs(const char* x1, const QObject* x2, const char* x3) {
	Smoke::StackItem x[4];
	x[1].s_class = (void*)x1;
	x[2].s_class = (void*)x2;
	x[3].s_class = (void*)x3;
	if(call_method((void*)this, 5469, x)) return (bool)x[0].s_bool;
	return this->QObject::checkConnectArgs(x1, x2, x3);
    }
    virtual void childEvent(QChildEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 5465, x)) return;
	this->QObject::childEvent(x1);
    }
    virtual void clearCell(int x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	if(call_method((void*)this, 8225, x)) return;
	this->QTable::clearCell(x1, x2);
    }
    virtual void clearCellWidget(int x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	if(call_method((void*)this, 8261, x)) return;
	this->QTable::clearCellWidget(x1, x2);
    }
    virtual bool close(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = (bool)x1;
	if(call_method((void*)this, 9596, x)) return (bool)x[0].s_bool;
	return this->QWidget::close(x1);
    }
    virtual void closeEvent(QCloseEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 9704, x)) return;
	this->QWidget::closeEvent(x1);
    }
    virtual bool cmd(int x1, QPainter* x2, QPDevCmdParam* x3) {
	Smoke::StackItem x[4];
	x[1].s_int = (int)x1;
	x[2].s_class = (void*)x2;
	x[3].s_class = (void*)x3;
	if(call_method((void*)this, 5552, x)) return (bool)x[0].s_bool;
	return this->QPaintDevice::cmd(x1, x2, x3);
    }
    virtual int columnAt(int x1) const {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(call_method((void*)this, 8231, x)) return (int)x[0].s_int;
	return this->QTable::columnAt(x1);
    }
    virtual void columnClicked(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(call_method((void*)this, 8364, x)) return;
	this->QTable::columnClicked(x1);
    }
    virtual void columnIndexChanged(int x1, int x2, int x3) {
	Smoke::StackItem x[4];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	x[3].s_int = (int)x3;
	if(call_method((void*)this, 8362, x)) return;
	this->QTable::columnIndexChanged(x1, x2, x3);
    }
    virtual int columnPos(int x1) const {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(call_method((void*)this, 8229, x)) return (int)x[0].s_int;
	return this->QTable::columnPos(x1);
    }
    virtual int columnWidth(int x1) const {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(call_method((void*)this, 8227, x)) return (int)x[0].s_int;
	return this->QTable::columnWidth(x1);
    }
    virtual void columnWidthChanged(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(call_method((void*)this, 8360, x)) return;
	this->QTable::columnWidthChanged(x1);
    }
    virtual void connectNotify(const char* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 5467, x)) return;
	this->QObject::connectNotify(x1);
    }
    virtual void contentsContextMenuEvent(QContextMenuEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 8333, x)) return;
	this->QTable::contentsContextMenuEvent(x1);
    }
    virtual void contentsDragEnterEvent(QDragEnterEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 8340, x)) return;
	this->QTable::contentsDragEnterEvent(x1);
    }
    virtual void contentsDragLeaveEvent(QDragLeaveEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 8342, x)) return;
	this->QTable::contentsDragLeaveEvent(x1);
    }
    virtual void contentsDragMoveEvent(QDragMoveEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 8341, x)) return;
	this->QTable::contentsDragMoveEvent(x1);
    }
    virtual void contentsDropEvent(QDropEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 8343, x)) return;
	this->QTable::contentsDropEvent(x1);
    }
    virtual void contentsMouseDoubleClickEvent(QMouseEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 8331, x)) return;
	this->QTable::contentsMouseDoubleClickEvent(x1);
    }
    virtual void contentsMouseMoveEvent(QMouseEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 8330, x)) return;
	this->QTable::contentsMouseMoveEvent(x1);
    }
    virtual void contentsMousePressEvent(QMouseEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 8329, x)) return;
	this->QTable::contentsMousePressEvent(x1);
    }
    virtual void contentsMouseReleaseEvent(QMouseEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 8332, x)) return;
	this->QTable::contentsMouseReleaseEvent(x1);
    }
    virtual void contentsWheelEvent(QWheelEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 6654, x)) return;
	this->QScrollView::contentsWheelEvent(x1);
    }
    virtual void contextMenuEvent(QContextMenuEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 6683, x)) return;
	this->QScrollView::contextMenuEvent(x1);
    }
    virtual void create(WId x1, bool x2, bool x3) {
	Smoke::StackItem x[4];
	x[1].s_class = (void*)&x1;
	x[2].s_bool = (bool)x2;
	x[3].s_bool = (bool)x3;
	if(call_method((void*)this, 9724, x)) return;
	this->QWidget::create(x1, x2, x3);
    }
    virtual QWidget* createEditor(int x1, int x2, bool x3) const {
	Smoke::StackItem x[4];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	x[3].s_bool = (bool)x3;
	if(call_method((void*)this, 8348, x)) 	return (QWidget*)x[0].s_class;
	return this->QTable::createEditor(x1, x2, x3);
    }
    virtual int currentSelection() const {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 8250, x)) return (int)x[0].s_int;
	return this->QTable::currentSelection();
    }
    virtual void customEvent(QCustomEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 5466, x)) return;
	this->QObject::customEvent(x1);
    }
    virtual bool customWhatsThis() const {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 9634, x)) return (bool)x[0].s_bool;
	return this->QWidget::customWhatsThis();
    }
    virtual void destroy(bool x1, bool x2) {
	Smoke::StackItem x[3];
	x[1].s_bool = (bool)x1;
	x[2].s_bool = (bool)x2;
	if(call_method((void*)this, 9728, x)) return;
	this->QWidget::destroy(x1, x2);
    }
    virtual void disconnectNotify(const char* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 5468, x)) return;
	this->QObject::disconnectNotify(x1);
    }
    virtual void dragEnterEvent(QDragEnterEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 9710, x)) return;
	this->QWidget::dragEnterEvent(x1);
    }
    virtual void dragLeaveEvent(QDragLeaveEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 9712, x)) return;
	this->QWidget::dragLeaveEvent(x1);
    }
    virtual void dragMoveEvent(QDragMoveEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 9711, x)) return;
	this->QWidget::dragMoveEvent(x1);
    }
    virtual QDragObject* dragObject() {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 8344, x)) 	return (QDragObject*)x[0].s_class;
	return this->QTable::dragObject();
    }
    virtual void drawContents(QPainter* x1, int x2, int x3, int x4, int x5) {
	Smoke::StackItem x[6];
	x[1].s_class = (void*)x1;
	x[2].s_int = (int)x2;
	x[3].s_int = (int)x3;
	x[4].s_int = (int)x4;
	x[5].s_int = (int)x5;
	if(call_method((void*)this, 8328, x)) return;
	this->QTable::drawContents(x1, x2, x3, x4, x5);
    }
    virtual void drawContentsOffset(QPainter* x1, int x2, int x3, int x4, int x5, int x6, int x7) {
	Smoke::StackItem x[8];
	x[1].s_class = (void*)x1;
	x[2].s_int = (int)x2;
	x[3].s_int = (int)x3;
	x[4].s_int = (int)x4;
	x[5].s_int = (int)x5;
	x[6].s_int = (int)x6;
	x[7].s_int = (int)x7;
	if(call_method((void*)this, 6645, x)) return;
	this->QScrollView::drawContentsOffset(x1, x2, x3, x4, x5, x6, x7);
    }
    virtual void drawFrame(QPainter* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 2941, x)) return;
	this->QFrame::drawFrame(x1);
    }
    virtual void dropEvent(QDropEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 9713, x)) return;
	this->QWidget::dropEvent(x1);
    }
    virtual void editCell(int x1, int x2, bool x3) {
	Smoke::StackItem x[4];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	x[3].s_bool = (bool)x3;
	if(call_method((void*)this, 8315, x)) return;
	this->QTable::editCell(x1, x2, x3);
    }
    virtual void enabledChange(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = (bool)x1;
	if(call_method((void*)this, 9718, x)) return;
	this->QWidget::enabledChange(x1);
    }
    virtual void endEdit(int x1, int x2, bool x3, bool x4) {
	Smoke::StackItem x[5];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	x[3].s_bool = (bool)x3;
	x[4].s_bool = (bool)x4;
	if(call_method((void*)this, 8351, x)) return;
	this->QTable::endEdit(x1, x2, x3, x4);
    }
    virtual void enterEvent(QEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 9699, x)) return;
	this->QWidget::enterEvent(x1);
    }
    virtual bool event(QEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 9689, x)) return (bool)x[0].s_bool;
	return this->QWidget::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
	Smoke::StackItem x[3];
	x[1].s_class = (void*)x1;
	x[2].s_class = (void*)x2;
	if(call_method((void*)this, 8236, x)) return (bool)x[0].s_bool;
	return this->QTable::eventFilter(x1, x2);
    }
    virtual void focusInEvent(QFocusEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 8335, x)) return;
	this->QTable::focusInEvent(x1);
    }
    virtual bool focusNextPrevChild(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = (bool)x1;
	if(call_method((void*)this, 6674, x)) return (bool)x[0].s_bool;
	return this->QScrollView::focusNextPrevChild(x1);
    }
    virtual void focusOutEvent(QFocusEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 8336, x)) return;
	this->QTable::focusOutEvent(x1);
    }
    virtual void fontChange(const QFont& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(call_method((void*)this, 9720, x)) return;
	this->QWidget::fontChange(x1);
    }
    virtual int fontInf(QFont* x1, int x2) const {
	Smoke::StackItem x[3];
	x[1].s_class = (void*)x1;
	x[2].s_int = (int)x2;
	if(call_method((void*)this, 5557, x)) return (int)x[0].s_int;
	return this->QPaintDevice::fontInf(x1, x2);
    }
    virtual int fontMet(QFont* x1, int x2, const char* x3, int x4) const {
	Smoke::StackItem x[5];
	x[1].s_class = (void*)x1;
	x[2].s_int = (int)x2;
	x[3].s_class = (void*)x3;
	x[4].s_int = (int)x4;
	if(call_method((void*)this, 5554, x)) return (int)x[0].s_int;
	return this->QPaintDevice::fontMet(x1, x2, x3, x4);
    }
    virtual void frameChanged() {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 6668, x)) return;
	this->QScrollView::frameChanged();
    }
    virtual int heightForWidth(int x1) const {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(call_method((void*)this, 9608, x)) return (int)x[0].s_int;
	return this->QWidget::heightForWidth(x1);
    }
    virtual void hide() {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 9666, x)) return;
	this->QWidget::hide();
    }
    virtual void hideColumn(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(call_method((void*)this, 8278, x)) return;
	this->QTable::hideColumn(x1);
    }
    virtual void hideEvent(QHideEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 9715, x)) return;
	this->QWidget::hideEvent(x1);
    }
    virtual void hideRow(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(call_method((void*)this, 8277, x)) return;
	this->QTable::hideRow(x1);
    }
    virtual void imComposeEvent(QIMEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 9707, x)) return;
	this->QWidget::imComposeEvent(x1);
    }
    virtual void imEndEvent(QIMEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 9708, x)) return;
	this->QWidget::imEndEvent(x1);
    }
    virtual void imStartEvent(QIMEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 9706, x)) return;
	this->QWidget::imStartEvent(x1);
    }
    virtual void insertChild(QObject* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 5427, x)) return;
	this->QObject::insertChild(x1);
    }
    virtual void insertColumns(int x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	if(call_method((void*)this, 8309, x)) return;
	this->QTable::insertColumns(x1, x2);
    }
    virtual void insertRows(int x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	if(call_method((void*)this, 8307, x)) return;
	this->QTable::insertRows(x1, x2);
    }
    virtual void insertWidget(int x1, int x2, QWidget* x3) {
	Smoke::StackItem x[4];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	x[3].s_class = (void*)x3;
	if(call_method((void*)this, 8353, x)) return;
	this->QTable::insertWidget(x1, x2, x3);
    }
    virtual QTableItem* item(int x1, int x2) const {
	Smoke::StackItem x[3];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	if(call_method((void*)this, 8222, x)) 	return (QTableItem*)x[0].s_class;
	return this->QTable::item(x1, x2);
    }
    virtual void keyPressEvent(QKeyEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 8334, x)) return;
	this->QTable::keyPressEvent(x1);
    }
    virtual void keyReleaseEvent(QKeyEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 9696, x)) return;
	this->QWidget::keyReleaseEvent(x1);
    }
    virtual void leaveEvent(QEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 9700, x)) return;
	this->QWidget::leaveEvent(x1);
    }
    virtual int metric(int x1) const {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(call_method((void*)this, 9722, x)) return (int)x[0].s_int;
	return this->QWidget::metric(x1);
    }
    virtual QSize minimumSizeHint() const {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 6630, x)) {
	    QSize *xptr = (QSize *)x[0].s_class;
	    QSize xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QScrollView::minimumSizeHint();
    }
    virtual void mouseDoubleClickEvent(QMouseEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 6680, x)) return;
	this->QScrollView::mouseDoubleClickEvent(x1);
    }
    virtual void mouseMoveEvent(QMouseEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 6681, x)) return;
	this->QScrollView::mouseMoveEvent(x1);
    }
    virtual void mousePressEvent(QMouseEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 6678, x)) return;
	this->QScrollView::mousePressEvent(x1);
    }
    virtual void mouseReleaseEvent(QMouseEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 6679, x)) return;
	this->QScrollView::mouseReleaseEvent(x1);
    }
    virtual void move(int x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	if(call_method((void*)this, 9678, x)) return;
	this->QWidget::move(x1, x2);
    }
    virtual void moveChild(QWidget* x1, int x2, int x3) {
	Smoke::StackItem x[4];
	x[1].s_class = (void*)x1;
	x[2].s_int = (int)x2;
	x[3].s_int = (int)x3;
	if(call_method((void*)this, 6587, x)) return;
	this->QScrollView::moveChild(x1, x2, x3);
    }
    virtual void moveEvent(QMoveEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 9702, x)) return;
	this->QWidget::moveEvent(x1);
    }
    virtual int numCols() const {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 8234, x)) return (int)x[0].s_int;
	return this->QTable::numCols();
    }
    virtual int numRows() const {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 8233, x)) return (int)x[0].s_int;
	return this->QTable::numRows();
    }
    virtual void paintCell(QPainter* x1, int x2, int x3, const QRect& x4, bool x5) {
	Smoke::StackItem x[6];
	x[1].s_class = (void*)x1;
	x[2].s_int = (int)x2;
	x[3].s_int = (int)x3;
	x[4].s_class = (void*)&x4;
	x[5].s_bool = (bool)x5;
	if(call_method((void*)this, 8263, x)) return;
	this->QTable::paintCell(x1, x2, x3, x4, x5);
    }
    virtual void paintCell(QPainter* x1, int x2, int x3, const QRect& x4, bool x5, const QColorGroup& x6) {
	Smoke::StackItem x[7];
	x[1].s_class = (void*)x1;
	x[2].s_int = (int)x2;
	x[3].s_int = (int)x3;
	x[4].s_class = (void*)&x4;
	x[5].s_bool = (bool)x5;
	x[6].s_class = (void*)&x6;
	if(call_method((void*)this, 8264, x)) return;
	this->QTable::paintCell(x1, x2, x3, x4, x5, x6);
    }
    virtual void paintEmptyArea(QPainter* x1, int x2, int x3, int x4, int x5) {
	Smoke::StackItem x[6];
	x[1].s_class = (void*)x1;
	x[2].s_int = (int)x2;
	x[3].s_int = (int)x3;
	x[4].s_int = (int)x4;
	x[5].s_int = (int)x5;
	if(call_method((void*)this, 8346, x)) return;
	this->QTable::paintEmptyArea(x1, x2, x3, x4, x5);
    }
    virtual void paintEvent(QPaintEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 2939, x)) return;
	this->QFrame::paintEvent(x1);
    }
    virtual void paintFocus(QPainter* x1, const QRect& x2) {
	Smoke::StackItem x[3];
	x[1].s_class = (void*)x1;
	x[2].s_class = (void*)&x2;
	if(call_method((void*)this, 8265, x)) return;
	this->QTable::paintFocus(x1, x2);
    }
    virtual void paletteChange(const QPalette& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(call_method((void*)this, 9719, x)) return;
	this->QWidget::paletteChange(x1);
    }
    virtual QPixmap pixmap(int x1, int x2) const {
	Smoke::StackItem x[3];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	if(call_method((void*)this, 8224, x)) {
	    QPixmap *xptr = (QPixmap *)x[0].s_class;
	    QPixmap xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QTable::pixmap(x1, x2);
    }
    virtual void polish() {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 9672, x)) return;
	this->QWidget::polish();
    }
    virtual QVariant property(const char* x1) const {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 5441, x)) {
	    QVariant *xptr = (QVariant *)x[0].s_class;
	    QVariant xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QObject::property(x1);
    }
    virtual void removeChild(QObject* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 6631, x)) return;
	this->QScrollView::removeChild(x1);
    }
    virtual void removeColumn(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(call_method((void*)this, 8313, x)) return;
	this->QTable::removeColumn(x1);
    }
    virtual void removeColumns(const QMemArray<int>& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(call_method((void*)this, 8314, x)) return;
	this->QTable::removeColumns(x1);
    }
    virtual void removeRow(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(call_method((void*)this, 8311, x)) return;
	this->QTable::removeRow(x1);
    }
    virtual void removeRows(const QMemArray<int>& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(call_method((void*)this, 8312, x)) return;
	this->QTable::removeRows(x1);
    }
    virtual void removeSelection(const QTableSelection& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(call_method((void*)this, 8248, x)) return;
	this->QTable::removeSelection(x1);
    }
    virtual void removeSelection(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(call_method((void*)this, 8249, x)) return;
	this->QTable::removeSelection(x1);
    }
    virtual void reparent(QWidget* x1, Qt::WFlags x2, const QPoint& x3, bool x4) {
	Smoke::StackItem x[5];
	x[1].s_class = (void*)x1;
	x[2].s_class = (void*)&x2;
	x[3].s_class = (void*)&x3;
	x[4].s_bool = (bool)x4;
	if(call_method((void*)this, 9612, x)) return;
	this->QWidget::reparent(x1, x2, x3, x4);
    }
    virtual void resize(int x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	if(call_method((void*)this, 6609, x)) return;
	this->QScrollView::resize(x1, x2);
    }
    virtual void resizeContents(int x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	if(call_method((void*)this, 6634, x)) return;
	this->QScrollView::resizeContents(x1, x2);
    }
    virtual void resizeData(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(call_method((void*)this, 8352, x)) return;
	this->QTable::resizeData(x1);
    }
    virtual void resizeEvent(QResizeEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 6677, x)) return;
	this->QScrollView::resizeEvent(x1);
    }
    virtual int resolution() const {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 5550, x)) return (int)x[0].s_int;
	return this->QPaintDevice::resolution();
    }
    virtual int rowAt(int x1) const {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(call_method((void*)this, 8232, x)) return (int)x[0].s_int;
	return this->QTable::rowAt(x1);
    }
    virtual int rowHeight(int x1) const {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(call_method((void*)this, 8228, x)) return (int)x[0].s_int;
	return this->QTable::rowHeight(x1);
    }
    virtual void rowHeightChanged(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(call_method((void*)this, 8361, x)) return;
	this->QTable::rowHeightChanged(x1);
    }
    virtual void rowIndexChanged(int x1, int x2, int x3) {
	Smoke::StackItem x[4];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	x[3].s_int = (int)x3;
	if(call_method((void*)this, 8363, x)) return;
	this->QTable::rowIndexChanged(x1, x2, x3);
    }
    virtual int rowPos(int x1) const {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(call_method((void*)this, 8230, x)) return (int)x[0].s_int;
	return this->QTable::rowPos(x1);
    }
    virtual void setAcceptDrops(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = (bool)x1;
	if(call_method((void*)this, 9629, x)) return;
	this->QWidget::setAcceptDrops(x1);
    }
    virtual void setActiveWindow() {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 9583, x)) return;
	this->QWidget::setActiveWindow();
    }
    virtual void setAutoMask(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = (bool)x1;
	if(call_method((void*)this, 9630, x)) return;
	this->QWidget::setAutoMask(x1);
    }
    virtual void setBackgroundColor(const QColor& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(call_method((void*)this, 9579, x)) return;
	this->QWidget::setBackgroundColor(x1);
    }
    virtual void setBackgroundMode(Qt::BackgroundMode x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(call_method((void*)this, 9541, x)) return;
	this->QWidget::setBackgroundMode(x1);
    }
    virtual void setBackgroundOrigin(QWidget::BackgroundOrigin x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(call_method((void*)this, 9632, x)) return;
	this->QWidget::setBackgroundOrigin(x1);
    }
    virtual void setBackgroundPixmap(const QPixmap& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(call_method((void*)this, 9581, x)) return;
	this->QWidget::setBackgroundPixmap(x1);
    }
    virtual void setCaption(const QString& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(call_method((void*)this, 9647, x)) return;
	this->QWidget::setCaption(x1);
    }
    virtual void setCellContentFromEditor(int x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	if(call_method((void*)this, 8349, x)) return;
	this->QTable::setCellContentFromEditor(x1, x2);
    }
    virtual void setCellWidget(int x1, int x2, QWidget* x3) {
	Smoke::StackItem x[4];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	x[3].s_class = (void*)x3;
	if(call_method((void*)this, 8259, x)) return;
	this->QTable::setCellWidget(x1, x2, x3);
    }
    virtual void setColumnMovingEnabled(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = (bool)x1;
	if(call_method((void*)this, 8300, x)) return;
	this->QTable::setColumnMovingEnabled(x1);
    }
    virtual void setColumnReadOnly(int x1, bool x2) {
	Smoke::StackItem x[3];
	x[1].s_int = (int)x1;
	x[2].s_bool = (bool)x2;
	if(call_method((void*)this, 8304, x)) return;
	this->QTable::setColumnReadOnly(x1, x2);
    }
    virtual void setColumnStretchable(int x1, bool x2) {
	Smoke::StackItem x[3];
	x[1].s_int = (int)x1;
	x[2].s_bool = (bool)x2;
	if(call_method((void*)this, 8285, x)) return;
	this->QTable::setColumnStretchable(x1, x2);
    }
    virtual void setColumnWidth(int x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	if(call_method((void*)this, 8281, x)) return;
	this->QTable::setColumnWidth(x1, x2);
    }
    virtual void setContentsPos(int x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	if(call_method((void*)this, 6636, x)) return;
	this->QScrollView::setContentsPos(x1, x2);
    }
    virtual void setCornerWidget(QWidget* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 6598, x)) return;
	this->QScrollView::setCornerWidget(x1);
    }
    virtual void setCurrentCell(int x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	if(call_method((void*)this, 8297, x)) return;
	this->QTable::setCurrentCell(x1, x2);
    }
    virtual void setCursor(const QCursor& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(call_method((void*)this, 9568, x)) return;
	this->QWidget::setCursor(x1);
    }
    virtual void setDragAutoScroll(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = (bool)x1;
	if(call_method((void*)this, 6632, x)) return;
	this->QScrollView::setDragAutoScroll(x1);
    }
    virtual void setDragEnabled(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = (bool)x1;
	if(call_method((void*)this, 8305, x)) return;
	this->QTable::setDragEnabled(x1);
    }
    virtual void setEnabled(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = (bool)x1;
	if(call_method((void*)this, 8270, x)) return;
	this->QTable::setEnabled(x1);
    }
    virtual void setEraseColor(const QColor& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(call_method((void*)this, 9545, x)) return;
	this->QWidget::setEraseColor(x1);
    }
    virtual void setErasePixmap(const QPixmap& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(call_method((void*)this, 9547, x)) return;
	this->QWidget::setErasePixmap(x1);
    }
    virtual void setFocus() {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 9651, x)) return;
	this->QWidget::setFocus();
    }
    virtual void setFocusPolicy(QWidget::FocusPolicy x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(call_method((void*)this, 9586, x)) return;
	this->QWidget::setFocusPolicy(x1);
    }
    virtual void setFocusProxy(QWidget* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 9588, x)) return;
	this->QWidget::setFocusProxy(x1);
    }
    virtual void setFocusStyle(QTable::FocusStyle x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(call_method((void*)this, 8272, x)) return;
	this->QTable::setFocusStyle(x1);
    }
    virtual void setFont(const QFont& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(call_method((void*)this, 9562, x)) return;
	this->QWidget::setFont(x1);
    }
    virtual void setFrameRect(const QRect& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(call_method((void*)this, 2938, x)) return;
	this->QFrame::setFrameRect(x1);
    }
    virtual void setFrameStyle(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(call_method((void*)this, 2922, x)) return;
	this->QFrame::setFrameStyle(x1);
    }
    virtual void setGeometry(const QRect& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(call_method((void*)this, 9683, x)) return;
	this->QWidget::setGeometry(x1);
    }
    virtual void setGeometry(int x1, int x2, int x3, int x4) {
	Smoke::StackItem x[5];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	x[3].s_int = (int)x3;
	x[4].s_int = (int)x4;
	if(call_method((void*)this, 9682, x)) return;
	this->QWidget::setGeometry(x1, x2, x3, x4);
    }
    virtual void setHBarGeometry(QScrollBar& x1, int x2, int x3, int x4, int x5) {
	Smoke::StackItem x[6];
	x[1].s_class = (void*)&x1;
	x[2].s_int = (int)x2;
	x[3].s_int = (int)x3;
	x[4].s_int = (int)x4;
	x[5].s_int = (int)x5;
	if(call_method((void*)this, 6675, x)) return;
	this->QScrollView::setHBarGeometry(x1, x2, x3, x4, x5);
    }
    virtual void setHScrollBarMode(QScrollView::ScrollBarMode x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(call_method((void*)this, 6596, x)) return;
	this->QScrollView::setHScrollBarMode(x1);
    }
    virtual void setIcon(const QPixmap& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(call_method((void*)this, 9648, x)) return;
	this->QWidget::setIcon(x1);
    }
    virtual void setIconText(const QString& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(call_method((void*)this, 9649, x)) return;
	this->QWidget::setIconText(x1);
    }
    virtual void setItem(int x1, int x2, QTableItem* x3) {
	Smoke::StackItem x[4];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	x[3].s_class = (void*)x3;
	if(call_method((void*)this, 8219, x)) return;
	this->QTable::setItem(x1, x2, x3);
    }
    virtual void setKeyCompression(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = (bool)x1;
	if(call_method((void*)this, 9741, x)) return;
	this->QWidget::setKeyCompression(x1);
    }
    virtual void setLeftMargin(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(call_method((void*)this, 8295, x)) return;
	this->QTable::setLeftMargin(x1);
    }
    virtual void setLineWidth(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(call_method((void*)this, 2932, x)) return;
	this->QFrame::setLineWidth(x1);
    }
    virtual void setMargin(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(call_method((void*)this, 2934, x)) return;
	this->QFrame::setMargin(x1);
    }
    virtual void setMargins(int x1, int x2, int x3, int x4) {
	Smoke::StackItem x[5];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	x[3].s_int = (int)x3;
	x[4].s_int = (int)x4;
	if(call_method((void*)this, 6669, x)) return;
	this->QScrollView::setMargins(x1, x2, x3, x4);
    }
    virtual void setMask(const QBitmap& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(call_method((void*)this, 9575, x)) return;
	this->QWidget::setMask(x1);
    }
    virtual void setMask(const QRegion& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(call_method((void*)this, 9576, x)) return;
	this->QWidget::setMask(x1);
    }
    virtual void setMaximumSize(int x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	if(call_method((void*)this, 9518, x)) return;
	this->QWidget::setMaximumSize(x1, x2);
    }
    virtual void setMicroFocusHint(int x1, int x2, int x3, int x4, bool x5, QFont* x6) {
	Smoke::StackItem x[7];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	x[3].s_int = (int)x3;
	x[4].s_int = (int)x4;
	x[5].s_bool = (bool)x5;
	x[6].s_class = (void*)x6;
	if(call_method((void*)this, 9742, x)) return;
	this->QWidget::setMicroFocusHint(x1, x2, x3, x4, x5, x6);
    }
    virtual void setMidLineWidth(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(call_method((void*)this, 2936, x)) return;
	this->QFrame::setMidLineWidth(x1);
    }
    virtual void setMinimumSize(int x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	if(call_method((void*)this, 9516, x)) return;
	this->QWidget::setMinimumSize(x1, x2);
    }
    virtual void setMouseTracking(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = (bool)x1;
	if(call_method((void*)this, 9650, x)) return;
	this->QWidget::setMouseTracking(x1);
    }
    virtual void setName(const char* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 9485, x)) return;
	this->QWidget::setName(x1);
    }
    virtual void setNumCols(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(call_method((void*)this, 8275, x)) return;
	this->QTable::setNumCols(x1);
    }
    virtual void setNumRows(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(call_method((void*)this, 8274, x)) return;
	this->QTable::setNumRows(x1);
    }
    virtual void setPalette(const QPalette& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(call_method((void*)this, 9551, x)) return;
	this->QWidget::setPalette(x1);
    }
    virtual void setPaletteBackgroundColor(const QColor& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(call_method((void*)this, 9556, x)) return;
	this->QWidget::setPaletteBackgroundColor(x1);
    }
    virtual void setPaletteBackgroundPixmap(const QPixmap& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(call_method((void*)this, 9558, x)) return;
	this->QWidget::setPaletteBackgroundPixmap(x1);
    }
    virtual void setPixmap(int x1, int x2, const QPixmap& x3) {
	Smoke::StackItem x[4];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	x[3].s_class = (void*)&x3;
	if(call_method((void*)this, 8221, x)) return;
	this->QTable::setPixmap(x1, x2, x3);
    }
    virtual bool setProperty(const char* x1, const QVariant& x2) {
	Smoke::StackItem x[3];
	x[1].s_class = (void*)x1;
	x[2].s_class = (void*)&x2;
	if(call_method((void*)this, 5440, x)) return (bool)x[0].s_bool;
	return this->QObject::setProperty(x1, x2);
    }
    virtual void setReadOnly(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = (bool)x1;
	if(call_method((void*)this, 8302, x)) return;
	this->QTable::setReadOnly(x1);
    }
    virtual void setResizePolicy(QScrollView::ResizePolicy x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(call_method((void*)this, 6580, x)) return;
	this->QScrollView::setResizePolicy(x1);
    }
    virtual void setResolution(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(call_method((void*)this, 5549, x)) return;
	this->QPaintDevice::setResolution(x1);
    }
    virtual void setRowHeight(int x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	if(call_method((void*)this, 8282, x)) return;
	this->QTable::setRowHeight(x1, x2);
    }
    virtual void setRowMovingEnabled(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = (bool)x1;
	if(call_method((void*)this, 8301, x)) return;
	this->QTable::setRowMovingEnabled(x1);
    }
    virtual void setRowReadOnly(int x1, bool x2) {
	Smoke::StackItem x[3];
	x[1].s_int = (int)x1;
	x[2].s_bool = (bool)x2;
	if(call_method((void*)this, 8303, x)) return;
	this->QTable::setRowReadOnly(x1, x2);
    }
    virtual void setRowStretchable(int x1, bool x2) {
	Smoke::StackItem x[3];
	x[1].s_int = (int)x1;
	x[2].s_bool = (bool)x2;
	if(call_method((void*)this, 8286, x)) return;
	this->QTable::setRowStretchable(x1, x2);
    }
    virtual void setSelectionMode(QTable::SelectionMode x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(call_method((void*)this, 8217, x)) return;
	this->QTable::setSelectionMode(x1);
    }
    virtual void setShowGrid(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = (bool)x1;
	if(call_method((void*)this, 8276, x)) return;
	this->QTable::setShowGrid(x1);
    }
    virtual void setSizeIncrement(int x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	if(call_method((void*)this, 9525, x)) return;
	this->QWidget::setSizeIncrement(x1, x2);
    }
    virtual void setSizePolicy(QSizePolicy x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(call_method((void*)this, 9607, x)) return;
	this->QWidget::setSizePolicy(x1);
    }
    virtual void setSorting(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = (bool)x1;
	if(call_method((void*)this, 8289, x)) return;
	this->QTable::setSorting(x1);
    }
    virtual void setText(int x1, int x2, const QString& x3) {
	Smoke::StackItem x[4];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	x[3].s_class = (void*)&x3;
	if(call_method((void*)this, 8220, x)) return;
	this->QTable::setText(x1, x2, x3);
    }
    virtual void setTopMargin(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(call_method((void*)this, 8296, x)) return;
	this->QTable::setTopMargin(x1);
    }
    virtual void setUpdatesEnabled(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = (bool)x1;
	if(call_method((void*)this, 9653, x)) return;
	this->QWidget::setUpdatesEnabled(x1);
    }
    virtual void setVBarGeometry(QScrollBar& x1, int x2, int x3, int x4, int x5) {
	Smoke::StackItem x[6];
	x[1].s_class = (void*)&x1;
	x[2].s_int = (int)x2;
	x[3].s_int = (int)x3;
	x[4].s_int = (int)x4;
	x[5].s_int = (int)x5;
	if(call_method((void*)this, 6676, x)) return;
	this->QScrollView::setVBarGeometry(x1, x2, x3, x4, x5);
    }
    virtual void setVScrollBarMode(QScrollView::ScrollBarMode x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(call_method((void*)this, 6594, x)) return;
	this->QScrollView::setVScrollBarMode(x1);
    }
    virtual void setWFlags(Qt::WFlags x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(call_method((void*)this, 9735, x)) return;
	this->QWidget::setWFlags(x1);
    }
    virtual void setWState(uint x1) {
	Smoke::StackItem x[2];
	x[1].s_uint = (uint)x1;
	if(call_method((void*)this, 9732, x)) return;
	this->QWidget::setWState(x1);
    }
    virtual void show() {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 6611, x)) return;
	this->QScrollView::show();
    }
    virtual void showColumn(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(call_method((void*)this, 8280, x)) return;
	this->QTable::showColumn(x1);
    }
    virtual void showEvent(QShowEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 8338, x)) return;
	this->QTable::showEvent(x1);
    }
    virtual void showMaximized() {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 9669, x)) return;
	this->QWidget::showMaximized();
    }
    virtual void showMinimized() {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 9668, x)) return;
	this->QWidget::showMinimized();
    }
    virtual void showNormal() {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 9671, x)) return;
	this->QWidget::showNormal();
    }
    virtual void showRow(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(call_method((void*)this, 8279, x)) return;
	this->QTable::showRow(x1);
    }
    virtual QSize sizeHint() const {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 8266, x)) {
	    QSize *xptr = (QSize *)x[0].s_class;
	    QSize xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QTable::sizeHint();
    }
    virtual QSizePolicy sizePolicy() const {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 9606, x)) {
	    QSizePolicy *xptr = (QSizePolicy *)x[0].s_class;
	    QSizePolicy xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QWidget::sizePolicy();
    }
    virtual void sortColumn(int x1, bool x2, bool x3) {
	Smoke::StackItem x[4];
	x[1].s_int = (int)x1;
	x[2].s_bool = (bool)x2;
	x[3].s_bool = (bool)x3;
	if(call_method((void*)this, 8254, x)) return;
	this->QTable::sortColumn(x1, x2, x3);
    }
    virtual void startDrag() {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 8345, x)) return;
	this->QTable::startDrag();
    }
    virtual void styleChange(QStyle& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(call_method((void*)this, 6582, x)) return;
	this->QScrollView::styleChange(x1);
    }
    virtual void swapCells(int x1, int x2, int x3, int x4) {
	Smoke::StackItem x[5];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	x[3].s_int = (int)x3;
	x[4].s_int = (int)x4;
	if(call_method((void*)this, 8294, x)) return;
	this->QTable::swapCells(x1, x2, x3, x4);
    }
    virtual void swapColumns(int x1, int x2, bool x3) {
	Smoke::StackItem x[4];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	x[3].s_bool = (bool)x3;
	if(call_method((void*)this, 8292, x)) return;
	this->QTable::swapColumns(x1, x2, x3);
    }
    virtual void swapRows(int x1, int x2, bool x3) {
	Smoke::StackItem x[4];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	x[3].s_bool = (bool)x3;
	if(call_method((void*)this, 8290, x)) return;
	this->QTable::swapRows(x1, x2, x3);
    }
    virtual void tabletEvent(QTabletEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 9709, x)) return;
	this->QWidget::tabletEvent(x1);
    }
    virtual void takeItem(QTableItem* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 8258, x)) return;
	this->QTable::takeItem(x1);
    }
    virtual QString text(int x1, int x2) const {
	Smoke::StackItem x[3];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	if(call_method((void*)this, 8223, x)) {
	    QString *xptr = (QString *)x[0].s_class;
	    QString xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QTable::text(x1, x2);
    }
    virtual void timerEvent(QTimerEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 5464, x)) return;
	this->QObject::timerEvent(x1);
    }
    virtual void unsetCursor() {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 9569, x)) return;
	this->QWidget::unsetCursor();
    }
    virtual void updateMask() {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 9716, x)) return;
	this->QWidget::updateMask();
    }
    virtual void viewportContextMenuEvent(QContextMenuEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 6667, x)) return;
	this->QScrollView::viewportContextMenuEvent(x1);
    }
    virtual void viewportDragEnterEvent(QDragEnterEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 6662, x)) return;
	this->QScrollView::viewportDragEnterEvent(x1);
    }
    virtual void viewportDragLeaveEvent(QDragLeaveEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 6664, x)) return;
	this->QScrollView::viewportDragLeaveEvent(x1);
    }
    virtual void viewportDragMoveEvent(QDragMoveEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 6663, x)) return;
	this->QScrollView::viewportDragMoveEvent(x1);
    }
    virtual void viewportDropEvent(QDropEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 6665, x)) return;
	this->QScrollView::viewportDropEvent(x1);
    }
    virtual void viewportMouseDoubleClickEvent(QMouseEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 6660, x)) return;
	this->QScrollView::viewportMouseDoubleClickEvent(x1);
    }
    virtual void viewportMouseMoveEvent(QMouseEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 6661, x)) return;
	this->QScrollView::viewportMouseMoveEvent(x1);
    }
    virtual void viewportMousePressEvent(QMouseEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 6658, x)) return;
	this->QScrollView::viewportMousePressEvent(x1);
    }
    virtual void viewportMouseReleaseEvent(QMouseEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 6659, x)) return;
	this->QScrollView::viewportMouseReleaseEvent(x1);
    }
    virtual void viewportPaintEvent(QPaintEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 6656, x)) return;
	this->QScrollView::viewportPaintEvent(x1);
    }
    virtual void viewportResizeEvent(QResizeEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 8337, x)) return;
	this->QTable::viewportResizeEvent(x1);
    }
    virtual void viewportWheelEvent(QWheelEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 6666, x)) return;
	this->QScrollView::viewportWheelEvent(x1);
    }
    virtual void wheelEvent(QWheelEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(call_method((void*)this, 6682, x)) return;
	this->QScrollView::wheelEvent(x1);
    }
    virtual void windowActivationChange(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = (bool)x1;
	if(call_method((void*)this, 8355, x)) return;
	this->QTable::windowActivationChange(x1);
    }
    ~x_QTable() {}
};
void xcall_QTable(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QTable *xself = (x_QTable*)obj;
    switch(xi) {
	case 0: x_QTable::x_0(args);	break;
	case 1: x_QTable::x_1(args);	break;
	case 2: x_QTable::x_2(args);	break;
	case 3: x_QTable::x_3(args);	break;
	case 4: x_QTable::x_4(args);	break;
	case 5: x_QTable::x_5(args);	break;
	case 6: x_QTable::x_6(args);	break;
	case 7: x_QTable::x_7(args);	break;
	case 8: x_QTable::x_8(args);	break;
	case 9: x_QTable::x_9(args);	break;
	case 10: x_QTable::x_10(args);	break;
	case 11: x_QTable::x_11(args);	break;
	case 12: x_QTable::x_12(args);	break;
	case 13: x_QTable::x_13(args);	break;
	case 14: x_QTable::x_14(args);	break;
	case 15: x_QTable::x_15(args);	break;
	case 16: xself->x_16(args);	break;
	case 17: xself->x_17(args);	break;
	case 18: xself->x_18(args);	break;
	case 19: xself->x_19(args);	break;
	case 20: xself->x_20(args);	break;
	case 21: xself->x_21(args);	break;
	case 22: xself->x_22(args);	break;
	case 23: xself->x_23(args);	break;
	case 24: xself->x_24(args);	break;
	case 25: xself->x_25(args);	break;
	case 26: xself->x_26(args);	break;
	case 27: xself->x_27(args);	break;
	case 28: xself->x_28(args);	break;
	case 29: xself->x_29(args);	break;
	case 30: xself->x_30(args);	break;
	case 31: xself->x_31(args);	break;
	case 32: xself->x_32(args);	break;
	case 33: xself->x_33(args);	break;
	case 34: xself->x_34(args);	break;
	case 35: xself->x_35(args);	break;
	case 36: xself->x_36(args);	break;
	case 37: xself->x_37(args);	break;
	case 38: xself->x_38(args);	break;
	case 39: xself->x_39(args);	break;
	case 40: xself->x_40(args);	break;
	case 41: xself->x_41(args);	break;
	case 42: xself->x_42(args);	break;
	case 43: xself->x_43(args);	break;
	case 44: xself->x_44(args);	break;
	case 45: xself->x_45(args);	break;
	case 46: xself->x_46(args);	break;
	case 47: xself->x_47(args);	break;
	case 48: xself->x_48(args);	break;
	case 49: xself->x_49(args);	break;
	case 50: xself->x_50(args);	break;
	case 51: xself->x_51(args);	break;
	case 52: xself->x_52(args);	break;
	case 53: xself->x_53(args);	break;
	case 54: xself->x_54(args);	break;
	case 55: xself->x_55(args);	break;
	case 56: xself->x_56(args);	break;
	case 57: xself->x_57(args);	break;
	case 58: xself->x_58(args);	break;
	case 59: xself->x_59(args);	break;
	case 60: xself->x_60(args);	break;
	case 61: xself->x_61(args);	break;
	case 62: xself->x_62(args);	break;
	case 63: xself->x_63(args);	break;
	case 64: xself->x_64(args);	break;
	case 65: xself->x_65(args);	break;
	case 66: xself->x_66(args);	break;
	case 67: xself->x_67(args);	break;
	case 68: xself->x_68(args);	break;
	case 69: xself->x_69(args);	break;
	case 70: xself->x_70(args);	break;
	case 71: xself->x_71(args);	break;
	case 72: xself->x_72(args);	break;
	case 73: xself->x_73(args);	break;
	case 74: xself->x_74(args);	break;
	case 75: xself->x_75(args);	break;
	case 76: xself->x_76(args);	break;
	case 77: xself->x_77(args);	break;
	case 78: xself->x_78(args);	break;
	case 79: xself->x_79(args);	break;
	case 80: xself->x_80(args);	break;
	case 81: xself->x_81(args);	break;
	case 82: xself->x_82(args);	break;
	case 83: xself->x_83(args);	break;
	case 84: xself->x_84(args);	break;
	case 85: xself->x_85(args);	break;
	case 86: xself->x_86(args);	break;
	case 87: xself->x_87(args);	break;
	case 88: xself->x_88(args);	break;
	case 89: xself->x_89(args);	break;
	case 90: xself->x_90(args);	break;
	case 91: xself->x_91(args);	break;
	case 92: xself->x_92(args);	break;
	case 93: xself->x_93(args);	break;
	case 94: xself->x_94(args);	break;
	case 95: xself->x_95(args);	break;
	case 96: xself->x_96(args);	break;
	case 97: xself->x_97(args);	break;
	case 98: xself->x_98(args);	break;
	case 99: xself->x_99(args);	break;
	case 100: xself->x_100(args);	break;
	case 101: xself->x_101(args);	break;
	case 102: xself->x_102(args);	break;
	case 103: xself->x_103(args);	break;
	case 104: xself->x_104(args);	break;
	case 105: xself->x_105(args);	break;
	case 106: xself->x_106(args);	break;
	case 107: xself->x_107(args);	break;
	case 108: xself->x_108(args);	break;
	case 109: xself->x_109(args);	break;
	case 110: xself->x_110(args);	break;
	case 111: xself->x_111(args);	break;
	case 112: xself->x_112(args);	break;
	case 113: xself->x_113(args);	break;
	case 114: xself->x_114(args);	break;
	case 115: xself->x_115(args);	break;
	case 116: xself->x_116(args);	break;
	case 117: xself->x_117(args);	break;
	case 118: xself->x_118(args);	break;
	case 119: xself->x_119(args);	break;
	case 120: xself->x_120(args);	break;
	case 121: xself->x_121(args);	break;
	case 122: xself->x_122(args);	break;
	case 123: xself->x_123(args);	break;
	case 124: xself->x_124(args);	break;
	case 125: xself->x_125(args);	break;
	case 126: xself->x_126(args);	break;
	case 127: xself->x_127(args);	break;
	case 128: xself->x_128(args);	break;
	case 129: xself->x_129(args);	break;
	case 130: xself->x_130(args);	break;
	case 131: xself->x_131(args);	break;
	case 132: xself->x_132(args);	break;
	case 133: xself->x_133(args);	break;
	case 134: xself->x_134(args);	break;
	case 135: xself->x_135(args);	break;
	case 136: xself->x_136(args);	break;
	case 137: xself->x_137(args);	break;
	case 138: xself->x_138(args);	break;
	case 139: xself->x_139(args);	break;
	case 140: xself->x_140(args);	break;
	case 141: xself->x_141(args);	break;
	case 142: xself->x_142(args);	break;
	case 143: xself->x_143(args);	break;
	case 144: xself->x_144(args);	break;
	case 145: xself->x_145(args);	break;
	case 146: xself->x_146(args);	break;
	case 147: xself->x_147(args);	break;
	case 148: xself->x_148(args);	break;
	case 149: xself->x_149(args);	break;
	case 150: xself->x_150(args);	break;
	case 151: xself->x_151(args);	break;
	case 152: xself->x_152(args);	break;
	case 153: xself->x_153(args);	break;
	case 154: xself->x_154(args);	break;
	case 155: xself->x_155(args);	break;
	case 156: xself->x_156(args);	break;
	case 157: xself->x_157(args);	break;
	case 158: xself->x_158(args);	break;
	case 159: xself->x_159(args);	break;
	case 160: xself->x_160(args);	break;
	case 161: xself->x_161(args);	break;
	case 162: xself->x_162(args);	break;
	case 163: delete (QTable*)xself;	break;
    }
}
