//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qstring.h>
#include <qstringlist.h>
#include <qsessionmanager.h>

class x_QSessionManager {
private:
    QSessionManager *xthis;
public:
    x_QSessionManager(void *x) : xthis((QSessionManager*)x) {}
    static void x_0(xargs *x) {
	x[0].x_long = (long)QSessionManager::RestartIfRunning;
    }
    static void x_1(xargs *x) {
	x[0].x_long = (long)QSessionManager::RestartAnyway;
    }
    static void x_2(xargs *x) {
	x[0].x_long = (long)QSessionManager::RestartImmediately;
    }
    static void x_3(xargs *x) {
	x[0].x_long = (long)QSessionManager::RestartNever;
    }
    void x_4(xargs *x) const {
	// sessionId()
	QString xret = xthis->QSessionManager::sessionId();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_5(xargs *x) {
	// allowsInteraction()
	bool xret = xthis->QSessionManager::allowsInteraction();
	x[0].x_bool = (bool)xret;
    }
    void x_6(xargs *x) {
	// allowsErrorInteraction()
	bool xret = xthis->QSessionManager::allowsErrorInteraction();
	x[0].x_bool = (bool)xret;
    }
    void x_7(xargs *x) {
	// release()
	xthis->QSessionManager::release();
    }
    void x_8(xargs *x) {
	// cancel()
	xthis->QSessionManager::cancel();
    }
    void x_9(xargs *x) {
	// setRestartHint(QSessionManager::RestartHint)
	xthis->QSessionManager::setRestartHint((QSessionManager::RestartHint)x[1].x_long);
    }
    void x_10(xargs *x) const {
	// restartHint()
	QSessionManager::RestartHint xret = xthis->QSessionManager::restartHint();
	x[0].x_long = (long)xret;
    }
    void x_11(xargs *x) {
	// setRestartCommand(const QStringList&)
	xthis->QSessionManager::setRestartCommand(*(const QStringList *)x[1].x_voidp);
    }
    void x_12(xargs *x) const {
	// restartCommand()
	QStringList xret = xthis->QSessionManager::restartCommand();
	x[0].x_voidp = (void*)new QStringList(xret);
    }
    void x_13(xargs *x) {
	// setDiscardCommand(const QStringList&)
	xthis->QSessionManager::setDiscardCommand(*(const QStringList *)x[1].x_voidp);
    }
    void x_14(xargs *x) const {
	// discardCommand()
	QStringList xret = xthis->QSessionManager::discardCommand();
	x[0].x_voidp = (void*)new QStringList(xret);
    }
    void x_15(xargs *x) {
	// setManagerProperty(const QString&, const QString&)
	xthis->QSessionManager::setManagerProperty(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp);
    }
    void x_16(xargs *x) {
	// setManagerProperty(const QString&, const QStringList&)
	xthis->QSessionManager::setManagerProperty(*(const QString *)x[1].x_voidp,*(const QStringList *)x[2].x_voidp);
    }
    void x_17(xargs *x) const {
	// isPhase2()
	bool xret = xthis->QSessionManager::isPhase2();
	x[0].x_bool = (bool)xret;
    }
    void x_18(xargs *x) {
	// requestPhase2()
	xthis->QSessionManager::requestPhase2();
    }
    ~x_QSessionManager() {}
};
void xcall_QSessionManager(xargs *x, void *s, int xi) {
    x_QSessionManager xtmp(s), *xself = &xtmp;
    switch(xi) {
	case 0: x_QSessionManager::x_0(x);	break;
	case 1: x_QSessionManager::x_1(x);	break;
	case 2: x_QSessionManager::x_2(x);	break;
	case 3: x_QSessionManager::x_3(x);	break;
	case 4: xself->x_4(x);	break;
	case 5: xself->x_5(x);	break;
	case 6: xself->x_6(x);	break;
	case 7: xself->x_7(x);	break;
	case 8: xself->x_8(x);	break;
	case 9: xself->x_9(x);	break;
	case 10: xself->x_10(x);	break;
	case 11: xself->x_11(x);	break;
	case 12: xself->x_12(x);	break;
	case 13: xself->x_13(x);	break;
	case 14: xself->x_14(x);	break;
	case 15: xself->x_15(x);	break;
	case 16: xself->x_16(x);	break;
	case 17: xself->x_17(x);	break;
	case 18: xself->x_18(x);	break;
    }
}
