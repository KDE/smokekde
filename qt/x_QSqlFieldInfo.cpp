//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke.h>
#include <qt_smoke.h>
#include <qvariant.h>
#include <qstring.h>
#include <qsqlfield.h>

class x_QSqlFieldInfo : public QSqlFieldInfo {
public:
    static void x_0(Smoke::Stack x) {
	// QSqlFieldInfo(const QString&, QVariant::Type, int, int, int, const QVariant&, int, bool, bool, bool)
	x_QSqlFieldInfo* xret = new x_QSqlFieldInfo(*(const QString *)x[1].s_voidp,(QVariant::Type)x[2].s_enum,(int)x[3].s_int,(int)x[4].s_int,(int)x[5].s_int,*(const QVariant *)x[6].s_class,(int)x[7].s_int,(bool)x[8].s_bool,(bool)x[9].s_bool,(bool)x[10].s_bool);
	x[0].s_class = (void*)xret;
    }
    x_QSqlFieldInfo(const QString& x1, QVariant::Type x2, int x3, int x4, int x5, const QVariant& x6, int x7, bool x8, bool x9, bool x10) : QSqlFieldInfo(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10) {
    }
    static void x_1(Smoke::Stack x) {
	// QSqlFieldInfo(const QString&, QVariant::Type, int, int, int, const QVariant&, int, bool, bool)
	x_QSqlFieldInfo* xret = new x_QSqlFieldInfo(*(const QString *)x[1].s_voidp,(QVariant::Type)x[2].s_enum,(int)x[3].s_int,(int)x[4].s_int,(int)x[5].s_int,*(const QVariant *)x[6].s_class,(int)x[7].s_int,(bool)x[8].s_bool,(bool)x[9].s_bool);
	x[0].s_class = (void*)xret;
    }
    x_QSqlFieldInfo(const QString& x1, QVariant::Type x2, int x3, int x4, int x5, const QVariant& x6, int x7, bool x8, bool x9) : QSqlFieldInfo(x1, x2, x3, x4, x5, x6, x7, x8, x9) {
    }
    static void x_2(Smoke::Stack x) {
	// QSqlFieldInfo(const QString&, QVariant::Type, int, int, int, const QVariant&, int, bool)
	x_QSqlFieldInfo* xret = new x_QSqlFieldInfo(*(const QString *)x[1].s_voidp,(QVariant::Type)x[2].s_enum,(int)x[3].s_int,(int)x[4].s_int,(int)x[5].s_int,*(const QVariant *)x[6].s_class,(int)x[7].s_int,(bool)x[8].s_bool);
	x[0].s_class = (void*)xret;
    }
    x_QSqlFieldInfo(const QString& x1, QVariant::Type x2, int x3, int x4, int x5, const QVariant& x6, int x7, bool x8) : QSqlFieldInfo(x1, x2, x3, x4, x5, x6, x7, x8) {
    }
    static void x_3(Smoke::Stack x) {
	// QSqlFieldInfo(const QString&, QVariant::Type, int, int, int, const QVariant&, int)
	x_QSqlFieldInfo* xret = new x_QSqlFieldInfo(*(const QString *)x[1].s_voidp,(QVariant::Type)x[2].s_enum,(int)x[3].s_int,(int)x[4].s_int,(int)x[5].s_int,*(const QVariant *)x[6].s_class,(int)x[7].s_int);
	x[0].s_class = (void*)xret;
    }
    x_QSqlFieldInfo(const QString& x1, QVariant::Type x2, int x3, int x4, int x5, const QVariant& x6, int x7) : QSqlFieldInfo(x1, x2, x3, x4, x5, x6, x7) {
    }
    static void x_4(Smoke::Stack x) {
	// QSqlFieldInfo(const QString&, QVariant::Type, int, int, int, const QVariant&)
	x_QSqlFieldInfo* xret = new x_QSqlFieldInfo(*(const QString *)x[1].s_voidp,(QVariant::Type)x[2].s_enum,(int)x[3].s_int,(int)x[4].s_int,(int)x[5].s_int,*(const QVariant *)x[6].s_class);
	x[0].s_class = (void*)xret;
    }
    x_QSqlFieldInfo(const QString& x1, QVariant::Type x2, int x3, int x4, int x5, const QVariant& x6) : QSqlFieldInfo(x1, x2, x3, x4, x5, x6) {
    }
    static void x_5(Smoke::Stack x) {
	// QSqlFieldInfo(const QString&, QVariant::Type, int, int, int)
	x_QSqlFieldInfo* xret = new x_QSqlFieldInfo(*(const QString *)x[1].s_voidp,(QVariant::Type)x[2].s_enum,(int)x[3].s_int,(int)x[4].s_int,(int)x[5].s_int);
	x[0].s_class = (void*)xret;
    }
    x_QSqlFieldInfo(const QString& x1, QVariant::Type x2, int x3, int x4, int x5) : QSqlFieldInfo(x1, x2, x3, x4, x5) {
    }
    static void x_6(Smoke::Stack x) {
	// QSqlFieldInfo(const QString&, QVariant::Type, int, int)
	x_QSqlFieldInfo* xret = new x_QSqlFieldInfo(*(const QString *)x[1].s_voidp,(QVariant::Type)x[2].s_enum,(int)x[3].s_int,(int)x[4].s_int);
	x[0].s_class = (void*)xret;
    }
    x_QSqlFieldInfo(const QString& x1, QVariant::Type x2, int x3, int x4) : QSqlFieldInfo(x1, x2, x3, x4) {
    }
    static void x_7(Smoke::Stack x) {
	// QSqlFieldInfo(const QString&, QVariant::Type, int)
	x_QSqlFieldInfo* xret = new x_QSqlFieldInfo(*(const QString *)x[1].s_voidp,(QVariant::Type)x[2].s_enum,(int)x[3].s_int);
	x[0].s_class = (void*)xret;
    }
    x_QSqlFieldInfo(const QString& x1, QVariant::Type x2, int x3) : QSqlFieldInfo(x1, x2, x3) {
    }
    static void x_8(Smoke::Stack x) {
	// QSqlFieldInfo(const QString&, QVariant::Type)
	x_QSqlFieldInfo* xret = new x_QSqlFieldInfo(*(const QString *)x[1].s_voidp,(QVariant::Type)x[2].s_enum);
	x[0].s_class = (void*)xret;
    }
    x_QSqlFieldInfo(const QString& x1, QVariant::Type x2) : QSqlFieldInfo(x1, x2) {
    }
    static void x_9(Smoke::Stack x) {
	// QSqlFieldInfo(const QString&)
	x_QSqlFieldInfo* xret = new x_QSqlFieldInfo(*(const QString *)x[1].s_voidp);
	x[0].s_class = (void*)xret;
    }
    x_QSqlFieldInfo(const QString& x1) : QSqlFieldInfo(x1) {
    }
    static void x_10(Smoke::Stack x) {
	// QSqlFieldInfo()
	x_QSqlFieldInfo* xret = new x_QSqlFieldInfo();
	x[0].s_class = (void*)xret;
    }
    x_QSqlFieldInfo() : QSqlFieldInfo() {
    }
    static void x_11(Smoke::Stack x) {
	// QSqlFieldInfo(const QSqlFieldInfo&)
	x_QSqlFieldInfo* xret = new x_QSqlFieldInfo(*(const QSqlFieldInfo *)x[1].s_class);
	x[0].s_class = (void*)xret;
    }
    x_QSqlFieldInfo(const QSqlFieldInfo& x1) : QSqlFieldInfo(x1) {
    }
    static void x_12(Smoke::Stack x) {
	// QSqlFieldInfo(const QSqlField&, bool)
	x_QSqlFieldInfo* xret = new x_QSqlFieldInfo(*(const QSqlField *)x[1].s_class,(bool)x[2].s_bool);
	x[0].s_class = (void*)xret;
    }
    x_QSqlFieldInfo(const QSqlField& x1, bool x2) : QSqlFieldInfo(x1, x2) {
    }
    static void x_13(Smoke::Stack x) {
	// QSqlFieldInfo(const QSqlField&)
	x_QSqlFieldInfo* xret = new x_QSqlFieldInfo(*(const QSqlField *)x[1].s_class);
	x[0].s_class = (void*)xret;
    }
    x_QSqlFieldInfo(const QSqlField& x1) : QSqlFieldInfo(x1) {
    }
    void x_14(Smoke::Stack x) {
	// operator=(const QSqlFieldInfo&)
	QSqlFieldInfo& xret = this->QSqlFieldInfo::operator=(*(const QSqlFieldInfo *)x[1].s_class);
	x[0].s_class = (void*)&xret;
    }
    void x_15(Smoke::Stack x) const {
	// operator==(const QSqlFieldInfo&)
	bool xret = this->QSqlFieldInfo::operator==(*(const QSqlFieldInfo *)x[1].s_class);
	x[0].s_bool = xret;
    }
    void x_16(Smoke::Stack x) const {
	// toField()
	QSqlField xret = this->QSqlFieldInfo::toField();
	x[0].s_class = (void*)new QSqlField(xret);
    }
    void x_17(Smoke::Stack x) const {
	// isRequired()
	int xret = this->QSqlFieldInfo::isRequired();
	x[0].s_int = xret;
    }
    void x_18(Smoke::Stack x) const {
	// type()
	QVariant::Type xret = this->QSqlFieldInfo::type();
	x[0].s_enum = xret;
    }
    void x_19(Smoke::Stack x) const {
	// length()
	int xret = this->QSqlFieldInfo::length();
	x[0].s_int = xret;
    }
    void x_20(Smoke::Stack x) const {
	// precision()
	int xret = this->QSqlFieldInfo::precision();
	x[0].s_int = xret;
    }
    void x_21(Smoke::Stack x) const {
	// defaultValue()
	QVariant xret = this->QSqlFieldInfo::defaultValue();
	x[0].s_class = (void*)new QVariant(xret);
    }
    void x_22(Smoke::Stack x) const {
	// name()
	QString xret = this->QSqlFieldInfo::name();
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_23(Smoke::Stack x) const {
	// typeID()
	int xret = this->QSqlFieldInfo::typeID();
	x[0].s_int = xret;
    }
    void x_24(Smoke::Stack x) const {
	// isGenerated()
	bool xret = this->QSqlFieldInfo::isGenerated();
	x[0].s_bool = xret;
    }
    void x_25(Smoke::Stack x) const {
	// isTrim()
	bool xret = this->QSqlFieldInfo::isTrim();
	x[0].s_bool = xret;
    }
    void x_26(Smoke::Stack x) const {
	// isCalculated()
	bool xret = this->QSqlFieldInfo::isCalculated();
	x[0].s_bool = xret;
    }
    void x_27(Smoke::Stack x) {
	// setTrim(bool)
	this->QSqlFieldInfo::setTrim((bool)x[1].s_bool);
	(void)x; // noop (for compiler warning)
    }
    void x_28(Smoke::Stack x) {
	// setGenerated(bool)
	this->QSqlFieldInfo::setGenerated((bool)x[1].s_bool);
	(void)x; // noop (for compiler warning)
    }
    void x_29(Smoke::Stack x) {
	// setCalculated(bool)
	this->QSqlFieldInfo::setCalculated((bool)x[1].s_bool);
	(void)x; // noop (for compiler warning)
    }
    virtual void setCalculated(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(8937, (void*)this, x)) return;
	this->QSqlFieldInfo::setCalculated(x1);
    }
    virtual void setGenerated(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(8936, (void*)this, x)) return;
	this->QSqlFieldInfo::setGenerated(x1);
    }
    virtual void setTrim(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(8935, (void*)this, x)) return;
	this->QSqlFieldInfo::setTrim(x1);
    }
    ~x_QSqlFieldInfo() { qt_Smoke->binding->deleted(285, (void*)this); }
};
void xcall_QSqlFieldInfo(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QSqlFieldInfo *xself = (x_QSqlFieldInfo*)obj;
    switch(xi) {
	case 0: x_QSqlFieldInfo::x_0(args);	break;
	case 1: x_QSqlFieldInfo::x_1(args);	break;
	case 2: x_QSqlFieldInfo::x_2(args);	break;
	case 3: x_QSqlFieldInfo::x_3(args);	break;
	case 4: x_QSqlFieldInfo::x_4(args);	break;
	case 5: x_QSqlFieldInfo::x_5(args);	break;
	case 6: x_QSqlFieldInfo::x_6(args);	break;
	case 7: x_QSqlFieldInfo::x_7(args);	break;
	case 8: x_QSqlFieldInfo::x_8(args);	break;
	case 9: x_QSqlFieldInfo::x_9(args);	break;
	case 10: x_QSqlFieldInfo::x_10(args);	break;
	case 11: x_QSqlFieldInfo::x_11(args);	break;
	case 12: x_QSqlFieldInfo::x_12(args);	break;
	case 13: x_QSqlFieldInfo::x_13(args);	break;
	case 14: xself->x_14(args);	break;
	case 15: xself->x_15(args);	break;
	case 16: xself->x_16(args);	break;
	case 17: xself->x_17(args);	break;
	case 18: xself->x_18(args);	break;
	case 19: xself->x_19(args);	break;
	case 20: xself->x_20(args);	break;
	case 21: xself->x_21(args);	break;
	case 22: xself->x_22(args);	break;
	case 23: xself->x_23(args);	break;
	case 24: xself->x_24(args);	break;
	case 25: xself->x_25(args);	break;
	case 26: xself->x_26(args);	break;
	case 27: xself->x_27(args);	break;
	case 28: xself->x_28(args);	break;
	case 29: xself->x_29(args);	break;
	case 30: delete (QSqlFieldInfo*)xself;	break;
    }
}
