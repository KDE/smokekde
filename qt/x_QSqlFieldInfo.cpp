//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qvariant.h>
#include <qstring.h>
#include <qsqlfield.h>

class x_QSqlFieldInfo : public QSqlFieldInfo {
public:
    static void x_0(xargs *x) {
	// QSqlFieldInfo(const QString&, QVariant::Type, int, int, int, const QVariant&, int, bool, bool, bool)
	x_QSqlFieldInfo* xret = new x_QSqlFieldInfo(*(const QString *)x[1].x_voidp,(QVariant::Type)x[2].x_long,(int)x[3].x_int,(int)x[4].x_int,(int)x[5].x_int,*(const QVariant *)x[6].x_voidp,(int)x[7].x_int,(bool)x[8].x_bool,(bool)x[9].x_bool,(bool)x[10].x_bool);
	x[0].x_voidp = (void*)xret;
    }
    x_QSqlFieldInfo(const QString& x1, QVariant::Type x2, int x3, int x4, int x5, const QVariant& x6, int x7, bool x8, bool x9, bool x10) : QSqlFieldInfo(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10) {
    }
    static void x_1(xargs *x) {
	// QSqlFieldInfo(const QString&, QVariant::Type, int, int, int, const QVariant&, int, bool, bool)
	x_QSqlFieldInfo* xret = new x_QSqlFieldInfo(*(const QString *)x[1].x_voidp,(QVariant::Type)x[2].x_long,(int)x[3].x_int,(int)x[4].x_int,(int)x[5].x_int,*(const QVariant *)x[6].x_voidp,(int)x[7].x_int,(bool)x[8].x_bool,(bool)x[9].x_bool);
	x[0].x_voidp = (void*)xret;
    }
    x_QSqlFieldInfo(const QString& x1, QVariant::Type x2, int x3, int x4, int x5, const QVariant& x6, int x7, bool x8, bool x9) : QSqlFieldInfo(x1, x2, x3, x4, x5, x6, x7, x8, x9) {
    }
    static void x_2(xargs *x) {
	// QSqlFieldInfo(const QString&, QVariant::Type, int, int, int, const QVariant&, int, bool)
	x_QSqlFieldInfo* xret = new x_QSqlFieldInfo(*(const QString *)x[1].x_voidp,(QVariant::Type)x[2].x_long,(int)x[3].x_int,(int)x[4].x_int,(int)x[5].x_int,*(const QVariant *)x[6].x_voidp,(int)x[7].x_int,(bool)x[8].x_bool);
	x[0].x_voidp = (void*)xret;
    }
    x_QSqlFieldInfo(const QString& x1, QVariant::Type x2, int x3, int x4, int x5, const QVariant& x6, int x7, bool x8) : QSqlFieldInfo(x1, x2, x3, x4, x5, x6, x7, x8) {
    }
    static void x_3(xargs *x) {
	// QSqlFieldInfo(const QString&, QVariant::Type, int, int, int, const QVariant&, int)
	x_QSqlFieldInfo* xret = new x_QSqlFieldInfo(*(const QString *)x[1].x_voidp,(QVariant::Type)x[2].x_long,(int)x[3].x_int,(int)x[4].x_int,(int)x[5].x_int,*(const QVariant *)x[6].x_voidp,(int)x[7].x_int);
	x[0].x_voidp = (void*)xret;
    }
    x_QSqlFieldInfo(const QString& x1, QVariant::Type x2, int x3, int x4, int x5, const QVariant& x6, int x7) : QSqlFieldInfo(x1, x2, x3, x4, x5, x6, x7) {
    }
    static void x_4(xargs *x) {
	// QSqlFieldInfo(const QString&, QVariant::Type, int, int, int, const QVariant&)
	x_QSqlFieldInfo* xret = new x_QSqlFieldInfo(*(const QString *)x[1].x_voidp,(QVariant::Type)x[2].x_long,(int)x[3].x_int,(int)x[4].x_int,(int)x[5].x_int,*(const QVariant *)x[6].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QSqlFieldInfo(const QString& x1, QVariant::Type x2, int x3, int x4, int x5, const QVariant& x6) : QSqlFieldInfo(x1, x2, x3, x4, x5, x6) {
    }
    static void x_5(xargs *x) {
	// QSqlFieldInfo(const QString&, QVariant::Type, int, int, int)
	x_QSqlFieldInfo* xret = new x_QSqlFieldInfo(*(const QString *)x[1].x_voidp,(QVariant::Type)x[2].x_long,(int)x[3].x_int,(int)x[4].x_int,(int)x[5].x_int);
	x[0].x_voidp = (void*)xret;
    }
    x_QSqlFieldInfo(const QString& x1, QVariant::Type x2, int x3, int x4, int x5) : QSqlFieldInfo(x1, x2, x3, x4, x5) {
    }
    static void x_6(xargs *x) {
	// QSqlFieldInfo(const QString&, QVariant::Type, int, int)
	x_QSqlFieldInfo* xret = new x_QSqlFieldInfo(*(const QString *)x[1].x_voidp,(QVariant::Type)x[2].x_long,(int)x[3].x_int,(int)x[4].x_int);
	x[0].x_voidp = (void*)xret;
    }
    x_QSqlFieldInfo(const QString& x1, QVariant::Type x2, int x3, int x4) : QSqlFieldInfo(x1, x2, x3, x4) {
    }
    static void x_7(xargs *x) {
	// QSqlFieldInfo(const QString&, QVariant::Type, int)
	x_QSqlFieldInfo* xret = new x_QSqlFieldInfo(*(const QString *)x[1].x_voidp,(QVariant::Type)x[2].x_long,(int)x[3].x_int);
	x[0].x_voidp = (void*)xret;
    }
    x_QSqlFieldInfo(const QString& x1, QVariant::Type x2, int x3) : QSqlFieldInfo(x1, x2, x3) {
    }
    static void x_8(xargs *x) {
	// QSqlFieldInfo(const QString&, QVariant::Type)
	x_QSqlFieldInfo* xret = new x_QSqlFieldInfo(*(const QString *)x[1].x_voidp,(QVariant::Type)x[2].x_long);
	x[0].x_voidp = (void*)xret;
    }
    x_QSqlFieldInfo(const QString& x1, QVariant::Type x2) : QSqlFieldInfo(x1, x2) {
    }
    static void x_9(xargs *x) {
	// QSqlFieldInfo(const QString&)
	x_QSqlFieldInfo* xret = new x_QSqlFieldInfo(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QSqlFieldInfo(const QString& x1) : QSqlFieldInfo(x1) {
    }
    static void x_10(xargs *x) {
	// QSqlFieldInfo()
	x_QSqlFieldInfo* xret = new x_QSqlFieldInfo();
	x[0].x_voidp = (void*)xret;
    }
    x_QSqlFieldInfo() : QSqlFieldInfo() {
    }
    static void x_11(xargs *x) {
	// QSqlFieldInfo(const QSqlFieldInfo&)
	x_QSqlFieldInfo* xret = new x_QSqlFieldInfo(*(const QSqlFieldInfo *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QSqlFieldInfo(const QSqlFieldInfo& x1) : QSqlFieldInfo(x1) {
    }
    static void x_12(xargs *x) {
	// QSqlFieldInfo(const QSqlField&, bool)
	x_QSqlFieldInfo* xret = new x_QSqlFieldInfo(*(const QSqlField *)x[1].x_voidp,(bool)x[2].x_bool);
	x[0].x_voidp = (void*)xret;
    }
    x_QSqlFieldInfo(const QSqlField& x1, bool x2) : QSqlFieldInfo(x1, x2) {
    }
    static void x_13(xargs *x) {
	// QSqlFieldInfo(const QSqlField&)
	x_QSqlFieldInfo* xret = new x_QSqlFieldInfo(*(const QSqlField *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QSqlFieldInfo(const QSqlField& x1) : QSqlFieldInfo(x1) {
    }
    void x_14(xargs *x) {
	// operator=(const QSqlFieldInfo&)
	QSqlFieldInfo& xret = this->QSqlFieldInfo::operator=(*(const QSqlFieldInfo *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_15(xargs *x) const {
	// operator==(const QSqlFieldInfo&)
	bool xret = this->QSqlFieldInfo::operator==(*(const QSqlFieldInfo *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_16(xargs *x) const {
	// toField()
	QSqlField xret = this->QSqlFieldInfo::toField();
	x[0].x_voidp = (void*)new QSqlField(xret);
    }
    void x_17(xargs *x) const {
	// isRequired()
	int xret = this->QSqlFieldInfo::isRequired();
	x[0].x_int = (int)xret;
    }
    void x_18(xargs *x) const {
	// type()
	QVariant::Type xret = this->QSqlFieldInfo::type();
	x[0].x_long = (long)xret;
    }
    void x_19(xargs *x) const {
	// length()
	int xret = this->QSqlFieldInfo::length();
	x[0].x_int = (int)xret;
    }
    void x_20(xargs *x) const {
	// precision()
	int xret = this->QSqlFieldInfo::precision();
	x[0].x_int = (int)xret;
    }
    void x_21(xargs *x) const {
	// defaultValue()
	QVariant xret = this->QSqlFieldInfo::defaultValue();
	x[0].x_voidp = (void*)new QVariant(xret);
    }
    void x_22(xargs *x) const {
	// name()
	QString xret = this->QSqlFieldInfo::name();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_23(xargs *x) const {
	// typeID()
	int xret = this->QSqlFieldInfo::typeID();
	x[0].x_int = (int)xret;
    }
    void x_24(xargs *x) const {
	// isGenerated()
	bool xret = this->QSqlFieldInfo::isGenerated();
	x[0].x_bool = (bool)xret;
    }
    void x_25(xargs *x) const {
	// isTrim()
	bool xret = this->QSqlFieldInfo::isTrim();
	x[0].x_bool = (bool)xret;
    }
    void x_26(xargs *x) const {
	// isCalculated()
	bool xret = this->QSqlFieldInfo::isCalculated();
	x[0].x_bool = (bool)xret;
    }
    void x_27(xargs *x) {
	// setTrim(bool)
	this->QSqlFieldInfo::setTrim((bool)x[1].x_bool);
    }
    void x_28(xargs *x) {
	// setGenerated(bool)
	this->QSqlFieldInfo::setGenerated((bool)x[1].x_bool);
    }
    void x_29(xargs *x) {
	// setCalculated(bool)
	this->QSqlFieldInfo::setCalculated((bool)x[1].x_bool);
    }
    virtual void setCalculated(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 7461, x)) return;
	this->QSqlFieldInfo::setCalculated(x1);
    }
    virtual void setGenerated(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 7460, x)) return;
	this->QSqlFieldInfo::setGenerated(x1);
    }
    virtual void setTrim(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 7459, x)) return;
	this->QSqlFieldInfo::setTrim(x1);
    }
    ~x_QSqlFieldInfo() {}
};
void xcall_QSqlFieldInfo(xargs *x, void *s, int xi) {
    x_QSqlFieldInfo *xself = (x_QSqlFieldInfo*)s;
    switch(xi) {
	case 0: x_QSqlFieldInfo::x_0(x);	break;
	case 1: x_QSqlFieldInfo::x_1(x);	break;
	case 2: x_QSqlFieldInfo::x_2(x);	break;
	case 3: x_QSqlFieldInfo::x_3(x);	break;
	case 4: x_QSqlFieldInfo::x_4(x);	break;
	case 5: x_QSqlFieldInfo::x_5(x);	break;
	case 6: x_QSqlFieldInfo::x_6(x);	break;
	case 7: x_QSqlFieldInfo::x_7(x);	break;
	case 8: x_QSqlFieldInfo::x_8(x);	break;
	case 9: x_QSqlFieldInfo::x_9(x);	break;
	case 10: x_QSqlFieldInfo::x_10(x);	break;
	case 11: x_QSqlFieldInfo::x_11(x);	break;
	case 12: x_QSqlFieldInfo::x_12(x);	break;
	case 13: x_QSqlFieldInfo::x_13(x);	break;
	case 14: xself->x_14(x);	break;
	case 15: xself->x_15(x);	break;
	case 16: xself->x_16(x);	break;
	case 17: xself->x_17(x);	break;
	case 18: xself->x_18(x);	break;
	case 19: xself->x_19(x);	break;
	case 20: xself->x_20(x);	break;
	case 21: xself->x_21(x);	break;
	case 22: xself->x_22(x);	break;
	case 23: xself->x_23(x);	break;
	case 24: xself->x_24(x);	break;
	case 25: xself->x_25(x);	break;
	case 26: xself->x_26(x);	break;
	case 27: xself->x_27(x);	break;
	case 28: xself->x_28(x);	break;
	case 29: xself->x_29(x);	break;
	case 30: delete (QSqlFieldInfo*)xself;	break;
    }
}
