//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke.h>
#include <qt_smoke.h>
#include <qstring.h>
#include <qdom.h>

class x_QDomElement : public QDomElement {
public:
    static void x_0(Smoke::Stack x) {
	// QDomElement()
	x_QDomElement* xret = new x_QDomElement();
	x[0].s_class = (void*)xret;
    }
    x_QDomElement() : QDomElement() {
    }
    static void x_1(Smoke::Stack x) {
	// QDomElement(const QDomElement&)
	x_QDomElement* xret = new x_QDomElement(*(const QDomElement *)x[1].s_class);
	x[0].s_class = (void*)xret;
    }
    x_QDomElement(const QDomElement& x1) : QDomElement(x1) {
    }
    void x_2(Smoke::Stack x) {
	// operator=(const QDomElement&)
	QDomElement& xret = this->QDomElement::operator=(*(const QDomElement *)x[1].s_class);
	x[0].s_class = (void*)&xret;
    }
    void x_3(Smoke::Stack x) const {
	// attribute(const QString&, const QString&)
	QString xret = this->QDomElement::attribute(*(const QString *)x[1].s_class,*(const QString *)x[2].s_class);
	x[0].s_class = (void*)new QString(xret);
    }
    void x_4(Smoke::Stack x) const {
	// attribute(const QString&)
	QString xret = this->QDomElement::attribute(*(const QString *)x[1].s_class);
	x[0].s_class = (void*)new QString(xret);
    }
    void x_5(Smoke::Stack x) {
	// setAttribute(const QString&, const QString&)
	this->QDomElement::setAttribute(*(const QString *)x[1].s_class,*(const QString *)x[2].s_class);
	x[0].s_int = x[0].s_int; // noop
    }
    void x_6(Smoke::Stack x) {
	// setAttribute(const QString&, int)
	this->QDomElement::setAttribute(*(const QString *)x[1].s_class,(int)x[2].s_int);
	x[0].s_int = x[0].s_int; // noop
    }
    void x_7(Smoke::Stack x) {
	// setAttribute(const QString&, uint)
	this->QDomElement::setAttribute(*(const QString *)x[1].s_class,(uint)x[2].s_uint);
	x[0].s_int = x[0].s_int; // noop
    }
    void x_8(Smoke::Stack x) {
	// setAttribute(const QString&, double)
	this->QDomElement::setAttribute(*(const QString *)x[1].s_class,(double)x[2].s_double);
	x[0].s_int = x[0].s_int; // noop
    }
    void x_9(Smoke::Stack x) {
	// removeAttribute(const QString&)
	this->QDomElement::removeAttribute(*(const QString *)x[1].s_class);
	x[0].s_int = x[0].s_int; // noop
    }
    void x_10(Smoke::Stack x) {
	// attributeNode(const QString&)
	QDomAttr xret = this->QDomElement::attributeNode(*(const QString *)x[1].s_class);
	x[0].s_class = (void*)new QDomAttr(xret);
    }
    void x_11(Smoke::Stack x) {
	// setAttributeNode(const QDomAttr&)
	QDomAttr xret = this->QDomElement::setAttributeNode(*(const QDomAttr *)x[1].s_class);
	x[0].s_class = (void*)new QDomAttr(xret);
    }
    void x_12(Smoke::Stack x) {
	// removeAttributeNode(const QDomAttr&)
	QDomAttr xret = this->QDomElement::removeAttributeNode(*(const QDomAttr *)x[1].s_class);
	x[0].s_class = (void*)new QDomAttr(xret);
    }
    void x_13(Smoke::Stack x) const {
	// elementsByTagName(const QString&)
	QDomNodeList xret = this->QDomElement::elementsByTagName(*(const QString *)x[1].s_class);
	x[0].s_class = (void*)new QDomNodeList(xret);
    }
    void x_14(Smoke::Stack x) const {
	// hasAttribute(const QString&)
	bool xret = this->QDomElement::hasAttribute(*(const QString *)x[1].s_class);
	x[0].s_bool = (bool)xret;
    }
    void x_15(Smoke::Stack x) const {
	// attributeNS(const QString, const QString&, const QString&)
	QString xret = this->QDomElement::attributeNS(*(const QString *)x[1].s_class,*(const QString *)x[2].s_class,*(const QString *)x[3].s_class);
	x[0].s_class = (void*)new QString(xret);
    }
    void x_16(Smoke::Stack x) {
	// setAttributeNS(const QString, const QString&, const QString&)
	this->QDomElement::setAttributeNS(*(const QString *)x[1].s_class,*(const QString *)x[2].s_class,*(const QString *)x[3].s_class);
	x[0].s_int = x[0].s_int; // noop
    }
    void x_17(Smoke::Stack x) {
	// setAttributeNS(const QString, const QString&, int)
	this->QDomElement::setAttributeNS(*(const QString *)x[1].s_class,*(const QString *)x[2].s_class,(int)x[3].s_int);
	x[0].s_int = x[0].s_int; // noop
    }
    void x_18(Smoke::Stack x) {
	// setAttributeNS(const QString, const QString&, uint)
	this->QDomElement::setAttributeNS(*(const QString *)x[1].s_class,*(const QString *)x[2].s_class,(uint)x[3].s_uint);
	x[0].s_int = x[0].s_int; // noop
    }
    void x_19(Smoke::Stack x) {
	// setAttributeNS(const QString, const QString&, double)
	this->QDomElement::setAttributeNS(*(const QString *)x[1].s_class,*(const QString *)x[2].s_class,(double)x[3].s_double);
	x[0].s_int = x[0].s_int; // noop
    }
    void x_20(Smoke::Stack x) {
	// removeAttributeNS(const QString&, const QString&)
	this->QDomElement::removeAttributeNS(*(const QString *)x[1].s_class,*(const QString *)x[2].s_class);
	x[0].s_int = x[0].s_int; // noop
    }
    void x_21(Smoke::Stack x) {
	// attributeNodeNS(const QString&, const QString&)
	QDomAttr xret = this->QDomElement::attributeNodeNS(*(const QString *)x[1].s_class,*(const QString *)x[2].s_class);
	x[0].s_class = (void*)new QDomAttr(xret);
    }
    void x_22(Smoke::Stack x) {
	// setAttributeNodeNS(const QDomAttr&)
	QDomAttr xret = this->QDomElement::setAttributeNodeNS(*(const QDomAttr *)x[1].s_class);
	x[0].s_class = (void*)new QDomAttr(xret);
    }
    void x_23(Smoke::Stack x) const {
	// elementsByTagNameNS(const QString&, const QString&)
	QDomNodeList xret = this->QDomElement::elementsByTagNameNS(*(const QString *)x[1].s_class,*(const QString *)x[2].s_class);
	x[0].s_class = (void*)new QDomNodeList(xret);
    }
    void x_24(Smoke::Stack x) const {
	// hasAttributeNS(const QString&, const QString&)
	bool xret = this->QDomElement::hasAttributeNS(*(const QString *)x[1].s_class,*(const QString *)x[2].s_class);
	x[0].s_bool = (bool)xret;
    }
    void x_25(Smoke::Stack x) const {
	// tagName()
	QString xret = this->QDomElement::tagName();
	x[0].s_class = (void*)new QString(xret);
    }
    void x_26(Smoke::Stack x) {
	// setTagName(const QString&)
	this->QDomElement::setTagName(*(const QString *)x[1].s_class);
	x[0].s_int = x[0].s_int; // noop
    }
    void x_27(Smoke::Stack x) const {
	// attributes()
	QDomNamedNodeMap xret = this->QDomElement::attributes();
	x[0].s_class = (void*)new QDomNamedNodeMap(xret);
    }
    void x_28(Smoke::Stack x) const {
	// nodeType()
	QDomNode::NodeType xret = this->QDomElement::nodeType();
	x[0].s_class = (void*)new QDomNode::NodeType(xret);
    }
    void x_29(Smoke::Stack x) const {
	// isElement()
	bool xret = this->QDomElement::isElement();
	x[0].s_bool = (bool)xret;
    }
    void x_30(Smoke::Stack x) const {
	// text()
	QString xret = this->QDomElement::text();
	x[0].s_class = (void*)new QString(xret);
    }
    virtual QDomNode appendChild(const QDomNode& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->callMethod(2195, (void*)this, x)) {
	    QDomNode *xptr = (QDomNode *)x[0].s_class;
	    QDomNode xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::appendChild(x1);
    }
    virtual QDomNamedNodeMap attributes() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2126, (void*)this, x)) {
	    QDomNamedNodeMap *xptr = (QDomNamedNodeMap *)x[0].s_class;
	    QDomNamedNodeMap xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomElement::attributes();
    }
    virtual QDomNodeList childNodes() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2204, (void*)this, x)) {
	    QDomNodeList *xptr = (QDomNodeList *)x[0].s_class;
	    QDomNodeList xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::childNodes();
    }
    virtual QDomNode cloneNode(bool x1) const {
	Smoke::StackItem x[2];
	x[1].s_bool = (bool)x1;
	if(qt_Smoke->callMethod(2197, (void*)this, x)) {
	    QDomNode *xptr = (QDomNode *)x[0].s_class;
	    QDomNode xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::cloneNode(x1);
    }
    virtual QDomNodeList elementsByTagName(const QString& x1) const {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->callMethod(2112, (void*)this, x)) {
	    QDomNodeList *xptr = (QDomNodeList *)x[0].s_class;
	    QDomNodeList xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomElement::elementsByTagName(x1);
    }
    virtual QDomNodeList elementsByTagNameNS(const QString& x1, const QString& x2) const {
	Smoke::StackItem x[3];
	x[1].s_class = (void*)&x1;
	x[2].s_class = (void*)&x2;
	if(qt_Smoke->callMethod(2122, (void*)this, x)) {
	    QDomNodeList *xptr = (QDomNodeList *)x[0].s_class;
	    QDomNodeList xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomElement::elementsByTagNameNS(x1, x2);
    }
    virtual QDomNode firstChild() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2205, (void*)this, x)) {
	    QDomNode *xptr = (QDomNode *)x[0].s_class;
	    QDomNode xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::firstChild();
    }
    virtual bool hasAttributes() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2213, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDomNode::hasAttributes();
    }
    virtual bool hasChildNodes() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2196, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDomNode::hasChildNodes();
    }
    virtual QDomNode insertAfter(const QDomNode& x1, const QDomNode& x2) {
	Smoke::StackItem x[3];
	x[1].s_class = (void*)&x1;
	x[2].s_class = (void*)&x2;
	if(qt_Smoke->callMethod(2192, (void*)this, x)) {
	    QDomNode *xptr = (QDomNode *)x[0].s_class;
	    QDomNode xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::insertAfter(x1, x2);
    }
    virtual QDomNode insertBefore(const QDomNode& x1, const QDomNode& x2) {
	Smoke::StackItem x[3];
	x[1].s_class = (void*)&x1;
	x[2].s_class = (void*)&x2;
	if(qt_Smoke->callMethod(2191, (void*)this, x)) {
	    QDomNode *xptr = (QDomNode *)x[0].s_class;
	    QDomNode xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::insertBefore(x1, x2);
    }
    virtual bool isAttr() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2218, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDomNode::isAttr();
    }
    virtual bool isCDATASection() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2219, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDomNode::isCDATASection();
    }
    virtual bool isCharacterData() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2229, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDomNode::isCharacterData();
    }
    virtual bool isComment() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2230, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDomNode::isComment();
    }
    virtual bool isDocument() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2221, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDomNode::isDocument();
    }
    virtual bool isDocumentFragment() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2220, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDomNode::isDocumentFragment();
    }
    virtual bool isDocumentType() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2222, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDomNode::isDocumentType();
    }
    virtual bool isElement() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2128, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDomElement::isElement();
    }
    virtual bool isEntity() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2226, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDomNode::isEntity();
    }
    virtual bool isEntityReference() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2224, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDomNode::isEntityReference();
    }
    virtual bool isNotation() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2227, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDomNode::isNotation();
    }
    virtual bool isProcessingInstruction() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2228, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDomNode::isProcessingInstruction();
    }
    virtual bool isSupported(const QString& x1, const QString& x2) const {
	Smoke::StackItem x[3];
	x[1].s_class = (void*)&x1;
	x[2].s_class = (void*)&x2;
	if(qt_Smoke->callMethod(2200, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDomNode::isSupported(x1, x2);
    }
    virtual bool isText() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2225, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDomNode::isText();
    }
    virtual QDomNode lastChild() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2206, (void*)this, x)) {
	    QDomNode *xptr = (QDomNode *)x[0].s_class;
	    QDomNode xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::lastChild();
    }
    virtual QString localName() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2212, (void*)this, x)) {
	    QString *xptr = (QString *)x[0].s_class;
	    QString xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::localName();
    }
    virtual QString namespaceURI() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2211, (void*)this, x)) {
	    QString *xptr = (QString *)x[0].s_class;
	    QString xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::namespaceURI();
    }
    virtual QDomNode nextSibling() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2208, (void*)this, x)) {
	    QDomNode *xptr = (QDomNode *)x[0].s_class;
	    QDomNode xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::nextSibling();
    }
    virtual QString nodeName() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2201, (void*)this, x)) {
	    QString *xptr = (QString *)x[0].s_class;
	    QString xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::nodeName();
    }
    virtual QDomNode::NodeType nodeType() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2127, (void*)this, x)) {
	    QDomNode::NodeType *xptr = (QDomNode::NodeType *)x[0].s_class;
	    QDomNode::NodeType xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomElement::nodeType();
    }
    virtual QString nodeValue() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2214, (void*)this, x)) {
	    QString *xptr = (QString *)x[0].s_class;
	    QString xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::nodeValue();
    }
    virtual void normalize() {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2199, (void*)this, x)) return;
	this->QDomNode::normalize();
    }
    virtual QDomDocument ownerDocument() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2210, (void*)this, x)) {
	    QDomDocument *xptr = (QDomDocument *)x[0].s_class;
	    QDomDocument xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::ownerDocument();
    }
    virtual QDomNode parentNode() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2203, (void*)this, x)) {
	    QDomNode *xptr = (QDomNode *)x[0].s_class;
	    QDomNode xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::parentNode();
    }
    virtual QString prefix() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2216, (void*)this, x)) {
	    QString *xptr = (QString *)x[0].s_class;
	    QString xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::prefix();
    }
    virtual QDomNode previousSibling() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2207, (void*)this, x)) {
	    QDomNode *xptr = (QDomNode *)x[0].s_class;
	    QDomNode xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::previousSibling();
    }
    virtual QDomNode removeChild(const QDomNode& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->callMethod(2194, (void*)this, x)) {
	    QDomNode *xptr = (QDomNode *)x[0].s_class;
	    QDomNode xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::removeChild(x1);
    }
    virtual QDomNode replaceChild(const QDomNode& x1, const QDomNode& x2) {
	Smoke::StackItem x[3];
	x[1].s_class = (void*)&x1;
	x[2].s_class = (void*)&x2;
	if(qt_Smoke->callMethod(2193, (void*)this, x)) {
	    QDomNode *xptr = (QDomNode *)x[0].s_class;
	    QDomNode xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::replaceChild(x1, x2);
    }
    virtual void setNodeValue(const QString& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->callMethod(2215, (void*)this, x)) return;
	this->QDomNode::setNodeValue(x1);
    }
    virtual void setPrefix(const QString& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->callMethod(2217, (void*)this, x)) return;
	this->QDomNode::setPrefix(x1);
    }
    ~x_QDomElement() {}
};
void xcall_QDomElement(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QDomElement *xself = (x_QDomElement*)obj;
    switch(xi) {
	case 0: x_QDomElement::x_0(args);	break;
	case 1: x_QDomElement::x_1(args);	break;
	case 2: xself->x_2(args);	break;
	case 3: xself->x_3(args);	break;
	case 4: xself->x_4(args);	break;
	case 5: xself->x_5(args);	break;
	case 6: xself->x_6(args);	break;
	case 7: xself->x_7(args);	break;
	case 8: xself->x_8(args);	break;
	case 9: xself->x_9(args);	break;
	case 10: xself->x_10(args);	break;
	case 11: xself->x_11(args);	break;
	case 12: xself->x_12(args);	break;
	case 13: xself->x_13(args);	break;
	case 14: xself->x_14(args);	break;
	case 15: xself->x_15(args);	break;
	case 16: xself->x_16(args);	break;
	case 17: xself->x_17(args);	break;
	case 18: xself->x_18(args);	break;
	case 19: xself->x_19(args);	break;
	case 20: xself->x_20(args);	break;
	case 21: xself->x_21(args);	break;
	case 22: xself->x_22(args);	break;
	case 23: xself->x_23(args);	break;
	case 24: xself->x_24(args);	break;
	case 25: xself->x_25(args);	break;
	case 26: xself->x_26(args);	break;
	case 27: xself->x_27(args);	break;
	case 28: xself->x_28(args);	break;
	case 29: xself->x_29(args);	break;
	case 30: xself->x_30(args);	break;
	case 31: delete (QDomElement*)xself;	break;
    }
}
