//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qiconset.h>
#include <qstring.h>
#include <qrect.h>
#include <qtabbar.h>

class x_QTab : public QTab {
public:
    static void x_0(xargs *x) {
	// QTab()
	x_QTab* xret = new x_QTab();
	x[0].x_voidp = (void*)xret;
    }
    x_QTab() : QTab() {
    }
    static void x_1(xargs *x) {
	// QTab(const QString&)
	x_QTab* xret = new x_QTab(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QTab(const QString& x1) : QTab(x1) {
    }
    static void x_2(xargs *x) {
	// QTab(const QIconSet&, const QString&)
	x_QTab* xret = new x_QTab(*(const QIconSet *)x[1].x_voidp,*(const QString *)x[2].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QTab(const QIconSet& x1, const QString& x2) : QTab(x1, x2) {
    }
    static void x_3(xargs *x) {
	// QTab(const QIconSet&)
	x_QTab* xret = new x_QTab(*(const QIconSet *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QTab(const QIconSet& x1) : QTab(x1) {
    }
    void x_4(xargs *x) {
	// setText(const QString&)
	this->QTab::setText(*(const QString *)x[1].x_voidp);
    }
    void x_5(xargs *x) const {
	// text()
	QString xret = this->QTab::text();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_6(xargs *x) {
	// setIconSet(const QIconSet&)
	this->QTab::setIconSet(*(const QIconSet *)x[1].x_voidp);
    }
    void x_7(xargs *x) const {
	// iconSet()
	QIconSet* xret = this->QTab::iconSet();
	x[0].x_voidp = (void*)xret;
    }
    void x_8(xargs *x) {
	// setRect(const QRect&)
	this->QTab::setRect(*(const QRect *)x[1].x_voidp);
    }
    void x_9(xargs *x) const {
	// rect()
	QRect xret = this->QTab::rect();
	x[0].x_voidp = (void*)new QRect(xret);
    }
    void x_10(xargs *x) {
	// setEnabled(bool)
	this->QTab::setEnabled((bool)x[1].x_bool);
    }
    void x_11(xargs *x) const {
	// isEnabled()
	bool xret = this->QTab::isEnabled();
	x[0].x_bool = (bool)xret;
    }
    void x_12(xargs *x) {
	// setIdentifier(int)
	this->QTab::setIdentifier((int)x[1].x_int);
    }
    void x_13(xargs *x) const {
	// identifier()
	int xret = this->QTab::identifier();
	x[0].x_int = (int)xret;
    }
    ~x_QTab() {}
};
void xcall_QTab(xargs *x, void *s, int xi) {
    x_QTab *xself = (x_QTab*)s;
    switch(xi) {
	case 0: x_QTab::x_0(x);	break;
	case 1: x_QTab::x_1(x);	break;
	case 2: x_QTab::x_2(x);	break;
	case 3: x_QTab::x_3(x);	break;
	case 4: xself->x_4(x);	break;
	case 5: xself->x_5(x);	break;
	case 6: xself->x_6(x);	break;
	case 7: xself->x_7(x);	break;
	case 8: xself->x_8(x);	break;
	case 9: xself->x_9(x);	break;
	case 10: xself->x_10(x);	break;
	case 11: xself->x_11(x);	break;
	case 12: xself->x_12(x);	break;
	case 13: xself->x_13(x);	break;
	case 14: delete (QTab*)xself;	break;
    }
}
