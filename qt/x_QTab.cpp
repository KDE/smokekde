//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke.h>
#include <qt_smoke.h>
#include <qiconset.h>
#include <qstring.h>
#include <qrect.h>
#include <qtabbar.h>

class x_QTab : public QTab {
public:
    static void x_0(Smoke::Stack x) {
	// QTab()
	x_QTab* xret = new x_QTab();
	x[0].s_class = (void*)xret;
    }
    x_QTab() : QTab() {
    }
    static void x_1(Smoke::Stack x) {
	// QTab(const QString&)
	x_QTab* xret = new x_QTab(*(const QString *)x[1].s_voidp);
	x[0].s_class = (void*)xret;
    }
    x_QTab(const QString& x1) : QTab(x1) {
    }
    static void x_2(Smoke::Stack x) {
	// QTab(const QIconSet&, const QString&)
	x_QTab* xret = new x_QTab(*(const QIconSet *)x[1].s_class,*(const QString *)x[2].s_voidp);
	x[0].s_class = (void*)xret;
    }
    x_QTab(const QIconSet& x1, const QString& x2) : QTab(x1, x2) {
    }
    static void x_3(Smoke::Stack x) {
	// QTab(const QIconSet&)
	x_QTab* xret = new x_QTab(*(const QIconSet *)x[1].s_class);
	x[0].s_class = (void*)xret;
    }
    x_QTab(const QIconSet& x1) : QTab(x1) {
    }
    void x_4(Smoke::Stack x) {
	// setText(const QString&)
	this->QTab::setText(*(const QString *)x[1].s_voidp);
	(void)x; // noop (for compiler warning)
    }
    void x_5(Smoke::Stack x) const {
	// text()
	QString xret = this->QTab::text();
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_6(Smoke::Stack x) {
	// setIconSet(const QIconSet&)
	this->QTab::setIconSet(*(const QIconSet *)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_7(Smoke::Stack x) const {
	// iconSet()
	QIconSet* xret = this->QTab::iconSet();
	x[0].s_class = (void*)xret;
    }
    void x_8(Smoke::Stack x) {
	// setRect(const QRect&)
	this->QTab::setRect(*(const QRect *)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_9(Smoke::Stack x) const {
	// rect()
	QRect xret = this->QTab::rect();
	x[0].s_class = (void*)new QRect(xret);
    }
    void x_10(Smoke::Stack x) {
	// setEnabled(bool)
	this->QTab::setEnabled((bool)x[1].s_bool);
	(void)x; // noop (for compiler warning)
    }
    void x_11(Smoke::Stack x) const {
	// isEnabled()
	bool xret = this->QTab::isEnabled();
	x[0].s_bool = xret;
    }
    void x_12(Smoke::Stack x) {
	// setIdentifier(int)
	this->QTab::setIdentifier((int)x[1].s_int);
	(void)x; // noop (for compiler warning)
    }
    void x_13(Smoke::Stack x) const {
	// identifier()
	int xret = this->QTab::identifier();
	x[0].s_int = xret;
    }
    static void x_14(Smoke::Stack x) {
	// QTab(const QTab&)
	x_QTab* xret = new x_QTab(*(const QTab *)x[1].s_class);
	x[0].s_class = (void*)xret;
    }
    x_QTab(const QTab& x1) : QTab(x1) {
    }
    ~x_QTab() { qt_Smoke->binding->deleted(310, (void*)this); }
};
void xcall_QTab(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QTab *xself = (x_QTab*)obj;
    switch(xi) {
	case 0: x_QTab::x_0(args);	break;
	case 1: x_QTab::x_1(args);	break;
	case 2: x_QTab::x_2(args);	break;
	case 3: x_QTab::x_3(args);	break;
	case 4: xself->x_4(args);	break;
	case 5: xself->x_5(args);	break;
	case 6: xself->x_6(args);	break;
	case 7: xself->x_7(args);	break;
	case 8: xself->x_8(args);	break;
	case 9: xself->x_9(args);	break;
	case 10: xself->x_10(args);	break;
	case 11: xself->x_11(args);	break;
	case 12: xself->x_12(args);	break;
	case 13: xself->x_13(args);	break;
	case 14: x_QTab::x_14(args);	break;
	case 15: delete (QTab*)xself;	break;
    }
}
