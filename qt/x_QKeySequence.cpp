//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke.h>
#include <qt_smoke.h>
#include <qkeysequence.h>
#include <qnamespace.h>
#include <qstring.h>

class x_QKeySequence : public QKeySequence {
public:
    static void x_0(Smoke::Stack x) {
	// QKeySequence()
	x_QKeySequence* xret = new x_QKeySequence();
	x[0].s_class = (void*)xret;
    }
    x_QKeySequence() : QKeySequence() {
    }
    static void x_1(Smoke::Stack x) {
	// QKeySequence(const QString&)
	x_QKeySequence* xret = new x_QKeySequence(*(const QString *)x[1].s_voidp);
	x[0].s_class = (void*)xret;
    }
    x_QKeySequence(const QString& x1) : QKeySequence(x1) {
    }
    static void x_2(Smoke::Stack x) {
	// QKeySequence(int)
	x_QKeySequence* xret = new x_QKeySequence((int)x[1].s_int);
	x[0].s_class = (void*)xret;
    }
    x_QKeySequence(int x1) : QKeySequence(x1) {
    }
    static void x_3(Smoke::Stack x) {
	// QKeySequence(int, int, int, int)
	x_QKeySequence* xret = new x_QKeySequence((int)x[1].s_int,(int)x[2].s_int,(int)x[3].s_int,(int)x[4].s_int);
	x[0].s_class = (void*)xret;
    }
    x_QKeySequence(int x1, int x2, int x3, int x4) : QKeySequence(x1, x2, x3, x4) {
    }
    static void x_4(Smoke::Stack x) {
	// QKeySequence(int, int, int)
	x_QKeySequence* xret = new x_QKeySequence((int)x[1].s_int,(int)x[2].s_int,(int)x[3].s_int);
	x[0].s_class = (void*)xret;
    }
    x_QKeySequence(int x1, int x2, int x3) : QKeySequence(x1, x2, x3) {
    }
    static void x_5(Smoke::Stack x) {
	// QKeySequence(int, int)
	x_QKeySequence* xret = new x_QKeySequence((int)x[1].s_int,(int)x[2].s_int);
	x[0].s_class = (void*)xret;
    }
    x_QKeySequence(int x1, int x2) : QKeySequence(x1, x2) {
    }
    static void x_6(Smoke::Stack x) {
	// QKeySequence(const QKeySequence&)
	x_QKeySequence* xret = new x_QKeySequence(*(const QKeySequence *)x[1].s_class);
	x[0].s_class = (void*)xret;
    }
    x_QKeySequence(const QKeySequence& x1) : QKeySequence(x1) {
    }
    void x_7(Smoke::Stack x) const {
	// count()
	uint xret = this->QKeySequence::count();
	x[0].s_uint = xret;
    }
    void x_8(Smoke::Stack x) const {
	// isEmpty()
	bool xret = this->QKeySequence::isEmpty();
	x[0].s_bool = xret;
    }
    void x_9(Smoke::Stack x) const {
	// matches(const QKeySequence&)
	Qt::SequenceMatch xret = this->QKeySequence::matches(*(const QKeySequence *)x[1].s_class);
	x[0].s_enum = xret;
    }
    void x_10(Smoke::Stack x) const {
	// operator QString()
	this->QKeySequence::operator QString();
	(void)x; // noop (for compiler warning)
    }
    void x_11(Smoke::Stack x) const {
	// operator int()
	this->QKeySequence::operator int();
	(void)x; // noop (for compiler warning)
    }
    void x_12(Smoke::Stack x) const {
	// operator[](uint)
	int xret = this->QKeySequence::operator[]((uint)x[1].s_uint);
	x[0].s_int = xret;
    }
    void x_13(Smoke::Stack x) {
	// operator=(const QKeySequence&)
	QKeySequence& xret = this->QKeySequence::operator=(*(const QKeySequence *)x[1].s_class);
	x[0].s_class = (void*)&xret;
    }
    void x_14(Smoke::Stack x) const {
	// operator==(const QKeySequence&)
	bool xret = this->QKeySequence::operator==(*(const QKeySequence *)x[1].s_class);
	x[0].s_bool = xret;
    }
    void x_15(Smoke::Stack x) const {
	// operator!=(const QKeySequence&)
	bool xret = this->QKeySequence::operator!=(*(const QKeySequence *)x[1].s_class);
	x[0].s_bool = xret;
    }
    ~x_QKeySequence() { qt_Smoke->binding->deleted(177, (void*)this); }
};
void xcall_QKeySequence(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QKeySequence *xself = (x_QKeySequence*)obj;
    switch(xi) {
	case 0: x_QKeySequence::x_0(args);	break;
	case 1: x_QKeySequence::x_1(args);	break;
	case 2: x_QKeySequence::x_2(args);	break;
	case 3: x_QKeySequence::x_3(args);	break;
	case 4: x_QKeySequence::x_4(args);	break;
	case 5: x_QKeySequence::x_5(args);	break;
	case 6: x_QKeySequence::x_6(args);	break;
	case 7: xself->x_7(args);	break;
	case 8: xself->x_8(args);	break;
	case 9: xself->x_9(args);	break;
	case 10: xself->x_10(args);	break;
	case 11: xself->x_11(args);	break;
	case 12: xself->x_12(args);	break;
	case 13: xself->x_13(args);	break;
	case 14: xself->x_14(args);	break;
	case 15: xself->x_15(args);	break;
	case 16: delete (QKeySequence*)xself;	break;
    }
}
