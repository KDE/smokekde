//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qurlinfo.h>
#include <qurl.h>
#include <qstring.h>
#include <qdatetime.h>
#include <qurloperator.h>

class x_QUrlInfo : public QUrlInfo {
public:
    static void x_0(xargs *x) {
	// QUrlInfo()
	x_QUrlInfo* xret = new x_QUrlInfo();
	x[0].x_voidp = (void*)xret;
    }
    x_QUrlInfo() : QUrlInfo() {
    }
    static void x_1(xargs *x) {
	// QUrlInfo(const QUrlOperator&, const QString&)
	x_QUrlInfo* xret = new x_QUrlInfo(*(const QUrlOperator *)x[1].x_voidp,*(const QString *)x[2].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QUrlInfo(const QUrlOperator& x1, const QString& x2) : QUrlInfo(x1, x2) {
    }
    static void x_2(xargs *x) {
	// QUrlInfo(const QUrlInfo&)
	x_QUrlInfo* xret = new x_QUrlInfo(*(const QUrlInfo *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QUrlInfo(const QUrlInfo& x1) : QUrlInfo(x1) {
    }
    static void x_3(xargs *x) {
	// QUrlInfo(const QString&, int, const QString&, const QString&, uint, const QDateTime&, const QDateTime&, bool, bool, bool, bool, bool, bool)
	x_QUrlInfo* xret = new x_QUrlInfo(*(const QString *)x[1].x_voidp,(int)x[2].x_int,*(const QString *)x[3].x_voidp,*(const QString *)x[4].x_voidp,(uint)x[5].x_uint,*(const QDateTime *)x[6].x_voidp,*(const QDateTime *)x[7].x_voidp,(bool)x[8].x_bool,(bool)x[9].x_bool,(bool)x[10].x_bool,(bool)x[11].x_bool,(bool)x[12].x_bool,(bool)x[13].x_bool);
	x[0].x_voidp = (void*)xret;
    }
    x_QUrlInfo(const QString& x1, int x2, const QString& x3, const QString& x4, uint x5, const QDateTime& x6, const QDateTime& x7, bool x8, bool x9, bool x10, bool x11, bool x12, bool x13) : QUrlInfo(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13) {
    }
    static void x_4(xargs *x) {
	// QUrlInfo(const QUrl&, int, const QString&, const QString&, uint, const QDateTime&, const QDateTime&, bool, bool, bool, bool, bool, bool)
	x_QUrlInfo* xret = new x_QUrlInfo(*(const QUrl *)x[1].x_voidp,(int)x[2].x_int,*(const QString *)x[3].x_voidp,*(const QString *)x[4].x_voidp,(uint)x[5].x_uint,*(const QDateTime *)x[6].x_voidp,*(const QDateTime *)x[7].x_voidp,(bool)x[8].x_bool,(bool)x[9].x_bool,(bool)x[10].x_bool,(bool)x[11].x_bool,(bool)x[12].x_bool,(bool)x[13].x_bool);
	x[0].x_voidp = (void*)xret;
    }
    x_QUrlInfo(const QUrl& x1, int x2, const QString& x3, const QString& x4, uint x5, const QDateTime& x6, const QDateTime& x7, bool x8, bool x9, bool x10, bool x11, bool x12, bool x13) : QUrlInfo(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13) {
    }
    void x_5(xargs *x) {
	// operator=(const QUrlInfo&)
	QUrlInfo& xret = this->QUrlInfo::operator=(*(const QUrlInfo *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_6(xargs *x) {
	// setName(const QString&)
	this->QUrlInfo::setName(*(const QString *)x[1].x_voidp);
    }
    void x_7(xargs *x) {
	// setDir(bool)
	this->QUrlInfo::setDir((bool)x[1].x_bool);
    }
    void x_8(xargs *x) {
	// setFile(bool)
	this->QUrlInfo::setFile((bool)x[1].x_bool);
    }
    void x_9(xargs *x) {
	// setSymLink(bool)
	this->QUrlInfo::setSymLink((bool)x[1].x_bool);
    }
    void x_10(xargs *x) {
	// setOwner(const QString&)
	this->QUrlInfo::setOwner(*(const QString *)x[1].x_voidp);
    }
    void x_11(xargs *x) {
	// setGroup(const QString&)
	this->QUrlInfo::setGroup(*(const QString *)x[1].x_voidp);
    }
    void x_12(xargs *x) {
	// setSize(uint)
	this->QUrlInfo::setSize((uint)x[1].x_uint);
    }
    void x_13(xargs *x) {
	// setWritable(bool)
	this->QUrlInfo::setWritable((bool)x[1].x_bool);
    }
    void x_14(xargs *x) {
	// setReadable(bool)
	this->QUrlInfo::setReadable((bool)x[1].x_bool);
    }
    void x_15(xargs *x) {
	// setPermissions(int)
	this->QUrlInfo::setPermissions((int)x[1].x_int);
    }
    void x_16(xargs *x) {
	// setLastModified(const QDateTime&)
	this->QUrlInfo::setLastModified(*(const QDateTime *)x[1].x_voidp);
    }
    void x_17(xargs *x) const {
	// isValid()
	bool xret = this->QUrlInfo::isValid();
	x[0].x_bool = (bool)xret;
    }
    void x_18(xargs *x) const {
	// name()
	QString xret = this->QUrlInfo::name();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_19(xargs *x) const {
	// permissions()
	int xret = this->QUrlInfo::permissions();
	x[0].x_int = (int)xret;
    }
    void x_20(xargs *x) const {
	// owner()
	QString xret = this->QUrlInfo::owner();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_21(xargs *x) const {
	// group()
	QString xret = this->QUrlInfo::group();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_22(xargs *x) const {
	// size()
	uint xret = this->QUrlInfo::size();
	x[0].x_uint = (uint)xret;
    }
    void x_23(xargs *x) const {
	// lastModified()
	QDateTime xret = this->QUrlInfo::lastModified();
	x[0].x_voidp = (void*)new QDateTime(xret);
    }
    void x_24(xargs *x) const {
	// lastRead()
	QDateTime xret = this->QUrlInfo::lastRead();
	x[0].x_voidp = (void*)new QDateTime(xret);
    }
    void x_25(xargs *x) const {
	// isDir()
	bool xret = this->QUrlInfo::isDir();
	x[0].x_bool = (bool)xret;
    }
    void x_26(xargs *x) const {
	// isFile()
	bool xret = this->QUrlInfo::isFile();
	x[0].x_bool = (bool)xret;
    }
    void x_27(xargs *x) const {
	// isSymLink()
	bool xret = this->QUrlInfo::isSymLink();
	x[0].x_bool = (bool)xret;
    }
    void x_28(xargs *x) const {
	// isWritable()
	bool xret = this->QUrlInfo::isWritable();
	x[0].x_bool = (bool)xret;
    }
    void x_29(xargs *x) const {
	// isReadable()
	bool xret = this->QUrlInfo::isReadable();
	x[0].x_bool = (bool)xret;
    }
    void x_30(xargs *x) const {
	// isExecutable()
	bool xret = this->QUrlInfo::isExecutable();
	x[0].x_bool = (bool)xret;
    }
    void x_31(xargs *x) const {
	// operator==(const QUrlInfo&)
	bool xret = this->QUrlInfo::operator==(*(const QUrlInfo *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    static void x_32(xargs *x) {
	// greaterThan(const QUrlInfo&, const QUrlInfo&, int)
	bool xret = QUrlInfo::greaterThan(*(const QUrlInfo *)x[1].x_voidp,*(const QUrlInfo *)x[2].x_voidp,(int)x[3].x_int);
	x[0].x_bool = (bool)xret;
    }
    static void x_33(xargs *x) {
	// lessThan(const QUrlInfo&, const QUrlInfo&, int)
	bool xret = QUrlInfo::lessThan(*(const QUrlInfo *)x[1].x_voidp,*(const QUrlInfo *)x[2].x_voidp,(int)x[3].x_int);
	x[0].x_bool = (bool)xret;
    }
    static void x_34(xargs *x) {
	// equal(const QUrlInfo&, const QUrlInfo&, int)
	bool xret = QUrlInfo::equal(*(const QUrlInfo *)x[1].x_voidp,*(const QUrlInfo *)x[2].x_voidp,(int)x[3].x_int);
	x[0].x_bool = (bool)xret;
    }
    virtual void setDir(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 9130, x)) return;
	this->QUrlInfo::setDir(x1);
    }
    virtual void setFile(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 9131, x)) return;
	this->QUrlInfo::setFile(x1);
    }
    virtual void setGroup(const QString& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9134, x)) return;
	this->QUrlInfo::setGroup(x1);
    }
    virtual void setLastModified(const QDateTime& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9139, x)) return;
	this->QUrlInfo::setLastModified(x1);
    }
    virtual void setName(const QString& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9129, x)) return;
	this->QUrlInfo::setName(x1);
    }
    virtual void setOwner(const QString& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9133, x)) return;
	this->QUrlInfo::setOwner(x1);
    }
    virtual void setPermissions(int x1) {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 9138, x)) return;
	this->QUrlInfo::setPermissions(x1);
    }
    virtual void setReadable(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 9137, x)) return;
	this->QUrlInfo::setReadable(x1);
    }
    virtual void setSize(uint x1) {
	xargs x[2];
	x[1].x_uint = (uint)x1;
	if(call_method((void*)this, 9135, x)) return;
	this->QUrlInfo::setSize(x1);
    }
    virtual void setSymLink(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 9132, x)) return;
	this->QUrlInfo::setSymLink(x1);
    }
    virtual void setWritable(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 9136, x)) return;
	this->QUrlInfo::setWritable(x1);
    }
    ~x_QUrlInfo() {}
};
void xcall_QUrlInfo(xargs *x, void *s, int xi) {
    x_QUrlInfo *xself = (x_QUrlInfo*)s;
    switch(xi) {
	case 0: x_QUrlInfo::x_0(x);	break;
	case 1: x_QUrlInfo::x_1(x);	break;
	case 2: x_QUrlInfo::x_2(x);	break;
	case 3: x_QUrlInfo::x_3(x);	break;
	case 4: x_QUrlInfo::x_4(x);	break;
	case 5: xself->x_5(x);	break;
	case 6: xself->x_6(x);	break;
	case 7: xself->x_7(x);	break;
	case 8: xself->x_8(x);	break;
	case 9: xself->x_9(x);	break;
	case 10: xself->x_10(x);	break;
	case 11: xself->x_11(x);	break;
	case 12: xself->x_12(x);	break;
	case 13: xself->x_13(x);	break;
	case 14: xself->x_14(x);	break;
	case 15: xself->x_15(x);	break;
	case 16: xself->x_16(x);	break;
	case 17: xself->x_17(x);	break;
	case 18: xself->x_18(x);	break;
	case 19: xself->x_19(x);	break;
	case 20: xself->x_20(x);	break;
	case 21: xself->x_21(x);	break;
	case 22: xself->x_22(x);	break;
	case 23: xself->x_23(x);	break;
	case 24: xself->x_24(x);	break;
	case 25: xself->x_25(x);	break;
	case 26: xself->x_26(x);	break;
	case 27: xself->x_27(x);	break;
	case 28: xself->x_28(x);	break;
	case 29: xself->x_29(x);	break;
	case 30: xself->x_30(x);	break;
	case 31: xself->x_31(x);	break;
	case 32: x_QUrlInfo::x_32(x);	break;
	case 33: x_QUrlInfo::x_33(x);	break;
	case 34: x_QUrlInfo::x_34(x);	break;
	case 35: delete (QUrlInfo*)xself;	break;
    }
}
