//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qvariant.h>
#include <qdir.h>
#include <qcstring.h>
#include <qstring.h>
#include <qstringlist.h>
#include <qprocess.h>

class x_QProcess : public QProcess {
public:
    static void x_0(xargs *x) {
	x[0].x_long = (long)QProcess::Stdin;
    }
    static void x_1(xargs *x) {
	x[0].x_long = (long)QProcess::Stdout;
    }
    static void x_2(xargs *x) {
	x[0].x_long = (long)QProcess::Stderr;
    }
    static void x_3(xargs *x) {
	x[0].x_long = (long)QProcess::DupStderr;
    }
    static void x_4(xargs *x) {
	// QProcess(QObject*, const char*)
	x_QProcess* xret = new x_QProcess((QObject*)x[1].x_voidp,(const char*)x[2].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QProcess(QObject* x1, const char* x2) : QProcess(x1, x2) {
    }
    static void x_5(xargs *x) {
	// QProcess(QObject*)
	x_QProcess* xret = new x_QProcess((QObject*)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QProcess(QObject* x1) : QProcess(x1) {
    }
    static void x_6(xargs *x) {
	// QProcess()
	x_QProcess* xret = new x_QProcess();
	x[0].x_voidp = (void*)xret;
    }
    x_QProcess() : QProcess() {
    }
    static void x_7(xargs *x) {
	// QProcess(const QString&, QObject*, const char*)
	x_QProcess* xret = new x_QProcess(*(const QString *)x[1].x_voidp,(QObject*)x[2].x_voidp,(const char*)x[3].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QProcess(const QString& x1, QObject* x2, const char* x3) : QProcess(x1, x2, x3) {
    }
    static void x_8(xargs *x) {
	// QProcess(const QString&, QObject*)
	x_QProcess* xret = new x_QProcess(*(const QString *)x[1].x_voidp,(QObject*)x[2].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QProcess(const QString& x1, QObject* x2) : QProcess(x1, x2) {
    }
    static void x_9(xargs *x) {
	// QProcess(const QString&)
	x_QProcess* xret = new x_QProcess(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QProcess(const QString& x1) : QProcess(x1) {
    }
    static void x_10(xargs *x) {
	// QProcess(const QStringList&, QObject*, const char*)
	x_QProcess* xret = new x_QProcess(*(const QStringList *)x[1].x_voidp,(QObject*)x[2].x_voidp,(const char*)x[3].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QProcess(const QStringList& x1, QObject* x2, const char* x3) : QProcess(x1, x2, x3) {
    }
    static void x_11(xargs *x) {
	// QProcess(const QStringList&, QObject*)
	x_QProcess* xret = new x_QProcess(*(const QStringList *)x[1].x_voidp,(QObject*)x[2].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QProcess(const QStringList& x1, QObject* x2) : QProcess(x1, x2) {
    }
    static void x_12(xargs *x) {
	// QProcess(const QStringList&)
	x_QProcess* xret = new x_QProcess(*(const QStringList *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QProcess(const QStringList& x1) : QProcess(x1) {
    }
    void x_13(xargs *x) const {
	// arguments()
	QStringList xret = this->QProcess::arguments();
	x[0].x_voidp = (void*)new QStringList(xret);
    }
    void x_14(xargs *x) {
	// clearArguments()
	this->QProcess::clearArguments();
    }
    void x_15(xargs *x) {
	// setArguments(const QStringList&)
	this->QProcess::setArguments(*(const QStringList *)x[1].x_voidp);
    }
    void x_16(xargs *x) {
	// addArgument(const QString&)
	this->QProcess::addArgument(*(const QString *)x[1].x_voidp);
    }
    void x_17(xargs *x) const {
	// workingDirectory()
	QDir xret = this->QProcess::workingDirectory();
	x[0].x_voidp = (void*)new QDir(xret);
    }
    void x_18(xargs *x) {
	// setWorkingDirectory(const QDir&)
	this->QProcess::setWorkingDirectory(*(const QDir *)x[1].x_voidp);
    }
    void x_19(xargs *x) {
	// setCommunication(int)
	this->QProcess::setCommunication((int)x[1].x_int);
    }
    void x_20(xargs *x) const {
	// communication()
	int xret = this->QProcess::communication();
	x[0].x_int = (int)xret;
    }
    void x_21(xargs *x) {
	// start(QStringList*)
	bool xret = this->QProcess::start((QStringList*)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_22(xargs *x) {
	// start()
	bool xret = this->QProcess::start();
	x[0].x_bool = (bool)xret;
    }
    void x_23(xargs *x) {
	// launch(const QString&, QStringList*)
	bool xret = this->QProcess::launch(*(const QString *)x[1].x_voidp,(QStringList*)x[2].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_24(xargs *x) {
	// launch(const QString&)
	bool xret = this->QProcess::launch(*(const QString *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_25(xargs *x) {
	// launch(const QByteArray&, QStringList*)
	bool xret = this->QProcess::launch(*(const QByteArray *)x[1].x_voidp,(QStringList*)x[2].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_26(xargs *x) {
	// launch(const QByteArray&)
	bool xret = this->QProcess::launch(*(const QByteArray *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_27(xargs *x) const {
	// isRunning()
	bool xret = this->QProcess::isRunning();
	x[0].x_bool = (bool)xret;
    }
    void x_28(xargs *x) const {
	// normalExit()
	bool xret = this->QProcess::normalExit();
	x[0].x_bool = (bool)xret;
    }
    void x_29(xargs *x) const {
	// exitStatus()
	int xret = this->QProcess::exitStatus();
	x[0].x_int = (int)xret;
    }
    void x_30(xargs *x) {
	// readStdout()
	QByteArray xret = this->QProcess::readStdout();
	x[0].x_voidp = (void*)new QByteArray(xret);
    }
    void x_31(xargs *x) {
	// readStderr()
	QByteArray xret = this->QProcess::readStderr();
	x[0].x_voidp = (void*)new QByteArray(xret);
    }
    void x_32(xargs *x) const {
	// canReadLineStdout()
	bool xret = this->QProcess::canReadLineStdout();
	x[0].x_bool = (bool)xret;
    }
    void x_33(xargs *x) const {
	// canReadLineStderr()
	bool xret = this->QProcess::canReadLineStderr();
	x[0].x_bool = (bool)xret;
    }
    void x_34(xargs *x) {
	// readLineStdout()
	QString xret = this->QProcess::readLineStdout();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_35(xargs *x) {
	// readLineStderr()
	QString xret = this->QProcess::readLineStderr();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_36(xargs *x) {
	// processIdentifier()
	QProcess::PID xret = this->QProcess::processIdentifier();
	x[0].x_voidp = (void*)new QProcess::PID(xret);
    }
    void x_37(xargs *x) {
	// flushStdin()
	this->QProcess::flushStdin();
    }
    void x_38(xargs *x) const {
	// tryTerminate()
	this->QProcess::tryTerminate();
    }
    void x_39(xargs *x) const {
	// kill()
	this->QProcess::kill();
    }
    void x_40(xargs *x) {
	// writeToStdin(const QByteArray&)
	this->QProcess::writeToStdin(*(const QByteArray *)x[1].x_voidp);
    }
    void x_41(xargs *x) {
	// writeToStdin(const QString&)
	this->QProcess::writeToStdin(*(const QString *)x[1].x_voidp);
    }
    void x_42(xargs *x) {
	// closeStdin()
	this->QProcess::closeStdin();
    }
    void x_43(xargs *x) {
	// readyReadStdout()
	this->QProcess::readyReadStdout();
    }
    void x_44(xargs *x) {
	// readyReadStderr()
	this->QProcess::readyReadStderr();
    }
    void x_45(xargs *x) {
	// processExited()
	this->QProcess::processExited();
    }
    void x_46(xargs *x) {
	// wroteToStdin()
	this->QProcess::wroteToStdin();
    }
    void x_47(xargs *x) {
	// launchFinished()
	this->QProcess::launchFinished();
    }
    void x_48(xargs *x) {
	// connectNotify(const char*)
	this->QProcess::connectNotify((const char*)x[1].x_voidp);
    }
    void x_49(xargs *x) {
	// disconnectNotify(const char*)
	this->QProcess::disconnectNotify((const char*)x[1].x_voidp);
    }
    virtual void addArgument(const QString& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 6182, x)) return;
	this->QProcess::addArgument(x1);
    }
    virtual bool checkConnectArgs(const char* x1, const QObject* x2, const char* x3) {
	xargs x[4];
	x[1].x_voidp = (void*)x1;
	x[2].x_voidp = (void*)x2;
	x[3].x_voidp = (void*)x3;
	if(call_method((void*)this, 5475, x)) return (bool)x[0].x_bool;
	return this->QObject::checkConnectArgs(x1, x2, x3);
    }
    virtual void childEvent(QChildEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5471, x)) return;
	this->QObject::childEvent(x1);
    }
    virtual void closeStdin() {
	xargs x[1];
	if(call_method((void*)this, 6208, x)) return;
	this->QProcess::closeStdin();
    }
    virtual void connectNotify(const char* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 6214, x)) return;
	this->QProcess::connectNotify(x1);
    }
    virtual void customEvent(QCustomEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5472, x)) return;
	this->QObject::customEvent(x1);
    }
    virtual void disconnectNotify(const char* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 6215, x)) return;
	this->QProcess::disconnectNotify(x1);
    }
    virtual bool event(QEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5410, x)) return (bool)x[0].x_bool;
	return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
	xargs x[3];
	x[1].x_voidp = (void*)x1;
	x[2].x_voidp = (void*)x2;
	if(call_method((void*)this, 5411, x)) return (bool)x[0].x_bool;
	return this->QObject::eventFilter(x1, x2);
    }
    virtual void insertChild(QObject* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5433, x)) return;
	this->QObject::insertChild(x1);
    }
    virtual bool launch(const QByteArray& x1, QStringList* x2) {
	xargs x[3];
	x[1].x_voidp = (void*)&x1;
	x[2].x_voidp = (void*)x2;
	if(call_method((void*)this, 6191, x)) return (bool)x[0].x_bool;
	return this->QProcess::launch(x1, x2);
    }
    virtual bool launch(const QString& x1, QStringList* x2) {
	xargs x[3];
	x[1].x_voidp = (void*)&x1;
	x[2].x_voidp = (void*)x2;
	if(call_method((void*)this, 6189, x)) return (bool)x[0].x_bool;
	return this->QProcess::launch(x1, x2);
    }
    virtual QVariant property(const char* x1) const {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5447, x)) {
	    QVariant *xptr = (QVariant *)x[0].x_voidp;
	    QVariant xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QObject::property(x1);
    }
    virtual QString readLineStderr() {
	xargs x[1];
	if(call_method((void*)this, 6201, x)) {
	    QString *xptr = (QString *)x[0].x_voidp;
	    QString xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QProcess::readLineStderr();
    }
    virtual QString readLineStdout() {
	xargs x[1];
	if(call_method((void*)this, 6200, x)) {
	    QString *xptr = (QString *)x[0].x_voidp;
	    QString xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QProcess::readLineStdout();
    }
    virtual QByteArray readStderr() {
	xargs x[1];
	if(call_method((void*)this, 6197, x)) {
	    QByteArray *xptr = (QByteArray *)x[0].x_voidp;
	    QByteArray xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QProcess::readStderr();
    }
    virtual QByteArray readStdout() {
	xargs x[1];
	if(call_method((void*)this, 6196, x)) {
	    QByteArray *xptr = (QByteArray *)x[0].x_voidp;
	    QByteArray xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QProcess::readStdout();
    }
    virtual void removeChild(QObject* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5434, x)) return;
	this->QObject::removeChild(x1);
    }
    virtual void setArguments(const QStringList& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 6181, x)) return;
	this->QProcess::setArguments(x1);
    }
    virtual void setName(const char* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5416, x)) return;
	this->QObject::setName(x1);
    }
    virtual bool setProperty(const char* x1, const QVariant& x2) {
	xargs x[3];
	x[1].x_voidp = (void*)x1;
	x[2].x_voidp = (void*)&x2;
	if(call_method((void*)this, 5446, x)) return (bool)x[0].x_bool;
	return this->QObject::setProperty(x1, x2);
    }
    virtual void setWorkingDirectory(const QDir& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 6184, x)) return;
	this->QProcess::setWorkingDirectory(x1);
    }
    virtual bool start(QStringList* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 6187, x)) return (bool)x[0].x_bool;
	return this->QProcess::start(x1);
    }
    virtual void timerEvent(QTimerEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5470, x)) return;
	this->QObject::timerEvent(x1);
    }
    virtual void writeToStdin(const QByteArray& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 6206, x)) return;
	this->QProcess::writeToStdin(x1);
    }
    virtual void writeToStdin(const QString& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 6207, x)) return;
	this->QProcess::writeToStdin(x1);
    }
    ~x_QProcess() {}
};
void xcall_QProcess(xargs *x, void *s, int xi) {
    x_QProcess *xself = (x_QProcess*)s;
    switch(xi) {
	case 0: x_QProcess::x_0(x);	break;
	case 1: x_QProcess::x_1(x);	break;
	case 2: x_QProcess::x_2(x);	break;
	case 3: x_QProcess::x_3(x);	break;
	case 4: x_QProcess::x_4(x);	break;
	case 5: x_QProcess::x_5(x);	break;
	case 6: x_QProcess::x_6(x);	break;
	case 7: x_QProcess::x_7(x);	break;
	case 8: x_QProcess::x_8(x);	break;
	case 9: x_QProcess::x_9(x);	break;
	case 10: x_QProcess::x_10(x);	break;
	case 11: x_QProcess::x_11(x);	break;
	case 12: x_QProcess::x_12(x);	break;
	case 13: xself->x_13(x);	break;
	case 14: xself->x_14(x);	break;
	case 15: xself->x_15(x);	break;
	case 16: xself->x_16(x);	break;
	case 17: xself->x_17(x);	break;
	case 18: xself->x_18(x);	break;
	case 19: xself->x_19(x);	break;
	case 20: xself->x_20(x);	break;
	case 21: xself->x_21(x);	break;
	case 22: xself->x_22(x);	break;
	case 23: xself->x_23(x);	break;
	case 24: xself->x_24(x);	break;
	case 25: xself->x_25(x);	break;
	case 26: xself->x_26(x);	break;
	case 27: xself->x_27(x);	break;
	case 28: xself->x_28(x);	break;
	case 29: xself->x_29(x);	break;
	case 30: xself->x_30(x);	break;
	case 31: xself->x_31(x);	break;
	case 32: xself->x_32(x);	break;
	case 33: xself->x_33(x);	break;
	case 34: xself->x_34(x);	break;
	case 35: xself->x_35(x);	break;
	case 36: xself->x_36(x);	break;
	case 37: xself->x_37(x);	break;
	case 38: xself->x_38(x);	break;
	case 39: xself->x_39(x);	break;
	case 40: xself->x_40(x);	break;
	case 41: xself->x_41(x);	break;
	case 42: xself->x_42(x);	break;
	case 43: xself->x_43(x);	break;
	case 44: xself->x_44(x);	break;
	case 45: xself->x_45(x);	break;
	case 46: xself->x_46(x);	break;
	case 47: xself->x_47(x);	break;
	case 48: xself->x_48(x);	break;
	case 49: xself->x_49(x);	break;
	case 50: delete (QProcess*)xself;	break;
    }
}
