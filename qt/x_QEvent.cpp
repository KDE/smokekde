//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke.h>
#include <qevent.h>

class x_QEvent : public QEvent {
public:
    static void x_0(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::None;
    }
    static void x_1(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::Timer;
    }
    static void x_2(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::MouseButtonPress;
    }
    static void x_3(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::MouseButtonRelease;
    }
    static void x_4(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::MouseButtonDblClick;
    }
    static void x_5(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::MouseMove;
    }
    static void x_6(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::KeyPress;
    }
    static void x_7(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::KeyRelease;
    }
    static void x_8(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::FocusIn;
    }
    static void x_9(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::FocusOut;
    }
    static void x_10(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::Enter;
    }
    static void x_11(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::Leave;
    }
    static void x_12(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::Paint;
    }
    static void x_13(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::Move;
    }
    static void x_14(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::Resize;
    }
    static void x_15(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::Create;
    }
    static void x_16(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::Destroy;
    }
    static void x_17(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::Show;
    }
    static void x_18(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::Hide;
    }
    static void x_19(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::Close;
    }
    static void x_20(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::Quit;
    }
    static void x_21(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::Reparent;
    }
    static void x_22(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::ShowMinimized;
    }
    static void x_23(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::ShowNormal;
    }
    static void x_24(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::WindowActivate;
    }
    static void x_25(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::WindowDeactivate;
    }
    static void x_26(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::ShowToParent;
    }
    static void x_27(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::HideToParent;
    }
    static void x_28(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::ShowMaximized;
    }
    static void x_29(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::ShowFullScreen;
    }
    static void x_30(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::Accel;
    }
    static void x_31(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::Wheel;
    }
    static void x_32(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::AccelAvailable;
    }
    static void x_33(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::CaptionChange;
    }
    static void x_34(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::IconChange;
    }
    static void x_35(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::ParentFontChange;
    }
    static void x_36(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::ApplicationFontChange;
    }
    static void x_37(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::ParentPaletteChange;
    }
    static void x_38(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::ApplicationPaletteChange;
    }
    static void x_39(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::PaletteChange;
    }
    static void x_40(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::Clipboard;
    }
    static void x_41(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::Speech;
    }
    static void x_42(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::SockAct;
    }
    static void x_43(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::AccelOverride;
    }
    static void x_44(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::DeferredDelete;
    }
    static void x_45(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::DragEnter;
    }
    static void x_46(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::DragMove;
    }
    static void x_47(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::DragLeave;
    }
    static void x_48(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::Drop;
    }
    static void x_49(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::DragResponse;
    }
    static void x_50(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::ChildInserted;
    }
    static void x_51(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::ChildRemoved;
    }
    static void x_52(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::LayoutHint;
    }
    static void x_53(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::ShowWindowRequest;
    }
    static void x_54(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::ActivateControl;
    }
    static void x_55(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::DeactivateControl;
    }
    static void x_56(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::ContextMenu;
    }
    static void x_57(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::IMStart;
    }
    static void x_58(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::IMCompose;
    }
    static void x_59(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::IMEnd;
    }
    static void x_60(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::Accessibility;
    }
    static void x_61(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::Tablet;
    }
    static void x_62(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::User;
    }
    static void x_63(Smoke::Stack x) {
	x[0].s_enum = (long)QEvent::MaxUser;
    }
    static void x_64(Smoke::Stack x) {
	// QEvent(QEvent::Type)
	x_QEvent* xret = new x_QEvent(*(QEvent::Type *)x[1].s_class);
	x[0].s_class = (void*)xret;
    }
    x_QEvent(QEvent::Type x1) : QEvent(x1) {
    }
    void x_65(Smoke::Stack x) const {
	// type()
	QEvent::Type xret = this->QEvent::type();
	x[0].s_class = (void*)new QEvent::Type(xret);
    }
    void x_66(Smoke::Stack x) const {
	// spontaneous()
	bool xret = this->QEvent::spontaneous();
	x[0].s_bool = (bool)xret;
    }
    ~x_QEvent() {}
};
void xcall_QEvent(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QEvent *xself = (x_QEvent*)obj;
    switch(xi) {
	case 0: x_QEvent::x_0(args);	break;
	case 1: x_QEvent::x_1(args);	break;
	case 2: x_QEvent::x_2(args);	break;
	case 3: x_QEvent::x_3(args);	break;
	case 4: x_QEvent::x_4(args);	break;
	case 5: x_QEvent::x_5(args);	break;
	case 6: x_QEvent::x_6(args);	break;
	case 7: x_QEvent::x_7(args);	break;
	case 8: x_QEvent::x_8(args);	break;
	case 9: x_QEvent::x_9(args);	break;
	case 10: x_QEvent::x_10(args);	break;
	case 11: x_QEvent::x_11(args);	break;
	case 12: x_QEvent::x_12(args);	break;
	case 13: x_QEvent::x_13(args);	break;
	case 14: x_QEvent::x_14(args);	break;
	case 15: x_QEvent::x_15(args);	break;
	case 16: x_QEvent::x_16(args);	break;
	case 17: x_QEvent::x_17(args);	break;
	case 18: x_QEvent::x_18(args);	break;
	case 19: x_QEvent::x_19(args);	break;
	case 20: x_QEvent::x_20(args);	break;
	case 21: x_QEvent::x_21(args);	break;
	case 22: x_QEvent::x_22(args);	break;
	case 23: x_QEvent::x_23(args);	break;
	case 24: x_QEvent::x_24(args);	break;
	case 25: x_QEvent::x_25(args);	break;
	case 26: x_QEvent::x_26(args);	break;
	case 27: x_QEvent::x_27(args);	break;
	case 28: x_QEvent::x_28(args);	break;
	case 29: x_QEvent::x_29(args);	break;
	case 30: x_QEvent::x_30(args);	break;
	case 31: x_QEvent::x_31(args);	break;
	case 32: x_QEvent::x_32(args);	break;
	case 33: x_QEvent::x_33(args);	break;
	case 34: x_QEvent::x_34(args);	break;
	case 35: x_QEvent::x_35(args);	break;
	case 36: x_QEvent::x_36(args);	break;
	case 37: x_QEvent::x_37(args);	break;
	case 38: x_QEvent::x_38(args);	break;
	case 39: x_QEvent::x_39(args);	break;
	case 40: x_QEvent::x_40(args);	break;
	case 41: x_QEvent::x_41(args);	break;
	case 42: x_QEvent::x_42(args);	break;
	case 43: x_QEvent::x_43(args);	break;
	case 44: x_QEvent::x_44(args);	break;
	case 45: x_QEvent::x_45(args);	break;
	case 46: x_QEvent::x_46(args);	break;
	case 47: x_QEvent::x_47(args);	break;
	case 48: x_QEvent::x_48(args);	break;
	case 49: x_QEvent::x_49(args);	break;
	case 50: x_QEvent::x_50(args);	break;
	case 51: x_QEvent::x_51(args);	break;
	case 52: x_QEvent::x_52(args);	break;
	case 53: x_QEvent::x_53(args);	break;
	case 54: x_QEvent::x_54(args);	break;
	case 55: x_QEvent::x_55(args);	break;
	case 56: x_QEvent::x_56(args);	break;
	case 57: x_QEvent::x_57(args);	break;
	case 58: x_QEvent::x_58(args);	break;
	case 59: x_QEvent::x_59(args);	break;
	case 60: x_QEvent::x_60(args);	break;
	case 61: x_QEvent::x_61(args);	break;
	case 62: x_QEvent::x_62(args);	break;
	case 63: x_QEvent::x_63(args);	break;
	case 64: x_QEvent::x_64(args);	break;
	case 65: xself->x_65(args);	break;
	case 66: xself->x_66(args);	break;
	case 67: delete (QEvent*)xself;	break;
    }
}
