//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qvariant.h>
#include <qnetworkprotocol.h>
#include <qcstring.h>
#include <qstring.h>

class x_QNetworkOperation : public QNetworkOperation {
public:
    static void x_0(xargs *x) {
	// QNetworkOperation(QNetworkProtocol::Operation, const QString&, const QString&, const QString&)
	x_QNetworkOperation* xret = new x_QNetworkOperation((QNetworkProtocol::Operation)x[1].x_long,*(const QString *)x[2].x_voidp,*(const QString *)x[3].x_voidp,*(const QString *)x[4].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QNetworkOperation(QNetworkProtocol::Operation x1, const QString& x2, const QString& x3, const QString& x4) : QNetworkOperation(x1, x2, x3, x4) {
    }
    static void x_1(xargs *x) {
	// QNetworkOperation(QNetworkProtocol::Operation, const QByteArray&, const QByteArray&, const QByteArray&)
	x_QNetworkOperation* xret = new x_QNetworkOperation((QNetworkProtocol::Operation)x[1].x_long,*(const QByteArray *)x[2].x_voidp,*(const QByteArray *)x[3].x_voidp,*(const QByteArray *)x[4].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QNetworkOperation(QNetworkProtocol::Operation x1, const QByteArray& x2, const QByteArray& x3, const QByteArray& x4) : QNetworkOperation(x1, x2, x3, x4) {
    }
    void x_2(xargs *x) {
	// setState(QNetworkProtocol::State)
	this->QNetworkOperation::setState((QNetworkProtocol::State)x[1].x_long);
    }
    void x_3(xargs *x) {
	// setProtocolDetail(const QString&)
	this->QNetworkOperation::setProtocolDetail(*(const QString *)x[1].x_voidp);
    }
    void x_4(xargs *x) {
	// setErrorCode(int)
	this->QNetworkOperation::setErrorCode((int)x[1].x_int);
    }
    void x_5(xargs *x) {
	// setArg(int, const QString&)
	this->QNetworkOperation::setArg((int)x[1].x_int,*(const QString *)x[2].x_voidp);
    }
    void x_6(xargs *x) {
	// setRawArg(int, const QByteArray&)
	this->QNetworkOperation::setRawArg((int)x[1].x_int,*(const QByteArray *)x[2].x_voidp);
    }
    void x_7(xargs *x) const {
	// operation()
	QNetworkProtocol::Operation xret = this->QNetworkOperation::operation();
	x[0].x_long = (long)xret;
    }
    void x_8(xargs *x) const {
	// state()
	QNetworkProtocol::State xret = this->QNetworkOperation::state();
	x[0].x_long = (long)xret;
    }
    void x_9(xargs *x) const {
	// arg(int)
	QString xret = this->QNetworkOperation::arg((int)x[1].x_int);
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_10(xargs *x) const {
	// rawArg(int)
	QByteArray xret = this->QNetworkOperation::rawArg((int)x[1].x_int);
	x[0].x_voidp = (void*)new QByteArray(xret);
    }
    void x_11(xargs *x) const {
	// protocolDetail()
	QString xret = this->QNetworkOperation::protocolDetail();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_12(xargs *x) const {
	// errorCode()
	int xret = this->QNetworkOperation::errorCode();
	x[0].x_int = (int)xret;
    }
    void x_13(xargs *x) {
	// free()
	this->QNetworkOperation::free();
    }
    virtual bool checkConnectArgs(const char* x1, const QObject* x2, const char* x3) {
	xargs x[4];
	x[1].x_voidp = (void*)x1;
	x[2].x_voidp = (void*)x2;
	x[3].x_voidp = (void*)x3;
	if(call_method((void*)this, 5475, x)) return (bool)x[0].x_bool;
	return this->QObject::checkConnectArgs(x1, x2, x3);
    }
    virtual void childEvent(QChildEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5471, x)) return;
	this->QObject::childEvent(x1);
    }
    virtual void connectNotify(const char* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5473, x)) return;
	this->QObject::connectNotify(x1);
    }
    virtual void customEvent(QCustomEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5472, x)) return;
	this->QObject::customEvent(x1);
    }
    virtual void disconnectNotify(const char* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5474, x)) return;
	this->QObject::disconnectNotify(x1);
    }
    virtual bool event(QEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5410, x)) return (bool)x[0].x_bool;
	return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
	xargs x[3];
	x[1].x_voidp = (void*)x1;
	x[2].x_voidp = (void*)x2;
	if(call_method((void*)this, 5411, x)) return (bool)x[0].x_bool;
	return this->QObject::eventFilter(x1, x2);
    }
    virtual void insertChild(QObject* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5433, x)) return;
	this->QObject::insertChild(x1);
    }
    virtual QVariant property(const char* x1) const {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5447, x)) {
	    QVariant *xptr = (QVariant *)x[0].x_voidp;
	    QVariant xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QObject::property(x1);
    }
    virtual void removeChild(QObject* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5434, x)) return;
	this->QObject::removeChild(x1);
    }
    virtual void setName(const char* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5416, x)) return;
	this->QObject::setName(x1);
    }
    virtual bool setProperty(const char* x1, const QVariant& x2) {
	xargs x[3];
	x[1].x_voidp = (void*)x1;
	x[2].x_voidp = (void*)&x2;
	if(call_method((void*)this, 5446, x)) return (bool)x[0].x_bool;
	return this->QObject::setProperty(x1, x2);
    }
    virtual void timerEvent(QTimerEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5470, x)) return;
	this->QObject::timerEvent(x1);
    }
    ~x_QNetworkOperation() {}
};
void xcall_QNetworkOperation(xargs *x, void *s, int xi) {
    x_QNetworkOperation *xself = (x_QNetworkOperation*)s;
    switch(xi) {
	case 0: x_QNetworkOperation::x_0(x);	break;
	case 1: x_QNetworkOperation::x_1(x);	break;
	case 2: xself->x_2(x);	break;
	case 3: xself->x_3(x);	break;
	case 4: xself->x_4(x);	break;
	case 5: xself->x_5(x);	break;
	case 6: xself->x_6(x);	break;
	case 7: xself->x_7(x);	break;
	case 8: xself->x_8(x);	break;
	case 9: xself->x_9(x);	break;
	case 10: xself->x_10(x);	break;
	case 11: xself->x_11(x);	break;
	case 12: xself->x_12(x);	break;
	case 13: xself->x_13(x);	break;
	case 14: delete (QNetworkOperation*)xself;	break;
    }
}
