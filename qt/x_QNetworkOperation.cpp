//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke.h>
#include <qt_smoke.h>
#include <qvariant.h>
#include <qnetworkprotocol.h>
#include <qcstring.h>
#include <qstring.h>

class x_QNetworkOperation : public QNetworkOperation {
public:
    void x_0(Smoke::Stack x) const {
	// metaObject()
	QMetaObject* xret = this->QNetworkOperation::metaObject();
	x[0].s_class = (void*)xret;
    }
    void x_1(Smoke::Stack x) const {
	// className()
	const char* xret = this->QNetworkOperation::className();
	x[0].s_voidp = (void*)xret;
    }
    void x_2(Smoke::Stack x) {
	// qt_cast(const char*)
	void* xret = this->QNetworkOperation::qt_cast((const char*)x[1].s_voidp);
	x[0].s_voidp = (void*)xret;
    }
    void x_3(Smoke::Stack x) {
	// qt_invoke(int, QUObject*)
	bool xret = this->QNetworkOperation::qt_invoke((int)x[1].s_int,(QUObject*)x[2].s_voidp);
	x[0].s_bool = xret;
    }
    void x_4(Smoke::Stack x) {
	// qt_emit(int, QUObject*)
	bool xret = this->QNetworkOperation::qt_emit((int)x[1].s_int,(QUObject*)x[2].s_voidp);
	x[0].s_bool = xret;
    }
    void x_5(Smoke::Stack x) {
	// qt_property(int, int, QVariant*)
	bool xret = this->QNetworkOperation::qt_property((int)x[1].s_int,(int)x[2].s_int,(QVariant*)x[3].s_class);
	x[0].s_bool = xret;
    }
    void x_6(Smoke::Stack x) {
	// qObject()
	QObject* xret = this->QNetworkOperation::qObject();
	x[0].s_class = (void*)xret;
    }
    static void x_7(Smoke::Stack x) {
	// QNetworkOperation(QNetworkProtocol::Operation, const QString&, const QString&, const QString&)
	x_QNetworkOperation* xret = new x_QNetworkOperation((QNetworkProtocol::Operation)x[1].s_enum,*(const QString *)x[2].s_voidp,*(const QString *)x[3].s_voidp,*(const QString *)x[4].s_voidp);
	x[0].s_class = (void*)xret;
    }
    x_QNetworkOperation(QNetworkProtocol::Operation x1, const QString& x2, const QString& x3, const QString& x4) : QNetworkOperation(x1, x2, x3, x4) {
    }
    static void x_8(Smoke::Stack x) {
	// QNetworkOperation(QNetworkProtocol::Operation, const QByteArray&, const QByteArray&, const QByteArray&)
	x_QNetworkOperation* xret = new x_QNetworkOperation((QNetworkProtocol::Operation)x[1].s_enum,*(const QByteArray *)x[2].s_voidp,*(const QByteArray *)x[3].s_voidp,*(const QByteArray *)x[4].s_voidp);
	x[0].s_class = (void*)xret;
    }
    x_QNetworkOperation(QNetworkProtocol::Operation x1, const QByteArray& x2, const QByteArray& x3, const QByteArray& x4) : QNetworkOperation(x1, x2, x3, x4) {
    }
    void x_9(Smoke::Stack x) {
	// setState(QNetworkProtocol::State)
	this->QNetworkOperation::setState((QNetworkProtocol::State)x[1].s_enum);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_10(Smoke::Stack x) {
	// setProtocolDetail(const QString&)
	this->QNetworkOperation::setProtocolDetail(*(const QString *)x[1].s_voidp);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_11(Smoke::Stack x) {
	// setErrorCode(int)
	this->QNetworkOperation::setErrorCode((int)x[1].s_int);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_12(Smoke::Stack x) {
	// setArg(int, const QString&)
	this->QNetworkOperation::setArg((int)x[1].s_int,*(const QString *)x[2].s_voidp);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_13(Smoke::Stack x) {
	// setRawArg(int, const QByteArray&)
	this->QNetworkOperation::setRawArg((int)x[1].s_int,*(const QByteArray *)x[2].s_voidp);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_14(Smoke::Stack x) const {
	// operation()
	QNetworkProtocol::Operation xret = this->QNetworkOperation::operation();
	x[0].s_enum = xret;
    }
    void x_15(Smoke::Stack x) const {
	// state()
	QNetworkProtocol::State xret = this->QNetworkOperation::state();
	x[0].s_enum = xret;
    }
    void x_16(Smoke::Stack x) const {
	// arg(int)
	QString xret = this->QNetworkOperation::arg((int)x[1].s_int);
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_17(Smoke::Stack x) const {
	// rawArg(int)
	QByteArray xret = this->QNetworkOperation::rawArg((int)x[1].s_int);
	x[0].s_voidp = (void*)new QByteArray(xret);
    }
    void x_18(Smoke::Stack x) const {
	// protocolDetail()
	QString xret = this->QNetworkOperation::protocolDetail();
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_19(Smoke::Stack x) const {
	// errorCode()
	int xret = this->QNetworkOperation::errorCode();
	x[0].s_int = xret;
    }
    void x_20(Smoke::Stack x) {
	// free()
	this->QNetworkOperation::free();
	(void)x[0].s_int; // noop (for compiler warning)
    }
    static void x_21(Smoke::Stack x) {
	// staticMetaObject()
	QMetaObject* xret = QNetworkOperation::staticMetaObject();
	x[0].s_class = (void*)xret;
    }
    static void x_22(Smoke::Stack x) {
	// tr(const char*, const char*)
	QString xret = QNetworkOperation::tr((const char*)x[1].s_voidp,(const char*)x[2].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    static void x_23(Smoke::Stack x) {
	// tr(const char*)
	QString xret = QNetworkOperation::tr((const char*)x[1].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    static void x_24(Smoke::Stack x) {
	// trUtf8(const char*, const char*)
	QString xret = QNetworkOperation::trUtf8((const char*)x[1].s_voidp,(const char*)x[2].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    static void x_25(Smoke::Stack x) {
	// trUtf8(const char*)
	QString xret = QNetworkOperation::trUtf8((const char*)x[1].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    virtual bool checkConnectArgs(const char* x1, const QObject* x2, const char* x3) {
	Smoke::StackItem x[4];
	x[1].s_voidp = (void*)x1;
	x[2].s_class = (void*)x2;
	x[3].s_voidp = (void*)x3;
	if(qt_Smoke->binding->callMethod(6496, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QObject::checkConnectArgs(x1, x2, x3);
    }
    virtual void childEvent(QChildEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(6492, (void*)this, x)) return;
	this->QObject::childEvent(x1);
    }
    virtual const char* className() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(6303, (void*)this, x)) return (const char*)x[0].s_class;
	return this->QNetworkOperation::className();
    }
    virtual void connectNotify(const char* x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(6494, (void*)this, x)) return;
	this->QObject::connectNotify(x1);
    }
    virtual void customEvent(QCustomEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(6493, (void*)this, x)) return;
	this->QObject::customEvent(x1);
    }
    virtual void disconnectNotify(const char* x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(6495, (void*)this, x)) return;
	this->QObject::disconnectNotify(x1);
    }
    virtual bool event(QEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(6426, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
	Smoke::StackItem x[3];
	x[1].s_class = (void*)x1;
	x[2].s_class = (void*)x2;
	if(qt_Smoke->binding->callMethod(6427, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QObject::eventFilter(x1, x2);
    }
    virtual void insertChild(QObject* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(6449, (void*)this, x)) return;
	this->QObject::insertChild(x1);
    }
    virtual QMetaObject* metaObject() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(6302, (void*)this, x)) return (QMetaObject*)x[0].s_class;
	return this->QNetworkOperation::metaObject();
    }
    virtual QVariant property(const char* x1) const {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(6463, (void*)this, x)) {
	    QVariant *xptr = (QVariant *)x[0].s_class;
	    QVariant xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QObject::property(x1);
    }
    virtual void* qt_cast(const char* x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(6304, (void*)this, x)) return (void*)x[0].s_voidp;
	return this->QNetworkOperation::qt_cast(x1);
    }
    virtual bool qt_emit(int x1, QUObject* x2) {
	Smoke::StackItem x[3];
	x[1].s_int = x1;
	x[2].s_voidp = (void*)x2;
	if(qt_Smoke->binding->callMethod(6306, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QNetworkOperation::qt_emit(x1, x2);
    }
    virtual bool qt_invoke(int x1, QUObject* x2) {
	Smoke::StackItem x[3];
	x[1].s_int = x1;
	x[2].s_voidp = (void*)x2;
	if(qt_Smoke->binding->callMethod(6305, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QNetworkOperation::qt_invoke(x1, x2);
    }
    virtual bool qt_property(int x1, int x2, QVariant* x3) {
	Smoke::StackItem x[4];
	x[1].s_int = x1;
	x[2].s_int = x2;
	x[3].s_class = (void*)x3;
	if(qt_Smoke->binding->callMethod(6307, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QNetworkOperation::qt_property(x1, x2, x3);
    }
    virtual void removeChild(QObject* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(6450, (void*)this, x)) return;
	this->QObject::removeChild(x1);
    }
    virtual void setName(const char* x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(6432, (void*)this, x)) return;
	this->QObject::setName(x1);
    }
    virtual bool setProperty(const char* x1, const QVariant& x2) {
	Smoke::StackItem x[3];
	x[1].s_voidp = (void*)x1;
	x[2].s_class = (void*)&x2;
	if(qt_Smoke->binding->callMethod(6462, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QObject::setProperty(x1, x2);
    }
    virtual void timerEvent(QTimerEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(6491, (void*)this, x)) return;
	this->QObject::timerEvent(x1);
    }
    ~x_QNetworkOperation() { qt_Smoke->binding->deleted(207, (void*)this); }
};
void xcall_QNetworkOperation(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QNetworkOperation *xself = (x_QNetworkOperation*)obj;
    switch(xi) {
	case 0: xself->x_0(args);	break;
	case 1: xself->x_1(args);	break;
	case 2: xself->x_2(args);	break;
	case 3: xself->x_3(args);	break;
	case 4: xself->x_4(args);	break;
	case 5: xself->x_5(args);	break;
	case 6: xself->x_6(args);	break;
	case 7: x_QNetworkOperation::x_7(args);	break;
	case 8: x_QNetworkOperation::x_8(args);	break;
	case 9: xself->x_9(args);	break;
	case 10: xself->x_10(args);	break;
	case 11: xself->x_11(args);	break;
	case 12: xself->x_12(args);	break;
	case 13: xself->x_13(args);	break;
	case 14: xself->x_14(args);	break;
	case 15: xself->x_15(args);	break;
	case 16: xself->x_16(args);	break;
	case 17: xself->x_17(args);	break;
	case 18: xself->x_18(args);	break;
	case 19: xself->x_19(args);	break;
	case 20: xself->x_20(args);	break;
	case 21: x_QNetworkOperation::x_21(args);	break;
	case 22: x_QNetworkOperation::x_22(args);	break;
	case 23: x_QNetworkOperation::x_23(args);	break;
	case 24: x_QNetworkOperation::x_24(args);	break;
	case 25: x_QNetworkOperation::x_25(args);	break;
	case 26: delete (QNetworkOperation*)xself;	break;
    }
}
