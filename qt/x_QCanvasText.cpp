//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qcolor.h>
#include <qfont.h>
#include <qstring.h>
#include <qrect.h>
#include <qpainter.h>
#include <qcanvas.h>

class x_QCanvasText : public QCanvasText {
public:
    static void x_0(xargs *x) {
	// QCanvasText(QCanvas*)
	x_QCanvasText* xret = new x_QCanvasText((QCanvas*)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QCanvasText(QCanvas* x1) : QCanvasText(x1) {
    }
    static void x_1(xargs *x) {
	// QCanvasText(const QString&, QCanvas*)
	x_QCanvasText* xret = new x_QCanvasText(*(const QString *)x[1].x_voidp,(QCanvas*)x[2].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QCanvasText(const QString& x1, QCanvas* x2) : QCanvasText(x1, x2) {
    }
    static void x_2(xargs *x) {
	// QCanvasText(const QString&, QFont, QCanvas*)
	x_QCanvasText* xret = new x_QCanvasText(*(const QString *)x[1].x_voidp,*(QFont *)x[2].x_voidp,(QCanvas*)x[3].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QCanvasText(const QString& x1, QFont x2, QCanvas* x3) : QCanvasText(x1, x2, x3) {
    }
    void x_3(xargs *x) {
	// setText(const QString&)
	this->QCanvasText::setText(*(const QString *)x[1].x_voidp);
    }
    void x_4(xargs *x) {
	// setFont(const QFont&)
	this->QCanvasText::setFont(*(const QFont *)x[1].x_voidp);
    }
    void x_5(xargs *x) {
	// setColor(const QColor&)
	this->QCanvasText::setColor(*(const QColor *)x[1].x_voidp);
    }
    void x_6(xargs *x) const {
	// text()
	QString xret = this->QCanvasText::text();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_7(xargs *x) const {
	// font()
	QFont xret = this->QCanvasText::font();
	x[0].x_voidp = (void*)new QFont(xret);
    }
    void x_8(xargs *x) const {
	// color()
	QColor xret = this->QCanvasText::color();
	x[0].x_voidp = (void*)new QColor(xret);
    }
    void x_9(xargs *x) {
	// moveBy(double, double)
	this->QCanvasText::moveBy((double)x[1].x_double,(double)x[2].x_double);
    }
    void x_10(xargs *x) const {
	// textFlags()
	int xret = this->QCanvasText::textFlags();
	x[0].x_int = (int)xret;
    }
    void x_11(xargs *x) {
	// setTextFlags(int)
	this->QCanvasText::setTextFlags((int)x[1].x_int);
    }
    void x_12(xargs *x) const {
	// boundingRect()
	QRect xret = this->QCanvasText::boundingRect();
	x[0].x_voidp = (void*)new QRect(xret);
    }
    void x_13(xargs *x) const {
	// collidesWith(const QCanvasItem*)
	bool xret = this->QCanvasText::collidesWith((const QCanvasItem*)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_14(xargs *x) const {
	// rtti()
	int xret = this->QCanvasText::rtti();
	x[0].x_int = (int)xret;
    }
    void x_15(xargs *x) {
	// draw(QPainter&)
	this->QCanvasText::draw(*(QPainter *)x[1].x_voidp);
    }
    virtual void advance(int x1) {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 544, x)) return;
	this->QCanvasItem::advance(x1);
    }
    virtual QRect boundingRect() const {
	xargs x[1];
	if(call_method((void*)this, 688, x)) {
	    QRect *xptr = (QRect *)x[0].x_voidp;
	    QRect xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QCanvasText::boundingRect();
    }
    virtual QRect boundingRectAdvanced() const {
	xargs x[1];
	if(call_method((void*)this, 565, x)) {
	    QRect *xptr = (QRect *)x[0].x_voidp;
	    QRect xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QCanvasItem::boundingRectAdvanced();
    }
    virtual bool collidesWith(const QCanvasItem* x1) const {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 689, x)) return (bool)x[0].x_bool;
	return this->QCanvasText::collidesWith(x1);
    }
    virtual void draw(QPainter& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 691, x)) return;
	this->QCanvasText::draw(x1);
    }
    virtual void moveBy(double x1, double x2) {
	xargs x[3];
	x[1].x_double = (double)x1;
	x[2].x_double = (double)x2;
	if(call_method((void*)this, 685, x)) return;
	this->QCanvasText::moveBy(x1, x2);
    }
    virtual int rtti() const {
	xargs x[1];
	if(call_method((void*)this, 690, x)) return (int)x[0].x_int;
	return this->QCanvasText::rtti();
    }
    virtual void setActive(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 557, x)) return;
	this->QCanvasItem::setActive(x1);
    }
    virtual void setAnimated(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 538, x)) return;
	this->QCanvasItem::setAnimated(x1);
    }
    virtual void setCanvas(QCanvas* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 547, x)) return;
	this->QCanvasItem::setCanvas(x1);
    }
    virtual void setEnabled(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 555, x)) return;
	this->QCanvasItem::setEnabled(x1);
    }
    virtual void setSelected(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 553, x)) return;
	this->QCanvasItem::setSelected(x1);
    }
    virtual void setVelocity(double x1, double x2) {
	xargs x[3];
	x[1].x_double = (double)x1;
	x[2].x_double = (double)x2;
	if(call_method((void*)this, 539, x)) return;
	this->QCanvasItem::setVelocity(x1, x2);
    }
    virtual void setVisible(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 551, x)) return;
	this->QCanvasItem::setVisible(x1);
    }
    ~x_QCanvasText() {}
};
void xcall_QCanvasText(xargs *x, void *s, int xi) {
    x_QCanvasText *xself = (x_QCanvasText*)s;
    switch(xi) {
	case 0: x_QCanvasText::x_0(x);	break;
	case 1: x_QCanvasText::x_1(x);	break;
	case 2: x_QCanvasText::x_2(x);	break;
	case 3: xself->x_3(x);	break;
	case 4: xself->x_4(x);	break;
	case 5: xself->x_5(x);	break;
	case 6: xself->x_6(x);	break;
	case 7: xself->x_7(x);	break;
	case 8: xself->x_8(x);	break;
	case 9: xself->x_9(x);	break;
	case 10: xself->x_10(x);	break;
	case 11: xself->x_11(x);	break;
	case 12: xself->x_12(x);	break;
	case 13: xself->x_13(x);	break;
	case 14: xself->x_14(x);	break;
	case 15: xself->x_15(x);	break;
	case 16: delete (QCanvasText*)xself;	break;
    }
}
