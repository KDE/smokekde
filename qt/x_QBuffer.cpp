//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke.h>
#include <qt_smoke.h>
#include <qglobal.h>
#include <qbuffer.h>
#include <qiodevice.h>
#include <qcstring.h>

class x_QBuffer : public QBuffer {
public:
    static void x_0(Smoke::Stack x) {
	// QBuffer()
	x_QBuffer* xret = new x_QBuffer();
	x[0].s_class = (void*)xret;
    }
    x_QBuffer() : QBuffer() {
    }
    static void x_1(Smoke::Stack x) {
	// QBuffer(QByteArray)
	x_QBuffer* xret = new x_QBuffer(*(QByteArray *)x[1].s_class);
	x[0].s_class = (void*)xret;
    }
    x_QBuffer(QByteArray x1) : QBuffer(x1) {
    }
    void x_2(Smoke::Stack x) const {
	// buffer()
	QByteArray xret = this->QBuffer::buffer();
	x[0].s_class = (void*)new QByteArray(xret);
    }
    void x_3(Smoke::Stack x) {
	// setBuffer(QByteArray)
	bool xret = this->QBuffer::setBuffer(*(QByteArray *)x[1].s_class);
	x[0].s_bool = (bool)xret;
    }
    void x_4(Smoke::Stack x) {
	// open(int)
	bool xret = this->QBuffer::open((int)x[1].s_int);
	x[0].s_bool = (bool)xret;
    }
    void x_5(Smoke::Stack x) {
	// close()
	this->QBuffer::close();
    }
    void x_6(Smoke::Stack x) {
	// flush()
	this->QBuffer::flush();
    }
    void x_7(Smoke::Stack x) const {
	// size()
	QIODevice::Offset xret = this->QBuffer::size();
	x[0].s_class = (void*)new QIODevice::Offset(xret);
    }
    void x_8(Smoke::Stack x) const {
	// at()
	QIODevice::Offset xret = this->QBuffer::at();
	x[0].s_class = (void*)new QIODevice::Offset(xret);
    }
    void x_9(Smoke::Stack x) {
	// at(QIODevice::Offset)
	bool xret = this->QBuffer::at(*(QIODevice::Offset *)x[1].s_class);
	x[0].s_bool = (bool)xret;
    }
    void x_10(Smoke::Stack x) {
	// readBlock(char*, Q_ULONG)
	Q_LONG xret = this->QBuffer::readBlock((char*)x[1].s_class,*(Q_ULONG *)x[2].s_class);
	x[0].s_class = (void*)new Q_LONG(xret);
    }
    void x_11(Smoke::Stack x) {
	// writeBlock(const char*, Q_ULONG)
	Q_LONG xret = this->QBuffer::writeBlock((const char*)x[1].s_class,*(Q_ULONG *)x[2].s_class);
	x[0].s_class = (void*)new Q_LONG(xret);
    }
    void x_12(Smoke::Stack x) {
	// writeBlock(const QByteArray&)
	Q_LONG xret = this->QBuffer::writeBlock(*(const QByteArray *)x[1].s_class);
	x[0].s_class = (void*)new Q_LONG(xret);
    }
    void x_13(Smoke::Stack x) {
	// readLine(char*, Q_ULONG)
	Q_LONG xret = this->QBuffer::readLine((char*)x[1].s_class,*(Q_ULONG *)x[2].s_class);
	x[0].s_class = (void*)new Q_LONG(xret);
    }
    void x_14(Smoke::Stack x) {
	// getch()
	int xret = this->QBuffer::getch();
	x[0].s_int = (int)xret;
    }
    void x_15(Smoke::Stack x) {
	// putch(int)
	int xret = this->QBuffer::putch((int)x[1].s_int);
	x[0].s_int = (int)xret;
    }
    void x_16(Smoke::Stack x) {
	// ungetch(int)
	int xret = this->QBuffer::ungetch((int)x[1].s_int);
	x[0].s_int = (int)xret;
    }
    virtual QIODevice::Offset at() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(339, (void*)this, x)) {
	    QIODevice::Offset *xptr = (QIODevice::Offset *)x[0].s_class;
	    QIODevice::Offset xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QBuffer::at();
    }
    virtual bool at(QIODevice::Offset x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->callMethod(340, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QBuffer::at(x1);
    }
    virtual bool atEnd() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(3382, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QIODevice::atEnd();
    }
    virtual void close() {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(336, (void*)this, x)) return;
	this->QBuffer::close();
    }
    virtual void flush() {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(337, (void*)this, x)) return;
	this->QBuffer::flush();
    }
    virtual int getch() {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(345, (void*)this, x)) return (int)x[0].s_int;
	return this->QBuffer::getch();
    }
    virtual bool open(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(qt_Smoke->callMethod(335, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QBuffer::open(x1);
    }
    virtual int putch(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(qt_Smoke->callMethod(346, (void*)this, x)) return (int)x[0].s_int;
	return this->QBuffer::putch(x1);
    }
    virtual QByteArray readAll() {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(3388, (void*)this, x)) {
	    QByteArray *xptr = (QByteArray *)x[0].s_class;
	    QByteArray xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QIODevice::readAll();
    }
    virtual Q_LONG readBlock(char* x1, Q_ULONG x2) {
	Smoke::StackItem x[3];
	x[1].s_class = (void*)x1;
	x[2].s_class = (void*)&x2;
	if(qt_Smoke->callMethod(341, (void*)this, x)) {
	    Q_LONG *xptr = (Q_LONG *)x[0].s_class;
	    Q_LONG xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QBuffer::readBlock(x1, x2);
    }
    virtual Q_LONG readLine(char* x1, Q_ULONG x2) {
	Smoke::StackItem x[3];
	x[1].s_class = (void*)x1;
	x[2].s_class = (void*)&x2;
	if(qt_Smoke->callMethod(344, (void*)this, x)) {
	    Q_LONG *xptr = (Q_LONG *)x[0].s_class;
	    Q_LONG xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QBuffer::readLine(x1, x2);
    }
    virtual QIODevice::Offset size() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(338, (void*)this, x)) {
	    QIODevice::Offset *xptr = (QIODevice::Offset *)x[0].s_class;
	    QIODevice::Offset xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QBuffer::size();
    }
    virtual int ungetch(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(qt_Smoke->callMethod(347, (void*)this, x)) return (int)x[0].s_int;
	return this->QBuffer::ungetch(x1);
    }
    virtual Q_LONG writeBlock(const char* x1, Q_ULONG x2) {
	Smoke::StackItem x[3];
	x[1].s_class = (void*)x1;
	x[2].s_class = (void*)&x2;
	if(qt_Smoke->callMethod(342, (void*)this, x)) {
	    Q_LONG *xptr = (Q_LONG *)x[0].s_class;
	    Q_LONG xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QBuffer::writeBlock(x1, x2);
    }
    ~x_QBuffer() {}
};
void xcall_QBuffer(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QBuffer *xself = (x_QBuffer*)obj;
    switch(xi) {
	case 0: x_QBuffer::x_0(args);	break;
	case 1: x_QBuffer::x_1(args);	break;
	case 2: xself->x_2(args);	break;
	case 3: xself->x_3(args);	break;
	case 4: xself->x_4(args);	break;
	case 5: xself->x_5(args);	break;
	case 6: xself->x_6(args);	break;
	case 7: xself->x_7(args);	break;
	case 8: xself->x_8(args);	break;
	case 9: xself->x_9(args);	break;
	case 10: xself->x_10(args);	break;
	case 11: xself->x_11(args);	break;
	case 12: xself->x_12(args);	break;
	case 13: xself->x_13(args);	break;
	case 14: xself->x_14(args);	break;
	case 15: xself->x_15(args);	break;
	case 16: xself->x_16(args);	break;
	case 17: delete (QBuffer*)xself;	break;
    }
}
