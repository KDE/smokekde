//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke.h>
#include <qt_smoke.h>
#include <qstring.h>
#include <qsharedmemory.h>

class x_QSharedMemory : public QSharedMemory {
public:
    static void x_0(Smoke::Stack x) {
	// QSharedMemory()
	x_QSharedMemory* xret = new x_QSharedMemory();
	x[0].s_class = (void*)xret;
    }
    x_QSharedMemory() : QSharedMemory() {
    }
    static void x_1(Smoke::Stack x) {
	// QSharedMemory(int, QString)
	x_QSharedMemory* xret = new x_QSharedMemory((int)x[1].s_int,*(QString *)x[2].s_class);
	x[0].s_class = (void*)xret;
    }
    x_QSharedMemory(int x1, QString x2) : QSharedMemory(x1, x2) {
    }
    void x_2(Smoke::Stack x) {
	// create()
	bool xret = this->QSharedMemory::create();
	x[0].s_bool = (bool)xret;
    }
    void x_3(Smoke::Stack x) {
	// destroy()
	this->QSharedMemory::destroy();
    }
    void x_4(Smoke::Stack x) {
	// attach()
	bool xret = this->QSharedMemory::attach();
	x[0].s_bool = (bool)xret;
    }
    void x_5(Smoke::Stack x) {
	// detach()
	this->QSharedMemory::detach();
    }
    void x_6(Smoke::Stack x) {
	// setPermissions(mode_t)
	this->QSharedMemory::setPermissions(*(mode_t *)x[1].s_class);
    }
    void x_7(Smoke::Stack x) {
	// base()
	void* xret = this->QSharedMemory::base();
	x[0].s_voidp = (void*)xret;
    }
    ~x_QSharedMemory() {}
};
void xcall_QSharedMemory(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QSharedMemory *xself = (x_QSharedMemory*)obj;
    switch(xi) {
	case 0: x_QSharedMemory::x_0(args);	break;
	case 1: x_QSharedMemory::x_1(args);	break;
	case 2: xself->x_2(args);	break;
	case 3: xself->x_3(args);	break;
	case 4: xself->x_4(args);	break;
	case 5: xself->x_5(args);	break;
	case 6: xself->x_6(args);	break;
	case 7: xself->x_7(args);	break;
	case 8: delete (QSharedMemory*)xself;	break;
    }
}
