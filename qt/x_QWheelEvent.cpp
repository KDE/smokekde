//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qpoint.h>
#include <qevent.h>

class x_QWheelEvent : public QWheelEvent {
public:
    static void x_0(xargs *x) {
	// QWheelEvent(const QPoint&, int, int, Qt::Orientation)
	x_QWheelEvent* xret = new x_QWheelEvent(*(const QPoint *)x[1].x_voidp,(int)x[2].x_int,(int)x[3].x_int,(Qt::Orientation)x[4].x_long);
	x[0].x_voidp = (void*)xret;
    }
    x_QWheelEvent(const QPoint& x1, int x2, int x3, Qt::Orientation x4) : QWheelEvent(x1, x2, x3, x4) {
    }
    static void x_1(xargs *x) {
	// QWheelEvent(const QPoint&, int, int)
	x_QWheelEvent* xret = new x_QWheelEvent(*(const QPoint *)x[1].x_voidp,(int)x[2].x_int,(int)x[3].x_int);
	x[0].x_voidp = (void*)xret;
    }
    x_QWheelEvent(const QPoint& x1, int x2, int x3) : QWheelEvent(x1, x2, x3) {
    }
    static void x_2(xargs *x) {
	// QWheelEvent(const QPoint&, const QPoint&, int, int, Qt::Orientation)
	x_QWheelEvent* xret = new x_QWheelEvent(*(const QPoint *)x[1].x_voidp,*(const QPoint *)x[2].x_voidp,(int)x[3].x_int,(int)x[4].x_int,(Qt::Orientation)x[5].x_long);
	x[0].x_voidp = (void*)xret;
    }
    x_QWheelEvent(const QPoint& x1, const QPoint& x2, int x3, int x4, Qt::Orientation x5) : QWheelEvent(x1, x2, x3, x4, x5) {
    }
    static void x_3(xargs *x) {
	// QWheelEvent(const QPoint&, const QPoint&, int, int)
	x_QWheelEvent* xret = new x_QWheelEvent(*(const QPoint *)x[1].x_voidp,*(const QPoint *)x[2].x_voidp,(int)x[3].x_int,(int)x[4].x_int);
	x[0].x_voidp = (void*)xret;
    }
    x_QWheelEvent(const QPoint& x1, const QPoint& x2, int x3, int x4) : QWheelEvent(x1, x2, x3, x4) {
    }
    void x_4(xargs *x) const {
	// delta()
	int xret = this->QWheelEvent::delta();
	x[0].x_int = (int)xret;
    }
    void x_5(xargs *x) const {
	// pos()
	const QPoint& xret = this->QWheelEvent::pos();
	x[0].x_voidp = (void*)&xret;
    }
    void x_6(xargs *x) const {
	// globalPos()
	const QPoint& xret = this->QWheelEvent::globalPos();
	x[0].x_voidp = (void*)&xret;
    }
    void x_7(xargs *x) const {
	// x()
	int xret = this->QWheelEvent::x();
	x[0].x_int = (int)xret;
    }
    void x_8(xargs *x) const {
	// y()
	int xret = this->QWheelEvent::y();
	x[0].x_int = (int)xret;
    }
    void x_9(xargs *x) const {
	// globalX()
	int xret = this->QWheelEvent::globalX();
	x[0].x_int = (int)xret;
    }
    void x_10(xargs *x) const {
	// globalY()
	int xret = this->QWheelEvent::globalY();
	x[0].x_int = (int)xret;
    }
    void x_11(xargs *x) const {
	// state()
	Qt::ButtonState xret = this->QWheelEvent::state();
	x[0].x_long = (long)xret;
    }
    void x_12(xargs *x) const {
	// orientation()
	Qt::Orientation xret = this->QWheelEvent::orientation();
	x[0].x_long = (long)xret;
    }
    void x_13(xargs *x) const {
	// isAccepted()
	bool xret = this->QWheelEvent::isAccepted();
	x[0].x_bool = (bool)xret;
    }
    void x_14(xargs *x) {
	// accept()
	this->QWheelEvent::accept();
    }
    void x_15(xargs *x) {
	// ignore()
	this->QWheelEvent::ignore();
    }
    ~x_QWheelEvent() {}
};
void xcall_QWheelEvent(xargs *x, void *s, int xi) {
    x_QWheelEvent *xself = (x_QWheelEvent*)s;
    switch(xi) {
	case 0: x_QWheelEvent::x_0(x);	break;
	case 1: x_QWheelEvent::x_1(x);	break;
	case 2: x_QWheelEvent::x_2(x);	break;
	case 3: x_QWheelEvent::x_3(x);	break;
	case 4: xself->x_4(x);	break;
	case 5: xself->x_5(x);	break;
	case 6: xself->x_6(x);	break;
	case 7: xself->x_7(x);	break;
	case 8: xself->x_8(x);	break;
	case 9: xself->x_9(x);	break;
	case 10: xself->x_10(x);	break;
	case 11: xself->x_11(x);	break;
	case 12: xself->x_12(x);	break;
	case 13: xself->x_13(x);	break;
	case 14: xself->x_14(x);	break;
	case 15: xself->x_15(x);	break;
    }
}
