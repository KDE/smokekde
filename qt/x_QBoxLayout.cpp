//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke.h>
#include <qt_smoke.h>
#include <qvariant.h>
#include <qsizepolicy.h>
#include <qlayout.h>
#include <qrect.h>
#include <qsize.h>

class x_QBoxLayout : public QBoxLayout {
public:
    static void x_0(Smoke::Stack x) {
	x[0].s_enum = (long)QBoxLayout::LeftToRight;
    }
    static void x_1(Smoke::Stack x) {
	x[0].s_enum = (long)QBoxLayout::RightToLeft;
    }
    static void x_2(Smoke::Stack x) {
	x[0].s_enum = (long)QBoxLayout::TopToBottom;
    }
    static void x_3(Smoke::Stack x) {
	x[0].s_enum = (long)QBoxLayout::BottomToTop;
    }
    static void x_4(Smoke::Stack x) {
	x[0].s_enum = (long)QBoxLayout::Down;
    }
    static void x_5(Smoke::Stack x) {
	x[0].s_enum = (long)QBoxLayout::Up;
    }
    static void x_6(Smoke::Stack x) {
	// QBoxLayout(QWidget*, QBoxLayout::Direction, int, int, const char*)
	x_QBoxLayout* xret = new x_QBoxLayout((QWidget*)x[1].s_class,(QBoxLayout::Direction)x[2].s_enum,(int)x[3].s_int,(int)x[4].s_int,(const char*)x[5].s_voidp);
	x[0].s_class = (void*)xret;
    }
    x_QBoxLayout(QWidget* x1, QBoxLayout::Direction x2, int x3, int x4, const char* x5) : QBoxLayout(x1, x2, x3, x4, x5) {
    }
    static void x_7(Smoke::Stack x) {
	// QBoxLayout(QWidget*, QBoxLayout::Direction, int, int)
	x_QBoxLayout* xret = new x_QBoxLayout((QWidget*)x[1].s_class,(QBoxLayout::Direction)x[2].s_enum,(int)x[3].s_int,(int)x[4].s_int);
	x[0].s_class = (void*)xret;
    }
    x_QBoxLayout(QWidget* x1, QBoxLayout::Direction x2, int x3, int x4) : QBoxLayout(x1, x2, x3, x4) {
    }
    static void x_8(Smoke::Stack x) {
	// QBoxLayout(QWidget*, QBoxLayout::Direction, int)
	x_QBoxLayout* xret = new x_QBoxLayout((QWidget*)x[1].s_class,(QBoxLayout::Direction)x[2].s_enum,(int)x[3].s_int);
	x[0].s_class = (void*)xret;
    }
    x_QBoxLayout(QWidget* x1, QBoxLayout::Direction x2, int x3) : QBoxLayout(x1, x2, x3) {
    }
    static void x_9(Smoke::Stack x) {
	// QBoxLayout(QWidget*, QBoxLayout::Direction)
	x_QBoxLayout* xret = new x_QBoxLayout((QWidget*)x[1].s_class,(QBoxLayout::Direction)x[2].s_enum);
	x[0].s_class = (void*)xret;
    }
    x_QBoxLayout(QWidget* x1, QBoxLayout::Direction x2) : QBoxLayout(x1, x2) {
    }
    static void x_10(Smoke::Stack x) {
	// QBoxLayout(QLayout*, QBoxLayout::Direction, int, const char*)
	x_QBoxLayout* xret = new x_QBoxLayout((QLayout*)x[1].s_class,(QBoxLayout::Direction)x[2].s_enum,(int)x[3].s_int,(const char*)x[4].s_voidp);
	x[0].s_class = (void*)xret;
    }
    x_QBoxLayout(QLayout* x1, QBoxLayout::Direction x2, int x3, const char* x4) : QBoxLayout(x1, x2, x3, x4) {
    }
    static void x_11(Smoke::Stack x) {
	// QBoxLayout(QLayout*, QBoxLayout::Direction, int)
	x_QBoxLayout* xret = new x_QBoxLayout((QLayout*)x[1].s_class,(QBoxLayout::Direction)x[2].s_enum,(int)x[3].s_int);
	x[0].s_class = (void*)xret;
    }
    x_QBoxLayout(QLayout* x1, QBoxLayout::Direction x2, int x3) : QBoxLayout(x1, x2, x3) {
    }
    static void x_12(Smoke::Stack x) {
	// QBoxLayout(QLayout*, QBoxLayout::Direction)
	x_QBoxLayout* xret = new x_QBoxLayout((QLayout*)x[1].s_class,(QBoxLayout::Direction)x[2].s_enum);
	x[0].s_class = (void*)xret;
    }
    x_QBoxLayout(QLayout* x1, QBoxLayout::Direction x2) : QBoxLayout(x1, x2) {
    }
    static void x_13(Smoke::Stack x) {
	// QBoxLayout(QBoxLayout::Direction, int, const char*)
	x_QBoxLayout* xret = new x_QBoxLayout((QBoxLayout::Direction)x[1].s_enum,(int)x[2].s_int,(const char*)x[3].s_voidp);
	x[0].s_class = (void*)xret;
    }
    x_QBoxLayout(QBoxLayout::Direction x1, int x2, const char* x3) : QBoxLayout(x1, x2, x3) {
    }
    static void x_14(Smoke::Stack x) {
	// QBoxLayout(QBoxLayout::Direction, int)
	x_QBoxLayout* xret = new x_QBoxLayout((QBoxLayout::Direction)x[1].s_enum,(int)x[2].s_int);
	x[0].s_class = (void*)xret;
    }
    x_QBoxLayout(QBoxLayout::Direction x1, int x2) : QBoxLayout(x1, x2) {
    }
    static void x_15(Smoke::Stack x) {
	// QBoxLayout(QBoxLayout::Direction)
	x_QBoxLayout* xret = new x_QBoxLayout((QBoxLayout::Direction)x[1].s_enum);
	x[0].s_class = (void*)xret;
    }
    x_QBoxLayout(QBoxLayout::Direction x1) : QBoxLayout(x1) {
    }
    void x_16(Smoke::Stack x) {
	// addItem(QLayoutItem*)
	this->QBoxLayout::addItem((QLayoutItem*)x[1].s_class);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_17(Smoke::Stack x) const {
	// direction()
	QBoxLayout::Direction xret = this->QBoxLayout::direction();
	x[0].s_enum = xret;
    }
    void x_18(Smoke::Stack x) {
	// setDirection(QBoxLayout::Direction)
	this->QBoxLayout::setDirection((QBoxLayout::Direction)x[1].s_enum);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_19(Smoke::Stack x) {
	// addSpacing(int)
	this->QBoxLayout::addSpacing((int)x[1].s_int);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_20(Smoke::Stack x) {
	// addStretch(int)
	this->QBoxLayout::addStretch((int)x[1].s_int);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_21(Smoke::Stack x) {
	// addStretch()
	this->QBoxLayout::addStretch();
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_22(Smoke::Stack x) {
	// addWidget(QWidget*, int, int)
	this->QBoxLayout::addWidget((QWidget*)x[1].s_class,(int)x[2].s_int,(int)x[3].s_int);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_23(Smoke::Stack x) {
	// addWidget(QWidget*, int)
	this->QBoxLayout::addWidget((QWidget*)x[1].s_class,(int)x[2].s_int);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_24(Smoke::Stack x) {
	// addWidget(QWidget*)
	this->QBoxLayout::addWidget((QWidget*)x[1].s_class);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_25(Smoke::Stack x) {
	// addLayout(QLayout*, int)
	this->QBoxLayout::addLayout((QLayout*)x[1].s_class,(int)x[2].s_int);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_26(Smoke::Stack x) {
	// addLayout(QLayout*)
	this->QBoxLayout::addLayout((QLayout*)x[1].s_class);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_27(Smoke::Stack x) {
	// addStrut(int)
	this->QBoxLayout::addStrut((int)x[1].s_int);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_28(Smoke::Stack x) {
	// insertSpacing(int, int)
	this->QBoxLayout::insertSpacing((int)x[1].s_int,(int)x[2].s_int);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_29(Smoke::Stack x) {
	// insertStretch(int, int)
	this->QBoxLayout::insertStretch((int)x[1].s_int,(int)x[2].s_int);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_30(Smoke::Stack x) {
	// insertStretch(int)
	this->QBoxLayout::insertStretch((int)x[1].s_int);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_31(Smoke::Stack x) {
	// insertWidget(int, QWidget*, int, int)
	this->QBoxLayout::insertWidget((int)x[1].s_int,(QWidget*)x[2].s_class,(int)x[3].s_int,(int)x[4].s_int);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_32(Smoke::Stack x) {
	// insertWidget(int, QWidget*, int)
	this->QBoxLayout::insertWidget((int)x[1].s_int,(QWidget*)x[2].s_class,(int)x[3].s_int);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_33(Smoke::Stack x) {
	// insertWidget(int, QWidget*)
	this->QBoxLayout::insertWidget((int)x[1].s_int,(QWidget*)x[2].s_class);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_34(Smoke::Stack x) {
	// insertLayout(int, QLayout*, int)
	this->QBoxLayout::insertLayout((int)x[1].s_int,(QLayout*)x[2].s_class,(int)x[3].s_int);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_35(Smoke::Stack x) {
	// insertLayout(int, QLayout*)
	this->QBoxLayout::insertLayout((int)x[1].s_int,(QLayout*)x[2].s_class);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_36(Smoke::Stack x) {
	// setStretchFactor(QWidget*, int)
	bool xret = this->QBoxLayout::setStretchFactor((QWidget*)x[1].s_class,(int)x[2].s_int);
	x[0].s_bool = xret;
    }
    void x_37(Smoke::Stack x) {
	// setStretchFactor(QLayout*, int)
	bool xret = this->QBoxLayout::setStretchFactor((QLayout*)x[1].s_class,(int)x[2].s_int);
	x[0].s_bool = xret;
    }
    void x_38(Smoke::Stack x) const {
	// sizeHint()
	QSize xret = this->QBoxLayout::sizeHint();
	x[0].s_class = (void*)new QSize(xret);
    }
    void x_39(Smoke::Stack x) const {
	// minimumSize()
	QSize xret = this->QBoxLayout::minimumSize();
	x[0].s_class = (void*)new QSize(xret);
    }
    void x_40(Smoke::Stack x) const {
	// maximumSize()
	QSize xret = this->QBoxLayout::maximumSize();
	x[0].s_class = (void*)new QSize(xret);
    }
    void x_41(Smoke::Stack x) const {
	// hasHeightForWidth()
	bool xret = this->QBoxLayout::hasHeightForWidth();
	x[0].s_bool = xret;
    }
    void x_42(Smoke::Stack x) const {
	// heightForWidth(int)
	int xret = this->QBoxLayout::heightForWidth((int)x[1].s_int);
	x[0].s_int = xret;
    }
    void x_43(Smoke::Stack x) const {
	// expanding()
	QSizePolicy::ExpandData xret = this->QBoxLayout::expanding();
	x[0].s_enum = xret;
    }
    void x_44(Smoke::Stack x) {
	// invalidate()
	this->QBoxLayout::invalidate();
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_45(Smoke::Stack x) {
	// iterator()
	QLayoutIterator xret = this->QBoxLayout::iterator();
	x[0].s_class = (void*)new QLayoutIterator(xret);
    }
    void x_46(Smoke::Stack x) {
	// setGeometry(const QRect&)
	this->QBoxLayout::setGeometry(*(const QRect *)x[1].s_class);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_47(Smoke::Stack x) {
	// findWidget(QWidget*)
	int xret = this->QBoxLayout::findWidget((QWidget*)x[1].s_class);
	x[0].s_int = xret;
    }
    void x_48(Smoke::Stack x) {
	// insertItem(int, QLayoutItem*)
	this->QBoxLayout::insertItem((int)x[1].s_int,(QLayoutItem*)x[2].s_class);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    virtual void addItem(QLayoutItem* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(281, (void*)this, x)) return;
	this->QBoxLayout::addItem(x1);
    }
    virtual bool checkConnectArgs(const char* x1, const QObject* x2, const char* x3) {
	Smoke::StackItem x[4];
	x[1].s_voidp = (void*)x1;
	x[2].s_class = (void*)x2;
	x[3].s_voidp = (void*)x3;
	if(qt_Smoke->binding->callMethod(5470, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QObject::checkConnectArgs(x1, x2, x3);
    }
    virtual void childEvent(QChildEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(4101, (void*)this, x)) return;
	this->QLayout::childEvent(x1);
    }
    virtual void connectNotify(const char* x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(5468, (void*)this, x)) return;
	this->QObject::connectNotify(x1);
    }
    virtual void customEvent(QCustomEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(5467, (void*)this, x)) return;
	this->QObject::customEvent(x1);
    }
    virtual void disconnectNotify(const char* x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(5469, (void*)this, x)) return;
	this->QObject::disconnectNotify(x1);
    }
    virtual bool event(QEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(5405, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
	Smoke::StackItem x[3];
	x[1].s_class = (void*)x1;
	x[2].s_class = (void*)x2;
	if(qt_Smoke->binding->callMethod(4100, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QLayout::eventFilter(x1, x2);
    }
    virtual QSizePolicy::ExpandData expanding() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(308, (void*)this, x)) {
	    QSizePolicy::ExpandData *xptr = (QSizePolicy::ExpandData *)x[0].s_class;
	    QSizePolicy::ExpandData xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QBoxLayout::expanding();
    }
    virtual QRect geometry() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(4082, (void*)this, x)) {
	    QRect *xptr = (QRect *)x[0].s_class;
	    QRect xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QLayout::geometry();
    }
    virtual bool hasHeightForWidth() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(306, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QBoxLayout::hasHeightForWidth();
    }
    virtual int heightForWidth(int x1) const {
	Smoke::StackItem x[2];
	x[1].s_int = x1;
	if(qt_Smoke->binding->callMethod(307, (void*)this, x)) return (int)x[0].s_int;
	return this->QBoxLayout::heightForWidth(x1);
    }
    virtual void insertChild(QObject* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(5428, (void*)this, x)) return;
	this->QObject::insertChild(x1);
    }
    virtual void invalidate() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(309, (void*)this, x)) return;
	this->QBoxLayout::invalidate();
    }
    virtual bool isEmpty() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(4091, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QLayout::isEmpty();
    }
    virtual QLayoutIterator iterator() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(310, (void*)this, x)) {
	    QLayoutIterator *xptr = (QLayoutIterator *)x[0].s_class;
	    QLayoutIterator xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QBoxLayout::iterator();
    }
    virtual QLayout* layout() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(4096, (void*)this, x)) return (QLayout*)x[0].s_class;
	return this->QLayout::layout();
    }
    virtual QSize maximumSize() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(305, (void*)this, x)) {
	    QSize *xptr = (QSize *)x[0].s_class;
	    QSize xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QBoxLayout::maximumSize();
    }
    virtual QSize minimumSize() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(304, (void*)this, x)) {
	    QSize *xptr = (QSize *)x[0].s_class;
	    QSize xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QBoxLayout::minimumSize();
    }
    virtual QVariant property(const char* x1) const {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(5442, (void*)this, x)) {
	    QVariant *xptr = (QVariant *)x[0].s_class;
	    QVariant xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QObject::property(x1);
    }
    virtual void removeChild(QObject* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(5429, (void*)this, x)) return;
	this->QObject::removeChild(x1);
    }
    virtual void setAlignment(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = x1;
	if(qt_Smoke->binding->callMethod(4124, (void*)this, x)) return;
	this->QLayoutItem::setAlignment(x1);
    }
    virtual void setAutoAdd(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(4079, (void*)this, x)) return;
	this->QLayout::setAutoAdd(x1);
    }
    virtual void setGeometry(const QRect& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(311, (void*)this, x)) return;
	this->QBoxLayout::setGeometry(x1);
    }
    virtual void setMargin(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = x1;
	if(qt_Smoke->binding->callMethod(4068, (void*)this, x)) return;
	this->QLayout::setMargin(x1);
    }
    virtual void setMenuBar(QMenuBar* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(4075, (void*)this, x)) return;
	this->QLayout::setMenuBar(x1);
    }
    virtual void setName(const char* x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(5411, (void*)this, x)) return;
	this->QObject::setName(x1);
    }
    virtual bool setProperty(const char* x1, const QVariant& x2) {
	Smoke::StackItem x[3];
	x[1].s_voidp = (void*)x1;
	x[2].s_class = (void*)&x2;
	if(qt_Smoke->binding->callMethod(5441, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QObject::setProperty(x1, x2);
    }
    virtual void setSpacing(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = x1;
	if(qt_Smoke->binding->callMethod(4069, (void*)this, x)) return;
	this->QLayout::setSpacing(x1);
    }
    virtual QSize sizeHint() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(303, (void*)this, x)) {
	    QSize *xptr = (QSize *)x[0].s_class;
	    QSize xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QBoxLayout::sizeHint();
    }
    virtual QSpacerItem* spacerItem() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(4122, (void*)this, x)) return (QSpacerItem*)x[0].s_class;
	return this->QLayoutItem::spacerItem();
    }
    virtual void timerEvent(QTimerEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(5465, (void*)this, x)) return;
	this->QObject::timerEvent(x1);
    }
    virtual QWidget* widget() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(4119, (void*)this, x)) return (QWidget*)x[0].s_class;
	return this->QLayoutItem::widget();
    }
    ~x_QBoxLayout() { qt_Smoke->binding->deleted(13, (void*)this); }
};
void xcall_QBoxLayout(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QBoxLayout *xself = (x_QBoxLayout*)obj;
    switch(xi) {
	case 0: x_QBoxLayout::x_0(args);	break;
	case 1: x_QBoxLayout::x_1(args);	break;
	case 2: x_QBoxLayout::x_2(args);	break;
	case 3: x_QBoxLayout::x_3(args);	break;
	case 4: x_QBoxLayout::x_4(args);	break;
	case 5: x_QBoxLayout::x_5(args);	break;
	case 6: x_QBoxLayout::x_6(args);	break;
	case 7: x_QBoxLayout::x_7(args);	break;
	case 8: x_QBoxLayout::x_8(args);	break;
	case 9: x_QBoxLayout::x_9(args);	break;
	case 10: x_QBoxLayout::x_10(args);	break;
	case 11: x_QBoxLayout::x_11(args);	break;
	case 12: x_QBoxLayout::x_12(args);	break;
	case 13: x_QBoxLayout::x_13(args);	break;
	case 14: x_QBoxLayout::x_14(args);	break;
	case 15: x_QBoxLayout::x_15(args);	break;
	case 16: xself->x_16(args);	break;
	case 17: xself->x_17(args);	break;
	case 18: xself->x_18(args);	break;
	case 19: xself->x_19(args);	break;
	case 20: xself->x_20(args);	break;
	case 21: xself->x_21(args);	break;
	case 22: xself->x_22(args);	break;
	case 23: xself->x_23(args);	break;
	case 24: xself->x_24(args);	break;
	case 25: xself->x_25(args);	break;
	case 26: xself->x_26(args);	break;
	case 27: xself->x_27(args);	break;
	case 28: xself->x_28(args);	break;
	case 29: xself->x_29(args);	break;
	case 30: xself->x_30(args);	break;
	case 31: xself->x_31(args);	break;
	case 32: xself->x_32(args);	break;
	case 33: xself->x_33(args);	break;
	case 34: xself->x_34(args);	break;
	case 35: xself->x_35(args);	break;
	case 36: xself->x_36(args);	break;
	case 37: xself->x_37(args);	break;
	case 38: xself->x_38(args);	break;
	case 39: xself->x_39(args);	break;
	case 40: xself->x_40(args);	break;
	case 41: xself->x_41(args);	break;
	case 42: xself->x_42(args);	break;
	case 43: xself->x_43(args);	break;
	case 44: xself->x_44(args);	break;
	case 45: xself->x_45(args);	break;
	case 46: xself->x_46(args);	break;
	case 47: xself->x_47(args);	break;
	case 48: xself->x_48(args);	break;
	case 49: delete (QBoxLayout*)xself;	break;
    }
}
