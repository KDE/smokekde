//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke.h>
#include <qt_smoke.h>
#include <qcursor.h>
#include <qcolor.h>
#include <qstring.h>
#include <qsize.h>
#include <qvariant.h>
#include <qregion.h>
#include <qlineedit.h>
#include <qpoint.h>
#include <qfont.h>
#include <qbitmap.h>
#include <qsizepolicy.h>
#include <qpalette.h>
#include <qwidget.h>
#include <qnamespace.h>
#include <qpixmap.h>
#include <qrect.h>
#include <qstyle.h>

class x_QLineEdit : public QLineEdit {
public:
    static void x_0(Smoke::Stack x) {
	x[0].s_enum = (long)QLineEdit::Normal;
    }
    static void x_1(Smoke::Stack x) {
	x[0].s_enum = (long)QLineEdit::NoEcho;
    }
    static void x_2(Smoke::Stack x) {
	x[0].s_enum = (long)QLineEdit::Password;
    }
    static void x_3(Smoke::Stack x) {
	// QLineEdit(QWidget*, const char*)
	x_QLineEdit* xret = new x_QLineEdit((QWidget*)x[1].s_class,(const char*)x[2].s_voidp);
	x[0].s_class = (void*)xret;
    }
    x_QLineEdit(QWidget* x1, const char* x2) : QLineEdit(x1, x2) {
    }
    static void x_4(Smoke::Stack x) {
	// QLineEdit(QWidget*)
	x_QLineEdit* xret = new x_QLineEdit((QWidget*)x[1].s_class);
	x[0].s_class = (void*)xret;
    }
    x_QLineEdit(QWidget* x1) : QLineEdit(x1) {
    }
    static void x_5(Smoke::Stack x) {
	// QLineEdit(const QString&, QWidget*, const char*)
	x_QLineEdit* xret = new x_QLineEdit(*(const QString *)x[1].s_voidp,(QWidget*)x[2].s_class,(const char*)x[3].s_voidp);
	x[0].s_class = (void*)xret;
    }
    x_QLineEdit(const QString& x1, QWidget* x2, const char* x3) : QLineEdit(x1, x2, x3) {
    }
    static void x_6(Smoke::Stack x) {
	// QLineEdit(const QString&, QWidget*)
	x_QLineEdit* xret = new x_QLineEdit(*(const QString *)x[1].s_voidp,(QWidget*)x[2].s_class);
	x[0].s_class = (void*)xret;
    }
    x_QLineEdit(const QString& x1, QWidget* x2) : QLineEdit(x1, x2) {
    }
    void x_7(Smoke::Stack x) const {
	// text()
	QString xret = this->QLineEdit::text();
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_8(Smoke::Stack x) const {
	// displayText()
	QString xret = this->QLineEdit::displayText();
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_9(Smoke::Stack x) const {
	// maxLength()
	int xret = this->QLineEdit::maxLength();
	x[0].s_int = xret;
    }
    void x_10(Smoke::Stack x) const {
	// frame()
	bool xret = this->QLineEdit::frame();
	x[0].s_bool = xret;
    }
    void x_11(Smoke::Stack x) const {
	// echoMode()
	QLineEdit::EchoMode xret = this->QLineEdit::echoMode();
	x[0].s_enum = xret;
    }
    void x_12(Smoke::Stack x) const {
	// isReadOnly()
	bool xret = this->QLineEdit::isReadOnly();
	x[0].s_bool = xret;
    }
    void x_13(Smoke::Stack x) const {
	// validator()
	const QValidator* xret = this->QLineEdit::validator();
	x[0].s_class = (void*)xret;
    }
    void x_14(Smoke::Stack x) const {
	// sizeHint()
	QSize xret = this->QLineEdit::sizeHint();
	x[0].s_class = (void*)new QSize(xret);
    }
    void x_15(Smoke::Stack x) const {
	// minimumSizeHint()
	QSize xret = this->QLineEdit::minimumSizeHint();
	x[0].s_class = (void*)new QSize(xret);
    }
    void x_16(Smoke::Stack x) const {
	// cursorPosition()
	int xret = this->QLineEdit::cursorPosition();
	x[0].s_int = xret;
    }
    void x_17(Smoke::Stack x) {
	// validateAndSet(const QString&, int, int, int)
	bool xret = this->QLineEdit::validateAndSet(*(const QString *)x[1].s_voidp,(int)x[2].s_int,(int)x[3].s_int,(int)x[4].s_int);
	x[0].s_bool = xret;
    }
    void x_18(Smoke::Stack x) const {
	// alignment()
	int xret = this->QLineEdit::alignment();
	x[0].s_int = xret;
    }
    void x_19(Smoke::Stack x) {
	// cursorLeft(bool, int)
	this->QLineEdit::cursorLeft((bool)x[1].s_bool,(int)x[2].s_int);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_20(Smoke::Stack x) {
	// cursorLeft(bool)
	this->QLineEdit::cursorLeft((bool)x[1].s_bool);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_21(Smoke::Stack x) {
	// cursorRight(bool, int)
	this->QLineEdit::cursorRight((bool)x[1].s_bool,(int)x[2].s_int);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_22(Smoke::Stack x) {
	// cursorRight(bool)
	this->QLineEdit::cursorRight((bool)x[1].s_bool);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_23(Smoke::Stack x) {
	// cursorForward(bool, int)
	this->QLineEdit::cursorForward((bool)x[1].s_bool,(int)x[2].s_int);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_24(Smoke::Stack x) {
	// cursorForward(bool)
	this->QLineEdit::cursorForward((bool)x[1].s_bool);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_25(Smoke::Stack x) {
	// cursorBackward(bool, int)
	this->QLineEdit::cursorBackward((bool)x[1].s_bool,(int)x[2].s_int);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_26(Smoke::Stack x) {
	// cursorBackward(bool)
	this->QLineEdit::cursorBackward((bool)x[1].s_bool);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_27(Smoke::Stack x) {
	// cursorWordForward(bool)
	this->QLineEdit::cursorWordForward((bool)x[1].s_bool);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_28(Smoke::Stack x) {
	// cursorWordBackward(bool)
	this->QLineEdit::cursorWordBackward((bool)x[1].s_bool);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_29(Smoke::Stack x) {
	// backspace()
	this->QLineEdit::backspace();
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_30(Smoke::Stack x) {
	// del()
	this->QLineEdit::del();
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_31(Smoke::Stack x) {
	// home(bool)
	this->QLineEdit::home((bool)x[1].s_bool);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_32(Smoke::Stack x) {
	// end(bool)
	this->QLineEdit::end((bool)x[1].s_bool);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_33(Smoke::Stack x) {
	// setEdited(bool)
	this->QLineEdit::setEdited((bool)x[1].s_bool);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_34(Smoke::Stack x) const {
	// edited()
	bool xret = this->QLineEdit::edited();
	x[0].s_bool = xret;
    }
    void x_35(Smoke::Stack x) const {
	// hasSelectedText()
	bool xret = this->QLineEdit::hasSelectedText();
	x[0].s_bool = xret;
    }
    void x_36(Smoke::Stack x) const {
	// selectedText()
	QString xret = this->QLineEdit::selectedText();
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_37(Smoke::Stack x) {
	// getSelection(int*, int*)
	bool xret = this->QLineEdit::getSelection((int*)x[1].s_voidp,(int*)x[2].s_voidp);
	x[0].s_bool = xret;
    }
    void x_38(Smoke::Stack x) const {
	// isUndoAvailable()
	bool xret = this->QLineEdit::isUndoAvailable();
	x[0].s_bool = xret;
    }
    void x_39(Smoke::Stack x) const {
	// isRedoAvailable()
	bool xret = this->QLineEdit::isRedoAvailable();
	x[0].s_bool = xret;
    }
    void x_40(Smoke::Stack x) const {
	// hasMarkedText()
	bool xret = this->QLineEdit::hasMarkedText();
	x[0].s_bool = xret;
    }
    void x_41(Smoke::Stack x) const {
	// markedText()
	QString xret = this->QLineEdit::markedText();
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_42(Smoke::Stack x) const {
	// dragEnabled()
	bool xret = this->QLineEdit::dragEnabled();
	x[0].s_bool = xret;
    }
    void x_43(Smoke::Stack x) const {
	// characterAt(int, QChar*)
	int xret = this->QLineEdit::characterAt((int)x[1].s_int,(QChar*)x[2].s_class);
	x[0].s_int = xret;
    }
    void x_44(Smoke::Stack x) {
	// setText(const QString&)
	this->QLineEdit::setText(*(const QString *)x[1].s_voidp);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_45(Smoke::Stack x) {
	// selectAll()
	this->QLineEdit::selectAll();
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_46(Smoke::Stack x) {
	// deselect()
	this->QLineEdit::deselect();
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_47(Smoke::Stack x) {
	// clearValidator()
	this->QLineEdit::clearValidator();
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_48(Smoke::Stack x) {
	// insert(const QString&)
	this->QLineEdit::insert(*(const QString *)x[1].s_voidp);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_49(Smoke::Stack x) {
	// clear()
	this->QLineEdit::clear();
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_50(Smoke::Stack x) {
	// undo()
	this->QLineEdit::undo();
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_51(Smoke::Stack x) {
	// redo()
	this->QLineEdit::redo();
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_52(Smoke::Stack x) {
	// setMaxLength(int)
	this->QLineEdit::setMaxLength((int)x[1].s_int);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_53(Smoke::Stack x) {
	// setFrame(bool)
	this->QLineEdit::setFrame((bool)x[1].s_bool);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_54(Smoke::Stack x) {
	// setEchoMode(QLineEdit::EchoMode)
	this->QLineEdit::setEchoMode((QLineEdit::EchoMode)x[1].s_enum);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_55(Smoke::Stack x) {
	// setReadOnly(bool)
	this->QLineEdit::setReadOnly((bool)x[1].s_bool);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_56(Smoke::Stack x) {
	// setValidator(const QValidator*)
	this->QLineEdit::setValidator((const QValidator*)x[1].s_class);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_57(Smoke::Stack x) {
	// setFont(const QFont&)
	this->QLineEdit::setFont(*(const QFont *)x[1].s_class);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_58(Smoke::Stack x) {
	// setPalette(const QPalette&)
	this->QLineEdit::setPalette(*(const QPalette *)x[1].s_class);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_59(Smoke::Stack x) {
	// setSelection(int, int)
	this->QLineEdit::setSelection((int)x[1].s_int,(int)x[2].s_int);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_60(Smoke::Stack x) {
	// setCursorPosition(int)
	this->QLineEdit::setCursorPosition((int)x[1].s_int);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_61(Smoke::Stack x) {
	// setAlignment(int)
	this->QLineEdit::setAlignment((int)x[1].s_int);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_62(Smoke::Stack x) {
	// cut()
	this->QLineEdit::cut();
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_63(Smoke::Stack x) const {
	// copy()
	this->QLineEdit::copy();
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_64(Smoke::Stack x) {
	// paste()
	this->QLineEdit::paste();
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_65(Smoke::Stack x) {
	// setDragEnabled(bool)
	this->QLineEdit::setDragEnabled((bool)x[1].s_bool);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_66(Smoke::Stack x) {
	// textChanged(const QString&)
	this->QLineEdit::textChanged(*(const QString *)x[1].s_voidp);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_67(Smoke::Stack x) {
	// returnPressed()
	this->QLineEdit::returnPressed();
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_68(Smoke::Stack x) {
	// selectionChanged()
	this->QLineEdit::selectionChanged();
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_69(Smoke::Stack x) {
	// event(QEvent*)
	bool xret = this->QLineEdit::event((QEvent*)x[1].s_class);
	x[0].s_bool = xret;
    }
    void x_70(Smoke::Stack x) {
	// mousePressEvent(QMouseEvent*)
	this->QLineEdit::mousePressEvent((QMouseEvent*)x[1].s_class);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_71(Smoke::Stack x) {
	// mouseMoveEvent(QMouseEvent*)
	this->QLineEdit::mouseMoveEvent((QMouseEvent*)x[1].s_class);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_72(Smoke::Stack x) {
	// mouseReleaseEvent(QMouseEvent*)
	this->QLineEdit::mouseReleaseEvent((QMouseEvent*)x[1].s_class);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_73(Smoke::Stack x) {
	// mouseDoubleClickEvent(QMouseEvent*)
	this->QLineEdit::mouseDoubleClickEvent((QMouseEvent*)x[1].s_class);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_74(Smoke::Stack x) {
	// keyPressEvent(QKeyEvent*)
	this->QLineEdit::keyPressEvent((QKeyEvent*)x[1].s_class);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_75(Smoke::Stack x) {
	// imStartEvent(QIMEvent*)
	this->QLineEdit::imStartEvent((QIMEvent*)x[1].s_class);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_76(Smoke::Stack x) {
	// imComposeEvent(QIMEvent*)
	this->QLineEdit::imComposeEvent((QIMEvent*)x[1].s_class);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_77(Smoke::Stack x) {
	// imEndEvent(QIMEvent*)
	this->QLineEdit::imEndEvent((QIMEvent*)x[1].s_class);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_78(Smoke::Stack x) {
	// focusInEvent(QFocusEvent*)
	this->QLineEdit::focusInEvent((QFocusEvent*)x[1].s_class);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_79(Smoke::Stack x) {
	// focusOutEvent(QFocusEvent*)
	this->QLineEdit::focusOutEvent((QFocusEvent*)x[1].s_class);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_80(Smoke::Stack x) {
	// drawContents(QPainter*)
	this->QLineEdit::drawContents((QPainter*)x[1].s_class);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_81(Smoke::Stack x) {
	// resizeEvent(QResizeEvent*)
	this->QLineEdit::resizeEvent((QResizeEvent*)x[1].s_class);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_82(Smoke::Stack x) {
	// dragEnterEvent(QDragEnterEvent*)
	this->QLineEdit::dragEnterEvent((QDragEnterEvent*)x[1].s_class);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_83(Smoke::Stack x) {
	// dragMoveEvent(QDragMoveEvent*)
	this->QLineEdit::dragMoveEvent((QDragMoveEvent*)x[1].s_class);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_84(Smoke::Stack x) {
	// dragLeaveEvent(QDragLeaveEvent*)
	this->QLineEdit::dragLeaveEvent((QDragLeaveEvent*)x[1].s_class);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_85(Smoke::Stack x) {
	// dropEvent(QDropEvent*)
	this->QLineEdit::dropEvent((QDropEvent*)x[1].s_class);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_86(Smoke::Stack x) {
	// contextMenuEvent(QContextMenuEvent*)
	this->QLineEdit::contextMenuEvent((QContextMenuEvent*)x[1].s_class);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_87(Smoke::Stack x) {
	// repaintArea(int, int)
	this->QLineEdit::repaintArea((int)x[1].s_int,(int)x[2].s_int);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_88(Smoke::Stack x) {
	// createPopupMenu()
	QPopupMenu* xret = this->QLineEdit::createPopupMenu();
	x[0].s_class = (void*)xret;
    }
    void x_89(Smoke::Stack x) {
	// windowActivationChange(bool)
	this->QLineEdit::windowActivationChange((bool)x[1].s_bool);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    virtual void adjustSize() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(9692, (void*)this, x)) return;
	this->QWidget::adjustSize();
    }
    virtual bool checkConnectArgs(const char* x1, const QObject* x2, const char* x3) {
	Smoke::StackItem x[4];
	x[1].s_voidp = (void*)x1;
	x[2].s_class = (void*)x2;
	x[3].s_voidp = (void*)x3;
	if(qt_Smoke->binding->callMethod(5470, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QObject::checkConnectArgs(x1, x2, x3);
    }
    virtual void childEvent(QChildEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(5466, (void*)this, x)) return;
	this->QObject::childEvent(x1);
    }
    virtual void clear() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(4193, (void*)this, x)) return;
	this->QLineEdit::clear();
    }
    virtual void clearValidator() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(4191, (void*)this, x)) return;
	this->QLineEdit::clearValidator();
    }
    virtual bool close(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(9679, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QWidget::close(x1);
    }
    virtual void closeEvent(QCloseEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(9787, (void*)this, x)) return;
	this->QWidget::closeEvent(x1);
    }
    virtual bool cmd(int x1, QPainter* x2, QPDevCmdParam* x3) {
	Smoke::StackItem x[4];
	x[1].s_int = x1;
	x[2].s_class = (void*)x2;
	x[3].s_voidp = (void*)x3;
	if(qt_Smoke->binding->callMethod(5566, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QPaintDevice::cmd(x1, x2, x3);
    }
    virtual void connectNotify(const char* x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(5468, (void*)this, x)) return;
	this->QObject::connectNotify(x1);
    }
    virtual void contextMenuEvent(QContextMenuEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(4230, (void*)this, x)) return;
	this->QLineEdit::contextMenuEvent(x1);
    }
    virtual void copy() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(4207, (void*)this, x)) return;
	this->QLineEdit::copy();
    }
    virtual void create(WId x1, bool x2, bool x3) {
	Smoke::StackItem x[4];
	x[1].s_ulong = x1;
	x[2].s_bool = x2;
	x[3].s_bool = x3;
	if(qt_Smoke->binding->callMethod(9807, (void*)this, x)) return;
	this->QWidget::create(x1, x2, x3);
    }
    virtual QPopupMenu* createPopupMenu() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(4232, (void*)this, x)) return (QPopupMenu*)x[0].s_class;
	return this->QLineEdit::createPopupMenu();
    }
    virtual void customEvent(QCustomEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(5467, (void*)this, x)) return;
	this->QObject::customEvent(x1);
    }
    virtual bool customWhatsThis() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(9717, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QWidget::customWhatsThis();
    }
    virtual void cut() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(4206, (void*)this, x)) return;
	this->QLineEdit::cut();
    }
    virtual void deselect() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(4190, (void*)this, x)) return;
	this->QLineEdit::deselect();
    }
    virtual void destroy(bool x1, bool x2) {
	Smoke::StackItem x[3];
	x[1].s_bool = x1;
	x[2].s_bool = x2;
	if(qt_Smoke->binding->callMethod(9811, (void*)this, x)) return;
	this->QWidget::destroy(x1, x2);
    }
    virtual void disconnectNotify(const char* x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(5469, (void*)this, x)) return;
	this->QObject::disconnectNotify(x1);
    }
    virtual void dragEnterEvent(QDragEnterEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(4226, (void*)this, x)) return;
	this->QLineEdit::dragEnterEvent(x1);
    }
    virtual void dragLeaveEvent(QDragLeaveEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(4228, (void*)this, x)) return;
	this->QLineEdit::dragLeaveEvent(x1);
    }
    virtual void dragMoveEvent(QDragMoveEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(4227, (void*)this, x)) return;
	this->QLineEdit::dragMoveEvent(x1);
    }
    virtual void drawContents(QPainter* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(4224, (void*)this, x)) return;
	this->QLineEdit::drawContents(x1);
    }
    virtual void drawFrame(QPainter* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(2938, (void*)this, x)) return;
	this->QFrame::drawFrame(x1);
    }
    virtual void dropEvent(QDropEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(4229, (void*)this, x)) return;
	this->QLineEdit::dropEvent(x1);
    }
    virtual void enabledChange(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(9801, (void*)this, x)) return;
	this->QWidget::enabledChange(x1);
    }
    virtual void enterEvent(QEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(9782, (void*)this, x)) return;
	this->QWidget::enterEvent(x1);
    }
    virtual bool event(QEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(4213, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QLineEdit::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
	Smoke::StackItem x[3];
	x[1].s_class = (void*)x1;
	x[2].s_class = (void*)x2;
	if(qt_Smoke->binding->callMethod(5406, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QObject::eventFilter(x1, x2);
    }
    virtual void focusInEvent(QFocusEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(4222, (void*)this, x)) return;
	this->QLineEdit::focusInEvent(x1);
    }
    virtual bool focusNextPrevChild(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(9820, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QWidget::focusNextPrevChild(x1);
    }
    virtual void focusOutEvent(QFocusEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(4223, (void*)this, x)) return;
	this->QLineEdit::focusOutEvent(x1);
    }
    virtual void fontChange(const QFont& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(9803, (void*)this, x)) return;
	this->QWidget::fontChange(x1);
    }
    virtual int fontInf(QFont* x1, int x2) const {
	Smoke::StackItem x[3];
	x[1].s_class = (void*)x1;
	x[2].s_int = x2;
	if(qt_Smoke->binding->callMethod(5571, (void*)this, x)) return (int)x[0].s_int;
	return this->QPaintDevice::fontInf(x1, x2);
    }
    virtual int fontMet(QFont* x1, int x2, const char* x3, int x4) const {
	Smoke::StackItem x[5];
	x[1].s_class = (void*)x1;
	x[2].s_int = x2;
	x[3].s_voidp = (void*)x3;
	x[4].s_int = x4;
	if(qt_Smoke->binding->callMethod(5568, (void*)this, x)) return (int)x[0].s_int;
	return this->QPaintDevice::fontMet(x1, x2, x3, x4);
    }
    virtual void frameChanged() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(2940, (void*)this, x)) return;
	this->QFrame::frameChanged();
    }
    virtual int heightForWidth(int x1) const {
	Smoke::StackItem x[2];
	x[1].s_int = x1;
	if(qt_Smoke->binding->callMethod(9691, (void*)this, x)) return (int)x[0].s_int;
	return this->QWidget::heightForWidth(x1);
    }
    virtual void hide() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(9749, (void*)this, x)) return;
	this->QWidget::hide();
    }
    virtual void hideEvent(QHideEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(9798, (void*)this, x)) return;
	this->QWidget::hideEvent(x1);
    }
    virtual void imComposeEvent(QIMEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(4220, (void*)this, x)) return;
	this->QLineEdit::imComposeEvent(x1);
    }
    virtual void imEndEvent(QIMEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(4221, (void*)this, x)) return;
	this->QLineEdit::imEndEvent(x1);
    }
    virtual void imStartEvent(QIMEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(4219, (void*)this, x)) return;
	this->QLineEdit::imStartEvent(x1);
    }
    virtual void insert(const QString& x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)&x1;
	if(qt_Smoke->binding->callMethod(4192, (void*)this, x)) return;
	this->QLineEdit::insert(x1);
    }
    virtual void insertChild(QObject* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(5428, (void*)this, x)) return;
	this->QObject::insertChild(x1);
    }
    virtual void keyPressEvent(QKeyEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(4218, (void*)this, x)) return;
	this->QLineEdit::keyPressEvent(x1);
    }
    virtual void keyReleaseEvent(QKeyEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(9779, (void*)this, x)) return;
	this->QWidget::keyReleaseEvent(x1);
    }
    virtual void leaveEvent(QEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(9783, (void*)this, x)) return;
	this->QWidget::leaveEvent(x1);
    }
    virtual int metric(int x1) const {
	Smoke::StackItem x[2];
	x[1].s_int = x1;
	if(qt_Smoke->binding->callMethod(9805, (void*)this, x)) return (int)x[0].s_int;
	return this->QWidget::metric(x1);
    }
    virtual QSize minimumSizeHint() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(4159, (void*)this, x)) {
	    QSize *xptr = (QSize *)x[0].s_class;
	    QSize xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QLineEdit::minimumSizeHint();
    }
    virtual void mouseDoubleClickEvent(QMouseEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(4217, (void*)this, x)) return;
	this->QLineEdit::mouseDoubleClickEvent(x1);
    }
    virtual void mouseMoveEvent(QMouseEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(4215, (void*)this, x)) return;
	this->QLineEdit::mouseMoveEvent(x1);
    }
    virtual void mousePressEvent(QMouseEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(4214, (void*)this, x)) return;
	this->QLineEdit::mousePressEvent(x1);
    }
    virtual void mouseReleaseEvent(QMouseEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(4216, (void*)this, x)) return;
	this->QLineEdit::mouseReleaseEvent(x1);
    }
    virtual void move(int x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_int = x1;
	x[2].s_int = x2;
	if(qt_Smoke->binding->callMethod(9761, (void*)this, x)) return;
	this->QWidget::move(x1, x2);
    }
    virtual void moveEvent(QMoveEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(9785, (void*)this, x)) return;
	this->QWidget::moveEvent(x1);
    }
    virtual void paintEvent(QPaintEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(2936, (void*)this, x)) return;
	this->QFrame::paintEvent(x1);
    }
    virtual void paletteChange(const QPalette& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(9802, (void*)this, x)) return;
	this->QWidget::paletteChange(x1);
    }
    virtual void paste() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(4208, (void*)this, x)) return;
	this->QLineEdit::paste();
    }
    virtual void polish() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(9755, (void*)this, x)) return;
	this->QWidget::polish();
    }
    virtual QVariant property(const char* x1) const {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(5442, (void*)this, x)) {
	    QVariant *xptr = (QVariant *)x[0].s_class;
	    QVariant xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QObject::property(x1);
    }
    virtual void redo() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(4195, (void*)this, x)) return;
	this->QLineEdit::redo();
    }
    virtual void removeChild(QObject* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(5429, (void*)this, x)) return;
	this->QObject::removeChild(x1);
    }
    virtual void reparent(QWidget* x1, Qt::WFlags x2, const QPoint& x3, bool x4) {
	Smoke::StackItem x[5];
	x[1].s_class = (void*)x1;
	x[2].s_int = x2;
	x[3].s_class = (void*)&x3;
	x[4].s_bool = x4;
	if(qt_Smoke->binding->callMethod(9695, (void*)this, x)) return;
	this->QWidget::reparent(x1, x2, x3, x4);
    }
    virtual void resize(int x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_int = x1;
	x[2].s_int = x2;
	if(qt_Smoke->binding->callMethod(9763, (void*)this, x)) return;
	this->QWidget::resize(x1, x2);
    }
    virtual void resizeEvent(QResizeEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(4225, (void*)this, x)) return;
	this->QLineEdit::resizeEvent(x1);
    }
    virtual int resolution() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(5564, (void*)this, x)) return (int)x[0].s_int;
	return this->QPaintDevice::resolution();
    }
    virtual void selectAll() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(4189, (void*)this, x)) return;
	this->QLineEdit::selectAll();
    }
    virtual void setAcceptDrops(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(9712, (void*)this, x)) return;
	this->QWidget::setAcceptDrops(x1);
    }
    virtual void setActiveWindow() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(9666, (void*)this, x)) return;
	this->QWidget::setActiveWindow();
    }
    virtual void setAlignment(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = x1;
	if(qt_Smoke->binding->callMethod(4205, (void*)this, x)) return;
	this->QLineEdit::setAlignment(x1);
    }
    virtual void setAutoMask(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(9713, (void*)this, x)) return;
	this->QWidget::setAutoMask(x1);
    }
    virtual void setBackgroundColor(const QColor& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(9662, (void*)this, x)) return;
	this->QWidget::setBackgroundColor(x1);
    }
    virtual void setBackgroundMode(Qt::BackgroundMode x1) {
	Smoke::StackItem x[2];
	x[1].s_enum = x1;
	if(qt_Smoke->binding->callMethod(9624, (void*)this, x)) return;
	this->QWidget::setBackgroundMode(x1);
    }
    virtual void setBackgroundOrigin(QWidget::BackgroundOrigin x1) {
	Smoke::StackItem x[2];
	x[1].s_enum = x1;
	if(qt_Smoke->binding->callMethod(9715, (void*)this, x)) return;
	this->QWidget::setBackgroundOrigin(x1);
    }
    virtual void setBackgroundPixmap(const QPixmap& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(9664, (void*)this, x)) return;
	this->QWidget::setBackgroundPixmap(x1);
    }
    virtual void setCaption(const QString& x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)&x1;
	if(qt_Smoke->binding->callMethod(9730, (void*)this, x)) return;
	this->QWidget::setCaption(x1);
    }
    virtual void setCursor(const QCursor& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(9651, (void*)this, x)) return;
	this->QWidget::setCursor(x1);
    }
    virtual void setCursorPosition(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = x1;
	if(qt_Smoke->binding->callMethod(4204, (void*)this, x)) return;
	this->QLineEdit::setCursorPosition(x1);
    }
    virtual void setDragEnabled(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(4209, (void*)this, x)) return;
	this->QLineEdit::setDragEnabled(x1);
    }
    virtual void setEchoMode(QLineEdit::EchoMode x1) {
	Smoke::StackItem x[2];
	x[1].s_enum = x1;
	if(qt_Smoke->binding->callMethod(4198, (void*)this, x)) return;
	this->QLineEdit::setEchoMode(x1);
    }
    virtual void setEnabled(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(9728, (void*)this, x)) return;
	this->QWidget::setEnabled(x1);
    }
    virtual void setEraseColor(const QColor& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(9628, (void*)this, x)) return;
	this->QWidget::setEraseColor(x1);
    }
    virtual void setErasePixmap(const QPixmap& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(9630, (void*)this, x)) return;
	this->QWidget::setErasePixmap(x1);
    }
    virtual void setFocus() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(9734, (void*)this, x)) return;
	this->QWidget::setFocus();
    }
    virtual void setFocusPolicy(QWidget::FocusPolicy x1) {
	Smoke::StackItem x[2];
	x[1].s_enum = x1;
	if(qt_Smoke->binding->callMethod(9669, (void*)this, x)) return;
	this->QWidget::setFocusPolicy(x1);
    }
    virtual void setFocusProxy(QWidget* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(9671, (void*)this, x)) return;
	this->QWidget::setFocusProxy(x1);
    }
    virtual void setFont(const QFont& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(4201, (void*)this, x)) return;
	this->QLineEdit::setFont(x1);
    }
    virtual void setFrame(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(4197, (void*)this, x)) return;
	this->QLineEdit::setFrame(x1);
    }
    virtual void setFrameRect(const QRect& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(2935, (void*)this, x)) return;
	this->QFrame::setFrameRect(x1);
    }
    virtual void setFrameStyle(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = x1;
	if(qt_Smoke->binding->callMethod(2919, (void*)this, x)) return;
	this->QFrame::setFrameStyle(x1);
    }
    virtual void setGeometry(const QRect& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(9766, (void*)this, x)) return;
	this->QWidget::setGeometry(x1);
    }
    virtual void setGeometry(int x1, int x2, int x3, int x4) {
	Smoke::StackItem x[5];
	x[1].s_int = x1;
	x[2].s_int = x2;
	x[3].s_int = x3;
	x[4].s_int = x4;
	if(qt_Smoke->binding->callMethod(9765, (void*)this, x)) return;
	this->QWidget::setGeometry(x1, x2, x3, x4);
    }
    virtual void setIcon(const QPixmap& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(9731, (void*)this, x)) return;
	this->QWidget::setIcon(x1);
    }
    virtual void setIconText(const QString& x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)&x1;
	if(qt_Smoke->binding->callMethod(9732, (void*)this, x)) return;
	this->QWidget::setIconText(x1);
    }
    virtual void setKeyCompression(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(9824, (void*)this, x)) return;
	this->QWidget::setKeyCompression(x1);
    }
    virtual void setLineWidth(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = x1;
	if(qt_Smoke->binding->callMethod(2929, (void*)this, x)) return;
	this->QFrame::setLineWidth(x1);
    }
    virtual void setMargin(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = x1;
	if(qt_Smoke->binding->callMethod(2931, (void*)this, x)) return;
	this->QFrame::setMargin(x1);
    }
    virtual void setMask(const QBitmap& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(9658, (void*)this, x)) return;
	this->QWidget::setMask(x1);
    }
    virtual void setMask(const QRegion& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(9659, (void*)this, x)) return;
	this->QWidget::setMask(x1);
    }
    virtual void setMaxLength(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = x1;
	if(qt_Smoke->binding->callMethod(4196, (void*)this, x)) return;
	this->QLineEdit::setMaxLength(x1);
    }
    virtual void setMaximumSize(int x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_int = x1;
	x[2].s_int = x2;
	if(qt_Smoke->binding->callMethod(9601, (void*)this, x)) return;
	this->QWidget::setMaximumSize(x1, x2);
    }
    virtual void setMicroFocusHint(int x1, int x2, int x3, int x4, bool x5, QFont* x6) {
	Smoke::StackItem x[7];
	x[1].s_int = x1;
	x[2].s_int = x2;
	x[3].s_int = x3;
	x[4].s_int = x4;
	x[5].s_bool = x5;
	x[6].s_class = (void*)x6;
	if(qt_Smoke->binding->callMethod(9825, (void*)this, x)) return;
	this->QWidget::setMicroFocusHint(x1, x2, x3, x4, x5, x6);
    }
    virtual void setMidLineWidth(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = x1;
	if(qt_Smoke->binding->callMethod(2933, (void*)this, x)) return;
	this->QFrame::setMidLineWidth(x1);
    }
    virtual void setMinimumSize(int x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_int = x1;
	x[2].s_int = x2;
	if(qt_Smoke->binding->callMethod(9599, (void*)this, x)) return;
	this->QWidget::setMinimumSize(x1, x2);
    }
    virtual void setMouseTracking(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(9733, (void*)this, x)) return;
	this->QWidget::setMouseTracking(x1);
    }
    virtual void setName(const char* x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(9568, (void*)this, x)) return;
	this->QWidget::setName(x1);
    }
    virtual void setPalette(const QPalette& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(4202, (void*)this, x)) return;
	this->QLineEdit::setPalette(x1);
    }
    virtual void setPaletteBackgroundColor(const QColor& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(9639, (void*)this, x)) return;
	this->QWidget::setPaletteBackgroundColor(x1);
    }
    virtual void setPaletteBackgroundPixmap(const QPixmap& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(9641, (void*)this, x)) return;
	this->QWidget::setPaletteBackgroundPixmap(x1);
    }
    virtual bool setProperty(const char* x1, const QVariant& x2) {
	Smoke::StackItem x[3];
	x[1].s_voidp = (void*)x1;
	x[2].s_class = (void*)&x2;
	if(qt_Smoke->binding->callMethod(5441, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QObject::setProperty(x1, x2);
    }
    virtual void setReadOnly(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(4199, (void*)this, x)) return;
	this->QLineEdit::setReadOnly(x1);
    }
    virtual void setResolution(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = x1;
	if(qt_Smoke->binding->callMethod(5563, (void*)this, x)) return;
	this->QPaintDevice::setResolution(x1);
    }
    virtual void setSelection(int x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_int = x1;
	x[2].s_int = x2;
	if(qt_Smoke->binding->callMethod(4203, (void*)this, x)) return;
	this->QLineEdit::setSelection(x1, x2);
    }
    virtual void setSizeIncrement(int x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_int = x1;
	x[2].s_int = x2;
	if(qt_Smoke->binding->callMethod(9608, (void*)this, x)) return;
	this->QWidget::setSizeIncrement(x1, x2);
    }
    virtual void setSizePolicy(QSizePolicy x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(9690, (void*)this, x)) return;
	this->QWidget::setSizePolicy(x1);
    }
    virtual void setText(const QString& x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)&x1;
	if(qt_Smoke->binding->callMethod(4188, (void*)this, x)) return;
	this->QLineEdit::setText(x1);
    }
    virtual void setUpdatesEnabled(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(9736, (void*)this, x)) return;
	this->QWidget::setUpdatesEnabled(x1);
    }
    virtual void setValidator(const QValidator* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(4200, (void*)this, x)) return;
	this->QLineEdit::setValidator(x1);
    }
    virtual void setWFlags(Qt::WFlags x1) {
	Smoke::StackItem x[2];
	x[1].s_int = x1;
	if(qt_Smoke->binding->callMethod(9818, (void*)this, x)) return;
	this->QWidget::setWFlags(x1);
    }
    virtual void setWState(uint x1) {
	Smoke::StackItem x[2];
	x[1].s_uint = x1;
	if(qt_Smoke->binding->callMethod(9815, (void*)this, x)) return;
	this->QWidget::setWState(x1);
    }
    virtual void show() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(9748, (void*)this, x)) return;
	this->QWidget::show();
    }
    virtual void showEvent(QShowEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(9797, (void*)this, x)) return;
	this->QWidget::showEvent(x1);
    }
    virtual void showMaximized() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(9752, (void*)this, x)) return;
	this->QWidget::showMaximized();
    }
    virtual void showMinimized() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(9751, (void*)this, x)) return;
	this->QWidget::showMinimized();
    }
    virtual void showNormal() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(9754, (void*)this, x)) return;
	this->QWidget::showNormal();
    }
    virtual QSize sizeHint() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(4158, (void*)this, x)) {
	    QSize *xptr = (QSize *)x[0].s_class;
	    QSize xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QLineEdit::sizeHint();
    }
    virtual QSizePolicy sizePolicy() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(9689, (void*)this, x)) {
	    QSizePolicy *xptr = (QSizePolicy *)x[0].s_class;
	    QSizePolicy xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QWidget::sizePolicy();
    }
    virtual void styleChange(QStyle& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(9800, (void*)this, x)) return;
	this->QWidget::styleChange(x1);
    }
    virtual void tabletEvent(QTabletEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(9792, (void*)this, x)) return;
	this->QWidget::tabletEvent(x1);
    }
    virtual void timerEvent(QTimerEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(5465, (void*)this, x)) return;
	this->QObject::timerEvent(x1);
    }
    virtual void undo() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(4194, (void*)this, x)) return;
	this->QLineEdit::undo();
    }
    virtual void unsetCursor() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(9652, (void*)this, x)) return;
	this->QWidget::unsetCursor();
    }
    virtual void updateMask() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(9799, (void*)this, x)) return;
	this->QWidget::updateMask();
    }
    virtual void wheelEvent(QWheelEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(9777, (void*)this, x)) return;
	this->QWidget::wheelEvent(x1);
    }
    virtual void windowActivationChange(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(4233, (void*)this, x)) return;
	this->QLineEdit::windowActivationChange(x1);
    }
    ~x_QLineEdit() { qt_Smoke->binding->deleted(178, (void*)this); }
};
void xcall_QLineEdit(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QLineEdit *xself = (x_QLineEdit*)obj;
    switch(xi) {
	case 0: x_QLineEdit::x_0(args);	break;
	case 1: x_QLineEdit::x_1(args);	break;
	case 2: x_QLineEdit::x_2(args);	break;
	case 3: x_QLineEdit::x_3(args);	break;
	case 4: x_QLineEdit::x_4(args);	break;
	case 5: x_QLineEdit::x_5(args);	break;
	case 6: x_QLineEdit::x_6(args);	break;
	case 7: xself->x_7(args);	break;
	case 8: xself->x_8(args);	break;
	case 9: xself->x_9(args);	break;
	case 10: xself->x_10(args);	break;
	case 11: xself->x_11(args);	break;
	case 12: xself->x_12(args);	break;
	case 13: xself->x_13(args);	break;
	case 14: xself->x_14(args);	break;
	case 15: xself->x_15(args);	break;
	case 16: xself->x_16(args);	break;
	case 17: xself->x_17(args);	break;
	case 18: xself->x_18(args);	break;
	case 19: xself->x_19(args);	break;
	case 20: xself->x_20(args);	break;
	case 21: xself->x_21(args);	break;
	case 22: xself->x_22(args);	break;
	case 23: xself->x_23(args);	break;
	case 24: xself->x_24(args);	break;
	case 25: xself->x_25(args);	break;
	case 26: xself->x_26(args);	break;
	case 27: xself->x_27(args);	break;
	case 28: xself->x_28(args);	break;
	case 29: xself->x_29(args);	break;
	case 30: xself->x_30(args);	break;
	case 31: xself->x_31(args);	break;
	case 32: xself->x_32(args);	break;
	case 33: xself->x_33(args);	break;
	case 34: xself->x_34(args);	break;
	case 35: xself->x_35(args);	break;
	case 36: xself->x_36(args);	break;
	case 37: xself->x_37(args);	break;
	case 38: xself->x_38(args);	break;
	case 39: xself->x_39(args);	break;
	case 40: xself->x_40(args);	break;
	case 41: xself->x_41(args);	break;
	case 42: xself->x_42(args);	break;
	case 43: xself->x_43(args);	break;
	case 44: xself->x_44(args);	break;
	case 45: xself->x_45(args);	break;
	case 46: xself->x_46(args);	break;
	case 47: xself->x_47(args);	break;
	case 48: xself->x_48(args);	break;
	case 49: xself->x_49(args);	break;
	case 50: xself->x_50(args);	break;
	case 51: xself->x_51(args);	break;
	case 52: xself->x_52(args);	break;
	case 53: xself->x_53(args);	break;
	case 54: xself->x_54(args);	break;
	case 55: xself->x_55(args);	break;
	case 56: xself->x_56(args);	break;
	case 57: xself->x_57(args);	break;
	case 58: xself->x_58(args);	break;
	case 59: xself->x_59(args);	break;
	case 60: xself->x_60(args);	break;
	case 61: xself->x_61(args);	break;
	case 62: xself->x_62(args);	break;
	case 63: xself->x_63(args);	break;
	case 64: xself->x_64(args);	break;
	case 65: xself->x_65(args);	break;
	case 66: xself->x_66(args);	break;
	case 67: xself->x_67(args);	break;
	case 68: xself->x_68(args);	break;
	case 69: xself->x_69(args);	break;
	case 70: xself->x_70(args);	break;
	case 71: xself->x_71(args);	break;
	case 72: xself->x_72(args);	break;
	case 73: xself->x_73(args);	break;
	case 74: xself->x_74(args);	break;
	case 75: xself->x_75(args);	break;
	case 76: xself->x_76(args);	break;
	case 77: xself->x_77(args);	break;
	case 78: xself->x_78(args);	break;
	case 79: xself->x_79(args);	break;
	case 80: xself->x_80(args);	break;
	case 81: xself->x_81(args);	break;
	case 82: xself->x_82(args);	break;
	case 83: xself->x_83(args);	break;
	case 84: xself->x_84(args);	break;
	case 85: xself->x_85(args);	break;
	case 86: xself->x_86(args);	break;
	case 87: xself->x_87(args);	break;
	case 88: xself->x_88(args);	break;
	case 89: xself->x_89(args);	break;
	case 90: delete (QLineEdit*)xself;	break;
    }
}
