//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke.h>
#include <qt_smoke.h>
#include <qfontdialog.h>
#include <qfont.h>
#include <qstring.h>

class x_QFontDialog {
private:
    QFontDialog *xthis;
public:
    x_QFontDialog(void *x) : xthis((QFontDialog*)x) {}
    void x_0(Smoke::Stack x) const {
	// metaObject()
	QMetaObject* xret = xthis->QFontDialog::metaObject();
	x[0].s_class = (void*)xret;
    }
    void x_1(Smoke::Stack x) const {
	// className()
	const char* xret = xthis->QFontDialog::className();
	x[0].s_voidp = (void*)xret;
    }
    void x_2(Smoke::Stack x) {
	// qt_cast(const char*)
	void* xret = xthis->QFontDialog::qt_cast((const char*)x[1].s_voidp);
	x[0].s_voidp = (void*)xret;
    }
    void x_3(Smoke::Stack x) {
	// qt_invoke(int, QUObject*)
	bool xret = xthis->QFontDialog::qt_invoke((int)x[1].s_int,(QUObject*)x[2].s_voidp);
	x[0].s_bool = xret;
    }
    void x_4(Smoke::Stack x) {
	// qt_emit(int, QUObject*)
	bool xret = xthis->QFontDialog::qt_emit((int)x[1].s_int,(QUObject*)x[2].s_voidp);
	x[0].s_bool = xret;
    }
    void x_5(Smoke::Stack x) {
	// qt_property(int, int, QVariant*)
	bool xret = xthis->QFontDialog::qt_property((int)x[1].s_int,(int)x[2].s_int,(QVariant*)x[3].s_class);
	x[0].s_bool = xret;
    }
    void x_6(Smoke::Stack x) {
	// qObject()
	QObject* xret = xthis->QFontDialog::qObject();
	x[0].s_class = (void*)xret;
    }
    static void x_7(Smoke::Stack x) {
	// staticMetaObject()
	QMetaObject* xret = QFontDialog::staticMetaObject();
	x[0].s_class = (void*)xret;
    }
    static void x_8(Smoke::Stack x) {
	// tr(const char*, const char*)
	QString xret = QFontDialog::tr((const char*)x[1].s_voidp,(const char*)x[2].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    static void x_9(Smoke::Stack x) {
	// tr(const char*)
	QString xret = QFontDialog::tr((const char*)x[1].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    static void x_10(Smoke::Stack x) {
	// trUtf8(const char*, const char*)
	QString xret = QFontDialog::trUtf8((const char*)x[1].s_voidp,(const char*)x[2].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    static void x_11(Smoke::Stack x) {
	// trUtf8(const char*)
	QString xret = QFontDialog::trUtf8((const char*)x[1].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    static void x_12(Smoke::Stack x) {
	// getFont(bool*, const QFont&, QWidget*, const char*)
	QFont xret = QFontDialog::getFont((bool*)x[1].s_voidp,*(const QFont *)x[2].s_class,(QWidget*)x[3].s_class,(const char*)x[4].s_voidp);
	x[0].s_class = (void*)new QFont(xret);
    }
    static void x_13(Smoke::Stack x) {
	// getFont(bool*, const QFont&, QWidget*)
	QFont xret = QFontDialog::getFont((bool*)x[1].s_voidp,*(const QFont *)x[2].s_class,(QWidget*)x[3].s_class);
	x[0].s_class = (void*)new QFont(xret);
    }
    static void x_14(Smoke::Stack x) {
	// getFont(bool*, const QFont&)
	QFont xret = QFontDialog::getFont((bool*)x[1].s_voidp,*(const QFont *)x[2].s_class);
	x[0].s_class = (void*)new QFont(xret);
    }
    static void x_15(Smoke::Stack x) {
	// getFont(bool*, QWidget*, const char*)
	QFont xret = QFontDialog::getFont((bool*)x[1].s_voidp,(QWidget*)x[2].s_class,(const char*)x[3].s_voidp);
	x[0].s_class = (void*)new QFont(xret);
    }
    static void x_16(Smoke::Stack x) {
	// getFont(bool*, QWidget*)
	QFont xret = QFontDialog::getFont((bool*)x[1].s_voidp,(QWidget*)x[2].s_class);
	x[0].s_class = (void*)new QFont(xret);
    }
    static void x_17(Smoke::Stack x) {
	// getFont(bool*)
	QFont xret = QFontDialog::getFont((bool*)x[1].s_voidp);
	x[0].s_class = (void*)new QFont(xret);
    }
    ~x_QFontDialog() { qt_Smoke->binding->deleted(117, (void*)this); }
};
void xcall_QFontDialog(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QFontDialog xtmp(obj), *xself = &xtmp;
    switch(xi) {
	case 0: xself->x_0(args);	break;
	case 1: xself->x_1(args);	break;
	case 2: xself->x_2(args);	break;
	case 3: xself->x_3(args);	break;
	case 4: xself->x_4(args);	break;
	case 5: xself->x_5(args);	break;
	case 6: xself->x_6(args);	break;
	case 7: x_QFontDialog::x_7(args);	break;
	case 8: x_QFontDialog::x_8(args);	break;
	case 9: x_QFontDialog::x_9(args);	break;
	case 10: x_QFontDialog::x_10(args);	break;
	case 11: x_QFontDialog::x_11(args);	break;
	case 12: x_QFontDialog::x_12(args);	break;
	case 13: x_QFontDialog::x_13(args);	break;
	case 14: x_QFontDialog::x_14(args);	break;
	case 15: x_QFontDialog::x_15(args);	break;
	case 16: x_QFontDialog::x_16(args);	break;
	case 17: x_QFontDialog::x_17(args);	break;
    }
}
