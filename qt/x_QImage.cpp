//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qpoint.h>
#include <qimage.h>
#include <qcstring.h>
#include <qstring.h>
#include <qstrlist.h>
#include <qsize.h>
#include <qwmatrix.h>
#include <qpixmap.h>
#include <qrect.h>
#include <qwindowdefs.h>
#include <qstringlist.h>

class x_QImage : public QImage {
public:
    static void x_0(xargs *x) {
	x[0].x_long = (long)QImage::IgnoreEndian;
    }
    static void x_1(xargs *x) {
	x[0].x_long = (long)QImage::BigEndian;
    }
    static void x_2(xargs *x) {
	x[0].x_long = (long)QImage::LittleEndian;
    }
    static void x_3(xargs *x) {
	x[0].x_long = (long)QImage::ScaleFree;
    }
    static void x_4(xargs *x) {
	x[0].x_long = (long)QImage::ScaleMin;
    }
    static void x_5(xargs *x) {
	x[0].x_long = (long)QImage::ScaleMax;
    }
    static void x_6(xargs *x) {
	// QImage()
	x_QImage* xret = new x_QImage();
	x[0].x_voidp = (void*)xret;
    }
    x_QImage() : QImage() {
    }
    static void x_7(xargs *x) {
	// QImage(int, int, int, int, QImage::Endian)
	x_QImage* xret = new x_QImage((int)x[1].x_int,(int)x[2].x_int,(int)x[3].x_int,(int)x[4].x_int,(QImage::Endian)x[5].x_long);
	x[0].x_voidp = (void*)xret;
    }
    x_QImage(int x1, int x2, int x3, int x4, QImage::Endian x5) : QImage(x1, x2, x3, x4, x5) {
    }
    static void x_8(xargs *x) {
	// QImage(int, int, int, int)
	x_QImage* xret = new x_QImage((int)x[1].x_int,(int)x[2].x_int,(int)x[3].x_int,(int)x[4].x_int);
	x[0].x_voidp = (void*)xret;
    }
    x_QImage(int x1, int x2, int x3, int x4) : QImage(x1, x2, x3, x4) {
    }
    static void x_9(xargs *x) {
	// QImage(int, int, int)
	x_QImage* xret = new x_QImage((int)x[1].x_int,(int)x[2].x_int,(int)x[3].x_int);
	x[0].x_voidp = (void*)xret;
    }
    x_QImage(int x1, int x2, int x3) : QImage(x1, x2, x3) {
    }
    static void x_10(xargs *x) {
	// QImage(const QSize&, int, int, QImage::Endian)
	x_QImage* xret = new x_QImage(*(const QSize *)x[1].x_voidp,(int)x[2].x_int,(int)x[3].x_int,(QImage::Endian)x[4].x_long);
	x[0].x_voidp = (void*)xret;
    }
    x_QImage(const QSize& x1, int x2, int x3, QImage::Endian x4) : QImage(x1, x2, x3, x4) {
    }
    static void x_11(xargs *x) {
	// QImage(const QSize&, int, int)
	x_QImage* xret = new x_QImage(*(const QSize *)x[1].x_voidp,(int)x[2].x_int,(int)x[3].x_int);
	x[0].x_voidp = (void*)xret;
    }
    x_QImage(const QSize& x1, int x2, int x3) : QImage(x1, x2, x3) {
    }
    static void x_12(xargs *x) {
	// QImage(const QSize&, int)
	x_QImage* xret = new x_QImage(*(const QSize *)x[1].x_voidp,(int)x[2].x_int);
	x[0].x_voidp = (void*)xret;
    }
    x_QImage(const QSize& x1, int x2) : QImage(x1, x2) {
    }
    static void x_13(xargs *x) {
	// QImage(const QString&, const char*)
	x_QImage* xret = new x_QImage(*(const QString *)x[1].x_voidp,(const char*)x[2].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QImage(const QString& x1, const char* x2) : QImage(x1, x2) {
    }
    static void x_14(xargs *x) {
	// QImage(const QString&)
	x_QImage* xret = new x_QImage(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QImage(const QString& x1) : QImage(x1) {
    }
    static void x_15(xargs *x) {
	// QImage(const char* const*)
	x_QImage* xret = new x_QImage((const char* const*)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QImage(const char* const* x1) : QImage(x1) {
    }
    static void x_16(xargs *x) {
	// QImage(const QByteArray&)
	x_QImage* xret = new x_QImage(*(const QByteArray *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QImage(const QByteArray& x1) : QImage(x1) {
    }
    static void x_17(xargs *x) {
	// QImage(uchar*, int, int, int, QRgb*, int, QImage::Endian)
	x_QImage* xret = new x_QImage((uchar*)x[1].x_voidp,(int)x[2].x_int,(int)x[3].x_int,(int)x[4].x_int,(QRgb*)x[5].x_voidp,(int)x[6].x_int,(QImage::Endian)x[7].x_long);
	x[0].x_voidp = (void*)xret;
    }
    x_QImage(uchar* x1, int x2, int x3, int x4, QRgb* x5, int x6, QImage::Endian x7) : QImage(x1, x2, x3, x4, x5, x6, x7) {
    }
    static void x_18(xargs *x) {
	// QImage(const QImage&)
	x_QImage* xret = new x_QImage(*(const QImage *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QImage(const QImage& x1) : QImage(x1) {
    }
    void x_19(xargs *x) {
	// operator=(const QImage&)
	QImage& xret = this->QImage::operator=(*(const QImage *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_20(xargs *x) {
	// operator=(const QPixmap&)
	QImage& xret = this->QImage::operator=(*(const QPixmap *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_21(xargs *x) const {
	// operator==(const QImage&)
	bool xret = this->QImage::operator==(*(const QImage *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_22(xargs *x) const {
	// operator!=(const QImage&)
	bool xret = this->QImage::operator!=(*(const QImage *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_23(xargs *x) {
	// detach()
	this->QImage::detach();
    }
    void x_24(xargs *x) const {
	// copy()
	QImage xret = this->QImage::copy();
	x[0].x_voidp = (void*)new QImage(xret);
    }
    void x_25(xargs *x) const {
	// copy(int, int, int, int, int)
	QImage xret = this->QImage::copy((int)x[1].x_int,(int)x[2].x_int,(int)x[3].x_int,(int)x[4].x_int,(int)x[5].x_int);
	x[0].x_voidp = (void*)new QImage(xret);
    }
    void x_26(xargs *x) const {
	// copy(int, int, int, int)
	QImage xret = this->QImage::copy((int)x[1].x_int,(int)x[2].x_int,(int)x[3].x_int,(int)x[4].x_int);
	x[0].x_voidp = (void*)new QImage(xret);
    }
    void x_27(xargs *x) const {
	// copy(const QRect&)
	QImage xret = this->QImage::copy(*(const QRect *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QImage(xret);
    }
    void x_28(xargs *x) const {
	// isNull()
	bool xret = this->QImage::isNull();
	x[0].x_bool = (bool)xret;
    }
    void x_29(xargs *x) const {
	// width()
	int xret = this->QImage::width();
	x[0].x_int = (int)xret;
    }
    void x_30(xargs *x) const {
	// height()
	int xret = this->QImage::height();
	x[0].x_int = (int)xret;
    }
    void x_31(xargs *x) const {
	// size()
	QSize xret = this->QImage::size();
	x[0].x_voidp = (void*)new QSize(xret);
    }
    void x_32(xargs *x) const {
	// rect()
	QRect xret = this->QImage::rect();
	x[0].x_voidp = (void*)new QRect(xret);
    }
    void x_33(xargs *x) const {
	// depth()
	int xret = this->QImage::depth();
	x[0].x_int = (int)xret;
    }
    void x_34(xargs *x) const {
	// numColors()
	int xret = this->QImage::numColors();
	x[0].x_int = (int)xret;
    }
    void x_35(xargs *x) const {
	// bitOrder()
	QImage::Endian xret = this->QImage::bitOrder();
	x[0].x_long = (long)xret;
    }
    void x_36(xargs *x) const {
	// color(int)
	QRgb xret = this->QImage::color((int)x[1].x_int);
	x[0].x_voidp = (void*)new QRgb(xret);
    }
    void x_37(xargs *x) {
	// setColor(int, QRgb)
	this->QImage::setColor((int)x[1].x_int,*(QRgb *)x[2].x_voidp);
    }
    void x_38(xargs *x) {
	// setNumColors(int)
	this->QImage::setNumColors((int)x[1].x_int);
    }
    void x_39(xargs *x) const {
	// hasAlphaBuffer()
	bool xret = this->QImage::hasAlphaBuffer();
	x[0].x_bool = (bool)xret;
    }
    void x_40(xargs *x) {
	// setAlphaBuffer(bool)
	this->QImage::setAlphaBuffer((bool)x[1].x_bool);
    }
    void x_41(xargs *x) const {
	// allGray()
	bool xret = this->QImage::allGray();
	x[0].x_bool = (bool)xret;
    }
    void x_42(xargs *x) const {
	// isGrayscale()
	bool xret = this->QImage::isGrayscale();
	x[0].x_bool = (bool)xret;
    }
    void x_43(xargs *x) const {
	// bits()
	uchar* xret = this->QImage::bits();
	x[0].x_voidp = (void*)xret;
    }
    void x_44(xargs *x) const {
	// scanLine(int)
	uchar* xret = this->QImage::scanLine((int)x[1].x_int);
	x[0].x_voidp = (void*)xret;
    }
    void x_45(xargs *x) const {
	// jumpTable()
	uchar** xret = this->QImage::jumpTable();
	x[0].x_voidp = (void*)xret;
    }
    void x_46(xargs *x) const {
	// colorTable()
	QRgb* xret = this->QImage::colorTable();
	x[0].x_voidp = (void*)xret;
    }
    void x_47(xargs *x) const {
	// numBytes()
	int xret = this->QImage::numBytes();
	x[0].x_int = (int)xret;
    }
    void x_48(xargs *x) const {
	// bytesPerLine()
	int xret = this->QImage::bytesPerLine();
	x[0].x_int = (int)xret;
    }
    void x_49(xargs *x) {
	// create(int, int, int, int, QImage::Endian)
	bool xret = this->QImage::create((int)x[1].x_int,(int)x[2].x_int,(int)x[3].x_int,(int)x[4].x_int,(QImage::Endian)x[5].x_long);
	x[0].x_bool = (bool)xret;
    }
    void x_50(xargs *x) {
	// create(int, int, int, int)
	bool xret = this->QImage::create((int)x[1].x_int,(int)x[2].x_int,(int)x[3].x_int,(int)x[4].x_int);
	x[0].x_bool = (bool)xret;
    }
    void x_51(xargs *x) {
	// create(int, int, int)
	bool xret = this->QImage::create((int)x[1].x_int,(int)x[2].x_int,(int)x[3].x_int);
	x[0].x_bool = (bool)xret;
    }
    void x_52(xargs *x) {
	// create(const QSize&, int, int, QImage::Endian)
	bool xret = this->QImage::create(*(const QSize *)x[1].x_voidp,(int)x[2].x_int,(int)x[3].x_int,(QImage::Endian)x[4].x_long);
	x[0].x_bool = (bool)xret;
    }
    void x_53(xargs *x) {
	// create(const QSize&, int, int)
	bool xret = this->QImage::create(*(const QSize *)x[1].x_voidp,(int)x[2].x_int,(int)x[3].x_int);
	x[0].x_bool = (bool)xret;
    }
    void x_54(xargs *x) {
	// create(const QSize&, int)
	bool xret = this->QImage::create(*(const QSize *)x[1].x_voidp,(int)x[2].x_int);
	x[0].x_bool = (bool)xret;
    }
    void x_55(xargs *x) {
	// reset()
	this->QImage::reset();
    }
    void x_56(xargs *x) {
	// fill(uint)
	this->QImage::fill((uint)x[1].x_uint);
    }
    void x_57(xargs *x) {
	// invertPixels(bool)
	this->QImage::invertPixels((bool)x[1].x_bool);
    }
    void x_58(xargs *x) {
	// invertPixels()
	this->QImage::invertPixels();
    }
    void x_59(xargs *x) const {
	// convertDepth(int)
	QImage xret = this->QImage::convertDepth((int)x[1].x_int);
	x[0].x_voidp = (void*)new QImage(xret);
    }
    void x_60(xargs *x) const {
	// convertDepthWithPalette(int, QRgb*, int, int)
	QImage xret = this->QImage::convertDepthWithPalette((int)x[1].x_int,(QRgb*)x[2].x_voidp,(int)x[3].x_int,(int)x[4].x_int);
	x[0].x_voidp = (void*)new QImage(xret);
    }
    void x_61(xargs *x) const {
	// convertDepthWithPalette(int, QRgb*, int)
	QImage xret = this->QImage::convertDepthWithPalette((int)x[1].x_int,(QRgb*)x[2].x_voidp,(int)x[3].x_int);
	x[0].x_voidp = (void*)new QImage(xret);
    }
    void x_62(xargs *x) const {
	// convertDepth(int, int)
	QImage xret = this->QImage::convertDepth((int)x[1].x_int,(int)x[2].x_int);
	x[0].x_voidp = (void*)new QImage(xret);
    }
    void x_63(xargs *x) const {
	// convertBitOrder(QImage::Endian)
	QImage xret = this->QImage::convertBitOrder((QImage::Endian)x[1].x_long);
	x[0].x_voidp = (void*)new QImage(xret);
    }
    void x_64(xargs *x) const {
	// smoothScale(int, int, QImage::ScaleMode)
	QImage xret = this->QImage::smoothScale((int)x[1].x_int,(int)x[2].x_int,(QImage::ScaleMode)x[3].x_long);
	x[0].x_voidp = (void*)new QImage(xret);
    }
    void x_65(xargs *x) const {
	// smoothScale(int, int)
	QImage xret = this->QImage::smoothScale((int)x[1].x_int,(int)x[2].x_int);
	x[0].x_voidp = (void*)new QImage(xret);
    }
    void x_66(xargs *x) const {
	// smoothScale(const QSize&, QImage::ScaleMode)
	QImage xret = this->QImage::smoothScale(*(const QSize *)x[1].x_voidp,(QImage::ScaleMode)x[2].x_long);
	x[0].x_voidp = (void*)new QImage(xret);
    }
    void x_67(xargs *x) const {
	// smoothScale(const QSize&)
	QImage xret = this->QImage::smoothScale(*(const QSize *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QImage(xret);
    }
    void x_68(xargs *x) const {
	// scale(int, int, QImage::ScaleMode)
	QImage xret = this->QImage::scale((int)x[1].x_int,(int)x[2].x_int,(QImage::ScaleMode)x[3].x_long);
	x[0].x_voidp = (void*)new QImage(xret);
    }
    void x_69(xargs *x) const {
	// scale(int, int)
	QImage xret = this->QImage::scale((int)x[1].x_int,(int)x[2].x_int);
	x[0].x_voidp = (void*)new QImage(xret);
    }
    void x_70(xargs *x) const {
	// scale(const QSize&, QImage::ScaleMode)
	QImage xret = this->QImage::scale(*(const QSize *)x[1].x_voidp,(QImage::ScaleMode)x[2].x_long);
	x[0].x_voidp = (void*)new QImage(xret);
    }
    void x_71(xargs *x) const {
	// scale(const QSize&)
	QImage xret = this->QImage::scale(*(const QSize *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QImage(xret);
    }
    void x_72(xargs *x) const {
	// scaleWidth(int)
	QImage xret = this->QImage::scaleWidth((int)x[1].x_int);
	x[0].x_voidp = (void*)new QImage(xret);
    }
    void x_73(xargs *x) const {
	// scaleHeight(int)
	QImage xret = this->QImage::scaleHeight((int)x[1].x_int);
	x[0].x_voidp = (void*)new QImage(xret);
    }
    void x_74(xargs *x) const {
	// xForm(const QWMatrix&)
	QImage xret = this->QImage::xForm(*(const QWMatrix *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QImage(xret);
    }
    void x_75(xargs *x) const {
	// createAlphaMask(int)
	QImage xret = this->QImage::createAlphaMask((int)x[1].x_int);
	x[0].x_voidp = (void*)new QImage(xret);
    }
    void x_76(xargs *x) const {
	// createAlphaMask()
	QImage xret = this->QImage::createAlphaMask();
	x[0].x_voidp = (void*)new QImage(xret);
    }
    void x_77(xargs *x) const {
	// createHeuristicMask(bool)
	QImage xret = this->QImage::createHeuristicMask((bool)x[1].x_bool);
	x[0].x_voidp = (void*)new QImage(xret);
    }
    void x_78(xargs *x) const {
	// createHeuristicMask()
	QImage xret = this->QImage::createHeuristicMask();
	x[0].x_voidp = (void*)new QImage(xret);
    }
    void x_79(xargs *x) const {
	// mirror()
	QImage xret = this->QImage::mirror();
	x[0].x_voidp = (void*)new QImage(xret);
    }
    void x_80(xargs *x) const {
	// mirror(bool, bool)
	QImage xret = this->QImage::mirror((bool)x[1].x_bool,(bool)x[2].x_bool);
	x[0].x_voidp = (void*)new QImage(xret);
    }
    void x_81(xargs *x) const {
	// swapRGB()
	QImage xret = this->QImage::swapRGB();
	x[0].x_voidp = (void*)new QImage(xret);
    }
    void x_82(xargs *x) {
	// load(const QString&, const char*)
	bool xret = this->QImage::load(*(const QString *)x[1].x_voidp,(const char*)x[2].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_83(xargs *x) {
	// load(const QString&)
	bool xret = this->QImage::load(*(const QString *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_84(xargs *x) {
	// loadFromData(const uchar*, uint, const char*)
	bool xret = this->QImage::loadFromData((const uchar*)x[1].x_voidp,(uint)x[2].x_uint,(const char*)x[3].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_85(xargs *x) {
	// loadFromData(const uchar*, uint)
	bool xret = this->QImage::loadFromData((const uchar*)x[1].x_voidp,(uint)x[2].x_uint);
	x[0].x_bool = (bool)xret;
    }
    void x_86(xargs *x) {
	// loadFromData(QByteArray, const char*)
	bool xret = this->QImage::loadFromData(*(QByteArray *)x[1].x_voidp,(const char*)x[2].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_87(xargs *x) {
	// loadFromData(QByteArray)
	bool xret = this->QImage::loadFromData(*(QByteArray *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_88(xargs *x) const {
	// save(const QString&, const char*, int)
	bool xret = this->QImage::save(*(const QString *)x[1].x_voidp,(const char*)x[2].x_voidp,(int)x[3].x_int);
	x[0].x_bool = (bool)xret;
    }
    void x_89(xargs *x) const {
	// save(const QString&, const char*)
	bool xret = this->QImage::save(*(const QString *)x[1].x_voidp,(const char*)x[2].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_90(xargs *x) const {
	// valid(int, int)
	bool xret = this->QImage::valid((int)x[1].x_int,(int)x[2].x_int);
	x[0].x_bool = (bool)xret;
    }
    void x_91(xargs *x) const {
	// pixelIndex(int, int)
	int xret = this->QImage::pixelIndex((int)x[1].x_int,(int)x[2].x_int);
	x[0].x_int = (int)xret;
    }
    void x_92(xargs *x) const {
	// pixel(int, int)
	QRgb xret = this->QImage::pixel((int)x[1].x_int,(int)x[2].x_int);
	x[0].x_voidp = (void*)new QRgb(xret);
    }
    void x_93(xargs *x) {
	// setPixel(int, int, uint)
	this->QImage::setPixel((int)x[1].x_int,(int)x[2].x_int,(uint)x[3].x_uint);
    }
    void x_94(xargs *x) const {
	// dotsPerMeterX()
	int xret = this->QImage::dotsPerMeterX();
	x[0].x_int = (int)xret;
    }
    void x_95(xargs *x) const {
	// dotsPerMeterY()
	int xret = this->QImage::dotsPerMeterY();
	x[0].x_int = (int)xret;
    }
    void x_96(xargs *x) {
	// setDotsPerMeterX(int)
	this->QImage::setDotsPerMeterX((int)x[1].x_int);
    }
    void x_97(xargs *x) {
	// setDotsPerMeterY(int)
	this->QImage::setDotsPerMeterY((int)x[1].x_int);
    }
    void x_98(xargs *x) const {
	// offset()
	QPoint xret = this->QImage::offset();
	x[0].x_voidp = (void*)new QPoint(xret);
    }
    void x_99(xargs *x) {
	// setOffset(const QPoint&)
	this->QImage::setOffset(*(const QPoint *)x[1].x_voidp);
    }
    void x_100(xargs *x) const {
	// textList()
	QValueList<QImageTextKeyLang> xret = this->QImage::textList();
	x[0].x_voidp = (void*)new QValueList<QImageTextKeyLang>(xret);
    }
    void x_101(xargs *x) const {
	// textLanguages()
	QStringList xret = this->QImage::textLanguages();
	x[0].x_voidp = (void*)new QStringList(xret);
    }
    void x_102(xargs *x) const {
	// textKeys()
	QStringList xret = this->QImage::textKeys();
	x[0].x_voidp = (void*)new QStringList(xret);
    }
    void x_103(xargs *x) const {
	// text(const char*, const char*)
	QString xret = this->QImage::text((const char*)x[1].x_voidp,(const char*)x[2].x_voidp);
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_104(xargs *x) const {
	// text(const char*)
	QString xret = this->QImage::text((const char*)x[1].x_voidp);
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_105(xargs *x) const {
	// text(const QImageTextKeyLang&)
	QString xret = this->QImage::text(*(const QImageTextKeyLang *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_106(xargs *x) {
	// setText(const char*, const char*, const QString&)
	this->QImage::setText((const char*)x[1].x_voidp,(const char*)x[2].x_voidp,*(const QString *)x[3].x_voidp);
    }
    static void x_107(xargs *x) {
	// systemBitOrder()
	QImage::Endian xret = QImage::systemBitOrder();
	x[0].x_long = (long)xret;
    }
    static void x_108(xargs *x) {
	// systemByteOrder()
	QImage::Endian xret = QImage::systemByteOrder();
	x[0].x_long = (long)xret;
    }
    static void x_109(xargs *x) {
	// imageFormat(const QString&)
	const char* xret = QImage::imageFormat(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    static void x_110(xargs *x) {
	// inputFormats()
	QStrList xret = QImage::inputFormats();
	x[0].x_voidp = (void*)new QStrList(xret);
    }
    static void x_111(xargs *x) {
	// outputFormats()
	QStrList xret = QImage::outputFormats();
	x[0].x_voidp = (void*)new QStrList(xret);
    }
    static void x_112(xargs *x) {
	// inputFormatList()
	QStringList xret = QImage::inputFormatList();
	x[0].x_voidp = (void*)new QStringList(xret);
    }
    static void x_113(xargs *x) {
	// outputFormatList()
	QStringList xret = QImage::outputFormatList();
	x[0].x_voidp = (void*)new QStringList(xret);
    }
    ~x_QImage() {}
};
void xcall_QImage(xargs *x, void *s, int xi) {
    x_QImage *xself = (x_QImage*)s;
    switch(xi) {
	case 0: x_QImage::x_0(x);	break;
	case 1: x_QImage::x_1(x);	break;
	case 2: x_QImage::x_2(x);	break;
	case 3: x_QImage::x_3(x);	break;
	case 4: x_QImage::x_4(x);	break;
	case 5: x_QImage::x_5(x);	break;
	case 6: x_QImage::x_6(x);	break;
	case 7: x_QImage::x_7(x);	break;
	case 8: x_QImage::x_8(x);	break;
	case 9: x_QImage::x_9(x);	break;
	case 10: x_QImage::x_10(x);	break;
	case 11: x_QImage::x_11(x);	break;
	case 12: x_QImage::x_12(x);	break;
	case 13: x_QImage::x_13(x);	break;
	case 14: x_QImage::x_14(x);	break;
	case 15: x_QImage::x_15(x);	break;
	case 16: x_QImage::x_16(x);	break;
	case 17: x_QImage::x_17(x);	break;
	case 18: x_QImage::x_18(x);	break;
	case 19: xself->x_19(x);	break;
	case 20: xself->x_20(x);	break;
	case 21: xself->x_21(x);	break;
	case 22: xself->x_22(x);	break;
	case 23: xself->x_23(x);	break;
	case 24: xself->x_24(x);	break;
	case 25: xself->x_25(x);	break;
	case 26: xself->x_26(x);	break;
	case 27: xself->x_27(x);	break;
	case 28: xself->x_28(x);	break;
	case 29: xself->x_29(x);	break;
	case 30: xself->x_30(x);	break;
	case 31: xself->x_31(x);	break;
	case 32: xself->x_32(x);	break;
	case 33: xself->x_33(x);	break;
	case 34: xself->x_34(x);	break;
	case 35: xself->x_35(x);	break;
	case 36: xself->x_36(x);	break;
	case 37: xself->x_37(x);	break;
	case 38: xself->x_38(x);	break;
	case 39: xself->x_39(x);	break;
	case 40: xself->x_40(x);	break;
	case 41: xself->x_41(x);	break;
	case 42: xself->x_42(x);	break;
	case 43: xself->x_43(x);	break;
	case 44: xself->x_44(x);	break;
	case 45: xself->x_45(x);	break;
	case 46: xself->x_46(x);	break;
	case 47: xself->x_47(x);	break;
	case 48: xself->x_48(x);	break;
	case 49: xself->x_49(x);	break;
	case 50: xself->x_50(x);	break;
	case 51: xself->x_51(x);	break;
	case 52: xself->x_52(x);	break;
	case 53: xself->x_53(x);	break;
	case 54: xself->x_54(x);	break;
	case 55: xself->x_55(x);	break;
	case 56: xself->x_56(x);	break;
	case 57: xself->x_57(x);	break;
	case 58: xself->x_58(x);	break;
	case 59: xself->x_59(x);	break;
	case 60: xself->x_60(x);	break;
	case 61: xself->x_61(x);	break;
	case 62: xself->x_62(x);	break;
	case 63: xself->x_63(x);	break;
	case 64: xself->x_64(x);	break;
	case 65: xself->x_65(x);	break;
	case 66: xself->x_66(x);	break;
	case 67: xself->x_67(x);	break;
	case 68: xself->x_68(x);	break;
	case 69: xself->x_69(x);	break;
	case 70: xself->x_70(x);	break;
	case 71: xself->x_71(x);	break;
	case 72: xself->x_72(x);	break;
	case 73: xself->x_73(x);	break;
	case 74: xself->x_74(x);	break;
	case 75: xself->x_75(x);	break;
	case 76: xself->x_76(x);	break;
	case 77: xself->x_77(x);	break;
	case 78: xself->x_78(x);	break;
	case 79: xself->x_79(x);	break;
	case 80: xself->x_80(x);	break;
	case 81: xself->x_81(x);	break;
	case 82: xself->x_82(x);	break;
	case 83: xself->x_83(x);	break;
	case 84: xself->x_84(x);	break;
	case 85: xself->x_85(x);	break;
	case 86: xself->x_86(x);	break;
	case 87: xself->x_87(x);	break;
	case 88: xself->x_88(x);	break;
	case 89: xself->x_89(x);	break;
	case 90: xself->x_90(x);	break;
	case 91: xself->x_91(x);	break;
	case 92: xself->x_92(x);	break;
	case 93: xself->x_93(x);	break;
	case 94: xself->x_94(x);	break;
	case 95: xself->x_95(x);	break;
	case 96: xself->x_96(x);	break;
	case 97: xself->x_97(x);	break;
	case 98: xself->x_98(x);	break;
	case 99: xself->x_99(x);	break;
	case 100: xself->x_100(x);	break;
	case 101: xself->x_101(x);	break;
	case 102: xself->x_102(x);	break;
	case 103: xself->x_103(x);	break;
	case 104: xself->x_104(x);	break;
	case 105: xself->x_105(x);	break;
	case 106: xself->x_106(x);	break;
	case 107: x_QImage::x_107(x);	break;
	case 108: x_QImage::x_108(x);	break;
	case 109: x_QImage::x_109(x);	break;
	case 110: x_QImage::x_110(x);	break;
	case 111: x_QImage::x_111(x);	break;
	case 112: x_QImage::x_112(x);	break;
	case 113: x_QImage::x_113(x);	break;
	case 114: delete (QImage*)xself;	break;
    }
}
