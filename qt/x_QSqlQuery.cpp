//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qvariant.h>
#include <qstring.h>
#include <qsqlquery.h>
#include <qsqlerror.h>

class x_QSqlQuery : public QSqlQuery {
public:
    static void x_0(xargs *x) {
	// QSqlQuery(QSqlResult*)
	x_QSqlQuery* xret = new x_QSqlQuery((QSqlResult*)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QSqlQuery(QSqlResult* x1) : QSqlQuery(x1) {
    }
    static void x_1(xargs *x) {
	// QSqlQuery(const QString&, QSqlDatabase*)
	x_QSqlQuery* xret = new x_QSqlQuery(*(const QString *)x[1].x_voidp,(QSqlDatabase*)x[2].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QSqlQuery(const QString& x1, QSqlDatabase* x2) : QSqlQuery(x1, x2) {
    }
    static void x_2(xargs *x) {
	// QSqlQuery(const QString&)
	x_QSqlQuery* xret = new x_QSqlQuery(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QSqlQuery(const QString& x1) : QSqlQuery(x1) {
    }
    static void x_3(xargs *x) {
	// QSqlQuery()
	x_QSqlQuery* xret = new x_QSqlQuery();
	x[0].x_voidp = (void*)xret;
    }
    x_QSqlQuery() : QSqlQuery() {
    }
    static void x_4(xargs *x) {
	// QSqlQuery(const QSqlQuery&)
	x_QSqlQuery* xret = new x_QSqlQuery(*(const QSqlQuery *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QSqlQuery(const QSqlQuery& x1) : QSqlQuery(x1) {
    }
    void x_5(xargs *x) {
	// operator=(const QSqlQuery&)
	QSqlQuery& xret = this->QSqlQuery::operator=(*(const QSqlQuery *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_6(xargs *x) const {
	// isValid()
	bool xret = this->QSqlQuery::isValid();
	x[0].x_bool = (bool)xret;
    }
    void x_7(xargs *x) const {
	// isActive()
	bool xret = this->QSqlQuery::isActive();
	x[0].x_bool = (bool)xret;
    }
    void x_8(xargs *x) const {
	// isNull(int)
	bool xret = this->QSqlQuery::isNull((int)x[1].x_int);
	x[0].x_bool = (bool)xret;
    }
    void x_9(xargs *x) const {
	// at()
	int xret = this->QSqlQuery::at();
	x[0].x_int = (int)xret;
    }
    void x_10(xargs *x) const {
	// lastQuery()
	QString xret = this->QSqlQuery::lastQuery();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_11(xargs *x) const {
	// numRowsAffected()
	int xret = this->QSqlQuery::numRowsAffected();
	x[0].x_int = (int)xret;
    }
    void x_12(xargs *x) const {
	// lastError()
	QSqlError xret = this->QSqlQuery::lastError();
	x[0].x_voidp = (void*)new QSqlError(xret);
    }
    void x_13(xargs *x) const {
	// isSelect()
	bool xret = this->QSqlQuery::isSelect();
	x[0].x_bool = (bool)xret;
    }
    void x_14(xargs *x) const {
	// size()
	int xret = this->QSqlQuery::size();
	x[0].x_int = (int)xret;
    }
    void x_15(xargs *x) const {
	// driver()
	const QSqlDriver* xret = this->QSqlQuery::driver();
	x[0].x_voidp = (void*)xret;
    }
    void x_16(xargs *x) const {
	// result()
	const QSqlResult* xret = this->QSqlQuery::result();
	x[0].x_voidp = (void*)xret;
    }
    void x_17(xargs *x) {
	// exec(const QString&)
	bool xret = this->QSqlQuery::exec(*(const QString *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_18(xargs *x) const {
	// value(int)
	QVariant xret = this->QSqlQuery::value((int)x[1].x_int);
	x[0].x_voidp = (void*)new QVariant(xret);
    }
    void x_19(xargs *x) {
	// seek(int, bool)
	bool xret = this->QSqlQuery::seek((int)x[1].x_int,(bool)x[2].x_bool);
	x[0].x_bool = (bool)xret;
    }
    void x_20(xargs *x) {
	// seek(int)
	bool xret = this->QSqlQuery::seek((int)x[1].x_int);
	x[0].x_bool = (bool)xret;
    }
    void x_21(xargs *x) {
	// next()
	bool xret = this->QSqlQuery::next();
	x[0].x_bool = (bool)xret;
    }
    void x_22(xargs *x) {
	// prev()
	bool xret = this->QSqlQuery::prev();
	x[0].x_bool = (bool)xret;
    }
    void x_23(xargs *x) {
	// first()
	bool xret = this->QSqlQuery::first();
	x[0].x_bool = (bool)xret;
    }
    void x_24(xargs *x) {
	// last()
	bool xret = this->QSqlQuery::last();
	x[0].x_bool = (bool)xret;
    }
    void x_25(xargs *x) {
	// beforeSeek()
	this->QSqlQuery::beforeSeek();
    }
    void x_26(xargs *x) {
	// afterSeek()
	this->QSqlQuery::afterSeek();
    }
    virtual void afterSeek() {
	xargs x[1];
	if(call_method((void*)this, 7541, x)) return;
	this->QSqlQuery::afterSeek();
    }
    virtual void beforeSeek() {
	xargs x[1];
	if(call_method((void*)this, 7540, x)) return;
	this->QSqlQuery::beforeSeek();
    }
    virtual bool exec(const QString& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 7532, x)) return (bool)x[0].x_bool;
	return this->QSqlQuery::exec(x1);
    }
    virtual bool first() {
	xargs x[1];
	if(call_method((void*)this, 7538, x)) return (bool)x[0].x_bool;
	return this->QSqlQuery::first();
    }
    virtual bool last() {
	xargs x[1];
	if(call_method((void*)this, 7539, x)) return (bool)x[0].x_bool;
	return this->QSqlQuery::last();
    }
    virtual bool next() {
	xargs x[1];
	if(call_method((void*)this, 7536, x)) return (bool)x[0].x_bool;
	return this->QSqlQuery::next();
    }
    virtual bool prev() {
	xargs x[1];
	if(call_method((void*)this, 7537, x)) return (bool)x[0].x_bool;
	return this->QSqlQuery::prev();
    }
    virtual bool seek(int x1, bool x2) {
	xargs x[3];
	x[1].x_int = (int)x1;
	x[2].x_bool = (bool)x2;
	if(call_method((void*)this, 7534, x)) return (bool)x[0].x_bool;
	return this->QSqlQuery::seek(x1, x2);
    }
    virtual QVariant value(int x1) const {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 7533, x)) {
	    QVariant *xptr = (QVariant *)x[0].x_voidp;
	    QVariant xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QSqlQuery::value(x1);
    }
    ~x_QSqlQuery() {}
};
void xcall_QSqlQuery(xargs *x, void *s, int xi) {
    x_QSqlQuery *xself = (x_QSqlQuery*)s;
    switch(xi) {
	case 0: x_QSqlQuery::x_0(x);	break;
	case 1: x_QSqlQuery::x_1(x);	break;
	case 2: x_QSqlQuery::x_2(x);	break;
	case 3: x_QSqlQuery::x_3(x);	break;
	case 4: x_QSqlQuery::x_4(x);	break;
	case 5: xself->x_5(x);	break;
	case 6: xself->x_6(x);	break;
	case 7: xself->x_7(x);	break;
	case 8: xself->x_8(x);	break;
	case 9: xself->x_9(x);	break;
	case 10: xself->x_10(x);	break;
	case 11: xself->x_11(x);	break;
	case 12: xself->x_12(x);	break;
	case 13: xself->x_13(x);	break;
	case 14: xself->x_14(x);	break;
	case 15: xself->x_15(x);	break;
	case 16: xself->x_16(x);	break;
	case 17: xself->x_17(x);	break;
	case 18: xself->x_18(x);	break;
	case 19: xself->x_19(x);	break;
	case 20: xself->x_20(x);	break;
	case 21: xself->x_21(x);	break;
	case 22: xself->x_22(x);	break;
	case 23: xself->x_23(x);	break;
	case 24: xself->x_24(x);	break;
	case 25: xself->x_25(x);	break;
	case 26: xself->x_26(x);	break;
	case 27: delete (QSqlQuery*)xself;	break;
    }
}
