//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qpoint.h>
#include <qvariant.h>
#include <qcstring.h>
#include <qstring.h>
#include <qdragobject.h>
#include <qstrlist.h>
#include <qpixmap.h>
#include <qstringlist.h>

class x_QUriDrag : public QUriDrag {
public:
    static void x_0(xargs *x) {
	// QUriDrag(QStrList, QWidget*, const char*)
	x_QUriDrag* xret = new x_QUriDrag(*(QStrList *)x[1].x_voidp,(QWidget*)x[2].x_voidp,(const char*)x[3].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QUriDrag(QStrList x1, QWidget* x2, const char* x3) : QUriDrag(x1, x2, x3) {
    }
    static void x_1(xargs *x) {
	// QUriDrag(QStrList, QWidget*)
	x_QUriDrag* xret = new x_QUriDrag(*(QStrList *)x[1].x_voidp,(QWidget*)x[2].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QUriDrag(QStrList x1, QWidget* x2) : QUriDrag(x1, x2) {
    }
    static void x_2(xargs *x) {
	// QUriDrag(QStrList)
	x_QUriDrag* xret = new x_QUriDrag(*(QStrList *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QUriDrag(QStrList x1) : QUriDrag(x1) {
    }
    static void x_3(xargs *x) {
	// QUriDrag(QWidget*, const char*)
	x_QUriDrag* xret = new x_QUriDrag((QWidget*)x[1].x_voidp,(const char*)x[2].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QUriDrag(QWidget* x1, const char* x2) : QUriDrag(x1, x2) {
    }
    static void x_4(xargs *x) {
	// QUriDrag(QWidget*)
	x_QUriDrag* xret = new x_QUriDrag((QWidget*)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QUriDrag(QWidget* x1) : QUriDrag(x1) {
    }
    static void x_5(xargs *x) {
	// QUriDrag()
	x_QUriDrag* xret = new x_QUriDrag();
	x[0].x_voidp = (void*)xret;
    }
    x_QUriDrag() : QUriDrag() {
    }
    void x_6(xargs *x) {
	// setFilenames(const QStringList&)
	this->QUriDrag::setFilenames(*(const QStringList *)x[1].x_voidp);
    }
    void x_7(xargs *x) {
	// setFileNames(const QStringList&)
	this->QUriDrag::setFileNames(*(const QStringList *)x[1].x_voidp);
    }
    void x_8(xargs *x) {
	// setUnicodeUris(const QStringList&)
	this->QUriDrag::setUnicodeUris(*(const QStringList *)x[1].x_voidp);
    }
    void x_9(xargs *x) {
	// setUris(QStrList)
	this->QUriDrag::setUris(*(QStrList *)x[1].x_voidp);
    }
    static void x_10(xargs *x) {
	// uriToLocalFile(const char*)
	QString xret = QUriDrag::uriToLocalFile((const char*)x[1].x_voidp);
	x[0].x_voidp = (void*)new QString(xret);
    }
    static void x_11(xargs *x) {
	// localFileToUri(const QString&)
	QCString xret = QUriDrag::localFileToUri(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QCString(xret);
    }
    static void x_12(xargs *x) {
	// uriToUnicodeUri(const char*)
	QString xret = QUriDrag::uriToUnicodeUri((const char*)x[1].x_voidp);
	x[0].x_voidp = (void*)new QString(xret);
    }
    static void x_13(xargs *x) {
	// unicodeUriToUri(const QString&)
	QCString xret = QUriDrag::unicodeUriToUri(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QCString(xret);
    }
    static void x_14(xargs *x) {
	// canDecode(const QMimeSource*)
	bool xret = QUriDrag::canDecode((const QMimeSource*)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    static void x_15(xargs *x) {
	// decode(const QMimeSource*, QStrList&)
	bool xret = QUriDrag::decode((const QMimeSource*)x[1].x_voidp,*(QStrList *)x[2].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    static void x_16(xargs *x) {
	// decodeToUnicodeUris(const QMimeSource*, QStringList&)
	bool xret = QUriDrag::decodeToUnicodeUris((const QMimeSource*)x[1].x_voidp,*(QStringList *)x[2].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    static void x_17(xargs *x) {
	// decodeLocalFiles(const QMimeSource*, QStringList&)
	bool xret = QUriDrag::decodeLocalFiles((const QMimeSource*)x[1].x_voidp,*(QStringList *)x[2].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    virtual bool checkConnectArgs(const char* x1, const QObject* x2, const char* x3) {
	xargs x[4];
	x[1].x_voidp = (void*)x1;
	x[2].x_voidp = (void*)x2;
	x[3].x_voidp = (void*)x3;
	if(call_method((void*)this, 5475, x)) return (bool)x[0].x_bool;
	return this->QObject::checkConnectArgs(x1, x2, x3);
    }
    virtual void childEvent(QChildEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5471, x)) return;
	this->QObject::childEvent(x1);
    }
    virtual void connectNotify(const char* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5473, x)) return;
	this->QObject::connectNotify(x1);
    }
    virtual void customEvent(QCustomEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5472, x)) return;
	this->QObject::customEvent(x1);
    }
    virtual void disconnectNotify(const char* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5474, x)) return;
	this->QObject::disconnectNotify(x1);
    }
    virtual bool drag(QDragObject::DragMode x1) {
	xargs x[2];
	x[1].x_long = (long)x1;
	if(call_method((void*)this, 2318, x)) return (bool)x[0].x_bool;
	return this->QDragObject::drag(x1);
    }
    virtual QByteArray encodedData(const char* x1) const {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 7632, x)) {
	    QByteArray *xptr = (QByteArray *)x[0].x_voidp;
	    QByteArray xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QStoredDrag::encodedData(x1);
    }
    virtual bool event(QEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5410, x)) return (bool)x[0].x_bool;
	return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
	xargs x[3];
	x[1].x_voidp = (void*)x1;
	x[2].x_voidp = (void*)x2;
	if(call_method((void*)this, 5411, x)) return (bool)x[0].x_bool;
	return this->QObject::eventFilter(x1, x2);
    }
    virtual const char* format(int x1) const {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 7631, x)) 	return (const char*)x[0].x_voidp;
	return this->QStoredDrag::format(x1);
    }
    virtual void insertChild(QObject* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5433, x)) return;
	this->QObject::insertChild(x1);
    }
    virtual QVariant property(const char* x1) const {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5447, x)) {
	    QVariant *xptr = (QVariant *)x[0].x_voidp;
	    QVariant xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QObject::property(x1);
    }
    virtual bool provides(const char* x1) const {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5119, x)) return (bool)x[0].x_bool;
	return this->QMimeSource::provides(x1);
    }
    virtual void removeChild(QObject* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5434, x)) return;
	this->QObject::removeChild(x1);
    }
    virtual void setEncodedData(const QByteArray& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 7630, x)) return;
	this->QStoredDrag::setEncodedData(x1);
    }
    virtual void setName(const char* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5416, x)) return;
	this->QObject::setName(x1);
    }
    virtual void setPixmap(QPixmap x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 2311, x)) return;
	this->QDragObject::setPixmap(x1);
    }
    virtual void setPixmap(QPixmap x1, const QPoint& x2) {
	xargs x[3];
	x[1].x_voidp = (void*)&x1;
	x[2].x_voidp = (void*)&x2;
	if(call_method((void*)this, 2312, x)) return;
	this->QDragObject::setPixmap(x1, x2);
    }
    virtual bool setProperty(const char* x1, const QVariant& x2) {
	xargs x[3];
	x[1].x_voidp = (void*)x1;
	x[2].x_voidp = (void*)&x2;
	if(call_method((void*)this, 5446, x)) return (bool)x[0].x_bool;
	return this->QObject::setProperty(x1, x2);
    }
    virtual void setUris(QStrList x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9062, x)) return;
	this->QUriDrag::setUris(x1);
    }
    virtual void timerEvent(QTimerEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5470, x)) return;
	this->QObject::timerEvent(x1);
    }
    ~x_QUriDrag() {}
};
void xcall_QUriDrag(xargs *x, void *s, int xi) {
    x_QUriDrag *xself = (x_QUriDrag*)s;
    switch(xi) {
	case 0: x_QUriDrag::x_0(x);	break;
	case 1: x_QUriDrag::x_1(x);	break;
	case 2: x_QUriDrag::x_2(x);	break;
	case 3: x_QUriDrag::x_3(x);	break;
	case 4: x_QUriDrag::x_4(x);	break;
	case 5: x_QUriDrag::x_5(x);	break;
	case 6: xself->x_6(x);	break;
	case 7: xself->x_7(x);	break;
	case 8: xself->x_8(x);	break;
	case 9: xself->x_9(x);	break;
	case 10: x_QUriDrag::x_10(x);	break;
	case 11: x_QUriDrag::x_11(x);	break;
	case 12: x_QUriDrag::x_12(x);	break;
	case 13: x_QUriDrag::x_13(x);	break;
	case 14: x_QUriDrag::x_14(x);	break;
	case 15: x_QUriDrag::x_15(x);	break;
	case 16: x_QUriDrag::x_16(x);	break;
	case 17: x_QUriDrag::x_17(x);	break;
	case 18: delete (QUriDrag*)xself;	break;
    }
}
