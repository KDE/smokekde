//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qevent.h>

class x_QChildEvent : public QChildEvent {
public:
    static void x_0(xargs *x) {
	// QChildEvent(QEvent::Type, QObject*)
	x_QChildEvent* xret = new x_QChildEvent((QEvent::Type)x[1].x_long,(QObject*)x[2].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QChildEvent(QEvent::Type x1, QObject* x2) : QChildEvent(x1, x2) {
    }
    void x_1(xargs *x) const {
	// child()
	QObject* xret = this->QChildEvent::child();
	x[0].x_voidp = (void*)xret;
    }
    void x_2(xargs *x) const {
	// inserted()
	bool xret = this->QChildEvent::inserted();
	x[0].x_bool = (bool)xret;
    }
    void x_3(xargs *x) const {
	// removed()
	bool xret = this->QChildEvent::removed();
	x[0].x_bool = (bool)xret;
    }
    ~x_QChildEvent() {}
};
void xcall_QChildEvent(xargs *x, void *s, int xi) {
    x_QChildEvent *xself = (x_QChildEvent*)s;
    switch(xi) {
	case 0: x_QChildEvent::x_0(x);	break;
	case 1: xself->x_1(x);	break;
	case 2: xself->x_2(x);	break;
	case 3: xself->x_3(x);	break;
    }
}
