//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke.h>
#include <qt_smoke.h>
#include <qcolor.h>
#include <qstring.h>
#include <qwindowdefs.h>

class x_QColor : public QColor {
public:
    static void x_0(Smoke::Stack x) {
	x[0].s_enum = (long)QColor::Rgb;
    }
    static void x_1(Smoke::Stack x) {
	x[0].s_enum = (long)QColor::Hsv;
    }
    static void x_2(Smoke::Stack x) {
	x[0].s_enum = (long)QColor::Dirt;
    }
    static void x_3(Smoke::Stack x) {
	x[0].s_enum = (long)QColor::Invalid;
    }
    static void x_4(Smoke::Stack x) {
	// QColor()
	x_QColor* xret = new x_QColor();
	x[0].s_class = (void*)xret;
    }
    x_QColor() : QColor() {
    }
    static void x_5(Smoke::Stack x) {
	// QColor(int, int, int)
	x_QColor* xret = new x_QColor((int)x[1].s_int,(int)x[2].s_int,(int)x[3].s_int);
	x[0].s_class = (void*)xret;
    }
    x_QColor(int x1, int x2, int x3) : QColor(x1, x2, x3) {
    }
    static void x_6(Smoke::Stack x) {
	// QColor(int, int, int, QColor::Spec)
	x_QColor* xret = new x_QColor((int)x[1].s_int,(int)x[2].s_int,(int)x[3].s_int,(QColor::Spec)x[4].s_enum);
	x[0].s_class = (void*)xret;
    }
    x_QColor(int x1, int x2, int x3, QColor::Spec x4) : QColor(x1, x2, x3, x4) {
    }
    static void x_7(Smoke::Stack x) {
	// QColor(QRgb, uint)
	x_QColor* xret = new x_QColor((QRgb)x[1].s_uint,(uint)x[2].s_uint);
	x[0].s_class = (void*)xret;
    }
    x_QColor(QRgb x1, uint x2) : QColor(x1, x2) {
    }
    static void x_8(Smoke::Stack x) {
	// QColor(QRgb)
	x_QColor* xret = new x_QColor((QRgb)x[1].s_uint);
	x[0].s_class = (void*)xret;
    }
    x_QColor(QRgb x1) : QColor(x1) {
    }
    static void x_9(Smoke::Stack x) {
	// QColor(const QString&)
	x_QColor* xret = new x_QColor(*(const QString *)x[1].s_voidp);
	x[0].s_class = (void*)xret;
    }
    x_QColor(const QString& x1) : QColor(x1) {
    }
    static void x_10(Smoke::Stack x) {
	// QColor(const char*)
	x_QColor* xret = new x_QColor((const char*)x[1].s_voidp);
	x[0].s_class = (void*)xret;
    }
    x_QColor(const char* x1) : QColor(x1) {
    }
    static void x_11(Smoke::Stack x) {
	// QColor(const QColor&)
	x_QColor* xret = new x_QColor(*(const QColor *)x[1].s_class);
	x[0].s_class = (void*)xret;
    }
    x_QColor(const QColor& x1) : QColor(x1) {
    }
    void x_12(Smoke::Stack x) {
	// operator=(const QColor&)
	QColor& xret = this->QColor::operator=(*(const QColor *)x[1].s_class);
	x[0].s_class = (void*)&xret;
    }
    void x_13(Smoke::Stack x) const {
	// isValid()
	bool xret = this->QColor::isValid();
	x[0].s_bool = xret;
    }
    void x_14(Smoke::Stack x) const {
	// isDirty()
	bool xret = this->QColor::isDirty();
	x[0].s_bool = xret;
    }
    void x_15(Smoke::Stack x) const {
	// name()
	QString xret = this->QColor::name();
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_16(Smoke::Stack x) {
	// setNamedColor(const QString&)
	this->QColor::setNamedColor(*(const QString *)x[1].s_voidp);
	(void)x; // noop (for compiler warning)
    }
    void x_17(Smoke::Stack x) const {
	// rgb(int*, int*, int*)
	this->QColor::rgb((int*)x[1].s_voidp,(int*)x[2].s_voidp,(int*)x[3].s_voidp);
	(void)x; // noop (for compiler warning)
    }
    void x_18(Smoke::Stack x) const {
	// rgb()
	QRgb xret = this->QColor::rgb();
	x[0].s_uint = xret;
    }
    void x_19(Smoke::Stack x) {
	// setRgb(int, int, int)
	this->QColor::setRgb((int)x[1].s_int,(int)x[2].s_int,(int)x[3].s_int);
	(void)x; // noop (for compiler warning)
    }
    void x_20(Smoke::Stack x) {
	// setRgb(QRgb)
	this->QColor::setRgb((QRgb)x[1].s_uint);
	(void)x; // noop (for compiler warning)
    }
    void x_21(Smoke::Stack x) const {
	// red()
	int xret = this->QColor::red();
	x[0].s_int = xret;
    }
    void x_22(Smoke::Stack x) const {
	// green()
	int xret = this->QColor::green();
	x[0].s_int = xret;
    }
    void x_23(Smoke::Stack x) const {
	// blue()
	int xret = this->QColor::blue();
	x[0].s_int = xret;
    }
    void x_24(Smoke::Stack x) const {
	// hsv(int*, int*, int*)
	this->QColor::hsv((int*)x[1].s_voidp,(int*)x[2].s_voidp,(int*)x[3].s_voidp);
	(void)x; // noop (for compiler warning)
    }
    void x_25(Smoke::Stack x) const {
	// getHsv(int&, int&, int&)
	this->QColor::getHsv(*(int *)x[1].s_voidp,*(int *)x[2].s_voidp,*(int *)x[3].s_voidp);
	(void)x; // noop (for compiler warning)
    }
    void x_26(Smoke::Stack x) {
	// setHsv(int, int, int)
	this->QColor::setHsv((int)x[1].s_int,(int)x[2].s_int,(int)x[3].s_int);
	(void)x; // noop (for compiler warning)
    }
    void x_27(Smoke::Stack x) const {
	// light(int)
	QColor xret = this->QColor::light((int)x[1].s_int);
	x[0].s_class = (void*)new QColor(xret);
    }
    void x_28(Smoke::Stack x) const {
	// light()
	QColor xret = this->QColor::light();
	x[0].s_class = (void*)new QColor(xret);
    }
    void x_29(Smoke::Stack x) const {
	// dark(int)
	QColor xret = this->QColor::dark((int)x[1].s_int);
	x[0].s_class = (void*)new QColor(xret);
    }
    void x_30(Smoke::Stack x) const {
	// dark()
	QColor xret = this->QColor::dark();
	x[0].s_class = (void*)new QColor(xret);
    }
    void x_31(Smoke::Stack x) const {
	// operator==(const QColor&)
	bool xret = this->QColor::operator==(*(const QColor *)x[1].s_class);
	x[0].s_bool = xret;
    }
    void x_32(Smoke::Stack x) const {
	// operator!=(const QColor&)
	bool xret = this->QColor::operator!=(*(const QColor *)x[1].s_class);
	x[0].s_bool = xret;
    }
    void x_33(Smoke::Stack x) {
	// alloc()
	uint xret = this->QColor::alloc();
	x[0].s_uint = xret;
    }
    void x_34(Smoke::Stack x) const {
	// pixel()
	uint xret = this->QColor::pixel();
	x[0].s_uint = xret;
    }
    static void x_35(Smoke::Stack x) {
	// maxColors()
	int xret = QColor::maxColors();
	x[0].s_int = xret;
    }
    static void x_36(Smoke::Stack x) {
	// numBitPlanes()
	int xret = QColor::numBitPlanes();
	x[0].s_int = xret;
    }
    static void x_37(Smoke::Stack x) {
	// enterAllocContext()
	int xret = QColor::enterAllocContext();
	x[0].s_int = xret;
    }
    static void x_38(Smoke::Stack x) {
	// leaveAllocContext()
	QColor::leaveAllocContext();
	(void)x; // noop (for compiler warning)
    }
    static void x_39(Smoke::Stack x) {
	// currentAllocContext()
	int xret = QColor::currentAllocContext();
	x[0].s_int = xret;
    }
    static void x_40(Smoke::Stack x) {
	// destroyAllocContext(int)
	QColor::destroyAllocContext((int)x[1].s_int);
	(void)x; // noop (for compiler warning)
    }
    static void x_41(Smoke::Stack x) {
	// initialize()
	QColor::initialize();
	(void)x; // noop (for compiler warning)
    }
    static void x_42(Smoke::Stack x) {
	// cleanup()
	QColor::cleanup();
	(void)x; // noop (for compiler warning)
    }
    static void xenum_operation(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
	switch(xtype) {
	  case 78: //QColor::Spec
	    switch(xop) {
	      case Smoke::EnumNew:
		xdata = (void*)new QColor::Spec;
		break;
	      case Smoke::EnumDelete:
		delete (QColor::Spec*)xdata;
		break;
	      case Smoke::EnumFromLong:
		*(QColor::Spec*)xdata = (QColor::Spec)xvalue;
		break;
	      case Smoke::EnumToLong:
		xvalue = (long)*(QColor::Spec*)xdata;
		break;
	    }
	    break;
	}
    }
    ~x_QColor() { qt_Smoke->binding->deleted(42, (void*)this); }
};
void xenum_QColor(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
    x_QColor::xenum_operation(xop, xtype, xdata, xvalue);
}
void xcall_QColor(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QColor *xself = (x_QColor*)obj;
    switch(xi) {
	case 0: x_QColor::x_0(args);	break;
	case 1: x_QColor::x_1(args);	break;
	case 2: x_QColor::x_2(args);	break;
	case 3: x_QColor::x_3(args);	break;
	case 4: x_QColor::x_4(args);	break;
	case 5: x_QColor::x_5(args);	break;
	case 6: x_QColor::x_6(args);	break;
	case 7: x_QColor::x_7(args);	break;
	case 8: x_QColor::x_8(args);	break;
	case 9: x_QColor::x_9(args);	break;
	case 10: x_QColor::x_10(args);	break;
	case 11: x_QColor::x_11(args);	break;
	case 12: xself->x_12(args);	break;
	case 13: xself->x_13(args);	break;
	case 14: xself->x_14(args);	break;
	case 15: xself->x_15(args);	break;
	case 16: xself->x_16(args);	break;
	case 17: xself->x_17(args);	break;
	case 18: xself->x_18(args);	break;
	case 19: xself->x_19(args);	break;
	case 20: xself->x_20(args);	break;
	case 21: xself->x_21(args);	break;
	case 22: xself->x_22(args);	break;
	case 23: xself->x_23(args);	break;
	case 24: xself->x_24(args);	break;
	case 25: xself->x_25(args);	break;
	case 26: xself->x_26(args);	break;
	case 27: xself->x_27(args);	break;
	case 28: xself->x_28(args);	break;
	case 29: xself->x_29(args);	break;
	case 30: xself->x_30(args);	break;
	case 31: xself->x_31(args);	break;
	case 32: xself->x_32(args);	break;
	case 33: xself->x_33(args);	break;
	case 34: xself->x_34(args);	break;
	case 35: x_QColor::x_35(args);	break;
	case 36: x_QColor::x_36(args);	break;
	case 37: x_QColor::x_37(args);	break;
	case 38: x_QColor::x_38(args);	break;
	case 39: x_QColor::x_39(args);	break;
	case 40: x_QColor::x_40(args);	break;
	case 41: x_QColor::x_41(args);	break;
	case 42: x_QColor::x_42(args);	break;
	case 43: delete (QColor*)xself;	break;
    }
}
