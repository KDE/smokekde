//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qcolor.h>
#include <qstring.h>
#include <qwindowdefs.h>

class x_QColor : public QColor {
public:
    static void x_0(xargs *x) {
	x[0].x_long = (long)QColor::Rgb;
    }
    static void x_1(xargs *x) {
	x[0].x_long = (long)QColor::Hsv;
    }
    static void x_2(xargs *x) {
	x[0].x_long = (long)QColor::Dirt;
    }
    static void x_3(xargs *x) {
	x[0].x_long = (long)QColor::Invalid;
    }
    static void x_4(xargs *x) {
	// QColor()
	x_QColor* xret = new x_QColor();
	x[0].x_voidp = (void*)xret;
    }
    x_QColor() : QColor() {
    }
    static void x_5(xargs *x) {
	// QColor(int, int, int)
	x_QColor* xret = new x_QColor((int)x[1].x_int,(int)x[2].x_int,(int)x[3].x_int);
	x[0].x_voidp = (void*)xret;
    }
    x_QColor(int x1, int x2, int x3) : QColor(x1, x2, x3) {
    }
    static void x_6(xargs *x) {
	// QColor(int, int, int, QColor::Spec)
	x_QColor* xret = new x_QColor((int)x[1].x_int,(int)x[2].x_int,(int)x[3].x_int,(QColor::Spec)x[4].x_long);
	x[0].x_voidp = (void*)xret;
    }
    x_QColor(int x1, int x2, int x3, QColor::Spec x4) : QColor(x1, x2, x3, x4) {
    }
    static void x_7(xargs *x) {
	// QColor(QRgb, uint)
	x_QColor* xret = new x_QColor(*(QRgb *)x[1].x_voidp,(uint)x[2].x_uint);
	x[0].x_voidp = (void*)xret;
    }
    x_QColor(QRgb x1, uint x2) : QColor(x1, x2) {
    }
    static void x_8(xargs *x) {
	// QColor(QRgb)
	x_QColor* xret = new x_QColor(*(QRgb *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QColor(QRgb x1) : QColor(x1) {
    }
    static void x_9(xargs *x) {
	// QColor(const QString&)
	x_QColor* xret = new x_QColor(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QColor(const QString& x1) : QColor(x1) {
    }
    static void x_10(xargs *x) {
	// QColor(const char*)
	x_QColor* xret = new x_QColor((const char*)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QColor(const char* x1) : QColor(x1) {
    }
    static void x_11(xargs *x) {
	// QColor(const QColor&)
	x_QColor* xret = new x_QColor(*(const QColor *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QColor(const QColor& x1) : QColor(x1) {
    }
    void x_12(xargs *x) {
	// operator=(const QColor&)
	QColor& xret = this->QColor::operator=(*(const QColor *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_13(xargs *x) const {
	// isValid()
	bool xret = this->QColor::isValid();
	x[0].x_bool = (bool)xret;
    }
    void x_14(xargs *x) const {
	// isDirty()
	bool xret = this->QColor::isDirty();
	x[0].x_bool = (bool)xret;
    }
    void x_15(xargs *x) const {
	// name()
	QString xret = this->QColor::name();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_16(xargs *x) {
	// setNamedColor(const QString&)
	this->QColor::setNamedColor(*(const QString *)x[1].x_voidp);
    }
    void x_17(xargs *x) const {
	// rgb(int*, int*, int*)
	this->QColor::rgb((int*)x[1].x_voidp,(int*)x[2].x_voidp,(int*)x[3].x_voidp);
    }
    void x_18(xargs *x) const {
	// rgb()
	QRgb xret = this->QColor::rgb();
	x[0].x_voidp = (void*)new QRgb(xret);
    }
    void x_19(xargs *x) {
	// setRgb(int, int, int)
	this->QColor::setRgb((int)x[1].x_int,(int)x[2].x_int,(int)x[3].x_int);
    }
    void x_20(xargs *x) {
	// setRgb(QRgb)
	this->QColor::setRgb(*(QRgb *)x[1].x_voidp);
    }
    void x_21(xargs *x) const {
	// red()
	int xret = this->QColor::red();
	x[0].x_int = (int)xret;
    }
    void x_22(xargs *x) const {
	// green()
	int xret = this->QColor::green();
	x[0].x_int = (int)xret;
    }
    void x_23(xargs *x) const {
	// blue()
	int xret = this->QColor::blue();
	x[0].x_int = (int)xret;
    }
    void x_24(xargs *x) const {
	// hsv(int*, int*, int*)
	this->QColor::hsv((int*)x[1].x_voidp,(int*)x[2].x_voidp,(int*)x[3].x_voidp);
    }
    void x_25(xargs *x) const {
	// getHsv(int&, int&, int&)
	this->QColor::getHsv(*(int *)x[1].x_voidp,*(int *)x[2].x_voidp,*(int *)x[3].x_voidp);
    }
    void x_26(xargs *x) {
	// setHsv(int, int, int)
	this->QColor::setHsv((int)x[1].x_int,(int)x[2].x_int,(int)x[3].x_int);
    }
    void x_27(xargs *x) const {
	// light(int)
	QColor xret = this->QColor::light((int)x[1].x_int);
	x[0].x_voidp = (void*)new QColor(xret);
    }
    void x_28(xargs *x) const {
	// light()
	QColor xret = this->QColor::light();
	x[0].x_voidp = (void*)new QColor(xret);
    }
    void x_29(xargs *x) const {
	// dark(int)
	QColor xret = this->QColor::dark((int)x[1].x_int);
	x[0].x_voidp = (void*)new QColor(xret);
    }
    void x_30(xargs *x) const {
	// dark()
	QColor xret = this->QColor::dark();
	x[0].x_voidp = (void*)new QColor(xret);
    }
    void x_31(xargs *x) const {
	// operator==(const QColor&)
	bool xret = this->QColor::operator==(*(const QColor *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_32(xargs *x) const {
	// operator!=(const QColor&)
	bool xret = this->QColor::operator!=(*(const QColor *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_33(xargs *x) {
	// alloc()
	uint xret = this->QColor::alloc();
	x[0].x_uint = (uint)xret;
    }
    void x_34(xargs *x) const {
	// pixel()
	uint xret = this->QColor::pixel();
	x[0].x_uint = (uint)xret;
    }
    static void x_35(xargs *x) {
	// maxColors()
	int xret = QColor::maxColors();
	x[0].x_int = (int)xret;
    }
    static void x_36(xargs *x) {
	// numBitPlanes()
	int xret = QColor::numBitPlanes();
	x[0].x_int = (int)xret;
    }
    static void x_37(xargs *x) {
	// enterAllocContext()
	int xret = QColor::enterAllocContext();
	x[0].x_int = (int)xret;
    }
    static void x_38(xargs *x) {
	// leaveAllocContext()
	QColor::leaveAllocContext();
    }
    static void x_39(xargs *x) {
	// currentAllocContext()
	int xret = QColor::currentAllocContext();
	x[0].x_int = (int)xret;
    }
    static void x_40(xargs *x) {
	// destroyAllocContext(int)
	QColor::destroyAllocContext((int)x[1].x_int);
    }
    static void x_41(xargs *x) {
	// initialize()
	QColor::initialize();
    }
    static void x_42(xargs *x) {
	// cleanup()
	QColor::cleanup();
    }
    ~x_QColor() {}
};
void xcall_QColor(xargs *x, void *s, int xi) {
    x_QColor *xself = (x_QColor*)s;
    switch(xi) {
	case 0: x_QColor::x_0(x);	break;
	case 1: x_QColor::x_1(x);	break;
	case 2: x_QColor::x_2(x);	break;
	case 3: x_QColor::x_3(x);	break;
	case 4: x_QColor::x_4(x);	break;
	case 5: x_QColor::x_5(x);	break;
	case 6: x_QColor::x_6(x);	break;
	case 7: x_QColor::x_7(x);	break;
	case 8: x_QColor::x_8(x);	break;
	case 9: x_QColor::x_9(x);	break;
	case 10: x_QColor::x_10(x);	break;
	case 11: x_QColor::x_11(x);	break;
	case 12: xself->x_12(x);	break;
	case 13: xself->x_13(x);	break;
	case 14: xself->x_14(x);	break;
	case 15: xself->x_15(x);	break;
	case 16: xself->x_16(x);	break;
	case 17: xself->x_17(x);	break;
	case 18: xself->x_18(x);	break;
	case 19: xself->x_19(x);	break;
	case 20: xself->x_20(x);	break;
	case 21: xself->x_21(x);	break;
	case 22: xself->x_22(x);	break;
	case 23: xself->x_23(x);	break;
	case 24: xself->x_24(x);	break;
	case 25: xself->x_25(x);	break;
	case 26: xself->x_26(x);	break;
	case 27: xself->x_27(x);	break;
	case 28: xself->x_28(x);	break;
	case 29: xself->x_29(x);	break;
	case 30: xself->x_30(x);	break;
	case 31: xself->x_31(x);	break;
	case 32: xself->x_32(x);	break;
	case 33: xself->x_33(x);	break;
	case 34: xself->x_34(x);	break;
	case 35: x_QColor::x_35(x);	break;
	case 36: x_QColor::x_36(x);	break;
	case 37: x_QColor::x_37(x);	break;
	case 38: x_QColor::x_38(x);	break;
	case 39: x_QColor::x_39(x);	break;
	case 40: x_QColor::x_40(x);	break;
	case 41: x_QColor::x_41(x);	break;
	case 42: x_QColor::x_42(x);	break;
    }
}
