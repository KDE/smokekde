//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qpoint.h>
#include <qcursor.h>
#include <qcolor.h>
#include <qfont.h>
#include <qstring.h>
#include <qbitmap.h>
#include <qsize.h>
#include <qsizepolicy.h>
#include <qvariant.h>
#include <qregion.h>
#include <qmainwindow.h>
#include <qpalette.h>
#include <qnamespace.h>
#include <qrect.h>
#include <qpixmap.h>
#include <qstyle.h>

class x_QMainWindow : public QMainWindow {
public:
    static void x_0(xargs *x) {
	x[0].x_long = (long)QMainWindow::OnlyToolBars;
    }
    static void x_1(xargs *x) {
	x[0].x_long = (long)QMainWindow::NoToolBars;
    }
    static void x_2(xargs *x) {
	x[0].x_long = (long)QMainWindow::AllDockWindows;
    }
    static void x_3(xargs *x) {
	// QMainWindow(QWidget*, const char*, Qt::WFlags)
	x_QMainWindow* xret = new x_QMainWindow((QWidget*)x[1].x_voidp,(const char*)x[2].x_voidp,*(Qt::WFlags *)x[3].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QMainWindow(QWidget* x1, const char* x2, Qt::WFlags x3) : QMainWindow(x1, x2, x3) {
    }
    static void x_4(xargs *x) {
	// QMainWindow(QWidget*, const char*)
	x_QMainWindow* xret = new x_QMainWindow((QWidget*)x[1].x_voidp,(const char*)x[2].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QMainWindow(QWidget* x1, const char* x2) : QMainWindow(x1, x2) {
    }
    static void x_5(xargs *x) {
	// QMainWindow(QWidget*)
	x_QMainWindow* xret = new x_QMainWindow((QWidget*)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QMainWindow(QWidget* x1) : QMainWindow(x1) {
    }
    static void x_6(xargs *x) {
	// QMainWindow()
	x_QMainWindow* xret = new x_QMainWindow();
	x[0].x_voidp = (void*)xret;
    }
    x_QMainWindow() : QMainWindow() {
    }
    void x_7(xargs *x) const {
	// menuBar()
	QMenuBar* xret = this->QMainWindow::menuBar();
	x[0].x_voidp = (void*)xret;
    }
    void x_8(xargs *x) const {
	// statusBar()
	QStatusBar* xret = this->QMainWindow::statusBar();
	x[0].x_voidp = (void*)xret;
    }
    void x_9(xargs *x) const {
	// toolTipGroup()
	QToolTipGroup* xret = this->QMainWindow::toolTipGroup();
	x[0].x_voidp = (void*)xret;
    }
    void x_10(xargs *x) {
	// setCentralWidget(QWidget*)
	this->QMainWindow::setCentralWidget((QWidget*)x[1].x_voidp);
    }
    void x_11(xargs *x) const {
	// centralWidget()
	QWidget* xret = this->QMainWindow::centralWidget();
	x[0].x_voidp = (void*)xret;
    }
    void x_12(xargs *x) {
	// setDockEnabled(Qt::Dock, bool)
	this->QMainWindow::setDockEnabled((Qt::Dock)x[1].x_long,(bool)x[2].x_bool);
    }
    void x_13(xargs *x) const {
	// isDockEnabled(Qt::Dock)
	bool xret = this->QMainWindow::isDockEnabled((Qt::Dock)x[1].x_long);
	x[0].x_bool = (bool)xret;
    }
    void x_14(xargs *x) const {
	// isDockEnabled(QDockArea*)
	bool xret = this->QMainWindow::isDockEnabled((QDockArea*)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_15(xargs *x) {
	// setDockEnabled(QDockWindow*, Qt::Dock, bool)
	this->QMainWindow::setDockEnabled((QDockWindow*)x[1].x_voidp,(Qt::Dock)x[2].x_long,(bool)x[3].x_bool);
    }
    void x_16(xargs *x) const {
	// isDockEnabled(QDockWindow*, Qt::Dock)
	bool xret = this->QMainWindow::isDockEnabled((QDockWindow*)x[1].x_voidp,(Qt::Dock)x[2].x_long);
	x[0].x_bool = (bool)xret;
    }
    void x_17(xargs *x) const {
	// isDockEnabled(QDockWindow*, QDockArea*)
	bool xret = this->QMainWindow::isDockEnabled((QDockWindow*)x[1].x_voidp,(QDockArea*)x[2].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_18(xargs *x) {
	// addDockWindow(QDockWindow*, Qt::Dock, bool)
	this->QMainWindow::addDockWindow((QDockWindow*)x[1].x_voidp,(Qt::Dock)x[2].x_long,(bool)x[3].x_bool);
    }
    void x_19(xargs *x) {
	// addDockWindow(QDockWindow*, Qt::Dock)
	this->QMainWindow::addDockWindow((QDockWindow*)x[1].x_voidp,(Qt::Dock)x[2].x_long);
    }
    void x_20(xargs *x) {
	// addDockWindow(QDockWindow*)
	this->QMainWindow::addDockWindow((QDockWindow*)x[1].x_voidp);
    }
    void x_21(xargs *x) {
	// addDockWindow(QDockWindow*, const QString&, Qt::Dock, bool)
	this->QMainWindow::addDockWindow((QDockWindow*)x[1].x_voidp,*(const QString *)x[2].x_voidp,(Qt::Dock)x[3].x_long,(bool)x[4].x_bool);
    }
    void x_22(xargs *x) {
	// addDockWindow(QDockWindow*, const QString&, Qt::Dock)
	this->QMainWindow::addDockWindow((QDockWindow*)x[1].x_voidp,*(const QString *)x[2].x_voidp,(Qt::Dock)x[3].x_long);
    }
    void x_23(xargs *x) {
	// addDockWindow(QDockWindow*, const QString&)
	this->QMainWindow::addDockWindow((QDockWindow*)x[1].x_voidp,*(const QString *)x[2].x_voidp);
    }
    void x_24(xargs *x) {
	// moveDockWindow(QDockWindow*, Qt::Dock)
	this->QMainWindow::moveDockWindow((QDockWindow*)x[1].x_voidp,(Qt::Dock)x[2].x_long);
    }
    void x_25(xargs *x) {
	// moveDockWindow(QDockWindow*)
	this->QMainWindow::moveDockWindow((QDockWindow*)x[1].x_voidp);
    }
    void x_26(xargs *x) {
	// moveDockWindow(QDockWindow*, Qt::Dock, bool, int, int)
	this->QMainWindow::moveDockWindow((QDockWindow*)x[1].x_voidp,(Qt::Dock)x[2].x_long,(bool)x[3].x_bool,(int)x[4].x_int,(int)x[5].x_int);
    }
    void x_27(xargs *x) {
	// moveDockWindow(QDockWindow*, Qt::Dock, bool, int)
	this->QMainWindow::moveDockWindow((QDockWindow*)x[1].x_voidp,(Qt::Dock)x[2].x_long,(bool)x[3].x_bool,(int)x[4].x_int);
    }
    void x_28(xargs *x) {
	// removeDockWindow(QDockWindow*)
	this->QMainWindow::removeDockWindow((QDockWindow*)x[1].x_voidp);
    }
    void x_29(xargs *x) {
	// show()
	this->QMainWindow::show();
    }
    void x_30(xargs *x) const {
	// sizeHint()
	QSize xret = this->QMainWindow::sizeHint();
	x[0].x_voidp = (void*)new QSize(xret);
    }
    void x_31(xargs *x) const {
	// minimumSizeHint()
	QSize xret = this->QMainWindow::minimumSizeHint();
	x[0].x_voidp = (void*)new QSize(xret);
    }
    void x_32(xargs *x) const {
	// rightJustification()
	bool xret = this->QMainWindow::rightJustification();
	x[0].x_bool = (bool)xret;
    }
    void x_33(xargs *x) const {
	// usesBigPixmaps()
	bool xret = this->QMainWindow::usesBigPixmaps();
	x[0].x_bool = (bool)xret;
    }
    void x_34(xargs *x) const {
	// usesTextLabel()
	bool xret = this->QMainWindow::usesTextLabel();
	x[0].x_bool = (bool)xret;
    }
    void x_35(xargs *x) const {
	// dockWindowsMovable()
	bool xret = this->QMainWindow::dockWindowsMovable();
	x[0].x_bool = (bool)xret;
    }
    void x_36(xargs *x) const {
	// opaqueMoving()
	bool xret = this->QMainWindow::opaqueMoving();
	x[0].x_bool = (bool)xret;
    }
    void x_37(xargs *x) {
	// eventFilter(QObject*, QEvent*)
	bool xret = this->QMainWindow::eventFilter((QObject*)x[1].x_voidp,(QEvent*)x[2].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_38(xargs *x) const {
	// getLocation(QDockWindow*, Qt::Dock&, int&, bool&, int&)
	bool xret = this->QMainWindow::getLocation((QDockWindow*)x[1].x_voidp,*(Qt::Dock *)x[2].x_voidp,*(int *)x[3].x_voidp,*(bool *)x[4].x_voidp,*(int *)x[5].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_39(xargs *x) const {
	// dockWindows(Qt::Dock)
	QPtrList<QDockWindow> xret = this->QMainWindow::dockWindows((Qt::Dock)x[1].x_long);
	x[0].x_voidp = (void*)new QPtrList<QDockWindow>(xret);
    }
    void x_40(xargs *x) const {
	// dockWindows()
	QPtrList<QDockWindow> xret = this->QMainWindow::dockWindows();
	x[0].x_voidp = (void*)new QPtrList<QDockWindow>(xret);
    }
    void x_41(xargs *x) {
	// lineUpDockWindows(bool)
	this->QMainWindow::lineUpDockWindows((bool)x[1].x_bool);
    }
    void x_42(xargs *x) {
	// lineUpDockWindows()
	this->QMainWindow::lineUpDockWindows();
    }
    void x_43(xargs *x) const {
	// isDockMenuEnabled()
	bool xret = this->QMainWindow::isDockMenuEnabled();
	x[0].x_bool = (bool)xret;
    }
    void x_44(xargs *x) {
	// hasDockWindow(QDockWindow*)
	bool xret = this->QMainWindow::hasDockWindow((QDockWindow*)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_45(xargs *x) {
	// addToolBar(QDockWindow*, Qt::Dock, bool)
	this->QMainWindow::addToolBar((QDockWindow*)x[1].x_voidp,(Qt::Dock)x[2].x_long,(bool)x[3].x_bool);
    }
    void x_46(xargs *x) {
	// addToolBar(QDockWindow*, Qt::Dock)
	this->QMainWindow::addToolBar((QDockWindow*)x[1].x_voidp,(Qt::Dock)x[2].x_long);
    }
    void x_47(xargs *x) {
	// addToolBar(QDockWindow*)
	this->QMainWindow::addToolBar((QDockWindow*)x[1].x_voidp);
    }
    void x_48(xargs *x) {
	// addToolBar(QDockWindow*, const QString&, Qt::Dock, bool)
	this->QMainWindow::addToolBar((QDockWindow*)x[1].x_voidp,*(const QString *)x[2].x_voidp,(Qt::Dock)x[3].x_long,(bool)x[4].x_bool);
    }
    void x_49(xargs *x) {
	// addToolBar(QDockWindow*, const QString&, Qt::Dock)
	this->QMainWindow::addToolBar((QDockWindow*)x[1].x_voidp,*(const QString *)x[2].x_voidp,(Qt::Dock)x[3].x_long);
    }
    void x_50(xargs *x) {
	// addToolBar(QDockWindow*, const QString&)
	this->QMainWindow::addToolBar((QDockWindow*)x[1].x_voidp,*(const QString *)x[2].x_voidp);
    }
    void x_51(xargs *x) {
	// moveToolBar(QDockWindow*, Qt::Dock)
	this->QMainWindow::moveToolBar((QDockWindow*)x[1].x_voidp,(Qt::Dock)x[2].x_long);
    }
    void x_52(xargs *x) {
	// moveToolBar(QDockWindow*)
	this->QMainWindow::moveToolBar((QDockWindow*)x[1].x_voidp);
    }
    void x_53(xargs *x) {
	// moveToolBar(QDockWindow*, Qt::Dock, bool, int, int)
	this->QMainWindow::moveToolBar((QDockWindow*)x[1].x_voidp,(Qt::Dock)x[2].x_long,(bool)x[3].x_bool,(int)x[4].x_int,(int)x[5].x_int);
    }
    void x_54(xargs *x) {
	// moveToolBar(QDockWindow*, Qt::Dock, bool, int)
	this->QMainWindow::moveToolBar((QDockWindow*)x[1].x_voidp,(Qt::Dock)x[2].x_long,(bool)x[3].x_bool,(int)x[4].x_int);
    }
    void x_55(xargs *x) {
	// removeToolBar(QDockWindow*)
	this->QMainWindow::removeToolBar((QDockWindow*)x[1].x_voidp);
    }
    void x_56(xargs *x) const {
	// toolBarsMovable()
	bool xret = this->QMainWindow::toolBarsMovable();
	x[0].x_bool = (bool)xret;
    }
    void x_57(xargs *x) const {
	// toolBars(Qt::Dock)
	QPtrList<QToolBar> xret = this->QMainWindow::toolBars((Qt::Dock)x[1].x_long);
	x[0].x_voidp = (void*)new QPtrList<QToolBar>(xret);
    }
    void x_58(xargs *x) {
	// lineUpToolBars(bool)
	this->QMainWindow::lineUpToolBars((bool)x[1].x_bool);
    }
    void x_59(xargs *x) {
	// lineUpToolBars()
	this->QMainWindow::lineUpToolBars();
    }
    void x_60(xargs *x) {
	// dockingArea(const QPoint&)
	QDockArea* xret = this->QMainWindow::dockingArea(*(const QPoint *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    void x_61(xargs *x) const {
	// leftDock()
	QDockArea* xret = this->QMainWindow::leftDock();
	x[0].x_voidp = (void*)xret;
    }
    void x_62(xargs *x) const {
	// rightDock()
	QDockArea* xret = this->QMainWindow::rightDock();
	x[0].x_voidp = (void*)xret;
    }
    void x_63(xargs *x) const {
	// topDock()
	QDockArea* xret = this->QMainWindow::topDock();
	x[0].x_voidp = (void*)xret;
    }
    void x_64(xargs *x) const {
	// bottomDock()
	QDockArea* xret = this->QMainWindow::bottomDock();
	x[0].x_voidp = (void*)xret;
    }
    void x_65(xargs *x) const {
	// isCustomizable()
	bool xret = this->QMainWindow::isCustomizable();
	x[0].x_bool = (bool)xret;
    }
    void x_66(xargs *x) const {
	// appropriate(QDockWindow*)
	bool xret = this->QMainWindow::appropriate((QDockWindow*)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_67(xargs *x) const {
	// createDockWindowMenu(QMainWindow::DockWindows)
	QPopupMenu* xret = this->QMainWindow::createDockWindowMenu((QMainWindow::DockWindows)x[1].x_long);
	x[0].x_voidp = (void*)xret;
    }
    void x_68(xargs *x) const {
	// createDockWindowMenu()
	QPopupMenu* xret = this->QMainWindow::createDockWindowMenu();
	x[0].x_voidp = (void*)xret;
    }
    void x_69(xargs *x) {
	// setRightJustification(bool)
	this->QMainWindow::setRightJustification((bool)x[1].x_bool);
    }
    void x_70(xargs *x) {
	// setUsesBigPixmaps(bool)
	this->QMainWindow::setUsesBigPixmaps((bool)x[1].x_bool);
    }
    void x_71(xargs *x) {
	// setUsesTextLabel(bool)
	this->QMainWindow::setUsesTextLabel((bool)x[1].x_bool);
    }
    void x_72(xargs *x) {
	// setDockWindowsMovable(bool)
	this->QMainWindow::setDockWindowsMovable((bool)x[1].x_bool);
    }
    void x_73(xargs *x) {
	// setOpaqueMoving(bool)
	this->QMainWindow::setOpaqueMoving((bool)x[1].x_bool);
    }
    void x_74(xargs *x) {
	// setDockMenuEnabled(bool)
	this->QMainWindow::setDockMenuEnabled((bool)x[1].x_bool);
    }
    void x_75(xargs *x) {
	// whatsThis()
	this->QMainWindow::whatsThis();
    }
    void x_76(xargs *x) {
	// setAppropriate(QDockWindow*, bool)
	this->QMainWindow::setAppropriate((QDockWindow*)x[1].x_voidp,(bool)x[2].x_bool);
    }
    void x_77(xargs *x) {
	// customize()
	this->QMainWindow::customize();
    }
    void x_78(xargs *x) {
	// setToolBarsMovable(bool)
	this->QMainWindow::setToolBarsMovable((bool)x[1].x_bool);
    }
    void x_79(xargs *x) {
	// pixmapSizeChanged(bool)
	this->QMainWindow::pixmapSizeChanged((bool)x[1].x_bool);
    }
    void x_80(xargs *x) {
	// usesTextLabelChanged(bool)
	this->QMainWindow::usesTextLabelChanged((bool)x[1].x_bool);
    }
    void x_81(xargs *x) {
	// dockWindowPositionChanged(QDockWindow*)
	this->QMainWindow::dockWindowPositionChanged((QDockWindow*)x[1].x_voidp);
    }
    void x_82(xargs *x) {
	// toolBarPositionChanged(QToolBar*)
	this->QMainWindow::toolBarPositionChanged((QToolBar*)x[1].x_voidp);
    }
    void x_83(xargs *x) {
	// paintEvent(QPaintEvent*)
	this->QMainWindow::paintEvent((QPaintEvent*)x[1].x_voidp);
    }
    void x_84(xargs *x) {
	// childEvent(QChildEvent*)
	this->QMainWindow::childEvent((QChildEvent*)x[1].x_voidp);
    }
    void x_85(xargs *x) {
	// event(QEvent*)
	bool xret = this->QMainWindow::event((QEvent*)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_86(xargs *x) {
	// styleChange(QStyle&)
	this->QMainWindow::styleChange(*(QStyle *)x[1].x_voidp);
    }
    void x_87(xargs *x) {
	// setUpLayout()
	this->QMainWindow::setUpLayout();
    }
    void x_88(xargs *x) {
	// showDockMenu(const QPoint&)
	bool xret = this->QMainWindow::showDockMenu(*(const QPoint *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_89(xargs *x) {
	// menuAboutToShow()
	this->QMainWindow::menuAboutToShow();
    }
    virtual void addDockWindow(QDockWindow* x1, Qt::Dock x2, bool x3) {
	xargs x[4];
	x[1].x_voidp = (void*)x1;
	x[2].x_long = (long)x2;
	x[3].x_bool = (bool)x3;
	if(call_method((void*)this, 4725, x)) return;
	this->QMainWindow::addDockWindow(x1, x2, x3);
    }
    virtual void addDockWindow(QDockWindow* x1, const QString& x2, Qt::Dock x3, bool x4) {
	xargs x[5];
	x[1].x_voidp = (void*)x1;
	x[2].x_voidp = (void*)&x2;
	x[3].x_long = (long)x3;
	x[4].x_bool = (bool)x4;
	if(call_method((void*)this, 4728, x)) return;
	this->QMainWindow::addDockWindow(x1, x2, x3, x4);
    }
    virtual void adjustSize() {
	xargs x[1];
	if(call_method((void*)this, 9618, x)) return;
	this->QWidget::adjustSize();
    }
    virtual bool checkConnectArgs(const char* x1, const QObject* x2, const char* x3) {
	xargs x[4];
	x[1].x_voidp = (void*)x1;
	x[2].x_voidp = (void*)x2;
	x[3].x_voidp = (void*)x3;
	if(call_method((void*)this, 5475, x)) return (bool)x[0].x_bool;
	return this->QObject::checkConnectArgs(x1, x2, x3);
    }
    virtual void childEvent(QChildEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 4791, x)) return;
	this->QMainWindow::childEvent(x1);
    }
    virtual bool close(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 9605, x)) return (bool)x[0].x_bool;
	return this->QWidget::close(x1);
    }
    virtual void closeEvent(QCloseEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 9713, x)) return;
	this->QWidget::closeEvent(x1);
    }
    virtual bool cmd(int x1, QPainter* x2, QPDevCmdParam* x3) {
	xargs x[4];
	x[1].x_int = (int)x1;
	x[2].x_voidp = (void*)x2;
	x[3].x_voidp = (void*)x3;
	if(call_method((void*)this, 5558, x)) return (bool)x[0].x_bool;
	return this->QPaintDevice::cmd(x1, x2, x3);
    }
    virtual void connectNotify(const char* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5473, x)) return;
	this->QObject::connectNotify(x1);
    }
    virtual void contextMenuEvent(QContextMenuEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 9714, x)) return;
	this->QWidget::contextMenuEvent(x1);
    }
    virtual void create(WId x1, bool x2, bool x3) {
	xargs x[4];
	x[1].x_voidp = (void*)&x1;
	x[2].x_bool = (bool)x2;
	x[3].x_bool = (bool)x3;
	if(call_method((void*)this, 9733, x)) return;
	this->QWidget::create(x1, x2, x3);
    }
    virtual void customEvent(QCustomEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5472, x)) return;
	this->QObject::customEvent(x1);
    }
    virtual bool customWhatsThis() const {
	xargs x[1];
	if(call_method((void*)this, 9643, x)) return (bool)x[0].x_bool;
	return this->QWidget::customWhatsThis();
    }
    virtual void customize() {
	xargs x[1];
	if(call_method((void*)this, 4784, x)) return;
	this->QMainWindow::customize();
    }
    virtual void destroy(bool x1, bool x2) {
	xargs x[3];
	x[1].x_bool = (bool)x1;
	x[2].x_bool = (bool)x2;
	if(call_method((void*)this, 9737, x)) return;
	this->QWidget::destroy(x1, x2);
    }
    virtual void disconnectNotify(const char* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5474, x)) return;
	this->QObject::disconnectNotify(x1);
    }
    virtual QDockArea* dockingArea(const QPoint& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 4767, x)) 	return (QDockArea*)x[0].x_voidp;
	return this->QMainWindow::dockingArea(x1);
    }
    virtual void dragEnterEvent(QDragEnterEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 9719, x)) return;
	this->QWidget::dragEnterEvent(x1);
    }
    virtual void dragLeaveEvent(QDragLeaveEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 9721, x)) return;
	this->QWidget::dragLeaveEvent(x1);
    }
    virtual void dragMoveEvent(QDragMoveEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 9720, x)) return;
	this->QWidget::dragMoveEvent(x1);
    }
    virtual void dropEvent(QDropEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 9722, x)) return;
	this->QWidget::dropEvent(x1);
    }
    virtual void enabledChange(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 9727, x)) return;
	this->QWidget::enabledChange(x1);
    }
    virtual void enterEvent(QEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 9708, x)) return;
	this->QWidget::enterEvent(x1);
    }
    virtual bool event(QEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 4792, x)) return (bool)x[0].x_bool;
	return this->QMainWindow::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
	xargs x[3];
	x[1].x_voidp = (void*)x1;
	x[2].x_voidp = (void*)x2;
	if(call_method((void*)this, 4744, x)) return (bool)x[0].x_bool;
	return this->QMainWindow::eventFilter(x1, x2);
    }
    virtual void focusInEvent(QFocusEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 9706, x)) return;
	this->QWidget::focusInEvent(x1);
    }
    virtual bool focusNextPrevChild(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 9746, x)) return (bool)x[0].x_bool;
	return this->QWidget::focusNextPrevChild(x1);
    }
    virtual void focusOutEvent(QFocusEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 9707, x)) return;
	this->QWidget::focusOutEvent(x1);
    }
    virtual void fontChange(const QFont& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9729, x)) return;
	this->QWidget::fontChange(x1);
    }
    virtual int fontInf(QFont* x1, int x2) const {
	xargs x[3];
	x[1].x_voidp = (void*)x1;
	x[2].x_int = (int)x2;
	if(call_method((void*)this, 5563, x)) return (int)x[0].x_int;
	return this->QPaintDevice::fontInf(x1, x2);
    }
    virtual int fontMet(QFont* x1, int x2, const char* x3, int x4) const {
	xargs x[5];
	x[1].x_voidp = (void*)x1;
	x[2].x_int = (int)x2;
	x[3].x_voidp = (void*)x3;
	x[4].x_int = (int)x4;
	if(call_method((void*)this, 5560, x)) return (int)x[0].x_int;
	return this->QPaintDevice::fontMet(x1, x2, x3, x4);
    }
    virtual int heightForWidth(int x1) const {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 9617, x)) return (int)x[0].x_int;
	return this->QWidget::heightForWidth(x1);
    }
    virtual void hide() {
	xargs x[1];
	if(call_method((void*)this, 9675, x)) return;
	this->QWidget::hide();
    }
    virtual void hideEvent(QHideEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 9724, x)) return;
	this->QWidget::hideEvent(x1);
    }
    virtual void imComposeEvent(QIMEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 9716, x)) return;
	this->QWidget::imComposeEvent(x1);
    }
    virtual void imEndEvent(QIMEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 9717, x)) return;
	this->QWidget::imEndEvent(x1);
    }
    virtual void imStartEvent(QIMEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 9715, x)) return;
	this->QWidget::imStartEvent(x1);
    }
    virtual void insertChild(QObject* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5433, x)) return;
	this->QObject::insertChild(x1);
    }
    virtual bool isCustomizable() const {
	xargs x[1];
	if(call_method((void*)this, 4772, x)) return (bool)x[0].x_bool;
	return this->QMainWindow::isCustomizable();
    }
    virtual void keyPressEvent(QKeyEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 9704, x)) return;
	this->QWidget::keyPressEvent(x1);
    }
    virtual void keyReleaseEvent(QKeyEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 9705, x)) return;
	this->QWidget::keyReleaseEvent(x1);
    }
    virtual void leaveEvent(QEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 9709, x)) return;
	this->QWidget::leaveEvent(x1);
    }
    virtual int metric(int x1) const {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 9731, x)) return (int)x[0].x_int;
	return this->QWidget::metric(x1);
    }
    virtual QSize minimumSizeHint() const {
	xargs x[1];
	if(call_method((void*)this, 4738, x)) {
	    QSize *xptr = (QSize *)x[0].x_voidp;
	    QSize xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QMainWindow::minimumSizeHint();
    }
    virtual void mouseDoubleClickEvent(QMouseEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 9701, x)) return;
	this->QWidget::mouseDoubleClickEvent(x1);
    }
    virtual void mouseMoveEvent(QMouseEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 9702, x)) return;
	this->QWidget::mouseMoveEvent(x1);
    }
    virtual void mousePressEvent(QMouseEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 9699, x)) return;
	this->QWidget::mousePressEvent(x1);
    }
    virtual void mouseReleaseEvent(QMouseEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 9700, x)) return;
	this->QWidget::mouseReleaseEvent(x1);
    }
    virtual void move(int x1, int x2) {
	xargs x[3];
	x[1].x_int = (int)x1;
	x[2].x_int = (int)x2;
	if(call_method((void*)this, 9687, x)) return;
	this->QWidget::move(x1, x2);
    }
    virtual void moveDockWindow(QDockWindow* x1, Qt::Dock x2) {
	xargs x[3];
	x[1].x_voidp = (void*)x1;
	x[2].x_long = (long)x2;
	if(call_method((void*)this, 4731, x)) return;
	this->QMainWindow::moveDockWindow(x1, x2);
    }
    virtual void moveDockWindow(QDockWindow* x1, Qt::Dock x2, bool x3, int x4, int x5) {
	xargs x[6];
	x[1].x_voidp = (void*)x1;
	x[2].x_long = (long)x2;
	x[3].x_bool = (bool)x3;
	x[4].x_int = (int)x4;
	x[5].x_int = (int)x5;
	if(call_method((void*)this, 4733, x)) return;
	this->QMainWindow::moveDockWindow(x1, x2, x3, x4, x5);
    }
    virtual void moveEvent(QMoveEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 9711, x)) return;
	this->QWidget::moveEvent(x1);
    }
    virtual void paintEvent(QPaintEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 4790, x)) return;
	this->QMainWindow::paintEvent(x1);
    }
    virtual void paletteChange(const QPalette& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9728, x)) return;
	this->QWidget::paletteChange(x1);
    }
    virtual void polish() {
	xargs x[1];
	if(call_method((void*)this, 9681, x)) return;
	this->QWidget::polish();
    }
    virtual QVariant property(const char* x1) const {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5447, x)) {
	    QVariant *xptr = (QVariant *)x[0].x_voidp;
	    QVariant xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QObject::property(x1);
    }
    virtual void removeChild(QObject* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5434, x)) return;
	this->QObject::removeChild(x1);
    }
    virtual void removeDockWindow(QDockWindow* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 4735, x)) return;
	this->QMainWindow::removeDockWindow(x1);
    }
    virtual void reparent(QWidget* x1, Qt::WFlags x2, const QPoint& x3, bool x4) {
	xargs x[5];
	x[1].x_voidp = (void*)x1;
	x[2].x_voidp = (void*)&x2;
	x[3].x_voidp = (void*)&x3;
	x[4].x_bool = (bool)x4;
	if(call_method((void*)this, 9621, x)) return;
	this->QWidget::reparent(x1, x2, x3, x4);
    }
    virtual void resize(int x1, int x2) {
	xargs x[3];
	x[1].x_int = (int)x1;
	x[2].x_int = (int)x2;
	if(call_method((void*)this, 9689, x)) return;
	this->QWidget::resize(x1, x2);
    }
    virtual void resizeEvent(QResizeEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 9712, x)) return;
	this->QWidget::resizeEvent(x1);
    }
    virtual int resolution() const {
	xargs x[1];
	if(call_method((void*)this, 5556, x)) return (int)x[0].x_int;
	return this->QPaintDevice::resolution();
    }
    virtual void setAcceptDrops(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 9638, x)) return;
	this->QWidget::setAcceptDrops(x1);
    }
    virtual void setActiveWindow() {
	xargs x[1];
	if(call_method((void*)this, 9592, x)) return;
	this->QWidget::setActiveWindow();
    }
    virtual void setAppropriate(QDockWindow* x1, bool x2) {
	xargs x[3];
	x[1].x_voidp = (void*)x1;
	x[2].x_bool = (bool)x2;
	if(call_method((void*)this, 4783, x)) return;
	this->QMainWindow::setAppropriate(x1, x2);
    }
    virtual void setAutoMask(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 9639, x)) return;
	this->QWidget::setAutoMask(x1);
    }
    virtual void setBackgroundColor(const QColor& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9588, x)) return;
	this->QWidget::setBackgroundColor(x1);
    }
    virtual void setBackgroundMode(Qt::BackgroundMode x1) {
	xargs x[2];
	x[1].x_long = (long)x1;
	if(call_method((void*)this, 9550, x)) return;
	this->QWidget::setBackgroundMode(x1);
    }
    virtual void setBackgroundOrigin(QWidget::BackgroundOrigin x1) {
	xargs x[2];
	x[1].x_long = (long)x1;
	if(call_method((void*)this, 9641, x)) return;
	this->QWidget::setBackgroundOrigin(x1);
    }
    virtual void setBackgroundPixmap(const QPixmap& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9590, x)) return;
	this->QWidget::setBackgroundPixmap(x1);
    }
    virtual void setCaption(const QString& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9656, x)) return;
	this->QWidget::setCaption(x1);
    }
    virtual void setCentralWidget(QWidget* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 4717, x)) return;
	this->QMainWindow::setCentralWidget(x1);
    }
    virtual void setCursor(const QCursor& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9577, x)) return;
	this->QWidget::setCursor(x1);
    }
    virtual void setDockEnabled(QDockWindow* x1, Qt::Dock x2, bool x3) {
	xargs x[4];
	x[1].x_voidp = (void*)x1;
	x[2].x_long = (long)x2;
	x[3].x_bool = (bool)x3;
	if(call_method((void*)this, 4722, x)) return;
	this->QMainWindow::setDockEnabled(x1, x2, x3);
    }
    virtual void setDockEnabled(Qt::Dock x1, bool x2) {
	xargs x[3];
	x[1].x_long = (long)x1;
	x[2].x_bool = (bool)x2;
	if(call_method((void*)this, 4719, x)) return;
	this->QMainWindow::setDockEnabled(x1, x2);
    }
    virtual void setDockMenuEnabled(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 4781, x)) return;
	this->QMainWindow::setDockMenuEnabled(x1);
    }
    virtual void setDockWindowsMovable(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 4779, x)) return;
	this->QMainWindow::setDockWindowsMovable(x1);
    }
    virtual void setEnabled(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 9654, x)) return;
	this->QWidget::setEnabled(x1);
    }
    virtual void setEraseColor(const QColor& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9554, x)) return;
	this->QWidget::setEraseColor(x1);
    }
    virtual void setErasePixmap(const QPixmap& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9556, x)) return;
	this->QWidget::setErasePixmap(x1);
    }
    virtual void setFocus() {
	xargs x[1];
	if(call_method((void*)this, 9660, x)) return;
	this->QWidget::setFocus();
    }
    virtual void setFocusPolicy(QWidget::FocusPolicy x1) {
	xargs x[2];
	x[1].x_long = (long)x1;
	if(call_method((void*)this, 9595, x)) return;
	this->QWidget::setFocusPolicy(x1);
    }
    virtual void setFocusProxy(QWidget* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 9597, x)) return;
	this->QWidget::setFocusProxy(x1);
    }
    virtual void setFont(const QFont& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9571, x)) return;
	this->QWidget::setFont(x1);
    }
    virtual void setGeometry(const QRect& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9692, x)) return;
	this->QWidget::setGeometry(x1);
    }
    virtual void setGeometry(int x1, int x2, int x3, int x4) {
	xargs x[5];
	x[1].x_int = (int)x1;
	x[2].x_int = (int)x2;
	x[3].x_int = (int)x3;
	x[4].x_int = (int)x4;
	if(call_method((void*)this, 9691, x)) return;
	this->QWidget::setGeometry(x1, x2, x3, x4);
    }
    virtual void setIcon(const QPixmap& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9657, x)) return;
	this->QWidget::setIcon(x1);
    }
    virtual void setIconText(const QString& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9658, x)) return;
	this->QWidget::setIconText(x1);
    }
    virtual void setKeyCompression(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 9750, x)) return;
	this->QWidget::setKeyCompression(x1);
    }
    virtual void setMask(const QBitmap& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9584, x)) return;
	this->QWidget::setMask(x1);
    }
    virtual void setMask(const QRegion& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9585, x)) return;
	this->QWidget::setMask(x1);
    }
    virtual void setMaximumSize(int x1, int x2) {
	xargs x[3];
	x[1].x_int = (int)x1;
	x[2].x_int = (int)x2;
	if(call_method((void*)this, 9527, x)) return;
	this->QWidget::setMaximumSize(x1, x2);
    }
    virtual void setMicroFocusHint(int x1, int x2, int x3, int x4, bool x5, QFont* x6) {
	xargs x[7];
	x[1].x_int = (int)x1;
	x[2].x_int = (int)x2;
	x[3].x_int = (int)x3;
	x[4].x_int = (int)x4;
	x[5].x_bool = (bool)x5;
	x[6].x_voidp = (void*)x6;
	if(call_method((void*)this, 9751, x)) return;
	this->QWidget::setMicroFocusHint(x1, x2, x3, x4, x5, x6);
    }
    virtual void setMinimumSize(int x1, int x2) {
	xargs x[3];
	x[1].x_int = (int)x1;
	x[2].x_int = (int)x2;
	if(call_method((void*)this, 9525, x)) return;
	this->QWidget::setMinimumSize(x1, x2);
    }
    virtual void setMouseTracking(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 9659, x)) return;
	this->QWidget::setMouseTracking(x1);
    }
    virtual void setName(const char* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 9494, x)) return;
	this->QWidget::setName(x1);
    }
    virtual void setOpaqueMoving(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 4780, x)) return;
	this->QMainWindow::setOpaqueMoving(x1);
    }
    virtual void setPalette(const QPalette& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9560, x)) return;
	this->QWidget::setPalette(x1);
    }
    virtual void setPaletteBackgroundColor(const QColor& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9565, x)) return;
	this->QWidget::setPaletteBackgroundColor(x1);
    }
    virtual void setPaletteBackgroundPixmap(const QPixmap& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9567, x)) return;
	this->QWidget::setPaletteBackgroundPixmap(x1);
    }
    virtual bool setProperty(const char* x1, const QVariant& x2) {
	xargs x[3];
	x[1].x_voidp = (void*)x1;
	x[2].x_voidp = (void*)&x2;
	if(call_method((void*)this, 5446, x)) return (bool)x[0].x_bool;
	return this->QObject::setProperty(x1, x2);
    }
    virtual void setResolution(int x1) {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 5555, x)) return;
	this->QPaintDevice::setResolution(x1);
    }
    virtual void setRightJustification(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 4776, x)) return;
	this->QMainWindow::setRightJustification(x1);
    }
    virtual void setSizeIncrement(int x1, int x2) {
	xargs x[3];
	x[1].x_int = (int)x1;
	x[2].x_int = (int)x2;
	if(call_method((void*)this, 9534, x)) return;
	this->QWidget::setSizeIncrement(x1, x2);
    }
    virtual void setSizePolicy(QSizePolicy x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9616, x)) return;
	this->QWidget::setSizePolicy(x1);
    }
    virtual void setUpLayout() {
	xargs x[1];
	if(call_method((void*)this, 4794, x)) return;
	this->QMainWindow::setUpLayout();
    }
    virtual void setUpdatesEnabled(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 9662, x)) return;
	this->QWidget::setUpdatesEnabled(x1);
    }
    virtual void setUsesBigPixmaps(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 4777, x)) return;
	this->QMainWindow::setUsesBigPixmaps(x1);
    }
    virtual void setUsesTextLabel(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 4778, x)) return;
	this->QMainWindow::setUsesTextLabel(x1);
    }
    virtual void setWFlags(Qt::WFlags x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9744, x)) return;
	this->QWidget::setWFlags(x1);
    }
    virtual void setWState(uint x1) {
	xargs x[2];
	x[1].x_uint = (uint)x1;
	if(call_method((void*)this, 9741, x)) return;
	this->QWidget::setWState(x1);
    }
    virtual void show() {
	xargs x[1];
	if(call_method((void*)this, 4736, x)) return;
	this->QMainWindow::show();
    }
    virtual bool showDockMenu(const QPoint& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 4795, x)) return (bool)x[0].x_bool;
	return this->QMainWindow::showDockMenu(x1);
    }
    virtual void showEvent(QShowEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 9723, x)) return;
	this->QWidget::showEvent(x1);
    }
    virtual void showMaximized() {
	xargs x[1];
	if(call_method((void*)this, 9678, x)) return;
	this->QWidget::showMaximized();
    }
    virtual void showMinimized() {
	xargs x[1];
	if(call_method((void*)this, 9677, x)) return;
	this->QWidget::showMinimized();
    }
    virtual void showNormal() {
	xargs x[1];
	if(call_method((void*)this, 9680, x)) return;
	this->QWidget::showNormal();
    }
    virtual QSize sizeHint() const {
	xargs x[1];
	if(call_method((void*)this, 4737, x)) {
	    QSize *xptr = (QSize *)x[0].x_voidp;
	    QSize xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QMainWindow::sizeHint();
    }
    virtual QSizePolicy sizePolicy() const {
	xargs x[1];
	if(call_method((void*)this, 9615, x)) {
	    QSizePolicy *xptr = (QSizePolicy *)x[0].x_voidp;
	    QSizePolicy xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QWidget::sizePolicy();
    }
    virtual void styleChange(QStyle& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 4793, x)) return;
	this->QMainWindow::styleChange(x1);
    }
    virtual void tabletEvent(QTabletEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 9718, x)) return;
	this->QWidget::tabletEvent(x1);
    }
    virtual void timerEvent(QTimerEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5470, x)) return;
	this->QObject::timerEvent(x1);
    }
    virtual void unsetCursor() {
	xargs x[1];
	if(call_method((void*)this, 9578, x)) return;
	this->QWidget::unsetCursor();
    }
    virtual void updateMask() {
	xargs x[1];
	if(call_method((void*)this, 9725, x)) return;
	this->QWidget::updateMask();
    }
    virtual void whatsThis() {
	xargs x[1];
	if(call_method((void*)this, 4782, x)) return;
	this->QMainWindow::whatsThis();
    }
    virtual void wheelEvent(QWheelEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 9703, x)) return;
	this->QWidget::wheelEvent(x1);
    }
    virtual void windowActivationChange(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 9730, x)) return;
	this->QWidget::windowActivationChange(x1);
    }
    ~x_QMainWindow() {}
};
void xcall_QMainWindow(xargs *x, void *s, int xi) {
    x_QMainWindow *xself = (x_QMainWindow*)s;
    switch(xi) {
	case 0: x_QMainWindow::x_0(x);	break;
	case 1: x_QMainWindow::x_1(x);	break;
	case 2: x_QMainWindow::x_2(x);	break;
	case 3: x_QMainWindow::x_3(x);	break;
	case 4: x_QMainWindow::x_4(x);	break;
	case 5: x_QMainWindow::x_5(x);	break;
	case 6: x_QMainWindow::x_6(x);	break;
	case 7: xself->x_7(x);	break;
	case 8: xself->x_8(x);	break;
	case 9: xself->x_9(x);	break;
	case 10: xself->x_10(x);	break;
	case 11: xself->x_11(x);	break;
	case 12: xself->x_12(x);	break;
	case 13: xself->x_13(x);	break;
	case 14: xself->x_14(x);	break;
	case 15: xself->x_15(x);	break;
	case 16: xself->x_16(x);	break;
	case 17: xself->x_17(x);	break;
	case 18: xself->x_18(x);	break;
	case 19: xself->x_19(x);	break;
	case 20: xself->x_20(x);	break;
	case 21: xself->x_21(x);	break;
	case 22: xself->x_22(x);	break;
	case 23: xself->x_23(x);	break;
	case 24: xself->x_24(x);	break;
	case 25: xself->x_25(x);	break;
	case 26: xself->x_26(x);	break;
	case 27: xself->x_27(x);	break;
	case 28: xself->x_28(x);	break;
	case 29: xself->x_29(x);	break;
	case 30: xself->x_30(x);	break;
	case 31: xself->x_31(x);	break;
	case 32: xself->x_32(x);	break;
	case 33: xself->x_33(x);	break;
	case 34: xself->x_34(x);	break;
	case 35: xself->x_35(x);	break;
	case 36: xself->x_36(x);	break;
	case 37: xself->x_37(x);	break;
	case 38: xself->x_38(x);	break;
	case 39: xself->x_39(x);	break;
	case 40: xself->x_40(x);	break;
	case 41: xself->x_41(x);	break;
	case 42: xself->x_42(x);	break;
	case 43: xself->x_43(x);	break;
	case 44: xself->x_44(x);	break;
	case 45: xself->x_45(x);	break;
	case 46: xself->x_46(x);	break;
	case 47: xself->x_47(x);	break;
	case 48: xself->x_48(x);	break;
	case 49: xself->x_49(x);	break;
	case 50: xself->x_50(x);	break;
	case 51: xself->x_51(x);	break;
	case 52: xself->x_52(x);	break;
	case 53: xself->x_53(x);	break;
	case 54: xself->x_54(x);	break;
	case 55: xself->x_55(x);	break;
	case 56: xself->x_56(x);	break;
	case 57: xself->x_57(x);	break;
	case 58: xself->x_58(x);	break;
	case 59: xself->x_59(x);	break;
	case 60: xself->x_60(x);	break;
	case 61: xself->x_61(x);	break;
	case 62: xself->x_62(x);	break;
	case 63: xself->x_63(x);	break;
	case 64: xself->x_64(x);	break;
	case 65: xself->x_65(x);	break;
	case 66: xself->x_66(x);	break;
	case 67: xself->x_67(x);	break;
	case 68: xself->x_68(x);	break;
	case 69: xself->x_69(x);	break;
	case 70: xself->x_70(x);	break;
	case 71: xself->x_71(x);	break;
	case 72: xself->x_72(x);	break;
	case 73: xself->x_73(x);	break;
	case 74: xself->x_74(x);	break;
	case 75: xself->x_75(x);	break;
	case 76: xself->x_76(x);	break;
	case 77: xself->x_77(x);	break;
	case 78: xself->x_78(x);	break;
	case 79: xself->x_79(x);	break;
	case 80: xself->x_80(x);	break;
	case 81: xself->x_81(x);	break;
	case 82: xself->x_82(x);	break;
	case 83: xself->x_83(x);	break;
	case 84: xself->x_84(x);	break;
	case 85: xself->x_85(x);	break;
	case 86: xself->x_86(x);	break;
	case 87: xself->x_87(x);	break;
	case 88: xself->x_88(x);	break;
	case 89: xself->x_89(x);	break;
	case 90: delete (QMainWindow*)xself;	break;
    }
}
