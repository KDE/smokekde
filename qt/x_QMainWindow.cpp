//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke.h>
#include <qt_smoke.h>
#include <qcursor.h>
#include <qcolor.h>
#include <qstring.h>
#include <qsize.h>
#include <qvariant.h>
#include <qregion.h>
#include <qmainwindow.h>
#include <qpoint.h>
#include <qfont.h>
#include <qbitmap.h>
#include <qsizepolicy.h>
#include <qpalette.h>
#include <qwidget.h>
#include <qnamespace.h>
#include <qpixmap.h>
#include <qrect.h>
#include <qstyle.h>

class x_QMainWindow : public QMainWindow {
public:
    static void x_0(Smoke::Stack x) {
	x[0].s_enum = (long)QMainWindow::OnlyToolBars;
    }
    static void x_1(Smoke::Stack x) {
	x[0].s_enum = (long)QMainWindow::NoToolBars;
    }
    static void x_2(Smoke::Stack x) {
	x[0].s_enum = (long)QMainWindow::AllDockWindows;
    }
    void x_3(Smoke::Stack x) const {
	// metaObject()
	QMetaObject* xret = this->QMainWindow::metaObject();
	x[0].s_class = (void*)xret;
    }
    void x_4(Smoke::Stack x) const {
	// className()
	const char* xret = this->QMainWindow::className();
	x[0].s_voidp = (void*)xret;
    }
    void x_5(Smoke::Stack x) {
	// qt_cast(const char*)
	void* xret = this->QMainWindow::qt_cast((const char*)x[1].s_voidp);
	x[0].s_voidp = (void*)xret;
    }
    void x_6(Smoke::Stack x) {
	// qt_invoke(int, QUObject*)
	bool xret = this->QMainWindow::qt_invoke((int)x[1].s_int,(QUObject*)x[2].s_voidp);
	x[0].s_bool = xret;
    }
    void x_7(Smoke::Stack x) {
	// qt_emit(int, QUObject*)
	bool xret = this->QMainWindow::qt_emit((int)x[1].s_int,(QUObject*)x[2].s_voidp);
	x[0].s_bool = xret;
    }
    void x_8(Smoke::Stack x) {
	// qt_property(int, int, QVariant*)
	bool xret = this->QMainWindow::qt_property((int)x[1].s_int,(int)x[2].s_int,(QVariant*)x[3].s_class);
	x[0].s_bool = xret;
    }
    void x_9(Smoke::Stack x) {
	// qObject()
	QObject* xret = this->QMainWindow::qObject();
	x[0].s_class = (void*)xret;
    }
    static void x_10(Smoke::Stack x) {
	// QMainWindow(QWidget*, const char*, Qt::WFlags)
	x_QMainWindow* xret = new x_QMainWindow((QWidget*)x[1].s_class,(const char*)x[2].s_voidp,(Qt::WFlags)x[3].s_int);
	x[0].s_class = (void*)xret;
    }
    x_QMainWindow(QWidget* x1, const char* x2, Qt::WFlags x3) : QMainWindow(x1, x2, x3) {
    }
    static void x_11(Smoke::Stack x) {
	// QMainWindow(QWidget*, const char*)
	x_QMainWindow* xret = new x_QMainWindow((QWidget*)x[1].s_class,(const char*)x[2].s_voidp);
	x[0].s_class = (void*)xret;
    }
    x_QMainWindow(QWidget* x1, const char* x2) : QMainWindow(x1, x2) {
    }
    static void x_12(Smoke::Stack x) {
	// QMainWindow(QWidget*)
	x_QMainWindow* xret = new x_QMainWindow((QWidget*)x[1].s_class);
	x[0].s_class = (void*)xret;
    }
    x_QMainWindow(QWidget* x1) : QMainWindow(x1) {
    }
    static void x_13(Smoke::Stack x) {
	// QMainWindow()
	x_QMainWindow* xret = new x_QMainWindow();
	x[0].s_class = (void*)xret;
    }
    x_QMainWindow() : QMainWindow() {
    }
    void x_14(Smoke::Stack x) const {
	// menuBar()
	QMenuBar* xret = this->QMainWindow::menuBar();
	x[0].s_class = (void*)xret;
    }
    void x_15(Smoke::Stack x) const {
	// statusBar()
	QStatusBar* xret = this->QMainWindow::statusBar();
	x[0].s_class = (void*)xret;
    }
    void x_16(Smoke::Stack x) const {
	// toolTipGroup()
	QToolTipGroup* xret = this->QMainWindow::toolTipGroup();
	x[0].s_class = (void*)xret;
    }
    void x_17(Smoke::Stack x) {
	// setCentralWidget(QWidget*)
	this->QMainWindow::setCentralWidget((QWidget*)x[1].s_class);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_18(Smoke::Stack x) const {
	// centralWidget()
	QWidget* xret = this->QMainWindow::centralWidget();
	x[0].s_class = (void*)xret;
    }
    void x_19(Smoke::Stack x) {
	// setDockEnabled(Qt::Dock, bool)
	this->QMainWindow::setDockEnabled((Qt::Dock)x[1].s_enum,(bool)x[2].s_bool);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_20(Smoke::Stack x) const {
	// isDockEnabled(Qt::Dock)
	bool xret = this->QMainWindow::isDockEnabled((Qt::Dock)x[1].s_enum);
	x[0].s_bool = xret;
    }
    void x_21(Smoke::Stack x) const {
	// isDockEnabled(QDockArea*)
	bool xret = this->QMainWindow::isDockEnabled((QDockArea*)x[1].s_class);
	x[0].s_bool = xret;
    }
    void x_22(Smoke::Stack x) {
	// setDockEnabled(QDockWindow*, Qt::Dock, bool)
	this->QMainWindow::setDockEnabled((QDockWindow*)x[1].s_class,(Qt::Dock)x[2].s_enum,(bool)x[3].s_bool);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_23(Smoke::Stack x) const {
	// isDockEnabled(QDockWindow*, Qt::Dock)
	bool xret = this->QMainWindow::isDockEnabled((QDockWindow*)x[1].s_class,(Qt::Dock)x[2].s_enum);
	x[0].s_bool = xret;
    }
    void x_24(Smoke::Stack x) const {
	// isDockEnabled(QDockWindow*, QDockArea*)
	bool xret = this->QMainWindow::isDockEnabled((QDockWindow*)x[1].s_class,(QDockArea*)x[2].s_class);
	x[0].s_bool = xret;
    }
    void x_25(Smoke::Stack x) {
	// addDockWindow(QDockWindow*, Qt::Dock, bool)
	this->QMainWindow::addDockWindow((QDockWindow*)x[1].s_class,(Qt::Dock)x[2].s_enum,(bool)x[3].s_bool);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_26(Smoke::Stack x) {
	// addDockWindow(QDockWindow*, Qt::Dock)
	this->QMainWindow::addDockWindow((QDockWindow*)x[1].s_class,(Qt::Dock)x[2].s_enum);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_27(Smoke::Stack x) {
	// addDockWindow(QDockWindow*)
	this->QMainWindow::addDockWindow((QDockWindow*)x[1].s_class);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_28(Smoke::Stack x) {
	// addDockWindow(QDockWindow*, const QString&, Qt::Dock, bool)
	this->QMainWindow::addDockWindow((QDockWindow*)x[1].s_class,*(const QString *)x[2].s_voidp,(Qt::Dock)x[3].s_enum,(bool)x[4].s_bool);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_29(Smoke::Stack x) {
	// addDockWindow(QDockWindow*, const QString&, Qt::Dock)
	this->QMainWindow::addDockWindow((QDockWindow*)x[1].s_class,*(const QString *)x[2].s_voidp,(Qt::Dock)x[3].s_enum);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_30(Smoke::Stack x) {
	// addDockWindow(QDockWindow*, const QString&)
	this->QMainWindow::addDockWindow((QDockWindow*)x[1].s_class,*(const QString *)x[2].s_voidp);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_31(Smoke::Stack x) {
	// moveDockWindow(QDockWindow*, Qt::Dock)
	this->QMainWindow::moveDockWindow((QDockWindow*)x[1].s_class,(Qt::Dock)x[2].s_enum);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_32(Smoke::Stack x) {
	// moveDockWindow(QDockWindow*)
	this->QMainWindow::moveDockWindow((QDockWindow*)x[1].s_class);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_33(Smoke::Stack x) {
	// moveDockWindow(QDockWindow*, Qt::Dock, bool, int, int)
	this->QMainWindow::moveDockWindow((QDockWindow*)x[1].s_class,(Qt::Dock)x[2].s_enum,(bool)x[3].s_bool,(int)x[4].s_int,(int)x[5].s_int);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_34(Smoke::Stack x) {
	// moveDockWindow(QDockWindow*, Qt::Dock, bool, int)
	this->QMainWindow::moveDockWindow((QDockWindow*)x[1].s_class,(Qt::Dock)x[2].s_enum,(bool)x[3].s_bool,(int)x[4].s_int);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_35(Smoke::Stack x) {
	// removeDockWindow(QDockWindow*)
	this->QMainWindow::removeDockWindow((QDockWindow*)x[1].s_class);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_36(Smoke::Stack x) {
	// show()
	this->QMainWindow::show();
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_37(Smoke::Stack x) const {
	// sizeHint()
	QSize xret = this->QMainWindow::sizeHint();
	x[0].s_class = (void*)new QSize(xret);
    }
    void x_38(Smoke::Stack x) const {
	// minimumSizeHint()
	QSize xret = this->QMainWindow::minimumSizeHint();
	x[0].s_class = (void*)new QSize(xret);
    }
    void x_39(Smoke::Stack x) const {
	// rightJustification()
	bool xret = this->QMainWindow::rightJustification();
	x[0].s_bool = xret;
    }
    void x_40(Smoke::Stack x) const {
	// usesBigPixmaps()
	bool xret = this->QMainWindow::usesBigPixmaps();
	x[0].s_bool = xret;
    }
    void x_41(Smoke::Stack x) const {
	// usesTextLabel()
	bool xret = this->QMainWindow::usesTextLabel();
	x[0].s_bool = xret;
    }
    void x_42(Smoke::Stack x) const {
	// dockWindowsMovable()
	bool xret = this->QMainWindow::dockWindowsMovable();
	x[0].s_bool = xret;
    }
    void x_43(Smoke::Stack x) const {
	// opaqueMoving()
	bool xret = this->QMainWindow::opaqueMoving();
	x[0].s_bool = xret;
    }
    void x_44(Smoke::Stack x) {
	// eventFilter(QObject*, QEvent*)
	bool xret = this->QMainWindow::eventFilter((QObject*)x[1].s_class,(QEvent*)x[2].s_class);
	x[0].s_bool = xret;
    }
    void x_45(Smoke::Stack x) const {
	// getLocation(QDockWindow*, Qt::Dock&, int&, bool&, int&)
	bool xret = this->QMainWindow::getLocation((QDockWindow*)x[1].s_class,*(Qt::Dock *)x[2].s_voidp,*(int *)x[3].s_voidp,*(bool *)x[4].s_voidp,*(int *)x[5].s_voidp);
	x[0].s_bool = xret;
    }
    void x_46(Smoke::Stack x) const {
	// dockWindows(Qt::Dock)
	QPtrList<QDockWindow> xret = this->QMainWindow::dockWindows((Qt::Dock)x[1].s_enum);
	x[0].s_voidp = (void*)new QPtrList<QDockWindow>(xret);
    }
    void x_47(Smoke::Stack x) const {
	// dockWindows()
	QPtrList<QDockWindow> xret = this->QMainWindow::dockWindows();
	x[0].s_voidp = (void*)new QPtrList<QDockWindow>(xret);
    }
    void x_48(Smoke::Stack x) {
	// lineUpDockWindows(bool)
	this->QMainWindow::lineUpDockWindows((bool)x[1].s_bool);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_49(Smoke::Stack x) {
	// lineUpDockWindows()
	this->QMainWindow::lineUpDockWindows();
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_50(Smoke::Stack x) const {
	// isDockMenuEnabled()
	bool xret = this->QMainWindow::isDockMenuEnabled();
	x[0].s_bool = xret;
    }
    void x_51(Smoke::Stack x) {
	// hasDockWindow(QDockWindow*)
	bool xret = this->QMainWindow::hasDockWindow((QDockWindow*)x[1].s_class);
	x[0].s_bool = xret;
    }
    void x_52(Smoke::Stack x) {
	// addToolBar(QDockWindow*, Qt::Dock, bool)
	this->QMainWindow::addToolBar((QDockWindow*)x[1].s_class,(Qt::Dock)x[2].s_enum,(bool)x[3].s_bool);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_53(Smoke::Stack x) {
	// addToolBar(QDockWindow*, Qt::Dock)
	this->QMainWindow::addToolBar((QDockWindow*)x[1].s_class,(Qt::Dock)x[2].s_enum);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_54(Smoke::Stack x) {
	// addToolBar(QDockWindow*)
	this->QMainWindow::addToolBar((QDockWindow*)x[1].s_class);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_55(Smoke::Stack x) {
	// addToolBar(QDockWindow*, const QString&, Qt::Dock, bool)
	this->QMainWindow::addToolBar((QDockWindow*)x[1].s_class,*(const QString *)x[2].s_voidp,(Qt::Dock)x[3].s_enum,(bool)x[4].s_bool);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_56(Smoke::Stack x) {
	// addToolBar(QDockWindow*, const QString&, Qt::Dock)
	this->QMainWindow::addToolBar((QDockWindow*)x[1].s_class,*(const QString *)x[2].s_voidp,(Qt::Dock)x[3].s_enum);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_57(Smoke::Stack x) {
	// addToolBar(QDockWindow*, const QString&)
	this->QMainWindow::addToolBar((QDockWindow*)x[1].s_class,*(const QString *)x[2].s_voidp);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_58(Smoke::Stack x) {
	// moveToolBar(QDockWindow*, Qt::Dock)
	this->QMainWindow::moveToolBar((QDockWindow*)x[1].s_class,(Qt::Dock)x[2].s_enum);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_59(Smoke::Stack x) {
	// moveToolBar(QDockWindow*)
	this->QMainWindow::moveToolBar((QDockWindow*)x[1].s_class);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_60(Smoke::Stack x) {
	// moveToolBar(QDockWindow*, Qt::Dock, bool, int, int)
	this->QMainWindow::moveToolBar((QDockWindow*)x[1].s_class,(Qt::Dock)x[2].s_enum,(bool)x[3].s_bool,(int)x[4].s_int,(int)x[5].s_int);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_61(Smoke::Stack x) {
	// moveToolBar(QDockWindow*, Qt::Dock, bool, int)
	this->QMainWindow::moveToolBar((QDockWindow*)x[1].s_class,(Qt::Dock)x[2].s_enum,(bool)x[3].s_bool,(int)x[4].s_int);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_62(Smoke::Stack x) {
	// removeToolBar(QDockWindow*)
	this->QMainWindow::removeToolBar((QDockWindow*)x[1].s_class);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_63(Smoke::Stack x) const {
	// toolBarsMovable()
	bool xret = this->QMainWindow::toolBarsMovable();
	x[0].s_bool = xret;
    }
    void x_64(Smoke::Stack x) const {
	// toolBars(Qt::Dock)
	QPtrList<QToolBar> xret = this->QMainWindow::toolBars((Qt::Dock)x[1].s_enum);
	x[0].s_voidp = (void*)new QPtrList<QToolBar>(xret);
    }
    void x_65(Smoke::Stack x) {
	// lineUpToolBars(bool)
	this->QMainWindow::lineUpToolBars((bool)x[1].s_bool);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_66(Smoke::Stack x) {
	// lineUpToolBars()
	this->QMainWindow::lineUpToolBars();
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_67(Smoke::Stack x) {
	// dockingArea(const QPoint&)
	QDockArea* xret = this->QMainWindow::dockingArea(*(const QPoint *)x[1].s_class);
	x[0].s_class = (void*)xret;
    }
    void x_68(Smoke::Stack x) const {
	// leftDock()
	QDockArea* xret = this->QMainWindow::leftDock();
	x[0].s_class = (void*)xret;
    }
    void x_69(Smoke::Stack x) const {
	// rightDock()
	QDockArea* xret = this->QMainWindow::rightDock();
	x[0].s_class = (void*)xret;
    }
    void x_70(Smoke::Stack x) const {
	// topDock()
	QDockArea* xret = this->QMainWindow::topDock();
	x[0].s_class = (void*)xret;
    }
    void x_71(Smoke::Stack x) const {
	// bottomDock()
	QDockArea* xret = this->QMainWindow::bottomDock();
	x[0].s_class = (void*)xret;
    }
    void x_72(Smoke::Stack x) const {
	// isCustomizable()
	bool xret = this->QMainWindow::isCustomizable();
	x[0].s_bool = xret;
    }
    void x_73(Smoke::Stack x) const {
	// appropriate(QDockWindow*)
	bool xret = this->QMainWindow::appropriate((QDockWindow*)x[1].s_class);
	x[0].s_bool = xret;
    }
    void x_74(Smoke::Stack x) const {
	// createDockWindowMenu(QMainWindow::DockWindows)
	QPopupMenu* xret = this->QMainWindow::createDockWindowMenu((QMainWindow::DockWindows)x[1].s_enum);
	x[0].s_class = (void*)xret;
    }
    void x_75(Smoke::Stack x) const {
	// createDockWindowMenu()
	QPopupMenu* xret = this->QMainWindow::createDockWindowMenu();
	x[0].s_class = (void*)xret;
    }
    void x_76(Smoke::Stack x) {
	// setRightJustification(bool)
	this->QMainWindow::setRightJustification((bool)x[1].s_bool);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_77(Smoke::Stack x) {
	// setUsesBigPixmaps(bool)
	this->QMainWindow::setUsesBigPixmaps((bool)x[1].s_bool);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_78(Smoke::Stack x) {
	// setUsesTextLabel(bool)
	this->QMainWindow::setUsesTextLabel((bool)x[1].s_bool);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_79(Smoke::Stack x) {
	// setDockWindowsMovable(bool)
	this->QMainWindow::setDockWindowsMovable((bool)x[1].s_bool);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_80(Smoke::Stack x) {
	// setOpaqueMoving(bool)
	this->QMainWindow::setOpaqueMoving((bool)x[1].s_bool);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_81(Smoke::Stack x) {
	// setDockMenuEnabled(bool)
	this->QMainWindow::setDockMenuEnabled((bool)x[1].s_bool);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_82(Smoke::Stack x) {
	// whatsThis()
	this->QMainWindow::whatsThis();
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_83(Smoke::Stack x) {
	// setAppropriate(QDockWindow*, bool)
	this->QMainWindow::setAppropriate((QDockWindow*)x[1].s_class,(bool)x[2].s_bool);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_84(Smoke::Stack x) {
	// customize()
	this->QMainWindow::customize();
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_85(Smoke::Stack x) {
	// setToolBarsMovable(bool)
	this->QMainWindow::setToolBarsMovable((bool)x[1].s_bool);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_86(Smoke::Stack x) {
	// pixmapSizeChanged(bool)
	this->QMainWindow::pixmapSizeChanged((bool)x[1].s_bool);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_87(Smoke::Stack x) {
	// usesTextLabelChanged(bool)
	this->QMainWindow::usesTextLabelChanged((bool)x[1].s_bool);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_88(Smoke::Stack x) {
	// dockWindowPositionChanged(QDockWindow*)
	this->QMainWindow::dockWindowPositionChanged((QDockWindow*)x[1].s_class);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_89(Smoke::Stack x) {
	// toolBarPositionChanged(QToolBar*)
	this->QMainWindow::toolBarPositionChanged((QToolBar*)x[1].s_class);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    static void x_90(Smoke::Stack x) {
	// staticMetaObject()
	QMetaObject* xret = QMainWindow::staticMetaObject();
	x[0].s_class = (void*)xret;
    }
    static void x_91(Smoke::Stack x) {
	// tr(const char*, const char*)
	QString xret = QMainWindow::tr((const char*)x[1].s_voidp,(const char*)x[2].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    static void x_92(Smoke::Stack x) {
	// tr(const char*)
	QString xret = QMainWindow::tr((const char*)x[1].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    static void x_93(Smoke::Stack x) {
	// trUtf8(const char*, const char*)
	QString xret = QMainWindow::trUtf8((const char*)x[1].s_voidp,(const char*)x[2].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    static void x_94(Smoke::Stack x) {
	// trUtf8(const char*)
	QString xret = QMainWindow::trUtf8((const char*)x[1].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_95(Smoke::Stack x) {
	// paintEvent(QPaintEvent*)
	this->QMainWindow::paintEvent((QPaintEvent*)x[1].s_class);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_96(Smoke::Stack x) {
	// childEvent(QChildEvent*)
	this->QMainWindow::childEvent((QChildEvent*)x[1].s_class);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_97(Smoke::Stack x) {
	// event(QEvent*)
	bool xret = this->QMainWindow::event((QEvent*)x[1].s_class);
	x[0].s_bool = xret;
    }
    void x_98(Smoke::Stack x) {
	// styleChange(QStyle&)
	this->QMainWindow::styleChange(*(QStyle *)x[1].s_class);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_99(Smoke::Stack x) {
	// setUpLayout()
	this->QMainWindow::setUpLayout();
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_100(Smoke::Stack x) {
	// showDockMenu(const QPoint&)
	bool xret = this->QMainWindow::showDockMenu(*(const QPoint *)x[1].s_class);
	x[0].s_bool = xret;
    }
    void x_101(Smoke::Stack x) {
	// menuAboutToShow()
	this->QMainWindow::menuAboutToShow();
	(void)x[0].s_int; // noop (for compiler warning)
    }
    virtual void addDockWindow(QDockWindow* x1, Qt::Dock x2, bool x3) {
	Smoke::StackItem x[4];
	x[1].s_class = (void*)x1;
	x[2].s_enum = x2;
	x[3].s_bool = x3;
	if(qt_Smoke->binding->callMethod(5649, (void*)this, x)) return;
	this->QMainWindow::addDockWindow(x1, x2, x3);
    }
    virtual void addDockWindow(QDockWindow* x1, const QString& x2, Qt::Dock x3, bool x4) {
	Smoke::StackItem x[5];
	x[1].s_class = (void*)x1;
	x[2].s_voidp = (void*)&x2;
	x[3].s_enum = x3;
	x[4].s_bool = x4;
	if(qt_Smoke->binding->callMethod(5652, (void*)this, x)) return;
	this->QMainWindow::addDockWindow(x1, x2, x3, x4);
    }
    virtual void adjustSize() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(11554, (void*)this, x)) return;
	this->QWidget::adjustSize();
    }
    virtual bool checkConnectArgs(const char* x1, const QObject* x2, const char* x3) {
	Smoke::StackItem x[4];
	x[1].s_voidp = (void*)x1;
	x[2].s_class = (void*)x2;
	x[3].s_voidp = (void*)x3;
	if(qt_Smoke->binding->callMethod(6527, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QObject::checkConnectArgs(x1, x2, x3);
    }
    virtual void childEvent(QChildEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(5720, (void*)this, x)) return;
	this->QMainWindow::childEvent(x1);
    }
    virtual const char* className() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(5627, (void*)this, x)) return (const char*)x[0].s_class;
	return this->QMainWindow::className();
    }
    virtual bool close(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(11541, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QWidget::close(x1);
    }
    virtual void closeEvent(QCloseEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11654, (void*)this, x)) return;
	this->QWidget::closeEvent(x1);
    }
    virtual bool cmd(int x1, QPainter* x2, QPDevCmdParam* x3) {
	Smoke::StackItem x[4];
	x[1].s_int = x1;
	x[2].s_class = (void*)x2;
	x[3].s_voidp = (void*)x3;
	if(qt_Smoke->binding->callMethod(6639, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QPaintDevice::cmd(x1, x2, x3);
    }
    virtual void connectNotify(const char* x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(6525, (void*)this, x)) return;
	this->QObject::connectNotify(x1);
    }
    virtual void contextMenuEvent(QContextMenuEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11655, (void*)this, x)) return;
	this->QWidget::contextMenuEvent(x1);
    }
    virtual void create(WId x1, bool x2, bool x3) {
	Smoke::StackItem x[4];
	x[1].s_ulong = x1;
	x[2].s_bool = x2;
	x[3].s_bool = x3;
	if(qt_Smoke->binding->callMethod(11674, (void*)this, x)) return;
	this->QWidget::create(x1, x2, x3);
    }
    virtual void customEvent(QCustomEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(6524, (void*)this, x)) return;
	this->QObject::customEvent(x1);
    }
    virtual bool customWhatsThis() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(11579, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QWidget::customWhatsThis();
    }
    virtual void customize() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(5708, (void*)this, x)) return;
	this->QMainWindow::customize();
    }
    virtual void destroy(bool x1, bool x2) {
	Smoke::StackItem x[3];
	x[1].s_bool = x1;
	x[2].s_bool = x2;
	if(qt_Smoke->binding->callMethod(11678, (void*)this, x)) return;
	this->QWidget::destroy(x1, x2);
    }
    virtual void disconnectNotify(const char* x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(6526, (void*)this, x)) return;
	this->QObject::disconnectNotify(x1);
    }
    virtual QDockArea* dockingArea(const QPoint& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(5691, (void*)this, x)) return (QDockArea*)x[0].s_class;
	return this->QMainWindow::dockingArea(x1);
    }
    virtual void dragEnterEvent(QDragEnterEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11660, (void*)this, x)) return;
	this->QWidget::dragEnterEvent(x1);
    }
    virtual void dragLeaveEvent(QDragLeaveEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11662, (void*)this, x)) return;
	this->QWidget::dragLeaveEvent(x1);
    }
    virtual void dragMoveEvent(QDragMoveEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11661, (void*)this, x)) return;
	this->QWidget::dragMoveEvent(x1);
    }
    virtual void dropEvent(QDropEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11663, (void*)this, x)) return;
	this->QWidget::dropEvent(x1);
    }
    virtual void enabledChange(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(11668, (void*)this, x)) return;
	this->QWidget::enabledChange(x1);
    }
    virtual void enterEvent(QEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11649, (void*)this, x)) return;
	this->QWidget::enterEvent(x1);
    }
    virtual bool event(QEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(5721, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QMainWindow::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
	Smoke::StackItem x[3];
	x[1].s_class = (void*)x1;
	x[2].s_class = (void*)x2;
	if(qt_Smoke->binding->callMethod(5668, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QMainWindow::eventFilter(x1, x2);
    }
    virtual void focusInEvent(QFocusEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11647, (void*)this, x)) return;
	this->QWidget::focusInEvent(x1);
    }
    virtual bool focusNextPrevChild(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(11687, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QWidget::focusNextPrevChild(x1);
    }
    virtual void focusOutEvent(QFocusEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11648, (void*)this, x)) return;
	this->QWidget::focusOutEvent(x1);
    }
    virtual void fontChange(const QFont& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(11670, (void*)this, x)) return;
	this->QWidget::fontChange(x1);
    }
    virtual int fontInf(QFont* x1, int x2) const {
	Smoke::StackItem x[3];
	x[1].s_class = (void*)x1;
	x[2].s_int = x2;
	if(qt_Smoke->binding->callMethod(6644, (void*)this, x)) return (int)x[0].s_int;
	return this->QPaintDevice::fontInf(x1, x2);
    }
    virtual int fontMet(QFont* x1, int x2, const char* x3, int x4) const {
	Smoke::StackItem x[5];
	x[1].s_class = (void*)x1;
	x[2].s_int = x2;
	x[3].s_voidp = (void*)x3;
	x[4].s_int = x4;
	if(qt_Smoke->binding->callMethod(6641, (void*)this, x)) return (int)x[0].s_int;
	return this->QPaintDevice::fontMet(x1, x2, x3, x4);
    }
    virtual int heightForWidth(int x1) const {
	Smoke::StackItem x[2];
	x[1].s_int = x1;
	if(qt_Smoke->binding->callMethod(11553, (void*)this, x)) return (int)x[0].s_int;
	return this->QWidget::heightForWidth(x1);
    }
    virtual void hide() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(11611, (void*)this, x)) return;
	this->QWidget::hide();
    }
    virtual void hideEvent(QHideEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11665, (void*)this, x)) return;
	this->QWidget::hideEvent(x1);
    }
    virtual void imComposeEvent(QIMEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11657, (void*)this, x)) return;
	this->QWidget::imComposeEvent(x1);
    }
    virtual void imEndEvent(QIMEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11658, (void*)this, x)) return;
	this->QWidget::imEndEvent(x1);
    }
    virtual void imStartEvent(QIMEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11656, (void*)this, x)) return;
	this->QWidget::imStartEvent(x1);
    }
    virtual void insertChild(QObject* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(6480, (void*)this, x)) return;
	this->QObject::insertChild(x1);
    }
    virtual bool isCustomizable() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(5696, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QMainWindow::isCustomizable();
    }
    virtual void keyPressEvent(QKeyEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11645, (void*)this, x)) return;
	this->QWidget::keyPressEvent(x1);
    }
    virtual void keyReleaseEvent(QKeyEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11646, (void*)this, x)) return;
	this->QWidget::keyReleaseEvent(x1);
    }
    virtual void leaveEvent(QEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11650, (void*)this, x)) return;
	this->QWidget::leaveEvent(x1);
    }
    virtual QMetaObject* metaObject() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(5626, (void*)this, x)) return (QMetaObject*)x[0].s_class;
	return this->QMainWindow::metaObject();
    }
    virtual int metric(int x1) const {
	Smoke::StackItem x[2];
	x[1].s_int = x1;
	if(qt_Smoke->binding->callMethod(11672, (void*)this, x)) return (int)x[0].s_int;
	return this->QWidget::metric(x1);
    }
    virtual QSize minimumSizeHint() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(5662, (void*)this, x)) {
	    QSize *xptr = (QSize *)x[0].s_class;
	    QSize xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QMainWindow::minimumSizeHint();
    }
    virtual void mouseDoubleClickEvent(QMouseEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11642, (void*)this, x)) return;
	this->QWidget::mouseDoubleClickEvent(x1);
    }
    virtual void mouseMoveEvent(QMouseEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11643, (void*)this, x)) return;
	this->QWidget::mouseMoveEvent(x1);
    }
    virtual void mousePressEvent(QMouseEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11640, (void*)this, x)) return;
	this->QWidget::mousePressEvent(x1);
    }
    virtual void mouseReleaseEvent(QMouseEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11641, (void*)this, x)) return;
	this->QWidget::mouseReleaseEvent(x1);
    }
    virtual void move(int x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_int = x1;
	x[2].s_int = x2;
	if(qt_Smoke->binding->callMethod(11623, (void*)this, x)) return;
	this->QWidget::move(x1, x2);
    }
    virtual void moveDockWindow(QDockWindow* x1, Qt::Dock x2) {
	Smoke::StackItem x[3];
	x[1].s_class = (void*)x1;
	x[2].s_enum = x2;
	if(qt_Smoke->binding->callMethod(5655, (void*)this, x)) return;
	this->QMainWindow::moveDockWindow(x1, x2);
    }
    virtual void moveDockWindow(QDockWindow* x1, Qt::Dock x2, bool x3, int x4, int x5) {
	Smoke::StackItem x[6];
	x[1].s_class = (void*)x1;
	x[2].s_enum = x2;
	x[3].s_bool = x3;
	x[4].s_int = x4;
	x[5].s_int = x5;
	if(qt_Smoke->binding->callMethod(5657, (void*)this, x)) return;
	this->QMainWindow::moveDockWindow(x1, x2, x3, x4, x5);
    }
    virtual void moveEvent(QMoveEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11652, (void*)this, x)) return;
	this->QWidget::moveEvent(x1);
    }
    virtual void paintEvent(QPaintEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(5719, (void*)this, x)) return;
	this->QMainWindow::paintEvent(x1);
    }
    virtual void paletteChange(const QPalette& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(11669, (void*)this, x)) return;
	this->QWidget::paletteChange(x1);
    }
    virtual void polish() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(11617, (void*)this, x)) return;
	this->QWidget::polish();
    }
    virtual QVariant property(const char* x1) const {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(6494, (void*)this, x)) {
	    QVariant *xptr = (QVariant *)x[0].s_class;
	    QVariant xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QObject::property(x1);
    }
    virtual void* qt_cast(const char* x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(5628, (void*)this, x)) return (void*)x[0].s_voidp;
	return this->QMainWindow::qt_cast(x1);
    }
    virtual bool qt_emit(int x1, QUObject* x2) {
	Smoke::StackItem x[3];
	x[1].s_int = x1;
	x[2].s_voidp = (void*)x2;
	if(qt_Smoke->binding->callMethod(5630, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QMainWindow::qt_emit(x1, x2);
    }
    virtual bool qt_invoke(int x1, QUObject* x2) {
	Smoke::StackItem x[3];
	x[1].s_int = x1;
	x[2].s_voidp = (void*)x2;
	if(qt_Smoke->binding->callMethod(5629, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QMainWindow::qt_invoke(x1, x2);
    }
    virtual bool qt_property(int x1, int x2, QVariant* x3) {
	Smoke::StackItem x[4];
	x[1].s_int = x1;
	x[2].s_int = x2;
	x[3].s_class = (void*)x3;
	if(qt_Smoke->binding->callMethod(5631, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QMainWindow::qt_property(x1, x2, x3);
    }
    virtual void removeChild(QObject* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(6481, (void*)this, x)) return;
	this->QObject::removeChild(x1);
    }
    virtual void removeDockWindow(QDockWindow* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(5659, (void*)this, x)) return;
	this->QMainWindow::removeDockWindow(x1);
    }
    virtual void reparent(QWidget* x1, Qt::WFlags x2, const QPoint& x3, bool x4) {
	Smoke::StackItem x[5];
	x[1].s_class = (void*)x1;
	x[2].s_int = x2;
	x[3].s_class = (void*)&x3;
	x[4].s_bool = x4;
	if(qt_Smoke->binding->callMethod(11557, (void*)this, x)) return;
	this->QWidget::reparent(x1, x2, x3, x4);
    }
    virtual void resize(int x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_int = x1;
	x[2].s_int = x2;
	if(qt_Smoke->binding->callMethod(11625, (void*)this, x)) return;
	this->QWidget::resize(x1, x2);
    }
    virtual void resizeEvent(QResizeEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11653, (void*)this, x)) return;
	this->QWidget::resizeEvent(x1);
    }
    virtual int resolution() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(6637, (void*)this, x)) return (int)x[0].s_int;
	return this->QPaintDevice::resolution();
    }
    virtual void setAcceptDrops(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(11574, (void*)this, x)) return;
	this->QWidget::setAcceptDrops(x1);
    }
    virtual void setActiveWindow() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(11528, (void*)this, x)) return;
	this->QWidget::setActiveWindow();
    }
    virtual void setAppropriate(QDockWindow* x1, bool x2) {
	Smoke::StackItem x[3];
	x[1].s_class = (void*)x1;
	x[2].s_bool = x2;
	if(qt_Smoke->binding->callMethod(5707, (void*)this, x)) return;
	this->QMainWindow::setAppropriate(x1, x2);
    }
    virtual void setAutoMask(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(11575, (void*)this, x)) return;
	this->QWidget::setAutoMask(x1);
    }
    virtual void setBackgroundColor(const QColor& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(11524, (void*)this, x)) return;
	this->QWidget::setBackgroundColor(x1);
    }
    virtual void setBackgroundMode(Qt::BackgroundMode x1) {
	Smoke::StackItem x[2];
	x[1].s_enum = x1;
	if(qt_Smoke->binding->callMethod(11486, (void*)this, x)) return;
	this->QWidget::setBackgroundMode(x1);
    }
    virtual void setBackgroundOrigin(QWidget::BackgroundOrigin x1) {
	Smoke::StackItem x[2];
	x[1].s_enum = x1;
	if(qt_Smoke->binding->callMethod(11577, (void*)this, x)) return;
	this->QWidget::setBackgroundOrigin(x1);
    }
    virtual void setBackgroundPixmap(const QPixmap& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(11526, (void*)this, x)) return;
	this->QWidget::setBackgroundPixmap(x1);
    }
    virtual void setCaption(const QString& x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)&x1;
	if(qt_Smoke->binding->callMethod(11592, (void*)this, x)) return;
	this->QWidget::setCaption(x1);
    }
    virtual void setCentralWidget(QWidget* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(5641, (void*)this, x)) return;
	this->QMainWindow::setCentralWidget(x1);
    }
    virtual void setCursor(const QCursor& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(11513, (void*)this, x)) return;
	this->QWidget::setCursor(x1);
    }
    virtual void setDockEnabled(QDockWindow* x1, Qt::Dock x2, bool x3) {
	Smoke::StackItem x[4];
	x[1].s_class = (void*)x1;
	x[2].s_enum = x2;
	x[3].s_bool = x3;
	if(qt_Smoke->binding->callMethod(5646, (void*)this, x)) return;
	this->QMainWindow::setDockEnabled(x1, x2, x3);
    }
    virtual void setDockEnabled(Qt::Dock x1, bool x2) {
	Smoke::StackItem x[3];
	x[1].s_enum = x1;
	x[2].s_bool = x2;
	if(qt_Smoke->binding->callMethod(5643, (void*)this, x)) return;
	this->QMainWindow::setDockEnabled(x1, x2);
    }
    virtual void setDockMenuEnabled(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(5705, (void*)this, x)) return;
	this->QMainWindow::setDockMenuEnabled(x1);
    }
    virtual void setDockWindowsMovable(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(5703, (void*)this, x)) return;
	this->QMainWindow::setDockWindowsMovable(x1);
    }
    virtual void setEnabled(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(11590, (void*)this, x)) return;
	this->QWidget::setEnabled(x1);
    }
    virtual void setEraseColor(const QColor& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(11490, (void*)this, x)) return;
	this->QWidget::setEraseColor(x1);
    }
    virtual void setErasePixmap(const QPixmap& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(11492, (void*)this, x)) return;
	this->QWidget::setErasePixmap(x1);
    }
    virtual void setFocus() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(11596, (void*)this, x)) return;
	this->QWidget::setFocus();
    }
    virtual void setFocusPolicy(QWidget::FocusPolicy x1) {
	Smoke::StackItem x[2];
	x[1].s_enum = x1;
	if(qt_Smoke->binding->callMethod(11531, (void*)this, x)) return;
	this->QWidget::setFocusPolicy(x1);
    }
    virtual void setFocusProxy(QWidget* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11533, (void*)this, x)) return;
	this->QWidget::setFocusProxy(x1);
    }
    virtual void setFont(const QFont& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(11507, (void*)this, x)) return;
	this->QWidget::setFont(x1);
    }
    virtual void setGeometry(const QRect& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(11628, (void*)this, x)) return;
	this->QWidget::setGeometry(x1);
    }
    virtual void setGeometry(int x1, int x2, int x3, int x4) {
	Smoke::StackItem x[5];
	x[1].s_int = x1;
	x[2].s_int = x2;
	x[3].s_int = x3;
	x[4].s_int = x4;
	if(qt_Smoke->binding->callMethod(11627, (void*)this, x)) return;
	this->QWidget::setGeometry(x1, x2, x3, x4);
    }
    virtual void setIcon(const QPixmap& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(11593, (void*)this, x)) return;
	this->QWidget::setIcon(x1);
    }
    virtual void setIconText(const QString& x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)&x1;
	if(qt_Smoke->binding->callMethod(11594, (void*)this, x)) return;
	this->QWidget::setIconText(x1);
    }
    virtual void setKeyCompression(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(11691, (void*)this, x)) return;
	this->QWidget::setKeyCompression(x1);
    }
    virtual void setMask(const QBitmap& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(11520, (void*)this, x)) return;
	this->QWidget::setMask(x1);
    }
    virtual void setMask(const QRegion& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(11521, (void*)this, x)) return;
	this->QWidget::setMask(x1);
    }
    virtual void setMaximumSize(int x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_int = x1;
	x[2].s_int = x2;
	if(qt_Smoke->binding->callMethod(11463, (void*)this, x)) return;
	this->QWidget::setMaximumSize(x1, x2);
    }
    virtual void setMicroFocusHint(int x1, int x2, int x3, int x4, bool x5, QFont* x6) {
	Smoke::StackItem x[7];
	x[1].s_int = x1;
	x[2].s_int = x2;
	x[3].s_int = x3;
	x[4].s_int = x4;
	x[5].s_bool = x5;
	x[6].s_class = (void*)x6;
	if(qt_Smoke->binding->callMethod(11692, (void*)this, x)) return;
	this->QWidget::setMicroFocusHint(x1, x2, x3, x4, x5, x6);
    }
    virtual void setMinimumSize(int x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_int = x1;
	x[2].s_int = x2;
	if(qt_Smoke->binding->callMethod(11461, (void*)this, x)) return;
	this->QWidget::setMinimumSize(x1, x2);
    }
    virtual void setMouseTracking(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(11595, (void*)this, x)) return;
	this->QWidget::setMouseTracking(x1);
    }
    virtual void setName(const char* x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(11430, (void*)this, x)) return;
	this->QWidget::setName(x1);
    }
    virtual void setOpaqueMoving(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(5704, (void*)this, x)) return;
	this->QMainWindow::setOpaqueMoving(x1);
    }
    virtual void setPalette(const QPalette& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(11496, (void*)this, x)) return;
	this->QWidget::setPalette(x1);
    }
    virtual void setPaletteBackgroundColor(const QColor& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(11501, (void*)this, x)) return;
	this->QWidget::setPaletteBackgroundColor(x1);
    }
    virtual void setPaletteBackgroundPixmap(const QPixmap& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(11503, (void*)this, x)) return;
	this->QWidget::setPaletteBackgroundPixmap(x1);
    }
    virtual bool setProperty(const char* x1, const QVariant& x2) {
	Smoke::StackItem x[3];
	x[1].s_voidp = (void*)x1;
	x[2].s_class = (void*)&x2;
	if(qt_Smoke->binding->callMethod(6493, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QObject::setProperty(x1, x2);
    }
    virtual void setResolution(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = x1;
	if(qt_Smoke->binding->callMethod(6636, (void*)this, x)) return;
	this->QPaintDevice::setResolution(x1);
    }
    virtual void setRightJustification(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(5700, (void*)this, x)) return;
	this->QMainWindow::setRightJustification(x1);
    }
    virtual void setSizeIncrement(int x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_int = x1;
	x[2].s_int = x2;
	if(qt_Smoke->binding->callMethod(11470, (void*)this, x)) return;
	this->QWidget::setSizeIncrement(x1, x2);
    }
    virtual void setSizePolicy(QSizePolicy x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(11552, (void*)this, x)) return;
	this->QWidget::setSizePolicy(x1);
    }
    virtual void setUpLayout() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(5723, (void*)this, x)) return;
	this->QMainWindow::setUpLayout();
    }
    virtual void setUpdatesEnabled(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(11598, (void*)this, x)) return;
	this->QWidget::setUpdatesEnabled(x1);
    }
    virtual void setUsesBigPixmaps(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(5701, (void*)this, x)) return;
	this->QMainWindow::setUsesBigPixmaps(x1);
    }
    virtual void setUsesTextLabel(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(5702, (void*)this, x)) return;
	this->QMainWindow::setUsesTextLabel(x1);
    }
    virtual void setWFlags(Qt::WFlags x1) {
	Smoke::StackItem x[2];
	x[1].s_int = x1;
	if(qt_Smoke->binding->callMethod(11685, (void*)this, x)) return;
	this->QWidget::setWFlags(x1);
    }
    virtual void setWState(uint x1) {
	Smoke::StackItem x[2];
	x[1].s_uint = x1;
	if(qt_Smoke->binding->callMethod(11682, (void*)this, x)) return;
	this->QWidget::setWState(x1);
    }
    virtual void show() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(5660, (void*)this, x)) return;
	this->QMainWindow::show();
    }
    virtual bool showDockMenu(const QPoint& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(5724, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QMainWindow::showDockMenu(x1);
    }
    virtual void showEvent(QShowEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11664, (void*)this, x)) return;
	this->QWidget::showEvent(x1);
    }
    virtual void showMaximized() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(11614, (void*)this, x)) return;
	this->QWidget::showMaximized();
    }
    virtual void showMinimized() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(11613, (void*)this, x)) return;
	this->QWidget::showMinimized();
    }
    virtual void showNormal() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(11616, (void*)this, x)) return;
	this->QWidget::showNormal();
    }
    virtual QSize sizeHint() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(5661, (void*)this, x)) {
	    QSize *xptr = (QSize *)x[0].s_class;
	    QSize xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QMainWindow::sizeHint();
    }
    virtual QSizePolicy sizePolicy() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(11551, (void*)this, x)) {
	    QSizePolicy *xptr = (QSizePolicy *)x[0].s_class;
	    QSizePolicy xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QWidget::sizePolicy();
    }
    virtual void styleChange(QStyle& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(5722, (void*)this, x)) return;
	this->QMainWindow::styleChange(x1);
    }
    virtual void tabletEvent(QTabletEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11659, (void*)this, x)) return;
	this->QWidget::tabletEvent(x1);
    }
    virtual void timerEvent(QTimerEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(6522, (void*)this, x)) return;
	this->QObject::timerEvent(x1);
    }
    virtual void unsetCursor() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(11514, (void*)this, x)) return;
	this->QWidget::unsetCursor();
    }
    virtual void updateMask() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(11666, (void*)this, x)) return;
	this->QWidget::updateMask();
    }
    virtual void whatsThis() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(5706, (void*)this, x)) return;
	this->QMainWindow::whatsThis();
    }
    virtual void wheelEvent(QWheelEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11644, (void*)this, x)) return;
	this->QWidget::wheelEvent(x1);
    }
    virtual void windowActivationChange(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(11671, (void*)this, x)) return;
	this->QWidget::windowActivationChange(x1);
    }
    static void xenum_operation(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
	switch(xtype) {
	  case 350: //QMainWindow::DockWindows
	    switch(xop) {
	      case Smoke::EnumNew:
		xdata = (void*)new QMainWindow::DockWindows;
		break;
	      case Smoke::EnumDelete:
		delete (QMainWindow::DockWindows*)xdata;
		break;
	      case Smoke::EnumFromLong:
		*(QMainWindow::DockWindows*)xdata = (QMainWindow::DockWindows)xvalue;
		break;
	      case Smoke::EnumToLong:
		xvalue = (long)*(QMainWindow::DockWindows*)xdata;
		break;
	    }
	    break;
	}
    }
    ~x_QMainWindow() { qt_Smoke->binding->deleted(189, (void*)this); }
};
void xenum_QMainWindow(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
    x_QMainWindow::xenum_operation(xop, xtype, xdata, xvalue);
}
void xcall_QMainWindow(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QMainWindow *xself = (x_QMainWindow*)obj;
    switch(xi) {
	case 0: x_QMainWindow::x_0(args);	break;
	case 1: x_QMainWindow::x_1(args);	break;
	case 2: x_QMainWindow::x_2(args);	break;
	case 3: xself->x_3(args);	break;
	case 4: xself->x_4(args);	break;
	case 5: xself->x_5(args);	break;
	case 6: xself->x_6(args);	break;
	case 7: xself->x_7(args);	break;
	case 8: xself->x_8(args);	break;
	case 9: xself->x_9(args);	break;
	case 10: x_QMainWindow::x_10(args);	break;
	case 11: x_QMainWindow::x_11(args);	break;
	case 12: x_QMainWindow::x_12(args);	break;
	case 13: x_QMainWindow::x_13(args);	break;
	case 14: xself->x_14(args);	break;
	case 15: xself->x_15(args);	break;
	case 16: xself->x_16(args);	break;
	case 17: xself->x_17(args);	break;
	case 18: xself->x_18(args);	break;
	case 19: xself->x_19(args);	break;
	case 20: xself->x_20(args);	break;
	case 21: xself->x_21(args);	break;
	case 22: xself->x_22(args);	break;
	case 23: xself->x_23(args);	break;
	case 24: xself->x_24(args);	break;
	case 25: xself->x_25(args);	break;
	case 26: xself->x_26(args);	break;
	case 27: xself->x_27(args);	break;
	case 28: xself->x_28(args);	break;
	case 29: xself->x_29(args);	break;
	case 30: xself->x_30(args);	break;
	case 31: xself->x_31(args);	break;
	case 32: xself->x_32(args);	break;
	case 33: xself->x_33(args);	break;
	case 34: xself->x_34(args);	break;
	case 35: xself->x_35(args);	break;
	case 36: xself->x_36(args);	break;
	case 37: xself->x_37(args);	break;
	case 38: xself->x_38(args);	break;
	case 39: xself->x_39(args);	break;
	case 40: xself->x_40(args);	break;
	case 41: xself->x_41(args);	break;
	case 42: xself->x_42(args);	break;
	case 43: xself->x_43(args);	break;
	case 44: xself->x_44(args);	break;
	case 45: xself->x_45(args);	break;
	case 46: xself->x_46(args);	break;
	case 47: xself->x_47(args);	break;
	case 48: xself->x_48(args);	break;
	case 49: xself->x_49(args);	break;
	case 50: xself->x_50(args);	break;
	case 51: xself->x_51(args);	break;
	case 52: xself->x_52(args);	break;
	case 53: xself->x_53(args);	break;
	case 54: xself->x_54(args);	break;
	case 55: xself->x_55(args);	break;
	case 56: xself->x_56(args);	break;
	case 57: xself->x_57(args);	break;
	case 58: xself->x_58(args);	break;
	case 59: xself->x_59(args);	break;
	case 60: xself->x_60(args);	break;
	case 61: xself->x_61(args);	break;
	case 62: xself->x_62(args);	break;
	case 63: xself->x_63(args);	break;
	case 64: xself->x_64(args);	break;
	case 65: xself->x_65(args);	break;
	case 66: xself->x_66(args);	break;
	case 67: xself->x_67(args);	break;
	case 68: xself->x_68(args);	break;
	case 69: xself->x_69(args);	break;
	case 70: xself->x_70(args);	break;
	case 71: xself->x_71(args);	break;
	case 72: xself->x_72(args);	break;
	case 73: xself->x_73(args);	break;
	case 74: xself->x_74(args);	break;
	case 75: xself->x_75(args);	break;
	case 76: xself->x_76(args);	break;
	case 77: xself->x_77(args);	break;
	case 78: xself->x_78(args);	break;
	case 79: xself->x_79(args);	break;
	case 80: xself->x_80(args);	break;
	case 81: xself->x_81(args);	break;
	case 82: xself->x_82(args);	break;
	case 83: xself->x_83(args);	break;
	case 84: xself->x_84(args);	break;
	case 85: xself->x_85(args);	break;
	case 86: xself->x_86(args);	break;
	case 87: xself->x_87(args);	break;
	case 88: xself->x_88(args);	break;
	case 89: xself->x_89(args);	break;
	case 90: x_QMainWindow::x_90(args);	break;
	case 91: x_QMainWindow::x_91(args);	break;
	case 92: x_QMainWindow::x_92(args);	break;
	case 93: x_QMainWindow::x_93(args);	break;
	case 94: x_QMainWindow::x_94(args);	break;
	case 95: xself->x_95(args);	break;
	case 96: xself->x_96(args);	break;
	case 97: xself->x_97(args);	break;
	case 98: xself->x_98(args);	break;
	case 99: xself->x_99(args);	break;
	case 100: xself->x_100(args);	break;
	case 101: xself->x_101(args);	break;
	case 102: delete (QMainWindow*)xself;	break;
    }
}
