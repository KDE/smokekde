//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke.h>
#include <qmetaobject.h>
#include <qstrlist.h>

class x_QMetaProperty {
private:
    QMetaProperty *xthis;
public:
    x_QMetaProperty(void *x) : xthis((QMetaProperty*)x) {}
    static void x_0(Smoke::Stack x) {
	x[0].s_enum = (long)QMetaProperty::Invalid;
    }
    static void x_1(Smoke::Stack x) {
	x[0].s_enum = (long)QMetaProperty::Readable;
    }
    static void x_2(Smoke::Stack x) {
	x[0].s_enum = (long)QMetaProperty::Writable;
    }
    static void x_3(Smoke::Stack x) {
	x[0].s_enum = (long)QMetaProperty::EnumOrSet;
    }
    static void x_4(Smoke::Stack x) {
	x[0].s_enum = (long)QMetaProperty::StdSet;
    }
    static void x_5(Smoke::Stack x) {
	x[0].s_enum = (long)QMetaProperty::Override;
    }
    void x_6(Smoke::Stack x) const {
	// type()
	const char* xret = xthis->QMetaProperty::type();
	x[0].s_class = (void*)xret;
    }
    void x_7(Smoke::Stack x) const {
	// name()
	const char* xret = xthis->QMetaProperty::name();
	x[0].s_class = (void*)xret;
    }
    void x_8(Smoke::Stack x) const {
	// writable()
	bool xret = xthis->QMetaProperty::writable();
	x[0].s_bool = (bool)xret;
    }
    void x_9(Smoke::Stack x) const {
	// isValid()
	bool xret = xthis->QMetaProperty::isValid();
	x[0].s_bool = (bool)xret;
    }
    void x_10(Smoke::Stack x) const {
	// isSetType()
	bool xret = xthis->QMetaProperty::isSetType();
	x[0].s_bool = (bool)xret;
    }
    void x_11(Smoke::Stack x) const {
	// isEnumType()
	bool xret = xthis->QMetaProperty::isEnumType();
	x[0].s_bool = (bool)xret;
    }
    void x_12(Smoke::Stack x) const {
	// enumKeys()
	QStrList xret = xthis->QMetaProperty::enumKeys();
	x[0].s_class = (void*)new QStrList(xret);
    }
    void x_13(Smoke::Stack x) const {
	// keyToValue(const char*)
	int xret = xthis->QMetaProperty::keyToValue((const char*)x[1].s_class);
	x[0].s_int = (int)xret;
    }
    void x_14(Smoke::Stack x) const {
	// valueToKey(int)
	const char* xret = xthis->QMetaProperty::valueToKey((int)x[1].s_int);
	x[0].s_class = (void*)xret;
    }
    void x_15(Smoke::Stack x) const {
	// keysToValue(const QStrList&)
	int xret = xthis->QMetaProperty::keysToValue(*(const QStrList *)x[1].s_class);
	x[0].s_int = (int)xret;
    }
    void x_16(Smoke::Stack x) const {
	// valueToKeys(int)
	QStrList xret = xthis->QMetaProperty::valueToKeys((int)x[1].s_int);
	x[0].s_class = (void*)new QStrList(xret);
    }
    void x_17(Smoke::Stack x) const {
	// designable(QObject*)
	bool xret = xthis->QMetaProperty::designable((QObject*)x[1].s_class);
	x[0].s_bool = (bool)xret;
    }
    void x_18(Smoke::Stack x) const {
	// scriptable(QObject*)
	bool xret = xthis->QMetaProperty::scriptable((QObject*)x[1].s_class);
	x[0].s_bool = (bool)xret;
    }
    void x_19(Smoke::Stack x) const {
	// stored(QObject*)
	bool xret = xthis->QMetaProperty::stored((QObject*)x[1].s_class);
	x[0].s_bool = (bool)xret;
    }
    void x_20(Smoke::Stack x) const {
	// reset(QObject*)
	bool xret = xthis->QMetaProperty::reset((QObject*)x[1].s_class);
	x[0].s_bool = (bool)xret;
    }
    void x_21(Smoke::Stack x) const {
	// testFlags(uint)
	bool xret = xthis->QMetaProperty::testFlags((uint)x[1].s_uint);
	x[0].s_bool = (bool)xret;
    }
    void x_22(Smoke::Stack x) const {
	// stdSet()
	bool xret = xthis->QMetaProperty::stdSet();
	x[0].s_bool = (bool)xret;
    }
    void x_23(Smoke::Stack x) const {
	// id()
	int xret = xthis->QMetaProperty::id();
	x[0].s_int = (int)xret;
    }
    void x_24(Smoke::Stack x) {
	// clear()
	xthis->QMetaProperty::clear();
    }
    ~x_QMetaProperty() {}
};
void xcall_QMetaProperty(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QMetaProperty xtmp(obj), *xself = &xtmp;
    switch(xi) {
	case 0: x_QMetaProperty::x_0(args);	break;
	case 1: x_QMetaProperty::x_1(args);	break;
	case 2: x_QMetaProperty::x_2(args);	break;
	case 3: x_QMetaProperty::x_3(args);	break;
	case 4: x_QMetaProperty::x_4(args);	break;
	case 5: x_QMetaProperty::x_5(args);	break;
	case 6: xself->x_6(args);	break;
	case 7: xself->x_7(args);	break;
	case 8: xself->x_8(args);	break;
	case 9: xself->x_9(args);	break;
	case 10: xself->x_10(args);	break;
	case 11: xself->x_11(args);	break;
	case 12: xself->x_12(args);	break;
	case 13: xself->x_13(args);	break;
	case 14: xself->x_14(args);	break;
	case 15: xself->x_15(args);	break;
	case 16: xself->x_16(args);	break;
	case 17: xself->x_17(args);	break;
	case 18: xself->x_18(args);	break;
	case 19: xself->x_19(args);	break;
	case 20: xself->x_20(args);	break;
	case 21: xself->x_21(args);	break;
	case 22: xself->x_22(args);	break;
	case 23: xself->x_23(args);	break;
	case 24: xself->x_24(args);	break;
    }
}
