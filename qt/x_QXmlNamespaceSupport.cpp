//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qstring.h>
#include <qxml.h>
#include <qstringlist.h>

class x_QXmlNamespaceSupport : public QXmlNamespaceSupport {
public:
    static void x_0(xargs *x) {
	// QXmlNamespaceSupport()
	x_QXmlNamespaceSupport* xret = new x_QXmlNamespaceSupport();
	x[0].x_voidp = (void*)xret;
    }
    x_QXmlNamespaceSupport() : QXmlNamespaceSupport() {
    }
    void x_1(xargs *x) {
	// setPrefix(const QString&, const QString&)
	this->QXmlNamespaceSupport::setPrefix(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp);
    }
    void x_2(xargs *x) const {
	// prefix(const QString&)
	QString xret = this->QXmlNamespaceSupport::prefix(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_3(xargs *x) const {
	// uri(const QString&)
	QString xret = this->QXmlNamespaceSupport::uri(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_4(xargs *x) const {
	// splitName(const QString&, QString&, QString&)
	this->QXmlNamespaceSupport::splitName(*(const QString *)x[1].x_voidp,*(QString *)x[2].x_voidp,*(QString *)x[3].x_voidp);
    }
    void x_5(xargs *x) const {
	// processName(const QString&, bool, QString&, QString&)
	this->QXmlNamespaceSupport::processName(*(const QString *)x[1].x_voidp,(bool)x[2].x_bool,*(QString *)x[3].x_voidp,*(QString *)x[4].x_voidp);
    }
    void x_6(xargs *x) const {
	// prefixes()
	QStringList xret = this->QXmlNamespaceSupport::prefixes();
	x[0].x_voidp = (void*)new QStringList(xret);
    }
    void x_7(xargs *x) const {
	// prefixes(const QString&)
	QStringList xret = this->QXmlNamespaceSupport::prefixes(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QStringList(xret);
    }
    void x_8(xargs *x) {
	// pushContext()
	this->QXmlNamespaceSupport::pushContext();
    }
    void x_9(xargs *x) {
	// popContext()
	this->QXmlNamespaceSupport::popContext();
    }
    void x_10(xargs *x) {
	// reset()
	this->QXmlNamespaceSupport::reset();
    }
    ~x_QXmlNamespaceSupport() {}
};
void xcall_QXmlNamespaceSupport(xargs *x, void *s, int xi) {
    x_QXmlNamespaceSupport *xself = (x_QXmlNamespaceSupport*)s;
    switch(xi) {
	case 0: x_QXmlNamespaceSupport::x_0(x);	break;
	case 1: xself->x_1(x);	break;
	case 2: xself->x_2(x);	break;
	case 3: xself->x_3(x);	break;
	case 4: xself->x_4(x);	break;
	case 5: xself->x_5(x);	break;
	case 6: xself->x_6(x);	break;
	case 7: xself->x_7(x);	break;
	case 8: xself->x_8(x);	break;
	case 9: xself->x_9(x);	break;
	case 10: xself->x_10(x);	break;
	case 11: delete (QXmlNamespaceSupport*)xself;	break;
    }
}
