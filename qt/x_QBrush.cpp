//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qcolor.h>
#include <qbrush.h>
#include <qpixmap.h>

class x_QBrush : public QBrush {
public:
    static void x_0(xargs *x) {
	// QBrush()
	x_QBrush* xret = new x_QBrush();
	x[0].x_voidp = (void*)xret;
    }
    x_QBrush() : QBrush() {
    }
    static void x_1(xargs *x) {
	// QBrush(Qt::BrushStyle)
	x_QBrush* xret = new x_QBrush((Qt::BrushStyle)x[1].x_long);
	x[0].x_voidp = (void*)xret;
    }
    x_QBrush(Qt::BrushStyle x1) : QBrush(x1) {
    }
    static void x_2(xargs *x) {
	// QBrush(const QColor&, Qt::BrushStyle)
	x_QBrush* xret = new x_QBrush(*(const QColor *)x[1].x_voidp,(Qt::BrushStyle)x[2].x_long);
	x[0].x_voidp = (void*)xret;
    }
    x_QBrush(const QColor& x1, Qt::BrushStyle x2) : QBrush(x1, x2) {
    }
    static void x_3(xargs *x) {
	// QBrush(const QColor&)
	x_QBrush* xret = new x_QBrush(*(const QColor *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QBrush(const QColor& x1) : QBrush(x1) {
    }
    static void x_4(xargs *x) {
	// QBrush(const QColor&, const QPixmap&)
	x_QBrush* xret = new x_QBrush(*(const QColor *)x[1].x_voidp,*(const QPixmap *)x[2].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QBrush(const QColor& x1, const QPixmap& x2) : QBrush(x1, x2) {
    }
    static void x_5(xargs *x) {
	// QBrush(const QBrush&)
	x_QBrush* xret = new x_QBrush(*(const QBrush *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QBrush(const QBrush& x1) : QBrush(x1) {
    }
    void x_6(xargs *x) {
	// operator=(const QBrush&)
	QBrush& xret = this->QBrush::operator=(*(const QBrush *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_7(xargs *x) const {
	// style()
	Qt::BrushStyle xret = this->QBrush::style();
	x[0].x_long = (long)xret;
    }
    void x_8(xargs *x) {
	// setStyle(Qt::BrushStyle)
	this->QBrush::setStyle((Qt::BrushStyle)x[1].x_long);
    }
    void x_9(xargs *x) const {
	// color()
	const QColor& xret = this->QBrush::color();
	x[0].x_voidp = (void*)&xret;
    }
    void x_10(xargs *x) {
	// setColor(const QColor&)
	this->QBrush::setColor(*(const QColor *)x[1].x_voidp);
    }
    void x_11(xargs *x) const {
	// pixmap()
	QPixmap* xret = this->QBrush::pixmap();
	x[0].x_voidp = (void*)xret;
    }
    void x_12(xargs *x) {
	// setPixmap(const QPixmap&)
	this->QBrush::setPixmap(*(const QPixmap *)x[1].x_voidp);
    }
    void x_13(xargs *x) const {
	// operator==(const QBrush&)
	bool xret = this->QBrush::operator==(*(const QBrush *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_14(xargs *x) const {
	// operator!=(const QBrush&)
	bool xret = this->QBrush::operator!=(*(const QBrush *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    ~x_QBrush() {}
};
void xcall_QBrush(xargs *x, void *s, int xi) {
    x_QBrush *xself = (x_QBrush*)s;
    switch(xi) {
	case 0: x_QBrush::x_0(x);	break;
	case 1: x_QBrush::x_1(x);	break;
	case 2: x_QBrush::x_2(x);	break;
	case 3: x_QBrush::x_3(x);	break;
	case 4: x_QBrush::x_4(x);	break;
	case 5: x_QBrush::x_5(x);	break;
	case 6: xself->x_6(x);	break;
	case 7: xself->x_7(x);	break;
	case 8: xself->x_8(x);	break;
	case 9: xself->x_9(x);	break;
	case 10: xself->x_10(x);	break;
	case 11: xself->x_11(x);	break;
	case 12: xself->x_12(x);	break;
	case 13: xself->x_13(x);	break;
	case 14: xself->x_14(x);	break;
	case 15: delete (QBrush*)xself;	break;
    }
}
