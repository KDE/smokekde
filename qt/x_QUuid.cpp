//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qglobal.h>
#include <qstring.h>
#include <quuid.h>

class x_QUuid : public QUuid {
public:
    static void x_0(xargs *x) {
	// QUuid()
	x_QUuid* xret = new x_QUuid();
	x[0].x_voidp = (void*)xret;
    }
    x_QUuid() : QUuid() {
    }
    static void x_1(xargs *x) {
	// QUuid(uint, ushort, ushort, uchar, uchar, uchar, uchar, uchar, uchar, uchar, uchar)
	x_QUuid* xret = new x_QUuid((uint)x[1].x_uint,(ushort)x[2].x_ushort,(ushort)x[3].x_ushort,*(uchar *)x[4].x_voidp,*(uchar *)x[5].x_voidp,*(uchar *)x[6].x_voidp,*(uchar *)x[7].x_voidp,*(uchar *)x[8].x_voidp,*(uchar *)x[9].x_voidp,*(uchar *)x[10].x_voidp,*(uchar *)x[11].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QUuid(uint x1, ushort x2, ushort x3, uchar x4, uchar x5, uchar x6, uchar x7, uchar x8, uchar x9, uchar x10, uchar x11) : QUuid(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11) {
    }
    static void x_2(xargs *x) {
	// QUuid(const QUuid&)
	x_QUuid* xret = new x_QUuid(*(const QUuid *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QUuid(const QUuid& x1) : QUuid(x1) {
    }
    static void x_3(xargs *x) {
	// QUuid(const QString&)
	x_QUuid* xret = new x_QUuid(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QUuid(const QString& x1) : QUuid(x1) {
    }
    void x_4(xargs *x) const {
	// toString()
	QString xret = this->QUuid::toString();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_5(xargs *x) const {
	// isNull()
	bool xret = this->QUuid::isNull();
	x[0].x_bool = (bool)xret;
    }
    void x_6(xargs *x) {
	// operator=(const QUuid&)
	QUuid& xret = this->QUuid::operator=(*(const QUuid *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_7(xargs *x) const {
	// operator==(const QUuid&)
	bool xret = this->QUuid::operator==(*(const QUuid *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_8(xargs *x) const {
	// operator!=(const QUuid&)
	bool xret = this->QUuid::operator!=(*(const QUuid *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    ~x_QUuid() {}
};
void xcall_QUuid(xargs *x, void *s, int xi) {
    x_QUuid *xself = (x_QUuid*)s;
    switch(xi) {
	case 0: x_QUuid::x_0(x);	break;
	case 1: x_QUuid::x_1(x);	break;
	case 2: x_QUuid::x_2(x);	break;
	case 3: x_QUuid::x_3(x);	break;
	case 4: xself->x_4(x);	break;
	case 5: xself->x_5(x);	break;
	case 6: xself->x_6(x);	break;
	case 7: xself->x_7(x);	break;
	case 8: xself->x_8(x);	break;
    }
}
