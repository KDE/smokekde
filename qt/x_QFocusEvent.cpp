//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qevent.h>

class x_QFocusEvent : public QFocusEvent {
public:
    static void x_0(xargs *x) {
	x[0].x_long = (long)QFocusEvent::Mouse;
    }
    static void x_1(xargs *x) {
	x[0].x_long = (long)QFocusEvent::Tab;
    }
    static void x_2(xargs *x) {
	x[0].x_long = (long)QFocusEvent::Backtab;
    }
    static void x_3(xargs *x) {
	x[0].x_long = (long)QFocusEvent::ActiveWindow;
    }
    static void x_4(xargs *x) {
	x[0].x_long = (long)QFocusEvent::Popup;
    }
    static void x_5(xargs *x) {
	x[0].x_long = (long)QFocusEvent::Shortcut;
    }
    static void x_6(xargs *x) {
	x[0].x_long = (long)QFocusEvent::Other;
    }
    static void x_7(xargs *x) {
	// QFocusEvent(QEvent::Type)
	x_QFocusEvent* xret = new x_QFocusEvent((QEvent::Type)x[1].x_long);
	x[0].x_voidp = (void*)xret;
    }
    x_QFocusEvent(QEvent::Type x1) : QFocusEvent(x1) {
    }
    void x_8(xargs *x) const {
	// gotFocus()
	bool xret = this->QFocusEvent::gotFocus();
	x[0].x_bool = (bool)xret;
    }
    void x_9(xargs *x) const {
	// lostFocus()
	bool xret = this->QFocusEvent::lostFocus();
	x[0].x_bool = (bool)xret;
    }
    static void x_10(xargs *x) {
	// reason()
	QFocusEvent::Reason xret = QFocusEvent::reason();
	x[0].x_long = (long)xret;
    }
    static void x_11(xargs *x) {
	// setReason(QFocusEvent::Reason)
	QFocusEvent::setReason((QFocusEvent::Reason)x[1].x_long);
    }
    static void x_12(xargs *x) {
	// resetReason()
	QFocusEvent::resetReason();
    }
    ~x_QFocusEvent() {}
};
void xcall_QFocusEvent(xargs *x, void *s, int xi) {
    x_QFocusEvent *xself = (x_QFocusEvent*)s;
    switch(xi) {
	case 0: x_QFocusEvent::x_0(x);	break;
	case 1: x_QFocusEvent::x_1(x);	break;
	case 2: x_QFocusEvent::x_2(x);	break;
	case 3: x_QFocusEvent::x_3(x);	break;
	case 4: x_QFocusEvent::x_4(x);	break;
	case 5: x_QFocusEvent::x_5(x);	break;
	case 6: x_QFocusEvent::x_6(x);	break;
	case 7: x_QFocusEvent::x_7(x);	break;
	case 8: xself->x_8(x);	break;
	case 9: xself->x_9(x);	break;
	case 10: x_QFocusEvent::x_10(x);	break;
	case 11: x_QFocusEvent::x_11(x);	break;
	case 12: x_QFocusEvent::x_12(x);	break;
    }
}
