//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qglobal.h>
#include <qdns.h>
#include <qstring.h>

class x_QDns__Server : public QDns::Server {
public:
    static void x_0(xargs *x) {
	// Server(const QString&, Q_UINT16, Q_UINT16, Q_UINT16)
	x_QDns__Server* xret = new x_QDns__Server(*(const QString *)x[1].x_voidp,*(Q_UINT16 *)x[2].x_voidp,*(Q_UINT16 *)x[3].x_voidp,*(Q_UINT16 *)x[4].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QDns__Server(const QString& x1, Q_UINT16 x2, Q_UINT16 x3, Q_UINT16 x4) : QDns::Server(x1, x2, x3, x4) {
    }
    static void x_1(xargs *x) {
	// Server(const QString&, Q_UINT16, Q_UINT16)
	x_QDns__Server* xret = new x_QDns__Server(*(const QString *)x[1].x_voidp,*(Q_UINT16 *)x[2].x_voidp,*(Q_UINT16 *)x[3].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QDns__Server(const QString& x1, Q_UINT16 x2, Q_UINT16 x3) : QDns::Server(x1, x2, x3) {
    }
    static void x_2(xargs *x) {
	// Server(const QString&, Q_UINT16)
	x_QDns__Server* xret = new x_QDns__Server(*(const QString *)x[1].x_voidp,*(Q_UINT16 *)x[2].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QDns__Server(const QString& x1, Q_UINT16 x2) : QDns::Server(x1, x2) {
    }
    static void x_3(xargs *x) {
	// Server(const QString&)
	x_QDns__Server* xret = new x_QDns__Server(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QDns__Server(const QString& x1) : QDns::Server(x1) {
    }
    static void x_4(xargs *x) {
	// Server()
	x_QDns__Server* xret = new x_QDns__Server();
	x[0].x_voidp = (void*)xret;
    }
    x_QDns__Server() : QDns::Server() {
    }
    ~x_QDns__Server() {}
};
void xcall_QDns__Server(xargs *x, void *s, int xi) {
    x_QDns__Server *xself = (x_QDns__Server*)s;
    switch(xi) {
	case 0: x_QDns__Server::x_0(x);	break;
	case 1: x_QDns__Server::x_1(x);	break;
	case 2: x_QDns__Server::x_2(x);	break;
	case 3: x_QDns__Server::x_3(x);	break;
	case 4: x_QDns__Server::x_4(x);	break;
    }
}
