//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qstring.h>
#include <qdom.h>

class x_QDomCDATASection : public QDomCDATASection {
public:
    static void x_0(xargs *x) {
	// QDomCDATASection()
	x_QDomCDATASection* xret = new x_QDomCDATASection();
	x[0].x_voidp = (void*)xret;
    }
    x_QDomCDATASection() : QDomCDATASection() {
    }
    static void x_1(xargs *x) {
	// QDomCDATASection(const QDomCDATASection&)
	x_QDomCDATASection* xret = new x_QDomCDATASection(*(const QDomCDATASection *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QDomCDATASection(const QDomCDATASection& x1) : QDomCDATASection(x1) {
    }
    void x_2(xargs *x) {
	// operator=(const QDomCDATASection&)
	QDomCDATASection& xret = this->QDomCDATASection::operator=(*(const QDomCDATASection *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_3(xargs *x) const {
	// nodeType()
	QDomNode::NodeType xret = this->QDomCDATASection::nodeType();
	x[0].x_long = (long)xret;
    }
    void x_4(xargs *x) const {
	// isCDATASection()
	bool xret = this->QDomCDATASection::isCDATASection();
	x[0].x_bool = (bool)xret;
    }
    virtual QDomNode appendChild(const QDomNode& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 2187, x)) {
	    QDomNode *xptr = (QDomNode *)x[0].x_voidp;
	    QDomNode xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::appendChild(x1);
    }
    virtual void appendData(const QString& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 1998, x)) return;
	this->QDomCharacterData::appendData(x1);
    }
    virtual QDomNamedNodeMap attributes() const {
	xargs x[1];
	if(call_method((void*)this, 2201, x)) {
	    QDomNamedNodeMap *xptr = (QDomNamedNodeMap *)x[0].x_voidp;
	    QDomNamedNodeMap xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::attributes();
    }
    virtual QDomNodeList childNodes() const {
	xargs x[1];
	if(call_method((void*)this, 2196, x)) {
	    QDomNodeList *xptr = (QDomNodeList *)x[0].x_voidp;
	    QDomNodeList xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::childNodes();
    }
    virtual QDomNode cloneNode(bool x1) const {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 2189, x)) {
	    QDomNode *xptr = (QDomNode *)x[0].x_voidp;
	    QDomNode xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::cloneNode(x1);
    }
    virtual QString data() const {
	xargs x[1];
	if(call_method((void*)this, 2003, x)) {
	    QString *xptr = (QString *)x[0].x_voidp;
	    QString xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomCharacterData::data();
    }
    virtual void deleteData(unsigned long x1, unsigned long x2) {
	xargs x[3];
	x[1].x_voidp = (void*)&x1;
	x[2].x_voidp = (void*)&x2;
	if(call_method((void*)this, 2000, x)) return;
	this->QDomCharacterData::deleteData(x1, x2);
    }
    virtual QDomNode firstChild() const {
	xargs x[1];
	if(call_method((void*)this, 2197, x)) {
	    QDomNode *xptr = (QDomNode *)x[0].x_voidp;
	    QDomNode xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::firstChild();
    }
    virtual bool hasAttributes() const {
	xargs x[1];
	if(call_method((void*)this, 2205, x)) return (bool)x[0].x_bool;
	return this->QDomNode::hasAttributes();
    }
    virtual bool hasChildNodes() const {
	xargs x[1];
	if(call_method((void*)this, 2188, x)) return (bool)x[0].x_bool;
	return this->QDomNode::hasChildNodes();
    }
    virtual QDomNode insertAfter(const QDomNode& x1, const QDomNode& x2) {
	xargs x[3];
	x[1].x_voidp = (void*)&x1;
	x[2].x_voidp = (void*)&x2;
	if(call_method((void*)this, 2184, x)) {
	    QDomNode *xptr = (QDomNode *)x[0].x_voidp;
	    QDomNode xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::insertAfter(x1, x2);
    }
    virtual QDomNode insertBefore(const QDomNode& x1, const QDomNode& x2) {
	xargs x[3];
	x[1].x_voidp = (void*)&x1;
	x[2].x_voidp = (void*)&x2;
	if(call_method((void*)this, 2183, x)) {
	    QDomNode *xptr = (QDomNode *)x[0].x_voidp;
	    QDomNode xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::insertBefore(x1, x2);
    }
    virtual void insertData(unsigned long x1, const QString& x2) {
	xargs x[3];
	x[1].x_voidp = (void*)&x1;
	x[2].x_voidp = (void*)&x2;
	if(call_method((void*)this, 1999, x)) return;
	this->QDomCharacterData::insertData(x1, x2);
    }
    virtual bool isAttr() const {
	xargs x[1];
	if(call_method((void*)this, 2210, x)) return (bool)x[0].x_bool;
	return this->QDomNode::isAttr();
    }
    virtual bool isCDATASection() const {
	xargs x[1];
	if(call_method((void*)this, 1992, x)) return (bool)x[0].x_bool;
	return this->QDomCDATASection::isCDATASection();
    }
    virtual bool isCharacterData() const {
	xargs x[1];
	if(call_method((void*)this, 2006, x)) return (bool)x[0].x_bool;
	return this->QDomCharacterData::isCharacterData();
    }
    virtual bool isComment() const {
	xargs x[1];
	if(call_method((void*)this, 2222, x)) return (bool)x[0].x_bool;
	return this->QDomNode::isComment();
    }
    virtual bool isDocument() const {
	xargs x[1];
	if(call_method((void*)this, 2213, x)) return (bool)x[0].x_bool;
	return this->QDomNode::isDocument();
    }
    virtual bool isDocumentFragment() const {
	xargs x[1];
	if(call_method((void*)this, 2212, x)) return (bool)x[0].x_bool;
	return this->QDomNode::isDocumentFragment();
    }
    virtual bool isDocumentType() const {
	xargs x[1];
	if(call_method((void*)this, 2214, x)) return (bool)x[0].x_bool;
	return this->QDomNode::isDocumentType();
    }
    virtual bool isElement() const {
	xargs x[1];
	if(call_method((void*)this, 2215, x)) return (bool)x[0].x_bool;
	return this->QDomNode::isElement();
    }
    virtual bool isEntity() const {
	xargs x[1];
	if(call_method((void*)this, 2218, x)) return (bool)x[0].x_bool;
	return this->QDomNode::isEntity();
    }
    virtual bool isEntityReference() const {
	xargs x[1];
	if(call_method((void*)this, 2216, x)) return (bool)x[0].x_bool;
	return this->QDomNode::isEntityReference();
    }
    virtual bool isNotation() const {
	xargs x[1];
	if(call_method((void*)this, 2219, x)) return (bool)x[0].x_bool;
	return this->QDomNode::isNotation();
    }
    virtual bool isProcessingInstruction() const {
	xargs x[1];
	if(call_method((void*)this, 2220, x)) return (bool)x[0].x_bool;
	return this->QDomNode::isProcessingInstruction();
    }
    virtual bool isSupported(const QString& x1, const QString& x2) const {
	xargs x[3];
	x[1].x_voidp = (void*)&x1;
	x[2].x_voidp = (void*)&x2;
	if(call_method((void*)this, 2192, x)) return (bool)x[0].x_bool;
	return this->QDomNode::isSupported(x1, x2);
    }
    virtual bool isText() const {
	xargs x[1];
	if(call_method((void*)this, 2273, x)) return (bool)x[0].x_bool;
	return this->QDomText::isText();
    }
    virtual QDomNode lastChild() const {
	xargs x[1];
	if(call_method((void*)this, 2198, x)) {
	    QDomNode *xptr = (QDomNode *)x[0].x_voidp;
	    QDomNode xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::lastChild();
    }
    virtual uint length() const {
	xargs x[1];
	if(call_method((void*)this, 2002, x)) return (uint)x[0].x_uint;
	return this->QDomCharacterData::length();
    }
    virtual QString localName() const {
	xargs x[1];
	if(call_method((void*)this, 2204, x)) {
	    QString *xptr = (QString *)x[0].x_voidp;
	    QString xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::localName();
    }
    virtual QString namespaceURI() const {
	xargs x[1];
	if(call_method((void*)this, 2203, x)) {
	    QString *xptr = (QString *)x[0].x_voidp;
	    QString xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::namespaceURI();
    }
    virtual QDomNode nextSibling() const {
	xargs x[1];
	if(call_method((void*)this, 2200, x)) {
	    QDomNode *xptr = (QDomNode *)x[0].x_voidp;
	    QDomNode xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::nextSibling();
    }
    virtual QString nodeName() const {
	xargs x[1];
	if(call_method((void*)this, 2193, x)) {
	    QString *xptr = (QString *)x[0].x_voidp;
	    QString xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::nodeName();
    }
    virtual QDomNode::NodeType nodeType() const {
	xargs x[1];
	if(call_method((void*)this, 1991, x)) return (QDomNode::NodeType)x[0].x_long;
	return this->QDomCDATASection::nodeType();
    }
    virtual QString nodeValue() const {
	xargs x[1];
	if(call_method((void*)this, 2206, x)) {
	    QString *xptr = (QString *)x[0].x_voidp;
	    QString xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::nodeValue();
    }
    virtual void normalize() {
	xargs x[1];
	if(call_method((void*)this, 2191, x)) return;
	this->QDomNode::normalize();
    }
    virtual QDomDocument ownerDocument() const {
	xargs x[1];
	if(call_method((void*)this, 2202, x)) {
	    QDomDocument *xptr = (QDomDocument *)x[0].x_voidp;
	    QDomDocument xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::ownerDocument();
    }
    virtual QDomNode parentNode() const {
	xargs x[1];
	if(call_method((void*)this, 2195, x)) {
	    QDomNode *xptr = (QDomNode *)x[0].x_voidp;
	    QDomNode xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::parentNode();
    }
    virtual QString prefix() const {
	xargs x[1];
	if(call_method((void*)this, 2208, x)) {
	    QString *xptr = (QString *)x[0].x_voidp;
	    QString xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::prefix();
    }
    virtual QDomNode previousSibling() const {
	xargs x[1];
	if(call_method((void*)this, 2199, x)) {
	    QDomNode *xptr = (QDomNode *)x[0].x_voidp;
	    QDomNode xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::previousSibling();
    }
    virtual QDomNode removeChild(const QDomNode& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 2186, x)) {
	    QDomNode *xptr = (QDomNode *)x[0].x_voidp;
	    QDomNode xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::removeChild(x1);
    }
    virtual QDomNode replaceChild(const QDomNode& x1, const QDomNode& x2) {
	xargs x[3];
	x[1].x_voidp = (void*)&x1;
	x[2].x_voidp = (void*)&x2;
	if(call_method((void*)this, 2185, x)) {
	    QDomNode *xptr = (QDomNode *)x[0].x_voidp;
	    QDomNode xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::replaceChild(x1, x2);
    }
    virtual void replaceData(unsigned long x1, unsigned long x2, const QString& x3) {
	xargs x[4];
	x[1].x_voidp = (void*)&x1;
	x[2].x_voidp = (void*)&x2;
	x[3].x_voidp = (void*)&x3;
	if(call_method((void*)this, 2001, x)) return;
	this->QDomCharacterData::replaceData(x1, x2, x3);
    }
    virtual void setData(const QString& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 2004, x)) return;
	this->QDomCharacterData::setData(x1);
    }
    virtual void setNodeValue(const QString& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 2207, x)) return;
	this->QDomNode::setNodeValue(x1);
    }
    virtual void setPrefix(const QString& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 2209, x)) return;
	this->QDomNode::setPrefix(x1);
    }
    virtual QString substringData(unsigned long x1, unsigned long x2) {
	xargs x[3];
	x[1].x_voidp = (void*)&x1;
	x[2].x_voidp = (void*)&x2;
	if(call_method((void*)this, 1997, x)) {
	    QString *xptr = (QString *)x[0].x_voidp;
	    QString xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomCharacterData::substringData(x1, x2);
    }
    ~x_QDomCDATASection() {}
};
void xcall_QDomCDATASection(xargs *x, void *s, int xi) {
    x_QDomCDATASection *xself = (x_QDomCDATASection*)s;
    switch(xi) {
	case 0: x_QDomCDATASection::x_0(x);	break;
	case 1: x_QDomCDATASection::x_1(x);	break;
	case 2: xself->x_2(x);	break;
	case 3: xself->x_3(x);	break;
	case 4: xself->x_4(x);	break;
	case 5: delete (QDomCDATASection*)xself;	break;
    }
}
