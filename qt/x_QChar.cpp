//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qglobal.h>
#include <qstring.h>

class x_QChar : public QChar {
public:
    static void x_0(xargs *x) {
	x[0].x_long = (long)QChar::NoCategory;
    }
    static void x_1(xargs *x) {
	x[0].x_long = (long)QChar::Mark_NonSpacing;
    }
    static void x_2(xargs *x) {
	x[0].x_long = (long)QChar::Mark_SpacingCombining;
    }
    static void x_3(xargs *x) {
	x[0].x_long = (long)QChar::Mark_Enclosing;
    }
    static void x_4(xargs *x) {
	x[0].x_long = (long)QChar::Number_DecimalDigit;
    }
    static void x_5(xargs *x) {
	x[0].x_long = (long)QChar::Number_Letter;
    }
    static void x_6(xargs *x) {
	x[0].x_long = (long)QChar::Number_Other;
    }
    static void x_7(xargs *x) {
	x[0].x_long = (long)QChar::Separator_Space;
    }
    static void x_8(xargs *x) {
	x[0].x_long = (long)QChar::Separator_Line;
    }
    static void x_9(xargs *x) {
	x[0].x_long = (long)QChar::Separator_Paragraph;
    }
    static void x_10(xargs *x) {
	x[0].x_long = (long)QChar::Other_Control;
    }
    static void x_11(xargs *x) {
	x[0].x_long = (long)QChar::Other_Format;
    }
    static void x_12(xargs *x) {
	x[0].x_long = (long)QChar::Other_Surrogate;
    }
    static void x_13(xargs *x) {
	x[0].x_long = (long)QChar::Other_PrivateUse;
    }
    static void x_14(xargs *x) {
	x[0].x_long = (long)QChar::Other_NotAssigned;
    }
    static void x_15(xargs *x) {
	x[0].x_long = (long)QChar::Letter_Uppercase;
    }
    static void x_16(xargs *x) {
	x[0].x_long = (long)QChar::Letter_Lowercase;
    }
    static void x_17(xargs *x) {
	x[0].x_long = (long)QChar::Letter_Titlecase;
    }
    static void x_18(xargs *x) {
	x[0].x_long = (long)QChar::Letter_Modifier;
    }
    static void x_19(xargs *x) {
	x[0].x_long = (long)QChar::Letter_Other;
    }
    static void x_20(xargs *x) {
	x[0].x_long = (long)QChar::Punctuation_Connector;
    }
    static void x_21(xargs *x) {
	x[0].x_long = (long)QChar::Punctuation_Dash;
    }
    static void x_22(xargs *x) {
	x[0].x_long = (long)QChar::Punctuation_Dask;
    }
    static void x_23(xargs *x) {
	x[0].x_long = (long)QChar::Punctuation_Open;
    }
    static void x_24(xargs *x) {
	x[0].x_long = (long)QChar::Punctuation_Close;
    }
    static void x_25(xargs *x) {
	x[0].x_long = (long)QChar::Punctuation_InitialQuote;
    }
    static void x_26(xargs *x) {
	x[0].x_long = (long)QChar::Punctuation_FinalQuote;
    }
    static void x_27(xargs *x) {
	x[0].x_long = (long)QChar::Punctuation_Other;
    }
    static void x_28(xargs *x) {
	x[0].x_long = (long)QChar::Symbol_Math;
    }
    static void x_29(xargs *x) {
	x[0].x_long = (long)QChar::Symbol_Currency;
    }
    static void x_30(xargs *x) {
	x[0].x_long = (long)QChar::Symbol_Modifier;
    }
    static void x_31(xargs *x) {
	x[0].x_long = (long)QChar::Symbol_Other;
    }
    static void x_32(xargs *x) {
	x[0].x_long = (long)QChar::DirL;
    }
    static void x_33(xargs *x) {
	x[0].x_long = (long)QChar::DirR;
    }
    static void x_34(xargs *x) {
	x[0].x_long = (long)QChar::DirEN;
    }
    static void x_35(xargs *x) {
	x[0].x_long = (long)QChar::DirES;
    }
    static void x_36(xargs *x) {
	x[0].x_long = (long)QChar::DirET;
    }
    static void x_37(xargs *x) {
	x[0].x_long = (long)QChar::DirAN;
    }
    static void x_38(xargs *x) {
	x[0].x_long = (long)QChar::DirCS;
    }
    static void x_39(xargs *x) {
	x[0].x_long = (long)QChar::DirB;
    }
    static void x_40(xargs *x) {
	x[0].x_long = (long)QChar::DirS;
    }
    static void x_41(xargs *x) {
	x[0].x_long = (long)QChar::DirWS;
    }
    static void x_42(xargs *x) {
	x[0].x_long = (long)QChar::DirON;
    }
    static void x_43(xargs *x) {
	x[0].x_long = (long)QChar::DirLRE;
    }
    static void x_44(xargs *x) {
	x[0].x_long = (long)QChar::DirLRO;
    }
    static void x_45(xargs *x) {
	x[0].x_long = (long)QChar::DirAL;
    }
    static void x_46(xargs *x) {
	x[0].x_long = (long)QChar::DirRLE;
    }
    static void x_47(xargs *x) {
	x[0].x_long = (long)QChar::DirRLO;
    }
    static void x_48(xargs *x) {
	x[0].x_long = (long)QChar::DirPDF;
    }
    static void x_49(xargs *x) {
	x[0].x_long = (long)QChar::DirNSM;
    }
    static void x_50(xargs *x) {
	x[0].x_long = (long)QChar::DirBN;
    }
    static void x_51(xargs *x) {
	x[0].x_long = (long)QChar::Single;
    }
    static void x_52(xargs *x) {
	x[0].x_long = (long)QChar::Canonical;
    }
    static void x_53(xargs *x) {
	x[0].x_long = (long)QChar::Font;
    }
    static void x_54(xargs *x) {
	x[0].x_long = (long)QChar::NoBreak;
    }
    static void x_55(xargs *x) {
	x[0].x_long = (long)QChar::Initial;
    }
    static void x_56(xargs *x) {
	x[0].x_long = (long)QChar::Medial;
    }
    static void x_57(xargs *x) {
	x[0].x_long = (long)QChar::Final;
    }
    static void x_58(xargs *x) {
	x[0].x_long = (long)QChar::Isolated;
    }
    static void x_59(xargs *x) {
	x[0].x_long = (long)QChar::Circle;
    }
    static void x_60(xargs *x) {
	x[0].x_long = (long)QChar::Super;
    }
    static void x_61(xargs *x) {
	x[0].x_long = (long)QChar::Sub;
    }
    static void x_62(xargs *x) {
	x[0].x_long = (long)QChar::Vertical;
    }
    static void x_63(xargs *x) {
	x[0].x_long = (long)QChar::Wide;
    }
    static void x_64(xargs *x) {
	x[0].x_long = (long)QChar::Narrow;
    }
    static void x_65(xargs *x) {
	x[0].x_long = (long)QChar::Small;
    }
    static void x_66(xargs *x) {
	x[0].x_long = (long)QChar::Square;
    }
    static void x_67(xargs *x) {
	x[0].x_long = (long)QChar::Compat;
    }
    static void x_68(xargs *x) {
	x[0].x_long = (long)QChar::Fraction;
    }
    static void x_69(xargs *x) {
	x[0].x_long = (long)QChar::OtherJoining;
    }
    static void x_70(xargs *x) {
	x[0].x_long = (long)QChar::Dual;
    }
    static void x_71(xargs *x) {
	x[0].x_long = (long)QChar::Right;
    }
    static void x_72(xargs *x) {
	x[0].x_long = (long)QChar::Center;
    }
    static void x_73(xargs *x) {
	x[0].x_long = (long)QChar::Combining_BelowLeftAttached;
    }
    static void x_74(xargs *x) {
	x[0].x_long = (long)QChar::Combining_BelowAttached;
    }
    static void x_75(xargs *x) {
	x[0].x_long = (long)QChar::Combining_BelowRightAttached;
    }
    static void x_76(xargs *x) {
	x[0].x_long = (long)QChar::Combining_LeftAttached;
    }
    static void x_77(xargs *x) {
	x[0].x_long = (long)QChar::Combining_RightAttached;
    }
    static void x_78(xargs *x) {
	x[0].x_long = (long)QChar::Combining_AboveLeftAttached;
    }
    static void x_79(xargs *x) {
	x[0].x_long = (long)QChar::Combining_AboveAttached;
    }
    static void x_80(xargs *x) {
	x[0].x_long = (long)QChar::Combining_AboveRightAttached;
    }
    static void x_81(xargs *x) {
	x[0].x_long = (long)QChar::Combining_BelowLeft;
    }
    static void x_82(xargs *x) {
	x[0].x_long = (long)QChar::Combining_Below;
    }
    static void x_83(xargs *x) {
	x[0].x_long = (long)QChar::Combining_BelowRight;
    }
    static void x_84(xargs *x) {
	x[0].x_long = (long)QChar::Combining_Left;
    }
    static void x_85(xargs *x) {
	x[0].x_long = (long)QChar::Combining_Right;
    }
    static void x_86(xargs *x) {
	x[0].x_long = (long)QChar::Combining_AboveLeft;
    }
    static void x_87(xargs *x) {
	x[0].x_long = (long)QChar::Combining_Above;
    }
    static void x_88(xargs *x) {
	x[0].x_long = (long)QChar::Combining_AboveRight;
    }
    static void x_89(xargs *x) {
	x[0].x_long = (long)QChar::Combining_DoubleBelow;
    }
    static void x_90(xargs *x) {
	x[0].x_long = (long)QChar::Combining_DoubleAbove;
    }
    static void x_91(xargs *x) {
	x[0].x_long = (long)QChar::Combining_IotaSubscript;
    }
    static void x_92(xargs *x) {
	// QChar()
	x_QChar* xret = new x_QChar();
	x[0].x_voidp = (void*)xret;
    }
    x_QChar() : QChar() {
    }
    static void x_93(xargs *x) {
	// QChar(char)
	x_QChar* xret = new x_QChar((char)x[1].x_char);
	x[0].x_voidp = (void*)xret;
    }
    x_QChar(char x1) : QChar(x1) {
    }
    static void x_94(xargs *x) {
	// QChar(uchar)
	x_QChar* xret = new x_QChar(*(uchar *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QChar(uchar x1) : QChar(x1) {
    }
    static void x_95(xargs *x) {
	// QChar(uchar, uchar)
	x_QChar* xret = new x_QChar(*(uchar *)x[1].x_voidp,*(uchar *)x[2].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QChar(uchar x1, uchar x2) : QChar(x1, x2) {
    }
    static void x_96(xargs *x) {
	// QChar(const QChar&)
	x_QChar* xret = new x_QChar(*(const QChar *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QChar(const QChar& x1) : QChar(x1) {
    }
    static void x_97(xargs *x) {
	// QChar(ushort)
	x_QChar* xret = new x_QChar((ushort)x[1].x_ushort);
	x[0].x_voidp = (void*)xret;
    }
    x_QChar(ushort x1) : QChar(x1) {
    }
    static void x_98(xargs *x) {
	// QChar(short)
	x_QChar* xret = new x_QChar(*(short *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QChar(short x1) : QChar(x1) {
    }
    static void x_99(xargs *x) {
	// QChar(uint)
	x_QChar* xret = new x_QChar((uint)x[1].x_uint);
	x[0].x_voidp = (void*)xret;
    }
    x_QChar(uint x1) : QChar(x1) {
    }
    static void x_100(xargs *x) {
	// QChar(int)
	x_QChar* xret = new x_QChar((int)x[1].x_int);
	x[0].x_voidp = (void*)xret;
    }
    x_QChar(int x1) : QChar(x1) {
    }
    void x_101(xargs *x) const {
	// digitValue()
	int xret = this->QChar::digitValue();
	x[0].x_int = (int)xret;
    }
    void x_102(xargs *x) const {
	// lower()
	QChar xret = this->QChar::lower();
	x[0].x_voidp = (void*)new QChar(xret);
    }
    void x_103(xargs *x) const {
	// upper()
	QChar xret = this->QChar::upper();
	x[0].x_voidp = (void*)new QChar(xret);
    }
    void x_104(xargs *x) const {
	// category()
	QChar::Category xret = this->QChar::category();
	x[0].x_long = (long)xret;
    }
    void x_105(xargs *x) const {
	// direction()
	QChar::Direction xret = this->QChar::direction();
	x[0].x_long = (long)xret;
    }
    void x_106(xargs *x) const {
	// joining()
	QChar::Joining xret = this->QChar::joining();
	x[0].x_long = (long)xret;
    }
    void x_107(xargs *x) const {
	// mirrored()
	bool xret = this->QChar::mirrored();
	x[0].x_bool = (bool)xret;
    }
    void x_108(xargs *x) const {
	// mirroredChar()
	QChar xret = this->QChar::mirroredChar();
	x[0].x_voidp = (void*)new QChar(xret);
    }
    void x_109(xargs *x) const {
	// decomposition()
	const QString& xret = this->QChar::decomposition();
	x[0].x_voidp = (void*)&xret;
    }
    void x_110(xargs *x) const {
	// decompositionTag()
	QChar::Decomposition xret = this->QChar::decompositionTag();
	x[0].x_long = (long)xret;
    }
    void x_111(xargs *x) const {
	// combiningClass()
	unsigned char xret = this->QChar::combiningClass();
	x[0].x_voidp = (void*)new unsigned char(xret);
    }
    void x_112(xargs *x) const {
	// latin1()
	char xret = this->QChar::latin1();
	x[0].x_char = (char)xret;
    }
    void x_113(xargs *x) const {
	// unicode()
	ushort xret = this->QChar::unicode();
	x[0].x_ushort = (ushort)xret;
    }
    void x_114(xargs *x) {
	// unicode()
	ushort& xret = this->QChar::unicode();
	x[0].x_voidp = (void*)&xret;
    }
    void x_115(xargs *x) const {
	// isNull()
	bool xret = this->QChar::isNull();
	x[0].x_bool = (bool)xret;
    }
    void x_116(xargs *x) const {
	// isPrint()
	bool xret = this->QChar::isPrint();
	x[0].x_bool = (bool)xret;
    }
    void x_117(xargs *x) const {
	// isPunct()
	bool xret = this->QChar::isPunct();
	x[0].x_bool = (bool)xret;
    }
    void x_118(xargs *x) const {
	// isSpace()
	bool xret = this->QChar::isSpace();
	x[0].x_bool = (bool)xret;
    }
    void x_119(xargs *x) const {
	// isMark()
	bool xret = this->QChar::isMark();
	x[0].x_bool = (bool)xret;
    }
    void x_120(xargs *x) const {
	// isLetter()
	bool xret = this->QChar::isLetter();
	x[0].x_bool = (bool)xret;
    }
    void x_121(xargs *x) const {
	// isNumber()
	bool xret = this->QChar::isNumber();
	x[0].x_bool = (bool)xret;
    }
    void x_122(xargs *x) const {
	// isLetterOrNumber()
	bool xret = this->QChar::isLetterOrNumber();
	x[0].x_bool = (bool)xret;
    }
    void x_123(xargs *x) const {
	// isDigit()
	bool xret = this->QChar::isDigit();
	x[0].x_bool = (bool)xret;
    }
    void x_124(xargs *x) const {
	// isSymbol()
	bool xret = this->QChar::isSymbol();
	x[0].x_bool = (bool)xret;
    }
    void x_125(xargs *x) const {
	// cell()
	uchar xret = this->QChar::cell();
	x[0].x_voidp = (void*)new uchar(xret);
    }
    void x_126(xargs *x) const {
	// row()
	uchar xret = this->QChar::row();
	x[0].x_voidp = (void*)new uchar(xret);
    }
    void x_127(xargs *x) {
	// setCell(uchar)
	this->QChar::setCell(*(uchar *)x[1].x_voidp);
    }
    void x_128(xargs *x) {
	// setRow(uchar)
	this->QChar::setRow(*(uchar *)x[1].x_voidp);
    }
    static void x_129(xargs *x) {
	// networkOrdered()
	bool xret = QChar::networkOrdered();
	x[0].x_bool = (bool)xret;
    }
    ~x_QChar() {}
};
void xcall_QChar(xargs *x, void *s, int xi) {
    x_QChar *xself = (x_QChar*)s;
    switch(xi) {
	case 0: x_QChar::x_0(x);	break;
	case 1: x_QChar::x_1(x);	break;
	case 2: x_QChar::x_2(x);	break;
	case 3: x_QChar::x_3(x);	break;
	case 4: x_QChar::x_4(x);	break;
	case 5: x_QChar::x_5(x);	break;
	case 6: x_QChar::x_6(x);	break;
	case 7: x_QChar::x_7(x);	break;
	case 8: x_QChar::x_8(x);	break;
	case 9: x_QChar::x_9(x);	break;
	case 10: x_QChar::x_10(x);	break;
	case 11: x_QChar::x_11(x);	break;
	case 12: x_QChar::x_12(x);	break;
	case 13: x_QChar::x_13(x);	break;
	case 14: x_QChar::x_14(x);	break;
	case 15: x_QChar::x_15(x);	break;
	case 16: x_QChar::x_16(x);	break;
	case 17: x_QChar::x_17(x);	break;
	case 18: x_QChar::x_18(x);	break;
	case 19: x_QChar::x_19(x);	break;
	case 20: x_QChar::x_20(x);	break;
	case 21: x_QChar::x_21(x);	break;
	case 22: x_QChar::x_22(x);	break;
	case 23: x_QChar::x_23(x);	break;
	case 24: x_QChar::x_24(x);	break;
	case 25: x_QChar::x_25(x);	break;
	case 26: x_QChar::x_26(x);	break;
	case 27: x_QChar::x_27(x);	break;
	case 28: x_QChar::x_28(x);	break;
	case 29: x_QChar::x_29(x);	break;
	case 30: x_QChar::x_30(x);	break;
	case 31: x_QChar::x_31(x);	break;
	case 32: x_QChar::x_32(x);	break;
	case 33: x_QChar::x_33(x);	break;
	case 34: x_QChar::x_34(x);	break;
	case 35: x_QChar::x_35(x);	break;
	case 36: x_QChar::x_36(x);	break;
	case 37: x_QChar::x_37(x);	break;
	case 38: x_QChar::x_38(x);	break;
	case 39: x_QChar::x_39(x);	break;
	case 40: x_QChar::x_40(x);	break;
	case 41: x_QChar::x_41(x);	break;
	case 42: x_QChar::x_42(x);	break;
	case 43: x_QChar::x_43(x);	break;
	case 44: x_QChar::x_44(x);	break;
	case 45: x_QChar::x_45(x);	break;
	case 46: x_QChar::x_46(x);	break;
	case 47: x_QChar::x_47(x);	break;
	case 48: x_QChar::x_48(x);	break;
	case 49: x_QChar::x_49(x);	break;
	case 50: x_QChar::x_50(x);	break;
	case 51: x_QChar::x_51(x);	break;
	case 52: x_QChar::x_52(x);	break;
	case 53: x_QChar::x_53(x);	break;
	case 54: x_QChar::x_54(x);	break;
	case 55: x_QChar::x_55(x);	break;
	case 56: x_QChar::x_56(x);	break;
	case 57: x_QChar::x_57(x);	break;
	case 58: x_QChar::x_58(x);	break;
	case 59: x_QChar::x_59(x);	break;
	case 60: x_QChar::x_60(x);	break;
	case 61: x_QChar::x_61(x);	break;
	case 62: x_QChar::x_62(x);	break;
	case 63: x_QChar::x_63(x);	break;
	case 64: x_QChar::x_64(x);	break;
	case 65: x_QChar::x_65(x);	break;
	case 66: x_QChar::x_66(x);	break;
	case 67: x_QChar::x_67(x);	break;
	case 68: x_QChar::x_68(x);	break;
	case 69: x_QChar::x_69(x);	break;
	case 70: x_QChar::x_70(x);	break;
	case 71: x_QChar::x_71(x);	break;
	case 72: x_QChar::x_72(x);	break;
	case 73: x_QChar::x_73(x);	break;
	case 74: x_QChar::x_74(x);	break;
	case 75: x_QChar::x_75(x);	break;
	case 76: x_QChar::x_76(x);	break;
	case 77: x_QChar::x_77(x);	break;
	case 78: x_QChar::x_78(x);	break;
	case 79: x_QChar::x_79(x);	break;
	case 80: x_QChar::x_80(x);	break;
	case 81: x_QChar::x_81(x);	break;
	case 82: x_QChar::x_82(x);	break;
	case 83: x_QChar::x_83(x);	break;
	case 84: x_QChar::x_84(x);	break;
	case 85: x_QChar::x_85(x);	break;
	case 86: x_QChar::x_86(x);	break;
	case 87: x_QChar::x_87(x);	break;
	case 88: x_QChar::x_88(x);	break;
	case 89: x_QChar::x_89(x);	break;
	case 90: x_QChar::x_90(x);	break;
	case 91: x_QChar::x_91(x);	break;
	case 92: x_QChar::x_92(x);	break;
	case 93: x_QChar::x_93(x);	break;
	case 94: x_QChar::x_94(x);	break;
	case 95: x_QChar::x_95(x);	break;
	case 96: x_QChar::x_96(x);	break;
	case 97: x_QChar::x_97(x);	break;
	case 98: x_QChar::x_98(x);	break;
	case 99: x_QChar::x_99(x);	break;
	case 100: x_QChar::x_100(x);	break;
	case 101: xself->x_101(x);	break;
	case 102: xself->x_102(x);	break;
	case 103: xself->x_103(x);	break;
	case 104: xself->x_104(x);	break;
	case 105: xself->x_105(x);	break;
	case 106: xself->x_106(x);	break;
	case 107: xself->x_107(x);	break;
	case 108: xself->x_108(x);	break;
	case 109: xself->x_109(x);	break;
	case 110: xself->x_110(x);	break;
	case 111: xself->x_111(x);	break;
	case 112: xself->x_112(x);	break;
	case 113: xself->x_113(x);	break;
	case 114: xself->x_114(x);	break;
	case 115: xself->x_115(x);	break;
	case 116: xself->x_116(x);	break;
	case 117: xself->x_117(x);	break;
	case 118: xself->x_118(x);	break;
	case 119: xself->x_119(x);	break;
	case 120: xself->x_120(x);	break;
	case 121: xself->x_121(x);	break;
	case 122: xself->x_122(x);	break;
	case 123: xself->x_123(x);	break;
	case 124: xself->x_124(x);	break;
	case 125: xself->x_125(x);	break;
	case 126: xself->x_126(x);	break;
	case 127: xself->x_127(x);	break;
	case 128: xself->x_128(x);	break;
	case 129: x_QChar::x_129(x);	break;
    }
}
