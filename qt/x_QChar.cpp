//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke.h>
#include <qglobal.h>
#include <qstring.h>

class x_QChar : public QChar {
public:
    static void x_0(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::NoCategory;
    }
    static void x_1(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Mark_NonSpacing;
    }
    static void x_2(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Mark_SpacingCombining;
    }
    static void x_3(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Mark_Enclosing;
    }
    static void x_4(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Number_DecimalDigit;
    }
    static void x_5(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Number_Letter;
    }
    static void x_6(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Number_Other;
    }
    static void x_7(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Separator_Space;
    }
    static void x_8(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Separator_Line;
    }
    static void x_9(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Separator_Paragraph;
    }
    static void x_10(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Other_Control;
    }
    static void x_11(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Other_Format;
    }
    static void x_12(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Other_Surrogate;
    }
    static void x_13(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Other_PrivateUse;
    }
    static void x_14(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Other_NotAssigned;
    }
    static void x_15(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Letter_Uppercase;
    }
    static void x_16(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Letter_Lowercase;
    }
    static void x_17(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Letter_Titlecase;
    }
    static void x_18(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Letter_Modifier;
    }
    static void x_19(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Letter_Other;
    }
    static void x_20(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Punctuation_Connector;
    }
    static void x_21(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Punctuation_Dash;
    }
    static void x_22(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Punctuation_Dask;
    }
    static void x_23(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Punctuation_Open;
    }
    static void x_24(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Punctuation_Close;
    }
    static void x_25(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Punctuation_InitialQuote;
    }
    static void x_26(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Punctuation_FinalQuote;
    }
    static void x_27(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Punctuation_Other;
    }
    static void x_28(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Symbol_Math;
    }
    static void x_29(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Symbol_Currency;
    }
    static void x_30(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Symbol_Modifier;
    }
    static void x_31(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Symbol_Other;
    }
    static void x_32(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::DirL;
    }
    static void x_33(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::DirR;
    }
    static void x_34(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::DirEN;
    }
    static void x_35(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::DirES;
    }
    static void x_36(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::DirET;
    }
    static void x_37(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::DirAN;
    }
    static void x_38(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::DirCS;
    }
    static void x_39(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::DirB;
    }
    static void x_40(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::DirS;
    }
    static void x_41(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::DirWS;
    }
    static void x_42(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::DirON;
    }
    static void x_43(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::DirLRE;
    }
    static void x_44(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::DirLRO;
    }
    static void x_45(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::DirAL;
    }
    static void x_46(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::DirRLE;
    }
    static void x_47(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::DirRLO;
    }
    static void x_48(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::DirPDF;
    }
    static void x_49(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::DirNSM;
    }
    static void x_50(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::DirBN;
    }
    static void x_51(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Single;
    }
    static void x_52(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Canonical;
    }
    static void x_53(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Font;
    }
    static void x_54(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::NoBreak;
    }
    static void x_55(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Initial;
    }
    static void x_56(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Medial;
    }
    static void x_57(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Final;
    }
    static void x_58(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Isolated;
    }
    static void x_59(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Circle;
    }
    static void x_60(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Super;
    }
    static void x_61(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Sub;
    }
    static void x_62(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Vertical;
    }
    static void x_63(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Wide;
    }
    static void x_64(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Narrow;
    }
    static void x_65(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Small;
    }
    static void x_66(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Square;
    }
    static void x_67(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Compat;
    }
    static void x_68(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Fraction;
    }
    static void x_69(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::OtherJoining;
    }
    static void x_70(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Dual;
    }
    static void x_71(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Right;
    }
    static void x_72(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Center;
    }
    static void x_73(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Combining_BelowLeftAttached;
    }
    static void x_74(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Combining_BelowAttached;
    }
    static void x_75(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Combining_BelowRightAttached;
    }
    static void x_76(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Combining_LeftAttached;
    }
    static void x_77(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Combining_RightAttached;
    }
    static void x_78(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Combining_AboveLeftAttached;
    }
    static void x_79(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Combining_AboveAttached;
    }
    static void x_80(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Combining_AboveRightAttached;
    }
    static void x_81(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Combining_BelowLeft;
    }
    static void x_82(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Combining_Below;
    }
    static void x_83(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Combining_BelowRight;
    }
    static void x_84(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Combining_Left;
    }
    static void x_85(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Combining_Right;
    }
    static void x_86(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Combining_AboveLeft;
    }
    static void x_87(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Combining_Above;
    }
    static void x_88(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Combining_AboveRight;
    }
    static void x_89(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Combining_DoubleBelow;
    }
    static void x_90(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Combining_DoubleAbove;
    }
    static void x_91(Smoke::Stack x) {
	x[0].s_enum = (long)QChar::Combining_IotaSubscript;
    }
    static void x_92(Smoke::Stack x) {
	// QChar()
	x_QChar* xret = new x_QChar();
	x[0].s_class = (void*)xret;
    }
    x_QChar() : QChar() {
    }
    static void x_93(Smoke::Stack x) {
	// QChar(char)
	x_QChar* xret = new x_QChar((char)x[1].s_char);
	x[0].s_class = (void*)xret;
    }
    x_QChar(char x1) : QChar(x1) {
    }
    static void x_94(Smoke::Stack x) {
	// QChar(uchar)
	x_QChar* xret = new x_QChar((uchar)x[1].s_uchar);
	x[0].s_class = (void*)xret;
    }
    x_QChar(uchar x1) : QChar(x1) {
    }
    static void x_95(Smoke::Stack x) {
	// QChar(uchar, uchar)
	x_QChar* xret = new x_QChar((uchar)x[1].s_uchar,(uchar)x[2].s_uchar);
	x[0].s_class = (void*)xret;
    }
    x_QChar(uchar x1, uchar x2) : QChar(x1, x2) {
    }
    static void x_96(Smoke::Stack x) {
	// QChar(const QChar&)
	x_QChar* xret = new x_QChar(*(const QChar *)x[1].s_class);
	x[0].s_class = (void*)xret;
    }
    x_QChar(const QChar& x1) : QChar(x1) {
    }
    static void x_97(Smoke::Stack x) {
	// QChar(ushort)
	x_QChar* xret = new x_QChar((ushort)x[1].s_ushort);
	x[0].s_class = (void*)xret;
    }
    x_QChar(ushort x1) : QChar(x1) {
    }
    static void x_98(Smoke::Stack x) {
	// QChar(short)
	x_QChar* xret = new x_QChar((short)x[1].s_short);
	x[0].s_class = (void*)xret;
    }
    x_QChar(short x1) : QChar(x1) {
    }
    static void x_99(Smoke::Stack x) {
	// QChar(uint)
	x_QChar* xret = new x_QChar((uint)x[1].s_uint);
	x[0].s_class = (void*)xret;
    }
    x_QChar(uint x1) : QChar(x1) {
    }
    static void x_100(Smoke::Stack x) {
	// QChar(int)
	x_QChar* xret = new x_QChar((int)x[1].s_int);
	x[0].s_class = (void*)xret;
    }
    x_QChar(int x1) : QChar(x1) {
    }
    void x_101(Smoke::Stack x) const {
	// digitValue()
	int xret = this->QChar::digitValue();
	x[0].s_int = (int)xret;
    }
    void x_102(Smoke::Stack x) const {
	// lower()
	QChar xret = this->QChar::lower();
	x[0].s_class = (void*)new QChar(xret);
    }
    void x_103(Smoke::Stack x) const {
	// upper()
	QChar xret = this->QChar::upper();
	x[0].s_class = (void*)new QChar(xret);
    }
    void x_104(Smoke::Stack x) const {
	// category()
	QChar::Category xret = this->QChar::category();
	x[0].s_class = (void*)new QChar::Category(xret);
    }
    void x_105(Smoke::Stack x) const {
	// direction()
	QChar::Direction xret = this->QChar::direction();
	x[0].s_class = (void*)new QChar::Direction(xret);
    }
    void x_106(Smoke::Stack x) const {
	// joining()
	QChar::Joining xret = this->QChar::joining();
	x[0].s_class = (void*)new QChar::Joining(xret);
    }
    void x_107(Smoke::Stack x) const {
	// mirrored()
	bool xret = this->QChar::mirrored();
	x[0].s_bool = (bool)xret;
    }
    void x_108(Smoke::Stack x) const {
	// mirroredChar()
	QChar xret = this->QChar::mirroredChar();
	x[0].s_class = (void*)new QChar(xret);
    }
    void x_109(Smoke::Stack x) const {
	// decomposition()
	const QString& xret = this->QChar::decomposition();
	x[0].s_class = (void*)&xret;
    }
    void x_110(Smoke::Stack x) const {
	// decompositionTag()
	QChar::Decomposition xret = this->QChar::decompositionTag();
	x[0].s_class = (void*)new QChar::Decomposition(xret);
    }
    void x_111(Smoke::Stack x) const {
	// combiningClass()
	unsigned char xret = this->QChar::combiningClass();
	x[0].s_class = (void*)new unsigned char(xret);
    }
    void x_112(Smoke::Stack x) const {
	// latin1()
	char xret = this->QChar::latin1();
	x[0].s_char = (char)xret;
    }
    void x_113(Smoke::Stack x) const {
	// unicode()
	ushort xret = this->QChar::unicode();
	x[0].s_ushort = (ushort)xret;
    }
    void x_114(Smoke::Stack x) {
	// unicode()
	ushort& xret = this->QChar::unicode();
	x[0].s_class = (void*)&xret;
    }
    void x_115(Smoke::Stack x) const {
	// isNull()
	bool xret = this->QChar::isNull();
	x[0].s_bool = (bool)xret;
    }
    void x_116(Smoke::Stack x) const {
	// isPrint()
	bool xret = this->QChar::isPrint();
	x[0].s_bool = (bool)xret;
    }
    void x_117(Smoke::Stack x) const {
	// isPunct()
	bool xret = this->QChar::isPunct();
	x[0].s_bool = (bool)xret;
    }
    void x_118(Smoke::Stack x) const {
	// isSpace()
	bool xret = this->QChar::isSpace();
	x[0].s_bool = (bool)xret;
    }
    void x_119(Smoke::Stack x) const {
	// isMark()
	bool xret = this->QChar::isMark();
	x[0].s_bool = (bool)xret;
    }
    void x_120(Smoke::Stack x) const {
	// isLetter()
	bool xret = this->QChar::isLetter();
	x[0].s_bool = (bool)xret;
    }
    void x_121(Smoke::Stack x) const {
	// isNumber()
	bool xret = this->QChar::isNumber();
	x[0].s_bool = (bool)xret;
    }
    void x_122(Smoke::Stack x) const {
	// isLetterOrNumber()
	bool xret = this->QChar::isLetterOrNumber();
	x[0].s_bool = (bool)xret;
    }
    void x_123(Smoke::Stack x) const {
	// isDigit()
	bool xret = this->QChar::isDigit();
	x[0].s_bool = (bool)xret;
    }
    void x_124(Smoke::Stack x) const {
	// isSymbol()
	bool xret = this->QChar::isSymbol();
	x[0].s_bool = (bool)xret;
    }
    void x_125(Smoke::Stack x) const {
	// cell()
	uchar xret = this->QChar::cell();
	x[0].s_uchar = (uchar)xret;
    }
    void x_126(Smoke::Stack x) const {
	// row()
	uchar xret = this->QChar::row();
	x[0].s_uchar = (uchar)xret;
    }
    void x_127(Smoke::Stack x) {
	// setCell(uchar)
	this->QChar::setCell((uchar)x[1].s_uchar);
    }
    void x_128(Smoke::Stack x) {
	// setRow(uchar)
	this->QChar::setRow((uchar)x[1].s_uchar);
    }
    static void x_129(Smoke::Stack x) {
	// networkOrdered()
	bool xret = QChar::networkOrdered();
	x[0].s_bool = (bool)xret;
    }
    ~x_QChar() {}
};
void xcall_QChar(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QChar *xself = (x_QChar*)obj;
    switch(xi) {
	case 0: x_QChar::x_0(args);	break;
	case 1: x_QChar::x_1(args);	break;
	case 2: x_QChar::x_2(args);	break;
	case 3: x_QChar::x_3(args);	break;
	case 4: x_QChar::x_4(args);	break;
	case 5: x_QChar::x_5(args);	break;
	case 6: x_QChar::x_6(args);	break;
	case 7: x_QChar::x_7(args);	break;
	case 8: x_QChar::x_8(args);	break;
	case 9: x_QChar::x_9(args);	break;
	case 10: x_QChar::x_10(args);	break;
	case 11: x_QChar::x_11(args);	break;
	case 12: x_QChar::x_12(args);	break;
	case 13: x_QChar::x_13(args);	break;
	case 14: x_QChar::x_14(args);	break;
	case 15: x_QChar::x_15(args);	break;
	case 16: x_QChar::x_16(args);	break;
	case 17: x_QChar::x_17(args);	break;
	case 18: x_QChar::x_18(args);	break;
	case 19: x_QChar::x_19(args);	break;
	case 20: x_QChar::x_20(args);	break;
	case 21: x_QChar::x_21(args);	break;
	case 22: x_QChar::x_22(args);	break;
	case 23: x_QChar::x_23(args);	break;
	case 24: x_QChar::x_24(args);	break;
	case 25: x_QChar::x_25(args);	break;
	case 26: x_QChar::x_26(args);	break;
	case 27: x_QChar::x_27(args);	break;
	case 28: x_QChar::x_28(args);	break;
	case 29: x_QChar::x_29(args);	break;
	case 30: x_QChar::x_30(args);	break;
	case 31: x_QChar::x_31(args);	break;
	case 32: x_QChar::x_32(args);	break;
	case 33: x_QChar::x_33(args);	break;
	case 34: x_QChar::x_34(args);	break;
	case 35: x_QChar::x_35(args);	break;
	case 36: x_QChar::x_36(args);	break;
	case 37: x_QChar::x_37(args);	break;
	case 38: x_QChar::x_38(args);	break;
	case 39: x_QChar::x_39(args);	break;
	case 40: x_QChar::x_40(args);	break;
	case 41: x_QChar::x_41(args);	break;
	case 42: x_QChar::x_42(args);	break;
	case 43: x_QChar::x_43(args);	break;
	case 44: x_QChar::x_44(args);	break;
	case 45: x_QChar::x_45(args);	break;
	case 46: x_QChar::x_46(args);	break;
	case 47: x_QChar::x_47(args);	break;
	case 48: x_QChar::x_48(args);	break;
	case 49: x_QChar::x_49(args);	break;
	case 50: x_QChar::x_50(args);	break;
	case 51: x_QChar::x_51(args);	break;
	case 52: x_QChar::x_52(args);	break;
	case 53: x_QChar::x_53(args);	break;
	case 54: x_QChar::x_54(args);	break;
	case 55: x_QChar::x_55(args);	break;
	case 56: x_QChar::x_56(args);	break;
	case 57: x_QChar::x_57(args);	break;
	case 58: x_QChar::x_58(args);	break;
	case 59: x_QChar::x_59(args);	break;
	case 60: x_QChar::x_60(args);	break;
	case 61: x_QChar::x_61(args);	break;
	case 62: x_QChar::x_62(args);	break;
	case 63: x_QChar::x_63(args);	break;
	case 64: x_QChar::x_64(args);	break;
	case 65: x_QChar::x_65(args);	break;
	case 66: x_QChar::x_66(args);	break;
	case 67: x_QChar::x_67(args);	break;
	case 68: x_QChar::x_68(args);	break;
	case 69: x_QChar::x_69(args);	break;
	case 70: x_QChar::x_70(args);	break;
	case 71: x_QChar::x_71(args);	break;
	case 72: x_QChar::x_72(args);	break;
	case 73: x_QChar::x_73(args);	break;
	case 74: x_QChar::x_74(args);	break;
	case 75: x_QChar::x_75(args);	break;
	case 76: x_QChar::x_76(args);	break;
	case 77: x_QChar::x_77(args);	break;
	case 78: x_QChar::x_78(args);	break;
	case 79: x_QChar::x_79(args);	break;
	case 80: x_QChar::x_80(args);	break;
	case 81: x_QChar::x_81(args);	break;
	case 82: x_QChar::x_82(args);	break;
	case 83: x_QChar::x_83(args);	break;
	case 84: x_QChar::x_84(args);	break;
	case 85: x_QChar::x_85(args);	break;
	case 86: x_QChar::x_86(args);	break;
	case 87: x_QChar::x_87(args);	break;
	case 88: x_QChar::x_88(args);	break;
	case 89: x_QChar::x_89(args);	break;
	case 90: x_QChar::x_90(args);	break;
	case 91: x_QChar::x_91(args);	break;
	case 92: x_QChar::x_92(args);	break;
	case 93: x_QChar::x_93(args);	break;
	case 94: x_QChar::x_94(args);	break;
	case 95: x_QChar::x_95(args);	break;
	case 96: x_QChar::x_96(args);	break;
	case 97: x_QChar::x_97(args);	break;
	case 98: x_QChar::x_98(args);	break;
	case 99: x_QChar::x_99(args);	break;
	case 100: x_QChar::x_100(args);	break;
	case 101: xself->x_101(args);	break;
	case 102: xself->x_102(args);	break;
	case 103: xself->x_103(args);	break;
	case 104: xself->x_104(args);	break;
	case 105: xself->x_105(args);	break;
	case 106: xself->x_106(args);	break;
	case 107: xself->x_107(args);	break;
	case 108: xself->x_108(args);	break;
	case 109: xself->x_109(args);	break;
	case 110: xself->x_110(args);	break;
	case 111: xself->x_111(args);	break;
	case 112: xself->x_112(args);	break;
	case 113: xself->x_113(args);	break;
	case 114: xself->x_114(args);	break;
	case 115: xself->x_115(args);	break;
	case 116: xself->x_116(args);	break;
	case 117: xself->x_117(args);	break;
	case 118: xself->x_118(args);	break;
	case 119: xself->x_119(args);	break;
	case 120: xself->x_120(args);	break;
	case 121: xself->x_121(args);	break;
	case 122: xself->x_122(args);	break;
	case 123: xself->x_123(args);	break;
	case 124: xself->x_124(args);	break;
	case 125: xself->x_125(args);	break;
	case 126: xself->x_126(args);	break;
	case 127: xself->x_127(args);	break;
	case 128: xself->x_128(args);	break;
	case 129: x_QChar::x_129(args);	break;
    }
}
