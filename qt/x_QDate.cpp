//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qstring.h>
#include <qdatetime.h>

class x_QDate : public QDate {
public:
    static void x_0(xargs *x) {
	// QDate()
	x_QDate* xret = new x_QDate();
	x[0].x_voidp = (void*)xret;
    }
    x_QDate() : QDate() {
    }
    static void x_1(xargs *x) {
	// QDate(int, int, int)
	x_QDate* xret = new x_QDate((int)x[1].x_int,(int)x[2].x_int,(int)x[3].x_int);
	x[0].x_voidp = (void*)xret;
    }
    x_QDate(int x1, int x2, int x3) : QDate(x1, x2, x3) {
    }
    void x_2(xargs *x) const {
	// isNull()
	bool xret = this->QDate::isNull();
	x[0].x_bool = (bool)xret;
    }
    void x_3(xargs *x) const {
	// isValid()
	bool xret = this->QDate::isValid();
	x[0].x_bool = (bool)xret;
    }
    void x_4(xargs *x) const {
	// year()
	int xret = this->QDate::year();
	x[0].x_int = (int)xret;
    }
    void x_5(xargs *x) const {
	// month()
	int xret = this->QDate::month();
	x[0].x_int = (int)xret;
    }
    void x_6(xargs *x) const {
	// day()
	int xret = this->QDate::day();
	x[0].x_int = (int)xret;
    }
    void x_7(xargs *x) const {
	// dayOfWeek()
	int xret = this->QDate::dayOfWeek();
	x[0].x_int = (int)xret;
    }
    void x_8(xargs *x) const {
	// dayOfYear()
	int xret = this->QDate::dayOfYear();
	x[0].x_int = (int)xret;
    }
    void x_9(xargs *x) const {
	// daysInMonth()
	int xret = this->QDate::daysInMonth();
	x[0].x_int = (int)xret;
    }
    void x_10(xargs *x) const {
	// daysInYear()
	int xret = this->QDate::daysInYear();
	x[0].x_int = (int)xret;
    }
    void x_11(xargs *x) const {
	// toString(Qt::DateFormat)
	QString xret = this->QDate::toString((Qt::DateFormat)x[1].x_long);
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_12(xargs *x) const {
	// toString()
	QString xret = this->QDate::toString();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_13(xargs *x) const {
	// toString(const QString&)
	QString xret = this->QDate::toString(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_14(xargs *x) {
	// setYMD(int, int, int)
	bool xret = this->QDate::setYMD((int)x[1].x_int,(int)x[2].x_int,(int)x[3].x_int);
	x[0].x_bool = (bool)xret;
    }
    void x_15(xargs *x) const {
	// addDays(int)
	QDate xret = this->QDate::addDays((int)x[1].x_int);
	x[0].x_voidp = (void*)new QDate(xret);
    }
    void x_16(xargs *x) const {
	// addMonths(int)
	QDate xret = this->QDate::addMonths((int)x[1].x_int);
	x[0].x_voidp = (void*)new QDate(xret);
    }
    void x_17(xargs *x) const {
	// addYears(int)
	QDate xret = this->QDate::addYears((int)x[1].x_int);
	x[0].x_voidp = (void*)new QDate(xret);
    }
    void x_18(xargs *x) const {
	// daysTo(const QDate&)
	int xret = this->QDate::daysTo(*(const QDate *)x[1].x_voidp);
	x[0].x_int = (int)xret;
    }
    void x_19(xargs *x) const {
	// operator==(const QDate&)
	bool xret = this->QDate::operator==(*(const QDate *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_20(xargs *x) const {
	// operator!=(const QDate&)
	bool xret = this->QDate::operator!=(*(const QDate *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_21(xargs *x) const {
	// operator<(const QDate&)
	bool xret = this->QDate::operator<(*(const QDate *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_22(xargs *x) const {
	// operator<=(const QDate&)
	bool xret = this->QDate::operator<=(*(const QDate *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_23(xargs *x) const {
	// operator>(const QDate&)
	bool xret = this->QDate::operator>(*(const QDate *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_24(xargs *x) const {
	// operator>=(const QDate&)
	bool xret = this->QDate::operator>=(*(const QDate *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    static void x_25(xargs *x) {
	// monthName(int)
	QString xret = QDate::monthName((int)x[1].x_int);
	x[0].x_voidp = (void*)new QString(xret);
    }
    static void x_26(xargs *x) {
	// dayName(int)
	QString xret = QDate::dayName((int)x[1].x_int);
	x[0].x_voidp = (void*)new QString(xret);
    }
    static void x_27(xargs *x) {
	// shortMonthName(int)
	QString xret = QDate::shortMonthName((int)x[1].x_int);
	x[0].x_voidp = (void*)new QString(xret);
    }
    static void x_28(xargs *x) {
	// shortDayName(int)
	QString xret = QDate::shortDayName((int)x[1].x_int);
	x[0].x_voidp = (void*)new QString(xret);
    }
    static void x_29(xargs *x) {
	// longMonthName(int)
	QString xret = QDate::longMonthName((int)x[1].x_int);
	x[0].x_voidp = (void*)new QString(xret);
    }
    static void x_30(xargs *x) {
	// longDayName(int)
	QString xret = QDate::longDayName((int)x[1].x_int);
	x[0].x_voidp = (void*)new QString(xret);
    }
    static void x_31(xargs *x) {
	// currentDate()
	QDate xret = QDate::currentDate();
	x[0].x_voidp = (void*)new QDate(xret);
    }
    static void x_32(xargs *x) {
	// fromString(const QString&, Qt::DateFormat)
	QDate xret = QDate::fromString(*(const QString *)x[1].x_voidp,(Qt::DateFormat)x[2].x_long);
	x[0].x_voidp = (void*)new QDate(xret);
    }
    static void x_33(xargs *x) {
	// fromString(const QString&)
	QDate xret = QDate::fromString(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QDate(xret);
    }
    static void x_34(xargs *x) {
	// isValid(int, int, int)
	bool xret = QDate::isValid((int)x[1].x_int,(int)x[2].x_int,(int)x[3].x_int);
	x[0].x_bool = (bool)xret;
    }
    static void x_35(xargs *x) {
	// leapYear(int)
	bool xret = QDate::leapYear((int)x[1].x_int);
	x[0].x_bool = (bool)xret;
    }
    static void x_36(xargs *x) {
	// gregorianToJulian(int, int, int)
	uint xret = QDate::gregorianToJulian((int)x[1].x_int,(int)x[2].x_int,(int)x[3].x_int);
	x[0].x_uint = (uint)xret;
    }
    static void x_37(xargs *x) {
	// julianToGregorian(uint, int&, int&, int&)
	QDate::julianToGregorian((uint)x[1].x_uint,*(int *)x[2].x_voidp,*(int *)x[3].x_voidp,*(int *)x[4].x_voidp);
    }
    ~x_QDate() {}
};
void xcall_QDate(xargs *x, void *s, int xi) {
    x_QDate *xself = (x_QDate*)s;
    switch(xi) {
	case 0: x_QDate::x_0(x);	break;
	case 1: x_QDate::x_1(x);	break;
	case 2: xself->x_2(x);	break;
	case 3: xself->x_3(x);	break;
	case 4: xself->x_4(x);	break;
	case 5: xself->x_5(x);	break;
	case 6: xself->x_6(x);	break;
	case 7: xself->x_7(x);	break;
	case 8: xself->x_8(x);	break;
	case 9: xself->x_9(x);	break;
	case 10: xself->x_10(x);	break;
	case 11: xself->x_11(x);	break;
	case 12: xself->x_12(x);	break;
	case 13: xself->x_13(x);	break;
	case 14: xself->x_14(x);	break;
	case 15: xself->x_15(x);	break;
	case 16: xself->x_16(x);	break;
	case 17: xself->x_17(x);	break;
	case 18: xself->x_18(x);	break;
	case 19: xself->x_19(x);	break;
	case 20: xself->x_20(x);	break;
	case 21: xself->x_21(x);	break;
	case 22: xself->x_22(x);	break;
	case 23: xself->x_23(x);	break;
	case 24: xself->x_24(x);	break;
	case 25: x_QDate::x_25(x);	break;
	case 26: x_QDate::x_26(x);	break;
	case 27: x_QDate::x_27(x);	break;
	case 28: x_QDate::x_28(x);	break;
	case 29: x_QDate::x_29(x);	break;
	case 30: x_QDate::x_30(x);	break;
	case 31: x_QDate::x_31(x);	break;
	case 32: x_QDate::x_32(x);	break;
	case 33: x_QDate::x_33(x);	break;
	case 34: x_QDate::x_34(x);	break;
	case 35: x_QDate::x_35(x);	break;
	case 36: x_QDate::x_36(x);	break;
	case 37: x_QDate::x_37(x);	break;
    }
}
