//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qtranslator.h>
#include <qdatastream.h>
#include <qstring.h>

class x_QTranslatorMessage : public QTranslatorMessage {
public:
    static void x_0(xargs *x) {
	x[0].x_long = (long)QTranslatorMessage::NoPrefix;
    }
    static void x_1(xargs *x) {
	x[0].x_long = (long)QTranslatorMessage::Hash;
    }
    static void x_2(xargs *x) {
	x[0].x_long = (long)QTranslatorMessage::HashContext;
    }
    static void x_3(xargs *x) {
	x[0].x_long = (long)QTranslatorMessage::HashContextSourceText;
    }
    static void x_4(xargs *x) {
	x[0].x_long = (long)QTranslatorMessage::HashContextSourceTextComment;
    }
    static void x_5(xargs *x) {
	// QTranslatorMessage()
	x_QTranslatorMessage* xret = new x_QTranslatorMessage();
	x[0].x_voidp = (void*)xret;
    }
    x_QTranslatorMessage() : QTranslatorMessage() {
    }
    static void x_6(xargs *x) {
	// QTranslatorMessage(const char*, const char*, const char*, const QString&)
	x_QTranslatorMessage* xret = new x_QTranslatorMessage((const char*)x[1].x_voidp,(const char*)x[2].x_voidp,(const char*)x[3].x_voidp,*(const QString *)x[4].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QTranslatorMessage(const char* x1, const char* x2, const char* x3, const QString& x4) : QTranslatorMessage(x1, x2, x3, x4) {
    }
    static void x_7(xargs *x) {
	// QTranslatorMessage(const char*, const char*, const char*)
	x_QTranslatorMessage* xret = new x_QTranslatorMessage((const char*)x[1].x_voidp,(const char*)x[2].x_voidp,(const char*)x[3].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QTranslatorMessage(const char* x1, const char* x2, const char* x3) : QTranslatorMessage(x1, x2, x3) {
    }
    static void x_8(xargs *x) {
	// QTranslatorMessage(QDataStream&)
	x_QTranslatorMessage* xret = new x_QTranslatorMessage(*(QDataStream *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QTranslatorMessage(QDataStream& x1) : QTranslatorMessage(x1) {
    }
    static void x_9(xargs *x) {
	// QTranslatorMessage(const QTranslatorMessage&)
	x_QTranslatorMessage* xret = new x_QTranslatorMessage(*(const QTranslatorMessage *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QTranslatorMessage(const QTranslatorMessage& x1) : QTranslatorMessage(x1) {
    }
    void x_10(xargs *x) {
	// operator=(const QTranslatorMessage&)
	QTranslatorMessage& xret = this->QTranslatorMessage::operator=(*(const QTranslatorMessage *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_11(xargs *x) const {
	// hash()
	uint xret = this->QTranslatorMessage::hash();
	x[0].x_uint = (uint)xret;
    }
    void x_12(xargs *x) const {
	// context()
	const char* xret = this->QTranslatorMessage::context();
	x[0].x_voidp = (void*)xret;
    }
    void x_13(xargs *x) const {
	// sourceText()
	const char* xret = this->QTranslatorMessage::sourceText();
	x[0].x_voidp = (void*)xret;
    }
    void x_14(xargs *x) const {
	// comment()
	const char* xret = this->QTranslatorMessage::comment();
	x[0].x_voidp = (void*)xret;
    }
    void x_15(xargs *x) {
	// setTranslation(const QString&)
	this->QTranslatorMessage::setTranslation(*(const QString *)x[1].x_voidp);
    }
    void x_16(xargs *x) const {
	// translation()
	QString xret = this->QTranslatorMessage::translation();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_17(xargs *x) const {
	// write(QDataStream&, bool, QTranslatorMessage::Prefix)
	this->QTranslatorMessage::write(*(QDataStream *)x[1].x_voidp,(bool)x[2].x_bool,(QTranslatorMessage::Prefix)x[3].x_long);
    }
    void x_18(xargs *x) const {
	// write(QDataStream&, bool)
	this->QTranslatorMessage::write(*(QDataStream *)x[1].x_voidp,(bool)x[2].x_bool);
    }
    void x_19(xargs *x) const {
	// write(QDataStream&)
	this->QTranslatorMessage::write(*(QDataStream *)x[1].x_voidp);
    }
    void x_20(xargs *x) const {
	// commonPrefix(const QTranslatorMessage&)
	QTranslatorMessage::Prefix xret = this->QTranslatorMessage::commonPrefix(*(const QTranslatorMessage *)x[1].x_voidp);
	x[0].x_long = (long)xret;
    }
    void x_21(xargs *x) const {
	// operator==(const QTranslatorMessage&)
	bool xret = this->QTranslatorMessage::operator==(*(const QTranslatorMessage *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_22(xargs *x) const {
	// operator!=(const QTranslatorMessage&)
	bool xret = this->QTranslatorMessage::operator!=(*(const QTranslatorMessage *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_23(xargs *x) const {
	// operator<(const QTranslatorMessage&)
	bool xret = this->QTranslatorMessage::operator<(*(const QTranslatorMessage *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_24(xargs *x) const {
	// operator<=(const QTranslatorMessage&)
	bool xret = this->QTranslatorMessage::operator<=(*(const QTranslatorMessage *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_25(xargs *x) const {
	// operator>(const QTranslatorMessage&)
	bool xret = this->QTranslatorMessage::operator>(*(const QTranslatorMessage *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_26(xargs *x) const {
	// operator>=(const QTranslatorMessage&)
	bool xret = this->QTranslatorMessage::operator>=(*(const QTranslatorMessage *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    ~x_QTranslatorMessage() {}
};
void xcall_QTranslatorMessage(xargs *x, void *s, int xi) {
    x_QTranslatorMessage *xself = (x_QTranslatorMessage*)s;
    switch(xi) {
	case 0: x_QTranslatorMessage::x_0(x);	break;
	case 1: x_QTranslatorMessage::x_1(x);	break;
	case 2: x_QTranslatorMessage::x_2(x);	break;
	case 3: x_QTranslatorMessage::x_3(x);	break;
	case 4: x_QTranslatorMessage::x_4(x);	break;
	case 5: x_QTranslatorMessage::x_5(x);	break;
	case 6: x_QTranslatorMessage::x_6(x);	break;
	case 7: x_QTranslatorMessage::x_7(x);	break;
	case 8: x_QTranslatorMessage::x_8(x);	break;
	case 9: x_QTranslatorMessage::x_9(x);	break;
	case 10: xself->x_10(x);	break;
	case 11: xself->x_11(x);	break;
	case 12: xself->x_12(x);	break;
	case 13: xself->x_13(x);	break;
	case 14: xself->x_14(x);	break;
	case 15: xself->x_15(x);	break;
	case 16: xself->x_16(x);	break;
	case 17: xself->x_17(x);	break;
	case 18: xself->x_18(x);	break;
	case 19: xself->x_19(x);	break;
	case 20: xself->x_20(x);	break;
	case 21: xself->x_21(x);	break;
	case 22: xself->x_22(x);	break;
	case 23: xself->x_23(x);	break;
	case 24: xself->x_24(x);	break;
	case 25: xself->x_25(x);	break;
	case 26: xself->x_26(x);	break;
    }
}
