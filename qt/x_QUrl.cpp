//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qurl.h>
#include <qstring.h>

class x_QUrl : public QUrl {
public:
    static void x_0(xargs *x) {
	// QUrl()
	x_QUrl* xret = new x_QUrl();
	x[0].x_voidp = (void*)xret;
    }
    x_QUrl() : QUrl() {
    }
    static void x_1(xargs *x) {
	// QUrl(const QString&)
	x_QUrl* xret = new x_QUrl(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QUrl(const QString& x1) : QUrl(x1) {
    }
    static void x_2(xargs *x) {
	// QUrl(const QUrl&)
	x_QUrl* xret = new x_QUrl(*(const QUrl *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QUrl(const QUrl& x1) : QUrl(x1) {
    }
    static void x_3(xargs *x) {
	// QUrl(const QUrl&, const QString&, bool)
	x_QUrl* xret = new x_QUrl(*(const QUrl *)x[1].x_voidp,*(const QString *)x[2].x_voidp,(bool)x[3].x_bool);
	x[0].x_voidp = (void*)xret;
    }
    x_QUrl(const QUrl& x1, const QString& x2, bool x3) : QUrl(x1, x2, x3) {
    }
    static void x_4(xargs *x) {
	// QUrl(const QUrl&, const QString&)
	x_QUrl* xret = new x_QUrl(*(const QUrl *)x[1].x_voidp,*(const QString *)x[2].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QUrl(const QUrl& x1, const QString& x2) : QUrl(x1, x2) {
    }
    void x_5(xargs *x) const {
	// protocol()
	QString xret = this->QUrl::protocol();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_6(xargs *x) {
	// setProtocol(const QString&)
	this->QUrl::setProtocol(*(const QString *)x[1].x_voidp);
    }
    void x_7(xargs *x) const {
	// user()
	QString xret = this->QUrl::user();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_8(xargs *x) {
	// setUser(const QString&)
	this->QUrl::setUser(*(const QString *)x[1].x_voidp);
    }
    void x_9(xargs *x) const {
	// hasUser()
	bool xret = this->QUrl::hasUser();
	x[0].x_bool = (bool)xret;
    }
    void x_10(xargs *x) const {
	// password()
	QString xret = this->QUrl::password();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_11(xargs *x) {
	// setPassword(const QString&)
	this->QUrl::setPassword(*(const QString *)x[1].x_voidp);
    }
    void x_12(xargs *x) const {
	// hasPassword()
	bool xret = this->QUrl::hasPassword();
	x[0].x_bool = (bool)xret;
    }
    void x_13(xargs *x) const {
	// host()
	QString xret = this->QUrl::host();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_14(xargs *x) {
	// setHost(const QString&)
	this->QUrl::setHost(*(const QString *)x[1].x_voidp);
    }
    void x_15(xargs *x) const {
	// hasHost()
	bool xret = this->QUrl::hasHost();
	x[0].x_bool = (bool)xret;
    }
    void x_16(xargs *x) const {
	// port()
	int xret = this->QUrl::port();
	x[0].x_int = (int)xret;
    }
    void x_17(xargs *x) {
	// setPort(int)
	this->QUrl::setPort((int)x[1].x_int);
    }
    void x_18(xargs *x) const {
	// hasPort()
	bool xret = this->QUrl::hasPort();
	x[0].x_bool = (bool)xret;
    }
    void x_19(xargs *x) const {
	// path(bool)
	QString xret = this->QUrl::path((bool)x[1].x_bool);
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_20(xargs *x) const {
	// path()
	QString xret = this->QUrl::path();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_21(xargs *x) {
	// setPath(const QString&)
	this->QUrl::setPath(*(const QString *)x[1].x_voidp);
    }
    void x_22(xargs *x) const {
	// hasPath()
	bool xret = this->QUrl::hasPath();
	x[0].x_bool = (bool)xret;
    }
    void x_23(xargs *x) {
	// setEncodedPathAndQuery(const QString&)
	this->QUrl::setEncodedPathAndQuery(*(const QString *)x[1].x_voidp);
    }
    void x_24(xargs *x) {
	// encodedPathAndQuery()
	QString xret = this->QUrl::encodedPathAndQuery();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_25(xargs *x) {
	// setQuery(const QString&)
	this->QUrl::setQuery(*(const QString *)x[1].x_voidp);
    }
    void x_26(xargs *x) const {
	// query()
	QString xret = this->QUrl::query();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_27(xargs *x) const {
	// ref()
	QString xret = this->QUrl::ref();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_28(xargs *x) {
	// setRef(const QString&)
	this->QUrl::setRef(*(const QString *)x[1].x_voidp);
    }
    void x_29(xargs *x) const {
	// hasRef()
	bool xret = this->QUrl::hasRef();
	x[0].x_bool = (bool)xret;
    }
    void x_30(xargs *x) const {
	// isValid()
	bool xret = this->QUrl::isValid();
	x[0].x_bool = (bool)xret;
    }
    void x_31(xargs *x) const {
	// isLocalFile()
	bool xret = this->QUrl::isLocalFile();
	x[0].x_bool = (bool)xret;
    }
    void x_32(xargs *x) {
	// addPath(const QString&)
	this->QUrl::addPath(*(const QString *)x[1].x_voidp);
    }
    void x_33(xargs *x) {
	// setFileName(const QString&)
	this->QUrl::setFileName(*(const QString *)x[1].x_voidp);
    }
    void x_34(xargs *x) const {
	// fileName()
	QString xret = this->QUrl::fileName();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_35(xargs *x) const {
	// dirPath()
	QString xret = this->QUrl::dirPath();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_36(xargs *x) {
	// operator=(const QUrl&)
	QUrl& xret = this->QUrl::operator=(*(const QUrl *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_37(xargs *x) {
	// operator=(const QString&)
	QUrl& xret = this->QUrl::operator=(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_38(xargs *x) const {
	// operator==(const QUrl&)
	bool xret = this->QUrl::operator==(*(const QUrl *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_39(xargs *x) const {
	// operator==(const QString&)
	bool xret = this->QUrl::operator==(*(const QString *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_40(xargs *x) const {
	// toString(bool, bool)
	QString xret = this->QUrl::toString((bool)x[1].x_bool,(bool)x[2].x_bool);
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_41(xargs *x) const {
	// toString(bool)
	QString xret = this->QUrl::toString((bool)x[1].x_bool);
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_42(xargs *x) const {
	// toString()
	QString xret = this->QUrl::toString();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_43(xargs *x) {
	// cdUp()
	bool xret = this->QUrl::cdUp();
	x[0].x_bool = (bool)xret;
    }
    static void x_44(xargs *x) {
	// decode(QString&)
	QUrl::decode(*(QString *)x[1].x_voidp);
    }
    static void x_45(xargs *x) {
	// encode(QString&)
	QUrl::encode(*(QString *)x[1].x_voidp);
    }
    static void x_46(xargs *x) {
	// isRelativeUrl(const QString&)
	bool xret = QUrl::isRelativeUrl(*(const QString *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_47(xargs *x) {
	// reset()
	this->QUrl::reset();
    }
    void x_48(xargs *x) {
	// parse(const QString&)
	bool xret = this->QUrl::parse(*(const QString *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    virtual void addPath(const QString& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9104, x)) return;
	this->QUrl::addPath(x1);
    }
    virtual bool cdUp() {
	xargs x[1];
	if(call_method((void*)this, 9116, x)) return (bool)x[0].x_bool;
	return this->QUrl::cdUp();
    }
    virtual bool parse(const QString& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9121, x)) return (bool)x[0].x_bool;
	return this->QUrl::parse(x1);
    }
    virtual void reset() {
	xargs x[1];
	if(call_method((void*)this, 9120, x)) return;
	this->QUrl::reset();
    }
    virtual void setEncodedPathAndQuery(const QString& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9095, x)) return;
	this->QUrl::setEncodedPathAndQuery(x1);
    }
    virtual void setFileName(const QString& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9105, x)) return;
	this->QUrl::setFileName(x1);
    }
    virtual void setHost(const QString& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9086, x)) return;
	this->QUrl::setHost(x1);
    }
    virtual void setPassword(const QString& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9083, x)) return;
	this->QUrl::setPassword(x1);
    }
    virtual void setPath(const QString& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9093, x)) return;
	this->QUrl::setPath(x1);
    }
    virtual void setPort(int x1) {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 9089, x)) return;
	this->QUrl::setPort(x1);
    }
    virtual void setProtocol(const QString& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9078, x)) return;
	this->QUrl::setProtocol(x1);
    }
    virtual void setQuery(const QString& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9097, x)) return;
	this->QUrl::setQuery(x1);
    }
    virtual void setRef(const QString& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9100, x)) return;
	this->QUrl::setRef(x1);
    }
    virtual void setUser(const QString& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9080, x)) return;
	this->QUrl::setUser(x1);
    }
    virtual QString toString(bool x1, bool x2) const {
	xargs x[3];
	x[1].x_bool = (bool)x1;
	x[2].x_bool = (bool)x2;
	if(call_method((void*)this, 9113, x)) {
	    QString *xptr = (QString *)x[0].x_voidp;
	    QString xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QUrl::toString(x1, x2);
    }
    ~x_QUrl() {}
};
void xcall_QUrl(xargs *x, void *s, int xi) {
    x_QUrl *xself = (x_QUrl*)s;
    switch(xi) {
	case 0: x_QUrl::x_0(x);	break;
	case 1: x_QUrl::x_1(x);	break;
	case 2: x_QUrl::x_2(x);	break;
	case 3: x_QUrl::x_3(x);	break;
	case 4: x_QUrl::x_4(x);	break;
	case 5: xself->x_5(x);	break;
	case 6: xself->x_6(x);	break;
	case 7: xself->x_7(x);	break;
	case 8: xself->x_8(x);	break;
	case 9: xself->x_9(x);	break;
	case 10: xself->x_10(x);	break;
	case 11: xself->x_11(x);	break;
	case 12: xself->x_12(x);	break;
	case 13: xself->x_13(x);	break;
	case 14: xself->x_14(x);	break;
	case 15: xself->x_15(x);	break;
	case 16: xself->x_16(x);	break;
	case 17: xself->x_17(x);	break;
	case 18: xself->x_18(x);	break;
	case 19: xself->x_19(x);	break;
	case 20: xself->x_20(x);	break;
	case 21: xself->x_21(x);	break;
	case 22: xself->x_22(x);	break;
	case 23: xself->x_23(x);	break;
	case 24: xself->x_24(x);	break;
	case 25: xself->x_25(x);	break;
	case 26: xself->x_26(x);	break;
	case 27: xself->x_27(x);	break;
	case 28: xself->x_28(x);	break;
	case 29: xself->x_29(x);	break;
	case 30: xself->x_30(x);	break;
	case 31: xself->x_31(x);	break;
	case 32: xself->x_32(x);	break;
	case 33: xself->x_33(x);	break;
	case 34: xself->x_34(x);	break;
	case 35: xself->x_35(x);	break;
	case 36: xself->x_36(x);	break;
	case 37: xself->x_37(x);	break;
	case 38: xself->x_38(x);	break;
	case 39: xself->x_39(x);	break;
	case 40: xself->x_40(x);	break;
	case 41: xself->x_41(x);	break;
	case 42: xself->x_42(x);	break;
	case 43: xself->x_43(x);	break;
	case 44: x_QUrl::x_44(x);	break;
	case 45: x_QUrl::x_45(x);	break;
	case 46: x_QUrl::x_46(x);	break;
	case 47: xself->x_47(x);	break;
	case 48: xself->x_48(x);	break;
	case 49: delete (QUrl*)xself;	break;
    }
}
