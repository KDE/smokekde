//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qvariant.h>
#include <qstring.h>
#include <qsqlindex.h>
#include <qsqlfield.h>
#include <qstringlist.h>
#include <qsqlcursor.h>

class x_QSqlCursor : public QSqlCursor {
public:
    static void x_0(xargs *x) {
	x[0].x_long = (long)QSqlCursor::ReadOnly;
    }
    static void x_1(xargs *x) {
	x[0].x_long = (long)QSqlCursor::Insert;
    }
    static void x_2(xargs *x) {
	x[0].x_long = (long)QSqlCursor::Update;
    }
    static void x_3(xargs *x) {
	x[0].x_long = (long)QSqlCursor::Delete;
    }
    static void x_4(xargs *x) {
	x[0].x_long = (long)QSqlCursor::Writable;
    }
    static void x_5(xargs *x) {
	// QSqlCursor(const QString&, bool, QSqlDatabase*)
	x_QSqlCursor* xret = new x_QSqlCursor(*(const QString *)x[1].x_voidp,(bool)x[2].x_bool,(QSqlDatabase*)x[3].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QSqlCursor(const QString& x1, bool x2, QSqlDatabase* x3) : QSqlCursor(x1, x2, x3) {
    }
    static void x_6(xargs *x) {
	// QSqlCursor(const QString&, bool)
	x_QSqlCursor* xret = new x_QSqlCursor(*(const QString *)x[1].x_voidp,(bool)x[2].x_bool);
	x[0].x_voidp = (void*)xret;
    }
    x_QSqlCursor(const QString& x1, bool x2) : QSqlCursor(x1, x2) {
    }
    static void x_7(xargs *x) {
	// QSqlCursor(const QString&)
	x_QSqlCursor* xret = new x_QSqlCursor(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QSqlCursor(const QString& x1) : QSqlCursor(x1) {
    }
    static void x_8(xargs *x) {
	// QSqlCursor()
	x_QSqlCursor* xret = new x_QSqlCursor();
	x[0].x_voidp = (void*)xret;
    }
    x_QSqlCursor() : QSqlCursor() {
    }
    static void x_9(xargs *x) {
	// QSqlCursor(const QSqlCursor&)
	x_QSqlCursor* xret = new x_QSqlCursor(*(const QSqlCursor *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QSqlCursor(const QSqlCursor& x1) : QSqlCursor(x1) {
    }
    void x_10(xargs *x) {
	// operator=(const QSqlCursor&)
	QSqlCursor& xret = this->QSqlCursor::operator=(*(const QSqlCursor *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_11(xargs *x) const {
	// value(int)
	QVariant xret = this->QSqlCursor::value((int)x[1].x_int);
	x[0].x_voidp = (void*)new QVariant(xret);
    }
    void x_12(xargs *x) const {
	// value(const QString&)
	QVariant xret = this->QSqlCursor::value(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QVariant(xret);
    }
    void x_13(xargs *x) const {
	// primaryIndex(bool)
	QSqlIndex xret = this->QSqlCursor::primaryIndex((bool)x[1].x_bool);
	x[0].x_voidp = (void*)new QSqlIndex(xret);
    }
    void x_14(xargs *x) const {
	// primaryIndex()
	QSqlIndex xret = this->QSqlCursor::primaryIndex();
	x[0].x_voidp = (void*)new QSqlIndex(xret);
    }
    void x_15(xargs *x) const {
	// index(const QStringList&)
	QSqlIndex xret = this->QSqlCursor::index(*(const QStringList *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QSqlIndex(xret);
    }
    void x_16(xargs *x) const {
	// index(const QString&)
	QSqlIndex xret = this->QSqlCursor::index(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QSqlIndex(xret);
    }
    void x_17(xargs *x) const {
	// index(const char*)
	QSqlIndex xret = this->QSqlCursor::index((const char*)x[1].x_voidp);
	x[0].x_voidp = (void*)new QSqlIndex(xret);
    }
    void x_18(xargs *x) {
	// setPrimaryIndex(const QSqlIndex&)
	this->QSqlCursor::setPrimaryIndex(*(const QSqlIndex *)x[1].x_voidp);
    }
    void x_19(xargs *x) {
	// append(const QSqlFieldInfo&)
	this->QSqlCursor::append(*(const QSqlFieldInfo *)x[1].x_voidp);
    }
    void x_20(xargs *x) {
	// insert(int, const QSqlFieldInfo&)
	this->QSqlCursor::insert((int)x[1].x_int,*(const QSqlFieldInfo *)x[2].x_voidp);
    }
    void x_21(xargs *x) {
	// remove(int)
	this->QSqlCursor::remove((int)x[1].x_int);
    }
    void x_22(xargs *x) {
	// clear()
	this->QSqlCursor::clear();
    }
    void x_23(xargs *x) {
	// setGenerated(const QString&, bool)
	this->QSqlCursor::setGenerated(*(const QString *)x[1].x_voidp,(bool)x[2].x_bool);
    }
    void x_24(xargs *x) {
	// setGenerated(int, bool)
	this->QSqlCursor::setGenerated((int)x[1].x_int,(bool)x[2].x_bool);
    }
    void x_25(xargs *x) {
	// editBuffer(bool)
	QSqlRecord* xret = this->QSqlCursor::editBuffer((bool)x[1].x_bool);
	x[0].x_voidp = (void*)xret;
    }
    void x_26(xargs *x) {
	// editBuffer()
	QSqlRecord* xret = this->QSqlCursor::editBuffer();
	x[0].x_voidp = (void*)xret;
    }
    void x_27(xargs *x) {
	// primeInsert()
	QSqlRecord* xret = this->QSqlCursor::primeInsert();
	x[0].x_voidp = (void*)xret;
    }
    void x_28(xargs *x) {
	// primeUpdate()
	QSqlRecord* xret = this->QSqlCursor::primeUpdate();
	x[0].x_voidp = (void*)xret;
    }
    void x_29(xargs *x) {
	// primeDelete()
	QSqlRecord* xret = this->QSqlCursor::primeDelete();
	x[0].x_voidp = (void*)xret;
    }
    void x_30(xargs *x) {
	// insert(bool)
	int xret = this->QSqlCursor::insert((bool)x[1].x_bool);
	x[0].x_int = (int)xret;
    }
    void x_31(xargs *x) {
	// insert()
	int xret = this->QSqlCursor::insert();
	x[0].x_int = (int)xret;
    }
    void x_32(xargs *x) {
	// update(bool)
	int xret = this->QSqlCursor::update((bool)x[1].x_bool);
	x[0].x_int = (int)xret;
    }
    void x_33(xargs *x) {
	// update()
	int xret = this->QSqlCursor::update();
	x[0].x_int = (int)xret;
    }
    void x_34(xargs *x) {
	// del(bool)
	int xret = this->QSqlCursor::del((bool)x[1].x_bool);
	x[0].x_int = (int)xret;
    }
    void x_35(xargs *x) {
	// del()
	int xret = this->QSqlCursor::del();
	x[0].x_int = (int)xret;
    }
    void x_36(xargs *x) {
	// setMode(int)
	this->QSqlCursor::setMode((int)x[1].x_int);
    }
    void x_37(xargs *x) const {
	// mode()
	int xret = this->QSqlCursor::mode();
	x[0].x_int = (int)xret;
    }
    void x_38(xargs *x) {
	// setCalculated(const QString&, bool)
	this->QSqlCursor::setCalculated(*(const QString *)x[1].x_voidp,(bool)x[2].x_bool);
    }
    void x_39(xargs *x) const {
	// isCalculated(const QString&)
	bool xret = this->QSqlCursor::isCalculated(*(const QString *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_40(xargs *x) {
	// setTrimmed(const QString&, bool)
	this->QSqlCursor::setTrimmed(*(const QString *)x[1].x_voidp,(bool)x[2].x_bool);
    }
    void x_41(xargs *x) const {
	// isTrimmed(const QString&)
	bool xret = this->QSqlCursor::isTrimmed(*(const QString *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_42(xargs *x) const {
	// isReadOnly()
	bool xret = this->QSqlCursor::isReadOnly();
	x[0].x_bool = (bool)xret;
    }
    void x_43(xargs *x) const {
	// canInsert()
	bool xret = this->QSqlCursor::canInsert();
	x[0].x_bool = (bool)xret;
    }
    void x_44(xargs *x) const {
	// canUpdate()
	bool xret = this->QSqlCursor::canUpdate();
	x[0].x_bool = (bool)xret;
    }
    void x_45(xargs *x) const {
	// canDelete()
	bool xret = this->QSqlCursor::canDelete();
	x[0].x_bool = (bool)xret;
    }
    void x_46(xargs *x) {
	// select()
	bool xret = this->QSqlCursor::select();
	x[0].x_bool = (bool)xret;
    }
    void x_47(xargs *x) {
	// select(const QSqlIndex&)
	bool xret = this->QSqlCursor::select(*(const QSqlIndex *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_48(xargs *x) {
	// select(const QSqlIndex&, const QSqlIndex&)
	bool xret = this->QSqlCursor::select(*(const QSqlIndex *)x[1].x_voidp,*(const QSqlIndex *)x[2].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_49(xargs *x) {
	// select(const QString&, const QSqlIndex&)
	bool xret = this->QSqlCursor::select(*(const QString *)x[1].x_voidp,*(const QSqlIndex *)x[2].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_50(xargs *x) {
	// select(const QString&)
	bool xret = this->QSqlCursor::select(*(const QString *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_51(xargs *x) {
	// setSort(const QSqlIndex&)
	this->QSqlCursor::setSort(*(const QSqlIndex *)x[1].x_voidp);
    }
    void x_52(xargs *x) const {
	// sort()
	QSqlIndex xret = this->QSqlCursor::sort();
	x[0].x_voidp = (void*)new QSqlIndex(xret);
    }
    void x_53(xargs *x) {
	// setFilter(const QString&)
	this->QSqlCursor::setFilter(*(const QString *)x[1].x_voidp);
    }
    void x_54(xargs *x) const {
	// filter()
	QString xret = this->QSqlCursor::filter();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_55(xargs *x) {
	// setName(const QString&, bool)
	this->QSqlCursor::setName(*(const QString *)x[1].x_voidp,(bool)x[2].x_bool);
    }
    void x_56(xargs *x) {
	// setName(const QString&)
	this->QSqlCursor::setName(*(const QString *)x[1].x_voidp);
    }
    void x_57(xargs *x) const {
	// name()
	QString xret = this->QSqlCursor::name();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_58(xargs *x) const {
	// toString(const QString&, const QString&)
	QString xret = this->QSqlCursor::toString(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp);
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_59(xargs *x) const {
	// toString(const QString&)
	QString xret = this->QSqlCursor::toString(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_60(xargs *x) const {
	// toString()
	QString xret = this->QSqlCursor::toString();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_61(xargs *x) {
	// afterSeek()
	this->QSqlCursor::afterSeek();
    }
    void x_62(xargs *x) {
	// exec(const QString&)
	bool xret = this->QSqlCursor::exec(*(const QString *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_63(xargs *x) {
	// calculateField(const QString&)
	QVariant xret = this->QSqlCursor::calculateField(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QVariant(xret);
    }
    void x_64(xargs *x) {
	// update(const QString&, bool)
	int xret = this->QSqlCursor::update(*(const QString *)x[1].x_voidp,(bool)x[2].x_bool);
	x[0].x_int = (int)xret;
    }
    void x_65(xargs *x) {
	// update(const QString&)
	int xret = this->QSqlCursor::update(*(const QString *)x[1].x_voidp);
	x[0].x_int = (int)xret;
    }
    void x_66(xargs *x) {
	// del(const QString&, bool)
	int xret = this->QSqlCursor::del(*(const QString *)x[1].x_voidp,(bool)x[2].x_bool);
	x[0].x_int = (int)xret;
    }
    void x_67(xargs *x) {
	// del(const QString&)
	int xret = this->QSqlCursor::del(*(const QString *)x[1].x_voidp);
	x[0].x_int = (int)xret;
    }
    void x_68(xargs *x) const {
	// toString(const QString&, QSqlField*, const QString&)
	QString xret = this->QSqlCursor::toString(*(const QString *)x[1].x_voidp,(QSqlField*)x[2].x_voidp,*(const QString *)x[3].x_voidp);
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_69(xargs *x) const {
	// toString(QSqlRecord*, const QString&, const QString&, const QString&)
	QString xret = this->QSqlCursor::toString((QSqlRecord*)x[1].x_voidp,*(const QString *)x[2].x_voidp,*(const QString *)x[3].x_voidp,*(const QString *)x[4].x_voidp);
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_70(xargs *x) const {
	// toString(const QSqlIndex&, QSqlRecord*, const QString&, const QString&, const QString&)
	QString xret = this->QSqlCursor::toString(*(const QSqlIndex *)x[1].x_voidp,(QSqlRecord*)x[2].x_voidp,*(const QString *)x[3].x_voidp,*(const QString *)x[4].x_voidp,*(const QString *)x[5].x_voidp);
	x[0].x_voidp = (void*)new QString(xret);
    }
    virtual void afterSeek() {
	xargs x[1];
	if(call_method((void*)this, 7293, x)) return;
	this->QSqlCursor::afterSeek();
    }
    virtual void append(const QSqlFieldInfo& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 7251, x)) return;
	this->QSqlCursor::append(x1);
    }
    virtual void beforeSeek() {
	xargs x[1];
	if(call_method((void*)this, 7540, x)) return;
	this->QSqlQuery::beforeSeek();
    }
    virtual QVariant calculateField(const QString& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 7295, x)) {
	    QVariant *xptr = (QVariant *)x[0].x_voidp;
	    QVariant xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QSqlCursor::calculateField(x1);
    }
    virtual void clear() {
	xargs x[1];
	if(call_method((void*)this, 7254, x)) return;
	this->QSqlCursor::clear();
    }
    virtual void clearValues(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 7570, x)) return;
	this->QSqlRecord::clearValues(x1);
    }
    virtual int del(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 7266, x)) return (int)x[0].x_int;
	return this->QSqlCursor::del(x1);
    }
    virtual int del(const QString& x1, bool x2) {
	xargs x[3];
	x[1].x_voidp = (void*)&x1;
	x[2].x_bool = (bool)x2;
	if(call_method((void*)this, 7298, x)) return (int)x[0].x_int;
	return this->QSqlCursor::del(x1, x2);
    }
    virtual QSqlRecord* editBuffer(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 7257, x)) 	return (QSqlRecord*)x[0].x_voidp;
	return this->QSqlCursor::editBuffer(x1);
    }
    virtual bool exec(const QString& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 7294, x)) return (bool)x[0].x_bool;
	return this->QSqlCursor::exec(x1);
    }
    virtual bool first() {
	xargs x[1];
	if(call_method((void*)this, 7538, x)) return (bool)x[0].x_bool;
	return this->QSqlQuery::first();
    }
    virtual QSqlIndex index(const QStringList& x1) const {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 7247, x)) {
	    QSqlIndex *xptr = (QSqlIndex *)x[0].x_voidp;
	    QSqlIndex xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QSqlCursor::index(x1);
    }
    virtual int insert(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 7262, x)) return (int)x[0].x_int;
	return this->QSqlCursor::insert(x1);
    }
    virtual void insert(int x1, const QSqlFieldInfo& x2) {
	xargs x[3];
	x[1].x_int = (int)x1;
	x[2].x_voidp = (void*)&x2;
	if(call_method((void*)this, 7252, x)) return;
	this->QSqlCursor::insert(x1, x2);
    }
    virtual bool last() {
	xargs x[1];
	if(call_method((void*)this, 7539, x)) return (bool)x[0].x_bool;
	return this->QSqlQuery::last();
    }
    virtual bool next() {
	xargs x[1];
	if(call_method((void*)this, 7536, x)) return (bool)x[0].x_bool;
	return this->QSqlQuery::next();
    }
    virtual bool prev() {
	xargs x[1];
	if(call_method((void*)this, 7537, x)) return (bool)x[0].x_bool;
	return this->QSqlQuery::prev();
    }
    virtual QSqlIndex primaryIndex(bool x1) const {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 7245, x)) {
	    QSqlIndex *xptr = (QSqlIndex *)x[0].x_voidp;
	    QSqlIndex xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QSqlCursor::primaryIndex(x1);
    }
    virtual QSqlRecord* primeDelete() {
	xargs x[1];
	if(call_method((void*)this, 7261, x)) 	return (QSqlRecord*)x[0].x_voidp;
	return this->QSqlCursor::primeDelete();
    }
    virtual QSqlRecord* primeInsert() {
	xargs x[1];
	if(call_method((void*)this, 7259, x)) 	return (QSqlRecord*)x[0].x_voidp;
	return this->QSqlCursor::primeInsert();
    }
    virtual QSqlRecord* primeUpdate() {
	xargs x[1];
	if(call_method((void*)this, 7260, x)) 	return (QSqlRecord*)x[0].x_voidp;
	return this->QSqlCursor::primeUpdate();
    }
    virtual void remove(int x1) {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 7253, x)) return;
	this->QSqlCursor::remove(x1);
    }
    virtual bool seek(int x1, bool x2) {
	xargs x[3];
	x[1].x_int = (int)x1;
	x[2].x_bool = (bool)x2;
	if(call_method((void*)this, 7534, x)) return (bool)x[0].x_bool;
	return this->QSqlQuery::seek(x1, x2);
    }
    virtual bool select(const QString& x1, const QSqlIndex& x2) {
	xargs x[3];
	x[1].x_voidp = (void*)&x1;
	x[2].x_voidp = (void*)&x2;
	if(call_method((void*)this, 7281, x)) return (bool)x[0].x_bool;
	return this->QSqlCursor::select(x1, x2);
    }
    virtual void setCalculated(const QString& x1, bool x2) {
	xargs x[3];
	x[1].x_voidp = (void*)&x1;
	x[2].x_bool = (bool)x2;
	if(call_method((void*)this, 7270, x)) return;
	this->QSqlCursor::setCalculated(x1, x2);
    }
    virtual void setFilter(const QString& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 7285, x)) return;
	this->QSqlCursor::setFilter(x1);
    }
    virtual void setGenerated(const QString& x1, bool x2) {
	xargs x[3];
	x[1].x_voidp = (void*)&x1;
	x[2].x_bool = (bool)x2;
	if(call_method((void*)this, 7255, x)) return;
	this->QSqlCursor::setGenerated(x1, x2);
    }
    virtual void setGenerated(int x1, bool x2) {
	xargs x[3];
	x[1].x_int = (int)x1;
	x[2].x_bool = (bool)x2;
	if(call_method((void*)this, 7256, x)) return;
	this->QSqlCursor::setGenerated(x1, x2);
    }
    virtual void setMode(int x1) {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 7268, x)) return;
	this->QSqlCursor::setMode(x1);
    }
    virtual void setName(const QString& x1, bool x2) {
	xargs x[3];
	x[1].x_voidp = (void*)&x1;
	x[2].x_bool = (bool)x2;
	if(call_method((void*)this, 7287, x)) return;
	this->QSqlCursor::setName(x1, x2);
    }
    virtual void setNull(const QString& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 7555, x)) return;
	this->QSqlRecord::setNull(x1);
    }
    virtual void setNull(int x1) {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 7554, x)) return;
	this->QSqlRecord::setNull(x1);
    }
    virtual void setPrimaryIndex(const QSqlIndex& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 7250, x)) return;
	this->QSqlCursor::setPrimaryIndex(x1);
    }
    virtual void setSort(const QSqlIndex& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 7283, x)) return;
	this->QSqlCursor::setSort(x1);
    }
    virtual void setTrimmed(const QString& x1, bool x2) {
	xargs x[3];
	x[1].x_voidp = (void*)&x1;
	x[2].x_bool = (bool)x2;
	if(call_method((void*)this, 7272, x)) return;
	this->QSqlCursor::setTrimmed(x1, x2);
    }
    virtual void setValue(const QString& x1, const QVariant& x2) {
	xargs x[3];
	x[1].x_voidp = (void*)&x1;
	x[2].x_voidp = (void*)&x2;
	if(call_method((void*)this, 7549, x)) return;
	this->QSqlRecord::setValue(x1, x2);
    }
    virtual void setValue(int x1, const QVariant& x2) {
	xargs x[3];
	x[1].x_int = (int)x1;
	x[2].x_voidp = (void*)&x2;
	if(call_method((void*)this, 7548, x)) return;
	this->QSqlRecord::setValue(x1, x2);
    }
    virtual QString toString(QSqlRecord* x1, const QString& x2, const QString& x3, const QString& x4) const {
	xargs x[5];
	x[1].x_voidp = (void*)x1;
	x[2].x_voidp = (void*)&x2;
	x[3].x_voidp = (void*)&x3;
	x[4].x_voidp = (void*)&x4;
	if(call_method((void*)this, 7301, x)) {
	    QString *xptr = (QString *)x[0].x_voidp;
	    QString xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QSqlCursor::toString(x1, x2, x3, x4);
    }
    virtual QString toString(const QSqlIndex& x1, QSqlRecord* x2, const QString& x3, const QString& x4, const QString& x5) const {
	xargs x[6];
	x[1].x_voidp = (void*)&x1;
	x[2].x_voidp = (void*)x2;
	x[3].x_voidp = (void*)&x3;
	x[4].x_voidp = (void*)&x4;
	x[5].x_voidp = (void*)&x5;
	if(call_method((void*)this, 7302, x)) {
	    QString *xptr = (QString *)x[0].x_voidp;
	    QString xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QSqlCursor::toString(x1, x2, x3, x4, x5);
    }
    virtual QString toString(const QString& x1, QSqlField* x2, const QString& x3) const {
	xargs x[4];
	x[1].x_voidp = (void*)&x1;
	x[2].x_voidp = (void*)x2;
	x[3].x_voidp = (void*)&x3;
	if(call_method((void*)this, 7300, x)) {
	    QString *xptr = (QString *)x[0].x_voidp;
	    QString xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QSqlCursor::toString(x1, x2, x3);
    }
    virtual QString toString(const QString& x1, const QString& x2) const {
	xargs x[3];
	x[1].x_voidp = (void*)&x1;
	x[2].x_voidp = (void*)&x2;
	if(call_method((void*)this, 7290, x)) {
	    QString *xptr = (QString *)x[0].x_voidp;
	    QString xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QSqlCursor::toString(x1, x2);
    }
    virtual QStringList toStringList(const QString& x1) const {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 7576, x)) {
	    QStringList *xptr = (QStringList *)x[0].x_voidp;
	    QStringList xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QSqlRecord::toStringList(x1);
    }
    virtual int update(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 7264, x)) return (int)x[0].x_int;
	return this->QSqlCursor::update(x1);
    }
    virtual int update(const QString& x1, bool x2) {
	xargs x[3];
	x[1].x_voidp = (void*)&x1;
	x[2].x_bool = (bool)x2;
	if(call_method((void*)this, 7296, x)) return (int)x[0].x_int;
	return this->QSqlCursor::update(x1, x2);
    }
    virtual QVariant value(const QString& x1) const {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 7244, x)) {
	    QVariant *xptr = (QVariant *)x[0].x_voidp;
	    QVariant xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QSqlCursor::value(x1);
    }
    virtual QVariant value(int x1) const {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 7243, x)) {
	    QVariant *xptr = (QVariant *)x[0].x_voidp;
	    QVariant xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QSqlCursor::value(x1);
    }
    ~x_QSqlCursor() {}
};
void xcall_QSqlCursor(xargs *x, void *s, int xi) {
    x_QSqlCursor *xself = (x_QSqlCursor*)s;
    switch(xi) {
	case 0: x_QSqlCursor::x_0(x);	break;
	case 1: x_QSqlCursor::x_1(x);	break;
	case 2: x_QSqlCursor::x_2(x);	break;
	case 3: x_QSqlCursor::x_3(x);	break;
	case 4: x_QSqlCursor::x_4(x);	break;
	case 5: x_QSqlCursor::x_5(x);	break;
	case 6: x_QSqlCursor::x_6(x);	break;
	case 7: x_QSqlCursor::x_7(x);	break;
	case 8: x_QSqlCursor::x_8(x);	break;
	case 9: x_QSqlCursor::x_9(x);	break;
	case 10: xself->x_10(x);	break;
	case 11: xself->x_11(x);	break;
	case 12: xself->x_12(x);	break;
	case 13: xself->x_13(x);	break;
	case 14: xself->x_14(x);	break;
	case 15: xself->x_15(x);	break;
	case 16: xself->x_16(x);	break;
	case 17: xself->x_17(x);	break;
	case 18: xself->x_18(x);	break;
	case 19: xself->x_19(x);	break;
	case 20: xself->x_20(x);	break;
	case 21: xself->x_21(x);	break;
	case 22: xself->x_22(x);	break;
	case 23: xself->x_23(x);	break;
	case 24: xself->x_24(x);	break;
	case 25: xself->x_25(x);	break;
	case 26: xself->x_26(x);	break;
	case 27: xself->x_27(x);	break;
	case 28: xself->x_28(x);	break;
	case 29: xself->x_29(x);	break;
	case 30: xself->x_30(x);	break;
	case 31: xself->x_31(x);	break;
	case 32: xself->x_32(x);	break;
	case 33: xself->x_33(x);	break;
	case 34: xself->x_34(x);	break;
	case 35: xself->x_35(x);	break;
	case 36: xself->x_36(x);	break;
	case 37: xself->x_37(x);	break;
	case 38: xself->x_38(x);	break;
	case 39: xself->x_39(x);	break;
	case 40: xself->x_40(x);	break;
	case 41: xself->x_41(x);	break;
	case 42: xself->x_42(x);	break;
	case 43: xself->x_43(x);	break;
	case 44: xself->x_44(x);	break;
	case 45: xself->x_45(x);	break;
	case 46: xself->x_46(x);	break;
	case 47: xself->x_47(x);	break;
	case 48: xself->x_48(x);	break;
	case 49: xself->x_49(x);	break;
	case 50: xself->x_50(x);	break;
	case 51: xself->x_51(x);	break;
	case 52: xself->x_52(x);	break;
	case 53: xself->x_53(x);	break;
	case 54: xself->x_54(x);	break;
	case 55: xself->x_55(x);	break;
	case 56: xself->x_56(x);	break;
	case 57: xself->x_57(x);	break;
	case 58: xself->x_58(x);	break;
	case 59: xself->x_59(x);	break;
	case 60: xself->x_60(x);	break;
	case 61: xself->x_61(x);	break;
	case 62: xself->x_62(x);	break;
	case 63: xself->x_63(x);	break;
	case 64: xself->x_64(x);	break;
	case 65: xself->x_65(x);	break;
	case 66: xself->x_66(x);	break;
	case 67: xself->x_67(x);	break;
	case 68: xself->x_68(x);	break;
	case 69: xself->x_69(x);	break;
	case 70: xself->x_70(x);	break;
	case 71: delete (QSqlCursor*)xself;	break;
    }
}
