//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qgcache.h>
#include <qstring.h>

class x_QGCache : public QGCache {
public:
    static void x_0(xargs *x) {
	x[0].x_long = (long)QGCache::StringKey;
    }
    static void x_1(xargs *x) {
	x[0].x_long = (long)QGCache::AsciiKey;
    }
    static void x_2(xargs *x) {
	x[0].x_long = (long)QGCache::IntKey;
    }
    static void x_3(xargs *x) {
	x[0].x_long = (long)QGCache::PtrKey;
    }
    static void x_4(xargs *x) {
	// QGCache(int, uint, QGCache::KeyType, bool, bool)
	x_QGCache* xret = new x_QGCache((int)x[1].x_int,(uint)x[2].x_uint,(QGCache::KeyType)x[3].x_long,(bool)x[4].x_bool,(bool)x[5].x_bool);
	x[0].x_voidp = (void*)xret;
    }
    x_QGCache(int x1, uint x2, QGCache::KeyType x3, bool x4, bool x5) : QGCache(x1, x2, x3, x4, x5) {
    }
    static void x_5(xargs *x) {
	// QGCache(const QGCache&)
	x_QGCache* xret = new x_QGCache(*(const QGCache *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QGCache(const QGCache& x1) : QGCache(x1) {
    }
    void x_6(xargs *x) {
	// operator=(const QGCache&)
	QGCache& xret = this->QGCache::operator=(*(const QGCache *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_7(xargs *x) const {
	// count()
	uint xret = this->QGCache::count();
	x[0].x_uint = (uint)xret;
    }
    void x_8(xargs *x) const {
	// size()
	uint xret = this->QGCache::size();
	x[0].x_uint = (uint)xret;
    }
    void x_9(xargs *x) const {
	// maxCost()
	int xret = this->QGCache::maxCost();
	x[0].x_int = (int)xret;
    }
    void x_10(xargs *x) const {
	// totalCost()
	int xret = this->QGCache::totalCost();
	x[0].x_int = (int)xret;
    }
    void x_11(xargs *x) {
	// setMaxCost(int)
	this->QGCache::setMaxCost((int)x[1].x_int);
    }
    void x_12(xargs *x) {
	// clear()
	this->QGCache::clear();
    }
    void x_13(xargs *x) {
	// insert_string(const QString&, QPtrCollection::Item, int, int)
	bool xret = this->QGCache::insert_string(*(const QString *)x[1].x_voidp,*(QPtrCollection::Item *)x[2].x_voidp,(int)x[3].x_int,(int)x[4].x_int);
	x[0].x_bool = (bool)xret;
    }
    void x_14(xargs *x) {
	// insert_other(const char*, QPtrCollection::Item, int, int)
	bool xret = this->QGCache::insert_other((const char*)x[1].x_voidp,*(QPtrCollection::Item *)x[2].x_voidp,(int)x[3].x_int,(int)x[4].x_int);
	x[0].x_bool = (bool)xret;
    }
    void x_15(xargs *x) {
	// remove_string(const QString&)
	bool xret = this->QGCache::remove_string(*(const QString *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_16(xargs *x) {
	// remove_other(const char*)
	bool xret = this->QGCache::remove_other((const char*)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_17(xargs *x) {
	// take_string(const QString&)
	QPtrCollection::Item xret = this->QGCache::take_string(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QPtrCollection::Item(xret);
    }
    void x_18(xargs *x) {
	// take_other(const char*)
	QPtrCollection::Item xret = this->QGCache::take_other((const char*)x[1].x_voidp);
	x[0].x_voidp = (void*)new QPtrCollection::Item(xret);
    }
    void x_19(xargs *x) const {
	// find_string(const QString&, bool)
	QPtrCollection::Item xret = this->QGCache::find_string(*(const QString *)x[1].x_voidp,(bool)x[2].x_bool);
	x[0].x_voidp = (void*)new QPtrCollection::Item(xret);
    }
    void x_20(xargs *x) const {
	// find_string(const QString&)
	QPtrCollection::Item xret = this->QGCache::find_string(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QPtrCollection::Item(xret);
    }
    void x_21(xargs *x) const {
	// find_other(const char*, bool)
	QPtrCollection::Item xret = this->QGCache::find_other((const char*)x[1].x_voidp,(bool)x[2].x_bool);
	x[0].x_voidp = (void*)new QPtrCollection::Item(xret);
    }
    void x_22(xargs *x) const {
	// find_other(const char*)
	QPtrCollection::Item xret = this->QGCache::find_other((const char*)x[1].x_voidp);
	x[0].x_voidp = (void*)new QPtrCollection::Item(xret);
    }
    void x_23(xargs *x) const {
	// statistics()
	this->QGCache::statistics();
    }
    virtual void clear() {
	xargs x[1];
	if(call_method((void*)this, 3013, x)) return;
	this->QGCache::clear();
    }
    virtual uint count() const {
	xargs x[1];
	if(call_method((void*)this, 3008, x)) return (uint)x[0].x_uint;
	return this->QGCache::count();
    }
    virtual void deleteItem(Item x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	call_method_abstract((void*)this, 6289, x);
	return;
	// ABSTRACT
    }
    virtual Item newItem(Item x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 6288, x)) {
	    Item *xptr = (Item *)x[0].x_voidp;
	    Item xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QPtrCollection::newItem(x1);
    }
    ~x_QGCache() {}
};
void xcall_QGCache(xargs *x, void *s, int xi) {
    x_QGCache *xself = (x_QGCache*)s;
    switch(xi) {
	case 0: x_QGCache::x_0(x);	break;
	case 1: x_QGCache::x_1(x);	break;
	case 2: x_QGCache::x_2(x);	break;
	case 3: x_QGCache::x_3(x);	break;
	case 4: x_QGCache::x_4(x);	break;
	case 5: x_QGCache::x_5(x);	break;
	case 6: xself->x_6(x);	break;
	case 7: xself->x_7(x);	break;
	case 8: xself->x_8(x);	break;
	case 9: xself->x_9(x);	break;
	case 10: xself->x_10(x);	break;
	case 11: xself->x_11(x);	break;
	case 12: xself->x_12(x);	break;
	case 13: xself->x_13(x);	break;
	case 14: xself->x_14(x);	break;
	case 15: xself->x_15(x);	break;
	case 16: xself->x_16(x);	break;
	case 17: xself->x_17(x);	break;
	case 18: xself->x_18(x);	break;
	case 19: xself->x_19(x);	break;
	case 20: xself->x_20(x);	break;
	case 21: xself->x_21(x);	break;
	case 22: xself->x_22(x);	break;
	case 23: xself->x_23(x);	break;
    }
}
