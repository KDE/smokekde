//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke.h>
#include <qt_smoke.h>
#include <qcursor.h>
#include <qcolor.h>
#include <qsql.h>
#include <qstring.h>
#include <qdatabrowser.h>
#include <qsqlcursor.h>
#include <qsize.h>
#include <qvariant.h>
#include <qregion.h>
#include <qstringlist.h>
#include <qpoint.h>
#include <qfont.h>
#include <qbitmap.h>
#include <qsqlerror.h>
#include <qsizepolicy.h>
#include <qpalette.h>
#include <qnamespace.h>
#include <qwidget.h>
#include <qsqlindex.h>
#include <qrect.h>
#include <qpixmap.h>
#include <qstyle.h>

class x_QDataBrowser : public QDataBrowser {
public:
    static void x_0(Smoke::Stack x) {
	x[0].s_enum = (long)QDataBrowser::Unknown;
    }
    static void x_1(Smoke::Stack x) {
	x[0].s_enum = (long)QDataBrowser::None;
    }
    static void x_2(Smoke::Stack x) {
	x[0].s_enum = (long)QDataBrowser::BeforeBeginning;
    }
    static void x_3(Smoke::Stack x) {
	x[0].s_enum = (long)QDataBrowser::Beginning;
    }
    static void x_4(Smoke::Stack x) {
	x[0].s_enum = (long)QDataBrowser::End;
    }
    static void x_5(Smoke::Stack x) {
	x[0].s_enum = (long)QDataBrowser::AfterEnd;
    }
    void x_6(Smoke::Stack x) const {
	// metaObject()
	QMetaObject* xret = this->QDataBrowser::metaObject();
	x[0].s_class = (void*)xret;
    }
    void x_7(Smoke::Stack x) const {
	// className()
	const char* xret = this->QDataBrowser::className();
	x[0].s_voidp = (void*)xret;
    }
    void x_8(Smoke::Stack x) {
	// qt_cast(const char*)
	void* xret = this->QDataBrowser::qt_cast((const char*)x[1].s_voidp);
	x[0].s_voidp = (void*)xret;
    }
    void x_9(Smoke::Stack x) {
	// qt_invoke(int, QUObject*)
	bool xret = this->QDataBrowser::qt_invoke((int)x[1].s_int,(QUObject*)x[2].s_voidp);
	x[0].s_bool = xret;
    }
    void x_10(Smoke::Stack x) {
	// qt_emit(int, QUObject*)
	bool xret = this->QDataBrowser::qt_emit((int)x[1].s_int,(QUObject*)x[2].s_voidp);
	x[0].s_bool = xret;
    }
    void x_11(Smoke::Stack x) {
	// qt_property(int, int, QVariant*)
	bool xret = this->QDataBrowser::qt_property((int)x[1].s_int,(int)x[2].s_int,(QVariant*)x[3].s_class);
	x[0].s_bool = xret;
    }
    void x_12(Smoke::Stack x) {
	// qObject()
	QObject* xret = this->QDataBrowser::qObject();
	x[0].s_class = (void*)xret;
    }
    static void x_13(Smoke::Stack x) {
	// QDataBrowser(QWidget*, const char*, Qt::WFlags)
	x_QDataBrowser* xret = new x_QDataBrowser((QWidget*)x[1].s_class,(const char*)x[2].s_voidp,(Qt::WFlags)x[3].s_int);
	x[0].s_class = (void*)xret;
    }
    x_QDataBrowser(QWidget* x1, const char* x2, Qt::WFlags x3) : QDataBrowser(x1, x2, x3) {
    }
    static void x_14(Smoke::Stack x) {
	// QDataBrowser(QWidget*, const char*)
	x_QDataBrowser* xret = new x_QDataBrowser((QWidget*)x[1].s_class,(const char*)x[2].s_voidp);
	x[0].s_class = (void*)xret;
    }
    x_QDataBrowser(QWidget* x1, const char* x2) : QDataBrowser(x1, x2) {
    }
    static void x_15(Smoke::Stack x) {
	// QDataBrowser(QWidget*)
	x_QDataBrowser* xret = new x_QDataBrowser((QWidget*)x[1].s_class);
	x[0].s_class = (void*)xret;
    }
    x_QDataBrowser(QWidget* x1) : QDataBrowser(x1) {
    }
    static void x_16(Smoke::Stack x) {
	// QDataBrowser()
	x_QDataBrowser* xret = new x_QDataBrowser();
	x[0].s_class = (void*)xret;
    }
    x_QDataBrowser() : QDataBrowser() {
    }
    void x_17(Smoke::Stack x) {
	// boundary()
	QDataBrowser::Boundary xret = this->QDataBrowser::boundary();
	x[0].s_enum = xret;
    }
    void x_18(Smoke::Stack x) {
	// setBoundaryChecking(bool)
	this->QDataBrowser::setBoundaryChecking((bool)x[1].s_bool);
	(void)x; // noop (for compiler warning)
    }
    void x_19(Smoke::Stack x) const {
	// boundaryChecking()
	bool xret = this->QDataBrowser::boundaryChecking();
	x[0].s_bool = xret;
    }
    void x_20(Smoke::Stack x) {
	// setSort(const QSqlIndex&)
	this->QDataBrowser::setSort(*(const QSqlIndex *)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_21(Smoke::Stack x) {
	// setSort(const QStringList&)
	this->QDataBrowser::setSort(*(const QStringList *)x[1].s_voidp);
	(void)x; // noop (for compiler warning)
    }
    void x_22(Smoke::Stack x) const {
	// sort()
	QStringList xret = this->QDataBrowser::sort();
	x[0].s_voidp = (void*)new QStringList(xret);
    }
    void x_23(Smoke::Stack x) {
	// setFilter(const QString&)
	this->QDataBrowser::setFilter(*(const QString *)x[1].s_voidp);
	(void)x; // noop (for compiler warning)
    }
    void x_24(Smoke::Stack x) const {
	// filter()
	QString xret = this->QDataBrowser::filter();
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_25(Smoke::Stack x) {
	// setSqlCursor(QSqlCursor*, bool)
	this->QDataBrowser::setSqlCursor((QSqlCursor*)x[1].s_class,(bool)x[2].s_bool);
	(void)x; // noop (for compiler warning)
    }
    void x_26(Smoke::Stack x) {
	// setSqlCursor(QSqlCursor*)
	this->QDataBrowser::setSqlCursor((QSqlCursor*)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_27(Smoke::Stack x) const {
	// sqlCursor()
	QSqlCursor* xret = this->QDataBrowser::sqlCursor();
	x[0].s_class = (void*)xret;
    }
    void x_28(Smoke::Stack x) {
	// setForm(QSqlForm*)
	this->QDataBrowser::setForm((QSqlForm*)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_29(Smoke::Stack x) {
	// form()
	QSqlForm* xret = this->QDataBrowser::form();
	x[0].s_class = (void*)xret;
    }
    void x_30(Smoke::Stack x) {
	// setConfirmEdits(bool)
	this->QDataBrowser::setConfirmEdits((bool)x[1].s_bool);
	(void)x; // noop (for compiler warning)
    }
    void x_31(Smoke::Stack x) {
	// setConfirmInsert(bool)
	this->QDataBrowser::setConfirmInsert((bool)x[1].s_bool);
	(void)x; // noop (for compiler warning)
    }
    void x_32(Smoke::Stack x) {
	// setConfirmUpdate(bool)
	this->QDataBrowser::setConfirmUpdate((bool)x[1].s_bool);
	(void)x; // noop (for compiler warning)
    }
    void x_33(Smoke::Stack x) {
	// setConfirmDelete(bool)
	this->QDataBrowser::setConfirmDelete((bool)x[1].s_bool);
	(void)x; // noop (for compiler warning)
    }
    void x_34(Smoke::Stack x) {
	// setConfirmCancels(bool)
	this->QDataBrowser::setConfirmCancels((bool)x[1].s_bool);
	(void)x; // noop (for compiler warning)
    }
    void x_35(Smoke::Stack x) const {
	// confirmEdits()
	bool xret = this->QDataBrowser::confirmEdits();
	x[0].s_bool = xret;
    }
    void x_36(Smoke::Stack x) const {
	// confirmInsert()
	bool xret = this->QDataBrowser::confirmInsert();
	x[0].s_bool = xret;
    }
    void x_37(Smoke::Stack x) const {
	// confirmUpdate()
	bool xret = this->QDataBrowser::confirmUpdate();
	x[0].s_bool = xret;
    }
    void x_38(Smoke::Stack x) const {
	// confirmDelete()
	bool xret = this->QDataBrowser::confirmDelete();
	x[0].s_bool = xret;
    }
    void x_39(Smoke::Stack x) const {
	// confirmCancels()
	bool xret = this->QDataBrowser::confirmCancels();
	x[0].s_bool = xret;
    }
    void x_40(Smoke::Stack x) {
	// setReadOnly(bool)
	this->QDataBrowser::setReadOnly((bool)x[1].s_bool);
	(void)x; // noop (for compiler warning)
    }
    void x_41(Smoke::Stack x) const {
	// isReadOnly()
	bool xret = this->QDataBrowser::isReadOnly();
	x[0].s_bool = xret;
    }
    void x_42(Smoke::Stack x) {
	// setAutoEdit(bool)
	this->QDataBrowser::setAutoEdit((bool)x[1].s_bool);
	(void)x; // noop (for compiler warning)
    }
    void x_43(Smoke::Stack x) const {
	// autoEdit()
	bool xret = this->QDataBrowser::autoEdit();
	x[0].s_bool = xret;
    }
    void x_44(Smoke::Stack x) {
	// seek(int, bool)
	bool xret = this->QDataBrowser::seek((int)x[1].s_int,(bool)x[2].s_bool);
	x[0].s_bool = xret;
    }
    void x_45(Smoke::Stack x) {
	// seek(int)
	bool xret = this->QDataBrowser::seek((int)x[1].s_int);
	x[0].s_bool = xret;
    }
    void x_46(Smoke::Stack x) {
	// refresh()
	this->QDataBrowser::refresh();
	(void)x; // noop (for compiler warning)
    }
    void x_47(Smoke::Stack x) {
	// insert()
	this->QDataBrowser::insert();
	(void)x; // noop (for compiler warning)
    }
    void x_48(Smoke::Stack x) {
	// update()
	this->QDataBrowser::update();
	(void)x; // noop (for compiler warning)
    }
    void x_49(Smoke::Stack x) {
	// del()
	this->QDataBrowser::del();
	(void)x; // noop (for compiler warning)
    }
    void x_50(Smoke::Stack x) {
	// first()
	this->QDataBrowser::first();
	(void)x; // noop (for compiler warning)
    }
    void x_51(Smoke::Stack x) {
	// last()
	this->QDataBrowser::last();
	(void)x; // noop (for compiler warning)
    }
    void x_52(Smoke::Stack x) {
	// next()
	this->QDataBrowser::next();
	(void)x; // noop (for compiler warning)
    }
    void x_53(Smoke::Stack x) {
	// prev()
	this->QDataBrowser::prev();
	(void)x; // noop (for compiler warning)
    }
    void x_54(Smoke::Stack x) {
	// readFields()
	this->QDataBrowser::readFields();
	(void)x; // noop (for compiler warning)
    }
    void x_55(Smoke::Stack x) {
	// writeFields()
	this->QDataBrowser::writeFields();
	(void)x; // noop (for compiler warning)
    }
    void x_56(Smoke::Stack x) {
	// clearValues()
	this->QDataBrowser::clearValues();
	(void)x; // noop (for compiler warning)
    }
    void x_57(Smoke::Stack x) {
	// updateBoundary()
	this->QDataBrowser::updateBoundary();
	(void)x; // noop (for compiler warning)
    }
    void x_58(Smoke::Stack x) {
	// firstRecordAvailable(bool)
	this->QDataBrowser::firstRecordAvailable((bool)x[1].s_bool);
	(void)x; // noop (for compiler warning)
    }
    void x_59(Smoke::Stack x) {
	// lastRecordAvailable(bool)
	this->QDataBrowser::lastRecordAvailable((bool)x[1].s_bool);
	(void)x; // noop (for compiler warning)
    }
    void x_60(Smoke::Stack x) {
	// nextRecordAvailable(bool)
	this->QDataBrowser::nextRecordAvailable((bool)x[1].s_bool);
	(void)x; // noop (for compiler warning)
    }
    void x_61(Smoke::Stack x) {
	// prevRecordAvailable(bool)
	this->QDataBrowser::prevRecordAvailable((bool)x[1].s_bool);
	(void)x; // noop (for compiler warning)
    }
    void x_62(Smoke::Stack x) {
	// currentChanged(const QSqlRecord*)
	this->QDataBrowser::currentChanged((const QSqlRecord*)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_63(Smoke::Stack x) {
	// primeInsert(QSqlRecord*)
	this->QDataBrowser::primeInsert((QSqlRecord*)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_64(Smoke::Stack x) {
	// primeUpdate(QSqlRecord*)
	this->QDataBrowser::primeUpdate((QSqlRecord*)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_65(Smoke::Stack x) {
	// primeDelete(QSqlRecord*)
	this->QDataBrowser::primeDelete((QSqlRecord*)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_66(Smoke::Stack x) {
	// beforeInsert(QSqlRecord*)
	this->QDataBrowser::beforeInsert((QSqlRecord*)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_67(Smoke::Stack x) {
	// beforeUpdate(QSqlRecord*)
	this->QDataBrowser::beforeUpdate((QSqlRecord*)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_68(Smoke::Stack x) {
	// beforeDelete(QSqlRecord*)
	this->QDataBrowser::beforeDelete((QSqlRecord*)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_69(Smoke::Stack x) {
	// cursorChanged(QSqlCursor::Mode)
	this->QDataBrowser::cursorChanged((QSqlCursor::Mode)x[1].s_enum);
	(void)x; // noop (for compiler warning)
    }
    static void x_70(Smoke::Stack x) {
	// staticMetaObject()
	QMetaObject* xret = QDataBrowser::staticMetaObject();
	x[0].s_class = (void*)xret;
    }
    static void x_71(Smoke::Stack x) {
	// tr(const char*, const char*)
	QString xret = QDataBrowser::tr((const char*)x[1].s_voidp,(const char*)x[2].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    static void x_72(Smoke::Stack x) {
	// tr(const char*)
	QString xret = QDataBrowser::tr((const char*)x[1].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    static void x_73(Smoke::Stack x) {
	// trUtf8(const char*, const char*)
	QString xret = QDataBrowser::trUtf8((const char*)x[1].s_voidp,(const char*)x[2].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    static void x_74(Smoke::Stack x) {
	// trUtf8(const char*)
	QString xret = QDataBrowser::trUtf8((const char*)x[1].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_75(Smoke::Stack x) {
	// insertCurrent()
	bool xret = this->QDataBrowser::insertCurrent();
	x[0].s_bool = xret;
    }
    void x_76(Smoke::Stack x) {
	// updateCurrent()
	bool xret = this->QDataBrowser::updateCurrent();
	x[0].s_bool = xret;
    }
    void x_77(Smoke::Stack x) {
	// deleteCurrent()
	bool xret = this->QDataBrowser::deleteCurrent();
	x[0].s_bool = xret;
    }
    void x_78(Smoke::Stack x) {
	// currentEdited()
	bool xret = this->QDataBrowser::currentEdited();
	x[0].s_bool = xret;
    }
    void x_79(Smoke::Stack x) {
	// confirmEdit(QSql::Op)
	QSql::Confirm xret = this->QDataBrowser::confirmEdit((QSql::Op)x[1].s_enum);
	x[0].s_enum = xret;
    }
    void x_80(Smoke::Stack x) {
	// confirmCancel(QSql::Op)
	QSql::Confirm xret = this->QDataBrowser::confirmCancel((QSql::Op)x[1].s_enum);
	x[0].s_enum = xret;
    }
    void x_81(Smoke::Stack x) {
	// handleError(const QSqlError&)
	this->QDataBrowser::handleError(*(const QSqlError *)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    virtual void adjustSize() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(11932, (void*)this, x)) return;
	this->QWidget::adjustSize();
    }
    virtual bool checkConnectArgs(const char* x1, const QObject* x2, const char* x3) {
	Smoke::StackItem x[4];
	x[1].s_voidp = (void*)x1;
	x[2].s_class = (void*)x2;
	x[3].s_voidp = (void*)x3;
	if(qt_Smoke->binding->callMethod(6711, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QObject::checkConnectArgs(x1, x2, x3);
    }
    virtual void childEvent(QChildEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(6707, (void*)this, x)) return;
	this->QObject::childEvent(x1);
    }
    virtual const char* className() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(1534, (void*)this, x)) return (const char*)x[0].s_class;
	return this->QDataBrowser::className();
    }
    virtual void clearValues() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(1584, (void*)this, x)) return;
	this->QDataBrowser::clearValues();
    }
    virtual bool close(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(11838, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QWidget::close(x1);
    }
    virtual void closeEvent(QCloseEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11958, (void*)this, x)) return;
	this->QWidget::closeEvent(x1);
    }
    virtual bool cmd(int x1, QPainter* x2, QPDevCmdParam* x3) {
	Smoke::StackItem x[4];
	x[1].s_int = x1;
	x[2].s_class = (void*)x2;
	x[3].s_voidp = (void*)x3;
	if(qt_Smoke->binding->callMethod(6826, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QPaintDevice::cmd(x1, x2, x3);
    }
    virtual QSql::Confirm confirmCancel(QSql::Op x1) {
	Smoke::StackItem x[2];
	x[1].s_enum = x1;
	if(qt_Smoke->binding->callMethod(1608, (void*)this, x)) {
	    QSql::Confirm *xptr = (QSql::Confirm *)x[0].s_class;
	    QSql::Confirm xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDataBrowser::confirmCancel(x1);
    }
    virtual QSql::Confirm confirmEdit(QSql::Op x1) {
	Smoke::StackItem x[2];
	x[1].s_enum = x1;
	if(qt_Smoke->binding->callMethod(1607, (void*)this, x)) {
	    QSql::Confirm *xptr = (QSql::Confirm *)x[0].s_class;
	    QSql::Confirm xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDataBrowser::confirmEdit(x1);
    }
    virtual void connectNotify(const char* x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(6709, (void*)this, x)) return;
	this->QObject::connectNotify(x1);
    }
    virtual void contextMenuEvent(QContextMenuEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11959, (void*)this, x)) return;
	this->QWidget::contextMenuEvent(x1);
    }
    virtual void create(WId x1, bool x2, bool x3) {
	Smoke::StackItem x[4];
	x[1].s_ulong = x1;
	x[2].s_bool = x2;
	x[3].s_bool = x3;
	if(qt_Smoke->binding->callMethod(11978, (void*)this, x)) return;
	this->QWidget::create(x1, x2, x3);
    }
    virtual bool currentEdited() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(1606, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDataBrowser::currentEdited();
    }
    virtual void customEvent(QCustomEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(6708, (void*)this, x)) return;
	this->QObject::customEvent(x1);
    }
    virtual bool customWhatsThis() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(11880, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QWidget::customWhatsThis();
    }
    virtual void del() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(1577, (void*)this, x)) return;
	this->QDataBrowser::del();
    }
    virtual bool deleteCurrent() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(1605, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDataBrowser::deleteCurrent();
    }
    virtual void destroy(bool x1, bool x2) {
	Smoke::StackItem x[3];
	x[1].s_bool = x1;
	x[2].s_bool = x2;
	if(qt_Smoke->binding->callMethod(11982, (void*)this, x)) return;
	this->QWidget::destroy(x1, x2);
    }
    virtual void disconnectNotify(const char* x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(6710, (void*)this, x)) return;
	this->QObject::disconnectNotify(x1);
    }
    virtual void dragEnterEvent(QDragEnterEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11964, (void*)this, x)) return;
	this->QWidget::dragEnterEvent(x1);
    }
    virtual void dragLeaveEvent(QDragLeaveEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11966, (void*)this, x)) return;
	this->QWidget::dragLeaveEvent(x1);
    }
    virtual void dragMoveEvent(QDragMoveEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11965, (void*)this, x)) return;
	this->QWidget::dragMoveEvent(x1);
    }
    virtual void dropEvent(QDropEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11967, (void*)this, x)) return;
	this->QWidget::dropEvent(x1);
    }
    virtual void enabledChange(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(11972, (void*)this, x)) return;
	this->QWidget::enabledChange(x1);
    }
    virtual void enterEvent(QEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11953, (void*)this, x)) return;
	this->QWidget::enterEvent(x1);
    }
    virtual bool event(QEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11943, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QWidget::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
	Smoke::StackItem x[3];
	x[1].s_class = (void*)x1;
	x[2].s_class = (void*)x2;
	if(qt_Smoke->binding->callMethod(6642, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QObject::eventFilter(x1, x2);
    }
    virtual void first() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(1578, (void*)this, x)) return;
	this->QDataBrowser::first();
    }
    virtual void focusInEvent(QFocusEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11951, (void*)this, x)) return;
	this->QWidget::focusInEvent(x1);
    }
    virtual bool focusNextPrevChild(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(11991, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QWidget::focusNextPrevChild(x1);
    }
    virtual void focusOutEvent(QFocusEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11952, (void*)this, x)) return;
	this->QWidget::focusOutEvent(x1);
    }
    virtual void fontChange(const QFont& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(11974, (void*)this, x)) return;
	this->QWidget::fontChange(x1);
    }
    virtual int fontInf(QFont* x1, int x2) const {
	Smoke::StackItem x[3];
	x[1].s_class = (void*)x1;
	x[2].s_int = x2;
	if(qt_Smoke->binding->callMethod(6831, (void*)this, x)) return (int)x[0].s_int;
	return this->QPaintDevice::fontInf(x1, x2);
    }
    virtual int fontMet(QFont* x1, int x2, const char* x3, int x4) const {
	Smoke::StackItem x[5];
	x[1].s_class = (void*)x1;
	x[2].s_int = x2;
	x[3].s_voidp = (void*)x3;
	x[4].s_int = x4;
	if(qt_Smoke->binding->callMethod(6828, (void*)this, x)) return (int)x[0].s_int;
	return this->QPaintDevice::fontMet(x1, x2, x3, x4);
    }
    virtual void handleError(const QSqlError& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(1609, (void*)this, x)) return;
	this->QDataBrowser::handleError(x1);
    }
    virtual int heightForWidth(int x1) const {
	Smoke::StackItem x[2];
	x[1].s_int = x1;
	if(qt_Smoke->binding->callMethod(11854, (void*)this, x)) return (int)x[0].s_int;
	return this->QWidget::heightForWidth(x1);
    }
    virtual void hide() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(11912, (void*)this, x)) return;
	this->QWidget::hide();
    }
    virtual void hideEvent(QHideEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11969, (void*)this, x)) return;
	this->QWidget::hideEvent(x1);
    }
    virtual void imComposeEvent(QIMEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11961, (void*)this, x)) return;
	this->QWidget::imComposeEvent(x1);
    }
    virtual void imEndEvent(QIMEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11962, (void*)this, x)) return;
	this->QWidget::imEndEvent(x1);
    }
    virtual void imStartEvent(QIMEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11960, (void*)this, x)) return;
	this->QWidget::imStartEvent(x1);
    }
    virtual void insert() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(1575, (void*)this, x)) return;
	this->QDataBrowser::insert();
    }
    virtual void insertChild(QObject* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(6664, (void*)this, x)) return;
	this->QObject::insertChild(x1);
    }
    virtual bool insertCurrent() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(1603, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDataBrowser::insertCurrent();
    }
    virtual void keyPressEvent(QKeyEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11949, (void*)this, x)) return;
	this->QWidget::keyPressEvent(x1);
    }
    virtual void keyReleaseEvent(QKeyEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11950, (void*)this, x)) return;
	this->QWidget::keyReleaseEvent(x1);
    }
    virtual void last() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(1579, (void*)this, x)) return;
	this->QDataBrowser::last();
    }
    virtual void leaveEvent(QEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11954, (void*)this, x)) return;
	this->QWidget::leaveEvent(x1);
    }
    virtual QMetaObject* metaObject() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(1533, (void*)this, x)) return (QMetaObject*)x[0].s_class;
	return this->QDataBrowser::metaObject();
    }
    virtual int metric(int x1) const {
	Smoke::StackItem x[2];
	x[1].s_int = x1;
	if(qt_Smoke->binding->callMethod(11976, (void*)this, x)) return (int)x[0].s_int;
	return this->QWidget::metric(x1);
    }
    virtual QSize minimumSizeHint() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(11849, (void*)this, x)) {
	    QSize *xptr = (QSize *)x[0].s_class;
	    QSize xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QWidget::minimumSizeHint();
    }
    virtual void mouseDoubleClickEvent(QMouseEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11946, (void*)this, x)) return;
	this->QWidget::mouseDoubleClickEvent(x1);
    }
    virtual void mouseMoveEvent(QMouseEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11947, (void*)this, x)) return;
	this->QWidget::mouseMoveEvent(x1);
    }
    virtual void mousePressEvent(QMouseEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11944, (void*)this, x)) return;
	this->QWidget::mousePressEvent(x1);
    }
    virtual void mouseReleaseEvent(QMouseEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11945, (void*)this, x)) return;
	this->QWidget::mouseReleaseEvent(x1);
    }
    virtual void move(int x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_int = x1;
	x[2].s_int = x2;
	if(qt_Smoke->binding->callMethod(11926, (void*)this, x)) return;
	this->QWidget::move(x1, x2);
    }
    virtual void moveEvent(QMoveEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11956, (void*)this, x)) return;
	this->QWidget::moveEvent(x1);
    }
    virtual void next() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(1580, (void*)this, x)) return;
	this->QDataBrowser::next();
    }
    virtual void paintEvent(QPaintEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11955, (void*)this, x)) return;
	this->QWidget::paintEvent(x1);
    }
    virtual void paletteChange(const QPalette& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(11973, (void*)this, x)) return;
	this->QWidget::paletteChange(x1);
    }
    virtual void polish() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(11920, (void*)this, x)) return;
	this->QWidget::polish();
    }
    virtual void prev() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(1581, (void*)this, x)) return;
	this->QDataBrowser::prev();
    }
    virtual QVariant property(const char* x1) const {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(6678, (void*)this, x)) {
	    QVariant *xptr = (QVariant *)x[0].s_class;
	    QVariant xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QObject::property(x1);
    }
    virtual void* qt_cast(const char* x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(1535, (void*)this, x)) return (void*)x[0].s_voidp;
	return this->QDataBrowser::qt_cast(x1);
    }
    virtual bool qt_emit(int x1, QUObject* x2) {
	Smoke::StackItem x[3];
	x[1].s_int = x1;
	x[2].s_voidp = (void*)x2;
	if(qt_Smoke->binding->callMethod(1537, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDataBrowser::qt_emit(x1, x2);
    }
    virtual bool qt_invoke(int x1, QUObject* x2) {
	Smoke::StackItem x[3];
	x[1].s_int = x1;
	x[2].s_voidp = (void*)x2;
	if(qt_Smoke->binding->callMethod(1536, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDataBrowser::qt_invoke(x1, x2);
    }
    virtual bool qt_property(int x1, int x2, QVariant* x3) {
	Smoke::StackItem x[4];
	x[1].s_int = x1;
	x[2].s_int = x2;
	x[3].s_class = (void*)x3;
	if(qt_Smoke->binding->callMethod(1538, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDataBrowser::qt_property(x1, x2, x3);
    }
    virtual void readFields() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(1582, (void*)this, x)) return;
	this->QDataBrowser::readFields();
    }
    virtual void refresh() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(1574, (void*)this, x)) return;
	this->QDataBrowser::refresh();
    }
    virtual void removeChild(QObject* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(6665, (void*)this, x)) return;
	this->QObject::removeChild(x1);
    }
    virtual void reparent(QWidget* x1, Qt::WFlags x2, const QPoint& x3, bool x4) {
	Smoke::StackItem x[5];
	x[1].s_class = (void*)x1;
	x[2].s_int = x2;
	x[3].s_class = (void*)&x3;
	x[4].s_bool = x4;
	if(qt_Smoke->binding->callMethod(11857, (void*)this, x)) return;
	this->QWidget::reparent(x1, x2, x3, x4);
    }
    virtual void resize(int x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_int = x1;
	x[2].s_int = x2;
	if(qt_Smoke->binding->callMethod(11928, (void*)this, x)) return;
	this->QWidget::resize(x1, x2);
    }
    virtual void resizeEvent(QResizeEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11957, (void*)this, x)) return;
	this->QWidget::resizeEvent(x1);
    }
    virtual int resolution() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(6824, (void*)this, x)) return (int)x[0].s_int;
	return this->QPaintDevice::resolution();
    }
    virtual bool seek(int x1, bool x2) {
	Smoke::StackItem x[3];
	x[1].s_int = x1;
	x[2].s_bool = x2;
	if(qt_Smoke->binding->callMethod(1572, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDataBrowser::seek(x1, x2);
    }
    virtual void setAcceptDrops(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(11874, (void*)this, x)) return;
	this->QWidget::setAcceptDrops(x1);
    }
    virtual void setActiveWindow() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(11825, (void*)this, x)) return;
	this->QWidget::setActiveWindow();
    }
    virtual void setAutoEdit(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(1570, (void*)this, x)) return;
	this->QDataBrowser::setAutoEdit(x1);
    }
    virtual void setAutoMask(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(11875, (void*)this, x)) return;
	this->QWidget::setAutoMask(x1);
    }
    virtual void setBackgroundColor(const QColor& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(11821, (void*)this, x)) return;
	this->QWidget::setBackgroundColor(x1);
    }
    virtual void setBackgroundMode(Qt::BackgroundMode x1) {
	Smoke::StackItem x[2];
	x[1].s_enum = x1;
	if(qt_Smoke->binding->callMethod(11783, (void*)this, x)) return;
	this->QWidget::setBackgroundMode(x1);
    }
    virtual void setBackgroundOrigin(QWidget::BackgroundOrigin x1) {
	Smoke::StackItem x[2];
	x[1].s_enum = x1;
	if(qt_Smoke->binding->callMethod(11877, (void*)this, x)) return;
	this->QWidget::setBackgroundOrigin(x1);
    }
    virtual void setBackgroundPixmap(const QPixmap& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(11823, (void*)this, x)) return;
	this->QWidget::setBackgroundPixmap(x1);
    }
    virtual void setCaption(const QString& x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)&x1;
	if(qt_Smoke->binding->callMethod(11893, (void*)this, x)) return;
	this->QWidget::setCaption(x1);
    }
    virtual void setConfirmCancels(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(1562, (void*)this, x)) return;
	this->QDataBrowser::setConfirmCancels(x1);
    }
    virtual void setConfirmDelete(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(1561, (void*)this, x)) return;
	this->QDataBrowser::setConfirmDelete(x1);
    }
    virtual void setConfirmEdits(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(1558, (void*)this, x)) return;
	this->QDataBrowser::setConfirmEdits(x1);
    }
    virtual void setConfirmInsert(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(1559, (void*)this, x)) return;
	this->QDataBrowser::setConfirmInsert(x1);
    }
    virtual void setConfirmUpdate(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(1560, (void*)this, x)) return;
	this->QDataBrowser::setConfirmUpdate(x1);
    }
    virtual void setCursor(const QCursor& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(11810, (void*)this, x)) return;
	this->QWidget::setCursor(x1);
    }
    virtual void setEnabled(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(11891, (void*)this, x)) return;
	this->QWidget::setEnabled(x1);
    }
    virtual void setEraseColor(const QColor& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(11787, (void*)this, x)) return;
	this->QWidget::setEraseColor(x1);
    }
    virtual void setErasePixmap(const QPixmap& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(11789, (void*)this, x)) return;
	this->QWidget::setErasePixmap(x1);
    }
    virtual void setFocus() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(11897, (void*)this, x)) return;
	this->QWidget::setFocus();
    }
    virtual void setFocusPolicy(QWidget::FocusPolicy x1) {
	Smoke::StackItem x[2];
	x[1].s_enum = x1;
	if(qt_Smoke->binding->callMethod(11828, (void*)this, x)) return;
	this->QWidget::setFocusPolicy(x1);
    }
    virtual void setFocusProxy(QWidget* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11830, (void*)this, x)) return;
	this->QWidget::setFocusProxy(x1);
    }
    virtual void setFont(const QFont& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(11804, (void*)this, x)) return;
	this->QWidget::setFont(x1);
    }
    virtual void setForm(QSqlForm* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(1556, (void*)this, x)) return;
	this->QDataBrowser::setForm(x1);
    }
    virtual void setGeometry(const QRect& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(11931, (void*)this, x)) return;
	this->QWidget::setGeometry(x1);
    }
    virtual void setGeometry(int x1, int x2, int x3, int x4) {
	Smoke::StackItem x[5];
	x[1].s_int = x1;
	x[2].s_int = x2;
	x[3].s_int = x3;
	x[4].s_int = x4;
	if(qt_Smoke->binding->callMethod(11930, (void*)this, x)) return;
	this->QWidget::setGeometry(x1, x2, x3, x4);
    }
    virtual void setIcon(const QPixmap& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(11894, (void*)this, x)) return;
	this->QWidget::setIcon(x1);
    }
    virtual void setIconText(const QString& x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)&x1;
	if(qt_Smoke->binding->callMethod(11895, (void*)this, x)) return;
	this->QWidget::setIconText(x1);
    }
    virtual void setKeyCompression(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(11995, (void*)this, x)) return;
	this->QWidget::setKeyCompression(x1);
    }
    virtual void setMask(const QBitmap& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(11817, (void*)this, x)) return;
	this->QWidget::setMask(x1);
    }
    virtual void setMask(const QRegion& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(11818, (void*)this, x)) return;
	this->QWidget::setMask(x1);
    }
    virtual void setMaximumSize(int x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_int = x1;
	x[2].s_int = x2;
	if(qt_Smoke->binding->callMethod(11760, (void*)this, x)) return;
	this->QWidget::setMaximumSize(x1, x2);
    }
    virtual void setMicroFocusHint(int x1, int x2, int x3, int x4, bool x5, QFont* x6) {
	Smoke::StackItem x[7];
	x[1].s_int = x1;
	x[2].s_int = x2;
	x[3].s_int = x3;
	x[4].s_int = x4;
	x[5].s_bool = x5;
	x[6].s_class = (void*)x6;
	if(qt_Smoke->binding->callMethod(11996, (void*)this, x)) return;
	this->QWidget::setMicroFocusHint(x1, x2, x3, x4, x5, x6);
    }
    virtual void setMinimumSize(int x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_int = x1;
	x[2].s_int = x2;
	if(qt_Smoke->binding->callMethod(11758, (void*)this, x)) return;
	this->QWidget::setMinimumSize(x1, x2);
    }
    virtual void setMouseTracking(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(11896, (void*)this, x)) return;
	this->QWidget::setMouseTracking(x1);
    }
    virtual void setName(const char* x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(11727, (void*)this, x)) return;
	this->QWidget::setName(x1);
    }
    virtual void setPalette(const QPalette& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(11793, (void*)this, x)) return;
	this->QWidget::setPalette(x1);
    }
    virtual void setPaletteBackgroundColor(const QColor& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(11798, (void*)this, x)) return;
	this->QWidget::setPaletteBackgroundColor(x1);
    }
    virtual void setPaletteBackgroundPixmap(const QPixmap& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(11800, (void*)this, x)) return;
	this->QWidget::setPaletteBackgroundPixmap(x1);
    }
    virtual bool setProperty(const char* x1, const QVariant& x2) {
	Smoke::StackItem x[3];
	x[1].s_voidp = (void*)x1;
	x[2].s_class = (void*)&x2;
	if(qt_Smoke->binding->callMethod(6677, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QObject::setProperty(x1, x2);
    }
    virtual void setReadOnly(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(1568, (void*)this, x)) return;
	this->QDataBrowser::setReadOnly(x1);
    }
    virtual void setResolution(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = x1;
	if(qt_Smoke->binding->callMethod(6823, (void*)this, x)) return;
	this->QPaintDevice::setResolution(x1);
    }
    virtual void setSizeIncrement(int x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_int = x1;
	x[2].s_int = x2;
	if(qt_Smoke->binding->callMethod(11767, (void*)this, x)) return;
	this->QWidget::setSizeIncrement(x1, x2);
    }
    virtual void setSizePolicy(QSizePolicy x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(11851, (void*)this, x)) return;
	this->QWidget::setSizePolicy(x1);
    }
    virtual void setSqlCursor(QSqlCursor* x1, bool x2) {
	Smoke::StackItem x[3];
	x[1].s_class = (void*)x1;
	x[2].s_bool = x2;
	if(qt_Smoke->binding->callMethod(1553, (void*)this, x)) return;
	this->QDataBrowser::setSqlCursor(x1, x2);
    }
    virtual void setUpdatesEnabled(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(11899, (void*)this, x)) return;
	this->QWidget::setUpdatesEnabled(x1);
    }
    virtual void setWFlags(Qt::WFlags x1) {
	Smoke::StackItem x[2];
	x[1].s_int = x1;
	if(qt_Smoke->binding->callMethod(11989, (void*)this, x)) return;
	this->QWidget::setWFlags(x1);
    }
    virtual void setWState(uint x1) {
	Smoke::StackItem x[2];
	x[1].s_uint = x1;
	if(qt_Smoke->binding->callMethod(11986, (void*)this, x)) return;
	this->QWidget::setWState(x1);
    }
    virtual void show() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(11911, (void*)this, x)) return;
	this->QWidget::show();
    }
    virtual void showEvent(QShowEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11968, (void*)this, x)) return;
	this->QWidget::showEvent(x1);
    }
    virtual void showMaximized() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(11917, (void*)this, x)) return;
	this->QWidget::showMaximized();
    }
    virtual void showMinimized() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(11916, (void*)this, x)) return;
	this->QWidget::showMinimized();
    }
    virtual void showNormal() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(11919, (void*)this, x)) return;
	this->QWidget::showNormal();
    }
    virtual QSize sizeHint() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(11848, (void*)this, x)) {
	    QSize *xptr = (QSize *)x[0].s_class;
	    QSize xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QWidget::sizeHint();
    }
    virtual QSizePolicy sizePolicy() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(11850, (void*)this, x)) {
	    QSizePolicy *xptr = (QSizePolicy *)x[0].s_class;
	    QSizePolicy xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QWidget::sizePolicy();
    }
    virtual void styleChange(QStyle& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(11971, (void*)this, x)) return;
	this->QWidget::styleChange(x1);
    }
    virtual void tabletEvent(QTabletEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11963, (void*)this, x)) return;
	this->QWidget::tabletEvent(x1);
    }
    virtual void timerEvent(QTimerEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(6706, (void*)this, x)) return;
	this->QObject::timerEvent(x1);
    }
    virtual void unsetCursor() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(11811, (void*)this, x)) return;
	this->QWidget::unsetCursor();
    }
    virtual void update() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(1576, (void*)this, x)) return;
	this->QDataBrowser::update();
    }
    virtual bool updateCurrent() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(1604, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDataBrowser::updateCurrent();
    }
    virtual void updateMask() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(11970, (void*)this, x)) return;
	this->QWidget::updateMask();
    }
    virtual void wheelEvent(QWheelEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(11948, (void*)this, x)) return;
	this->QWidget::wheelEvent(x1);
    }
    virtual void windowActivationChange(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(11975, (void*)this, x)) return;
	this->QWidget::windowActivationChange(x1);
    }
    virtual void writeFields() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(1583, (void*)this, x)) return;
	this->QDataBrowser::writeFields();
    }
    static void xenum_operation(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
	switch(xtype) {
	  case 101: //QDataBrowser::Boundary
	    switch(xop) {
	      case Smoke::EnumNew:
		xdata = (void*)new QDataBrowser::Boundary;
		break;
	      case Smoke::EnumDelete:
		delete (QDataBrowser::Boundary*)xdata;
		break;
	      case Smoke::EnumFromLong:
		*(QDataBrowser::Boundary*)xdata = (QDataBrowser::Boundary)xvalue;
		break;
	      case Smoke::EnumToLong:
		xvalue = (long)*(QDataBrowser::Boundary*)xdata;
		break;
	    }
	    break;
	}
    }
    ~x_QDataBrowser() { qt_Smoke->binding->deleted(56, (void*)this); }
};
void xenum_QDataBrowser(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
    x_QDataBrowser::xenum_operation(xop, xtype, xdata, xvalue);
}
void xcall_QDataBrowser(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QDataBrowser *xself = (x_QDataBrowser*)obj;
    switch(xi) {
	case 0: x_QDataBrowser::x_0(args);	break;
	case 1: x_QDataBrowser::x_1(args);	break;
	case 2: x_QDataBrowser::x_2(args);	break;
	case 3: x_QDataBrowser::x_3(args);	break;
	case 4: x_QDataBrowser::x_4(args);	break;
	case 5: x_QDataBrowser::x_5(args);	break;
	case 6: xself->x_6(args);	break;
	case 7: xself->x_7(args);	break;
	case 8: xself->x_8(args);	break;
	case 9: xself->x_9(args);	break;
	case 10: xself->x_10(args);	break;
	case 11: xself->x_11(args);	break;
	case 12: xself->x_12(args);	break;
	case 13: x_QDataBrowser::x_13(args);	break;
	case 14: x_QDataBrowser::x_14(args);	break;
	case 15: x_QDataBrowser::x_15(args);	break;
	case 16: x_QDataBrowser::x_16(args);	break;
	case 17: xself->x_17(args);	break;
	case 18: xself->x_18(args);	break;
	case 19: xself->x_19(args);	break;
	case 20: xself->x_20(args);	break;
	case 21: xself->x_21(args);	break;
	case 22: xself->x_22(args);	break;
	case 23: xself->x_23(args);	break;
	case 24: xself->x_24(args);	break;
	case 25: xself->x_25(args);	break;
	case 26: xself->x_26(args);	break;
	case 27: xself->x_27(args);	break;
	case 28: xself->x_28(args);	break;
	case 29: xself->x_29(args);	break;
	case 30: xself->x_30(args);	break;
	case 31: xself->x_31(args);	break;
	case 32: xself->x_32(args);	break;
	case 33: xself->x_33(args);	break;
	case 34: xself->x_34(args);	break;
	case 35: xself->x_35(args);	break;
	case 36: xself->x_36(args);	break;
	case 37: xself->x_37(args);	break;
	case 38: xself->x_38(args);	break;
	case 39: xself->x_39(args);	break;
	case 40: xself->x_40(args);	break;
	case 41: xself->x_41(args);	break;
	case 42: xself->x_42(args);	break;
	case 43: xself->x_43(args);	break;
	case 44: xself->x_44(args);	break;
	case 45: xself->x_45(args);	break;
	case 46: xself->x_46(args);	break;
	case 47: xself->x_47(args);	break;
	case 48: xself->x_48(args);	break;
	case 49: xself->x_49(args);	break;
	case 50: xself->x_50(args);	break;
	case 51: xself->x_51(args);	break;
	case 52: xself->x_52(args);	break;
	case 53: xself->x_53(args);	break;
	case 54: xself->x_54(args);	break;
	case 55: xself->x_55(args);	break;
	case 56: xself->x_56(args);	break;
	case 57: xself->x_57(args);	break;
	case 58: xself->x_58(args);	break;
	case 59: xself->x_59(args);	break;
	case 60: xself->x_60(args);	break;
	case 61: xself->x_61(args);	break;
	case 62: xself->x_62(args);	break;
	case 63: xself->x_63(args);	break;
	case 64: xself->x_64(args);	break;
	case 65: xself->x_65(args);	break;
	case 66: xself->x_66(args);	break;
	case 67: xself->x_67(args);	break;
	case 68: xself->x_68(args);	break;
	case 69: xself->x_69(args);	break;
	case 70: x_QDataBrowser::x_70(args);	break;
	case 71: x_QDataBrowser::x_71(args);	break;
	case 72: x_QDataBrowser::x_72(args);	break;
	case 73: x_QDataBrowser::x_73(args);	break;
	case 74: x_QDataBrowser::x_74(args);	break;
	case 75: xself->x_75(args);	break;
	case 76: xself->x_76(args);	break;
	case 77: xself->x_77(args);	break;
	case 78: xself->x_78(args);	break;
	case 79: xself->x_79(args);	break;
	case 80: xself->x_80(args);	break;
	case 81: xself->x_81(args);	break;
	case 82: delete (QDataBrowser*)xself;	break;
    }
}
