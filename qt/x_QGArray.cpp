//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qgarray.h>

class x_QGArray : public QGArray {
public:
    static void x_0(xargs *x) {
	// QGArray()
	x_QGArray* xret = new x_QGArray();
	x[0].x_voidp = (void*)xret;
    }
    x_QGArray() : QGArray() {
    }
    static void x_1(xargs *x) {
	// QGArray(int, int)
	x_QGArray* xret = new x_QGArray((int)x[1].x_int,(int)x[2].x_int);
	x[0].x_voidp = (void*)xret;
    }
    x_QGArray(int x1, int x2) : QGArray(x1, x2) {
    }
    static void x_2(xargs *x) {
	// QGArray(int)
	x_QGArray* xret = new x_QGArray((int)x[1].x_int);
	x[0].x_voidp = (void*)xret;
    }
    x_QGArray(int x1) : QGArray(x1) {
    }
    static void x_3(xargs *x) {
	// QGArray(const QGArray&)
	x_QGArray* xret = new x_QGArray(*(const QGArray *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QGArray(const QGArray& x1) : QGArray(x1) {
    }
    void x_4(xargs *x) {
	// operator=(const QGArray&)
	QGArray& xret = this->QGArray::operator=(*(const QGArray *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_5(xargs *x) {
	// detach()
	this->QGArray::detach();
    }
    void x_6(xargs *x) const {
	// data()
	char* xret = this->QGArray::data();
	x[0].x_voidp = (void*)xret;
    }
    void x_7(xargs *x) const {
	// nrefs()
	uint xret = this->QGArray::nrefs();
	x[0].x_uint = (uint)xret;
    }
    void x_8(xargs *x) const {
	// size()
	uint xret = this->QGArray::size();
	x[0].x_uint = (uint)xret;
    }
    void x_9(xargs *x) const {
	// isEqual(const QGArray&)
	bool xret = this->QGArray::isEqual(*(const QGArray *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_10(xargs *x) {
	// resize(uint)
	bool xret = this->QGArray::resize((uint)x[1].x_uint);
	x[0].x_bool = (bool)xret;
    }
    void x_11(xargs *x) {
	// fill(const char*, int, uint)
	bool xret = this->QGArray::fill((const char*)x[1].x_voidp,(int)x[2].x_int,(uint)x[3].x_uint);
	x[0].x_bool = (bool)xret;
    }
    void x_12(xargs *x) {
	// assign(const QGArray&)
	QGArray& xret = this->QGArray::assign(*(const QGArray *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_13(xargs *x) {
	// assign(const char*, uint)
	QGArray& xret = this->QGArray::assign((const char*)x[1].x_voidp,(uint)x[2].x_uint);
	x[0].x_voidp = (void*)&xret;
    }
    void x_14(xargs *x) {
	// duplicate(const QGArray&)
	QGArray& xret = this->QGArray::duplicate(*(const QGArray *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_15(xargs *x) {
	// duplicate(const char*, uint)
	QGArray& xret = this->QGArray::duplicate((const char*)x[1].x_voidp,(uint)x[2].x_uint);
	x[0].x_voidp = (void*)&xret;
    }
    void x_16(xargs *x) {
	// store(const char*, uint)
	this->QGArray::store((const char*)x[1].x_voidp,(uint)x[2].x_uint);
    }
    void x_17(xargs *x) const {
	// sharedBlock()
	QGArray::array_data* xret = this->QGArray::sharedBlock();
	x[0].x_voidp = (void*)xret;
    }
    void x_18(xargs *x) {
	// setSharedBlock(QGArray::array_data*)
	this->QGArray::setSharedBlock((QGArray::array_data*)x[1].x_voidp);
    }
    void x_19(xargs *x) {
	// setRawData(const char*, uint)
	QGArray& xret = this->QGArray::setRawData((const char*)x[1].x_voidp,(uint)x[2].x_uint);
	x[0].x_voidp = (void*)&xret;
    }
    void x_20(xargs *x) {
	// resetRawData(const char*, uint)
	this->QGArray::resetRawData((const char*)x[1].x_voidp,(uint)x[2].x_uint);
    }
    void x_21(xargs *x) const {
	// find(const char*, uint, uint)
	int xret = this->QGArray::find((const char*)x[1].x_voidp,(uint)x[2].x_uint,(uint)x[3].x_uint);
	x[0].x_int = (int)xret;
    }
    void x_22(xargs *x) const {
	// contains(const char*, uint)
	int xret = this->QGArray::contains((const char*)x[1].x_voidp,(uint)x[2].x_uint);
	x[0].x_int = (int)xret;
    }
    void x_23(xargs *x) {
	// sort(uint)
	this->QGArray::sort((uint)x[1].x_uint);
    }
    void x_24(xargs *x) const {
	// bsearch(const char*, uint)
	int xret = this->QGArray::bsearch((const char*)x[1].x_voidp,(uint)x[2].x_uint);
	x[0].x_int = (int)xret;
    }
    void x_25(xargs *x) const {
	// at(uint)
	char* xret = this->QGArray::at((uint)x[1].x_uint);
	x[0].x_voidp = (void*)xret;
    }
    void x_26(xargs *x) {
	// setExpand(uint, const char*, uint)
	bool xret = this->QGArray::setExpand((uint)x[1].x_uint,(const char*)x[2].x_voidp,(uint)x[3].x_uint);
	x[0].x_bool = (bool)xret;
    }
    void x_27(xargs *x) {
	// newData()
	QGArray::array_data* xret = this->QGArray::newData();
	x[0].x_voidp = (void*)xret;
    }
    void x_28(xargs *x) {
	// deleteData(QGArray::array_data*)
	this->QGArray::deleteData((QGArray::array_data*)x[1].x_voidp);
    }
    virtual void deleteData(QGArray::array_data* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 2998, x)) return;
	this->QGArray::deleteData(x1);
    }
    virtual void detach() {
	xargs x[1];
	if(call_method((void*)this, 2975, x)) return;
	this->QGArray::detach();
    }
    virtual QGArray::array_data* newData() {
	xargs x[1];
	if(call_method((void*)this, 2997, x)) 	return (QGArray::array_data*)x[0].x_voidp;
	return this->QGArray::newData();
    }
    ~x_QGArray() {}
};
void xcall_QGArray(xargs *x, void *s, int xi) {
    x_QGArray *xself = (x_QGArray*)s;
    switch(xi) {
	case 0: x_QGArray::x_0(x);	break;
	case 1: x_QGArray::x_1(x);	break;
	case 2: x_QGArray::x_2(x);	break;
	case 3: x_QGArray::x_3(x);	break;
	case 4: xself->x_4(x);	break;
	case 5: xself->x_5(x);	break;
	case 6: xself->x_6(x);	break;
	case 7: xself->x_7(x);	break;
	case 8: xself->x_8(x);	break;
	case 9: xself->x_9(x);	break;
	case 10: xself->x_10(x);	break;
	case 11: xself->x_11(x);	break;
	case 12: xself->x_12(x);	break;
	case 13: xself->x_13(x);	break;
	case 14: xself->x_14(x);	break;
	case 15: xself->x_15(x);	break;
	case 16: xself->x_16(x);	break;
	case 17: xself->x_17(x);	break;
	case 18: xself->x_18(x);	break;
	case 19: xself->x_19(x);	break;
	case 20: xself->x_20(x);	break;
	case 21: xself->x_21(x);	break;
	case 22: xself->x_22(x);	break;
	case 23: xself->x_23(x);	break;
	case 24: xself->x_24(x);	break;
	case 25: xself->x_25(x);	break;
	case 26: xself->x_26(x);	break;
	case 27: xself->x_27(x);	break;
	case 28: xself->x_28(x);	break;
    }
}
