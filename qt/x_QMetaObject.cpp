//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qmetaobject.h>
#include <qstrlist.h>

class x_QMetaObject : public QMetaObject {
public:
    static void x_0(xargs *x) {
	// QMetaObject(const char* const, QMetaObject*, const QMetaData* const, int, const QMetaData* const, int, const QMetaProperty* const, int, const QMetaEnum* const, int, const QClassInfo* const, int)
	x_QMetaObject* xret = new x_QMetaObject((const char* const)x[1].x_voidp,(QMetaObject*)x[2].x_voidp,(const QMetaData* const)x[3].x_voidp,(int)x[4].x_int,(const QMetaData* const)x[5].x_voidp,(int)x[6].x_int,(const QMetaProperty* const)x[7].x_voidp,(int)x[8].x_int,(const QMetaEnum* const)x[9].x_voidp,(int)x[10].x_int,(const QClassInfo* const)x[11].x_voidp,(int)x[12].x_int);
	x[0].x_voidp = (void*)xret;
    }
    x_QMetaObject(const char* const x1, QMetaObject* x2, const QMetaData* const x3, int x4, const QMetaData* const x5, int x6, const QMetaProperty* const x7, int x8, const QMetaEnum* const x9, int x10, const QClassInfo* const x11, int x12) : QMetaObject(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12) {
    }
    void x_1(xargs *x) const {
	// className()
	const char* xret = this->QMetaObject::className();
	x[0].x_voidp = (void*)xret;
    }
    void x_2(xargs *x) const {
	// superClassName()
	const char* xret = this->QMetaObject::superClassName();
	x[0].x_voidp = (void*)xret;
    }
    void x_3(xargs *x) const {
	// superClass()
	QMetaObject* xret = this->QMetaObject::superClass();
	x[0].x_voidp = (void*)xret;
    }
    void x_4(xargs *x) const {
	// inherits(const char*)
	bool xret = this->QMetaObject::inherits((const char*)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_5(xargs *x) const {
	// numSlots(bool)
	int xret = this->QMetaObject::numSlots((bool)x[1].x_bool);
	x[0].x_int = (int)xret;
    }
    void x_6(xargs *x) const {
	// numSlots()
	int xret = this->QMetaObject::numSlots();
	x[0].x_int = (int)xret;
    }
    void x_7(xargs *x) const {
	// numSignals(bool)
	int xret = this->QMetaObject::numSignals((bool)x[1].x_bool);
	x[0].x_int = (int)xret;
    }
    void x_8(xargs *x) const {
	// numSignals()
	int xret = this->QMetaObject::numSignals();
	x[0].x_int = (int)xret;
    }
    void x_9(xargs *x) const {
	// findSlot(const char*, bool)
	int xret = this->QMetaObject::findSlot((const char*)x[1].x_voidp,(bool)x[2].x_bool);
	x[0].x_int = (int)xret;
    }
    void x_10(xargs *x) const {
	// findSlot(const char*)
	int xret = this->QMetaObject::findSlot((const char*)x[1].x_voidp);
	x[0].x_int = (int)xret;
    }
    void x_11(xargs *x) const {
	// findSignal(const char*, bool)
	int xret = this->QMetaObject::findSignal((const char*)x[1].x_voidp,(bool)x[2].x_bool);
	x[0].x_int = (int)xret;
    }
    void x_12(xargs *x) const {
	// findSignal(const char*)
	int xret = this->QMetaObject::findSignal((const char*)x[1].x_voidp);
	x[0].x_int = (int)xret;
    }
    void x_13(xargs *x) const {
	// slot(int, bool)
	const QMetaData* xret = this->QMetaObject::slot((int)x[1].x_int,(bool)x[2].x_bool);
	x[0].x_voidp = (void*)xret;
    }
    void x_14(xargs *x) const {
	// slot(int)
	const QMetaData* xret = this->QMetaObject::slot((int)x[1].x_int);
	x[0].x_voidp = (void*)xret;
    }
    void x_15(xargs *x) const {
	// signal(int, bool)
	const QMetaData* xret = this->QMetaObject::signal((int)x[1].x_int,(bool)x[2].x_bool);
	x[0].x_voidp = (void*)xret;
    }
    void x_16(xargs *x) const {
	// signal(int)
	const QMetaData* xret = this->QMetaObject::signal((int)x[1].x_int);
	x[0].x_voidp = (void*)xret;
    }
    void x_17(xargs *x) const {
	// slotNames(bool)
	QStrList xret = this->QMetaObject::slotNames((bool)x[1].x_bool);
	x[0].x_voidp = (void*)new QStrList(xret);
    }
    void x_18(xargs *x) const {
	// slotNames()
	QStrList xret = this->QMetaObject::slotNames();
	x[0].x_voidp = (void*)new QStrList(xret);
    }
    void x_19(xargs *x) const {
	// signalNames(bool)
	QStrList xret = this->QMetaObject::signalNames((bool)x[1].x_bool);
	x[0].x_voidp = (void*)new QStrList(xret);
    }
    void x_20(xargs *x) const {
	// signalNames()
	QStrList xret = this->QMetaObject::signalNames();
	x[0].x_voidp = (void*)new QStrList(xret);
    }
    void x_21(xargs *x) const {
	// slotOffset()
	int xret = this->QMetaObject::slotOffset();
	x[0].x_int = (int)xret;
    }
    void x_22(xargs *x) const {
	// signalOffset()
	int xret = this->QMetaObject::signalOffset();
	x[0].x_int = (int)xret;
    }
    void x_23(xargs *x) const {
	// propertyOffset()
	int xret = this->QMetaObject::propertyOffset();
	x[0].x_int = (int)xret;
    }
    void x_24(xargs *x) const {
	// numClassInfo(bool)
	int xret = this->QMetaObject::numClassInfo((bool)x[1].x_bool);
	x[0].x_int = (int)xret;
    }
    void x_25(xargs *x) const {
	// numClassInfo()
	int xret = this->QMetaObject::numClassInfo();
	x[0].x_int = (int)xret;
    }
    void x_26(xargs *x) const {
	// classInfo(int, bool)
	const QClassInfo* xret = this->QMetaObject::classInfo((int)x[1].x_int,(bool)x[2].x_bool);
	x[0].x_voidp = (void*)xret;
    }
    void x_27(xargs *x) const {
	// classInfo(int)
	const QClassInfo* xret = this->QMetaObject::classInfo((int)x[1].x_int);
	x[0].x_voidp = (void*)xret;
    }
    void x_28(xargs *x) const {
	// classInfo(const char*, bool)
	const char* xret = this->QMetaObject::classInfo((const char*)x[1].x_voidp,(bool)x[2].x_bool);
	x[0].x_voidp = (void*)xret;
    }
    void x_29(xargs *x) const {
	// classInfo(const char*)
	const char* xret = this->QMetaObject::classInfo((const char*)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    void x_30(xargs *x) const {
	// property(int, bool)
	const QMetaProperty* xret = this->QMetaObject::property((int)x[1].x_int,(bool)x[2].x_bool);
	x[0].x_voidp = (void*)xret;
    }
    void x_31(xargs *x) const {
	// property(int)
	const QMetaProperty* xret = this->QMetaObject::property((int)x[1].x_int);
	x[0].x_voidp = (void*)xret;
    }
    void x_32(xargs *x) const {
	// findProperty(const char*, bool)
	int xret = this->QMetaObject::findProperty((const char*)x[1].x_voidp,(bool)x[2].x_bool);
	x[0].x_int = (int)xret;
    }
    void x_33(xargs *x) const {
	// findProperty(const char*)
	int xret = this->QMetaObject::findProperty((const char*)x[1].x_voidp);
	x[0].x_int = (int)xret;
    }
    void x_34(xargs *x) const {
	// indexOfProperty(const QMetaProperty*, bool)
	int xret = this->QMetaObject::indexOfProperty((const QMetaProperty*)x[1].x_voidp,(bool)x[2].x_bool);
	x[0].x_int = (int)xret;
    }
    void x_35(xargs *x) const {
	// indexOfProperty(const QMetaProperty*)
	int xret = this->QMetaObject::indexOfProperty((const QMetaProperty*)x[1].x_voidp);
	x[0].x_int = (int)xret;
    }
    void x_36(xargs *x) const {
	// resolveProperty(const QMetaProperty*)
	const QMetaProperty* xret = this->QMetaObject::resolveProperty((const QMetaProperty*)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    void x_37(xargs *x) const {
	// resolveProperty(int)
	int xret = this->QMetaObject::resolveProperty((int)x[1].x_int);
	x[0].x_int = (int)xret;
    }
    void x_38(xargs *x) const {
	// propertyNames(bool)
	QStrList xret = this->QMetaObject::propertyNames((bool)x[1].x_bool);
	x[0].x_voidp = (void*)new QStrList(xret);
    }
    void x_39(xargs *x) const {
	// propertyNames()
	QStrList xret = this->QMetaObject::propertyNames();
	x[0].x_voidp = (void*)new QStrList(xret);
    }
    void x_40(xargs *x) const {
	// numProperties(bool)
	int xret = this->QMetaObject::numProperties((bool)x[1].x_bool);
	x[0].x_int = (int)xret;
    }
    void x_41(xargs *x) const {
	// numProperties()
	int xret = this->QMetaObject::numProperties();
	x[0].x_int = (int)xret;
    }
    void x_42(xargs *x) const {
	// enumerator(const char*, bool)
	const QMetaEnum* xret = this->QMetaObject::enumerator((const char*)x[1].x_voidp,(bool)x[2].x_bool);
	x[0].x_voidp = (void*)xret;
    }
    void x_43(xargs *x) const {
	// enumerator(const char*)
	const QMetaEnum* xret = this->QMetaObject::enumerator((const char*)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    static void x_44(xargs *x) {
	// new_metaobject(const char*, QMetaObject*, const QMetaData*, int, const QMetaData*, int, const QMetaProperty* const, int, const QMetaEnum* const, int, const QClassInfo* const, int)
	QMetaObject* xret = QMetaObject::new_metaobject((const char*)x[1].x_voidp,(QMetaObject*)x[2].x_voidp,(const QMetaData*)x[3].x_voidp,(int)x[4].x_int,(const QMetaData*)x[5].x_voidp,(int)x[6].x_int,(const QMetaProperty* const)x[7].x_voidp,(int)x[8].x_int,(const QMetaEnum* const)x[9].x_voidp,(int)x[10].x_int,(const QClassInfo* const)x[11].x_voidp,(int)x[12].x_int);
	x[0].x_voidp = (void*)xret;
    }
    static void x_45(xargs *x) {
	// metaObject(const char*)
	QMetaObject* xret = QMetaObject::metaObject((const char*)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    ~x_QMetaObject() {}
};
void xcall_QMetaObject(xargs *x, void *s, int xi) {
    x_QMetaObject *xself = (x_QMetaObject*)s;
    switch(xi) {
	case 0: x_QMetaObject::x_0(x);	break;
	case 1: xself->x_1(x);	break;
	case 2: xself->x_2(x);	break;
	case 3: xself->x_3(x);	break;
	case 4: xself->x_4(x);	break;
	case 5: xself->x_5(x);	break;
	case 6: xself->x_6(x);	break;
	case 7: xself->x_7(x);	break;
	case 8: xself->x_8(x);	break;
	case 9: xself->x_9(x);	break;
	case 10: xself->x_10(x);	break;
	case 11: xself->x_11(x);	break;
	case 12: xself->x_12(x);	break;
	case 13: xself->x_13(x);	break;
	case 14: xself->x_14(x);	break;
	case 15: xself->x_15(x);	break;
	case 16: xself->x_16(x);	break;
	case 17: xself->x_17(x);	break;
	case 18: xself->x_18(x);	break;
	case 19: xself->x_19(x);	break;
	case 20: xself->x_20(x);	break;
	case 21: xself->x_21(x);	break;
	case 22: xself->x_22(x);	break;
	case 23: xself->x_23(x);	break;
	case 24: xself->x_24(x);	break;
	case 25: xself->x_25(x);	break;
	case 26: xself->x_26(x);	break;
	case 27: xself->x_27(x);	break;
	case 28: xself->x_28(x);	break;
	case 29: xself->x_29(x);	break;
	case 30: xself->x_30(x);	break;
	case 31: xself->x_31(x);	break;
	case 32: xself->x_32(x);	break;
	case 33: xself->x_33(x);	break;
	case 34: xself->x_34(x);	break;
	case 35: xself->x_35(x);	break;
	case 36: xself->x_36(x);	break;
	case 37: xself->x_37(x);	break;
	case 38: xself->x_38(x);	break;
	case 39: xself->x_39(x);	break;
	case 40: xself->x_40(x);	break;
	case 41: xself->x_41(x);	break;
	case 42: xself->x_42(x);	break;
	case 43: xself->x_43(x);	break;
	case 44: x_QMetaObject::x_44(x);	break;
	case 45: x_QMetaObject::x_45(x);	break;
	case 46: delete (QMetaObject*)xself;	break;
    }
}
