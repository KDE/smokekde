//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke.h>
#include <qt_smoke.h>
#include <qstring.h>
#include <qhttp.h>

class x_QHttpResponseHeader : public QHttpResponseHeader {
public:
    static void x_0(Smoke::Stack x) {
	// QHttpResponseHeader()
	x_QHttpResponseHeader* xret = new x_QHttpResponseHeader();
	x[0].s_class = (void*)xret;
    }
    x_QHttpResponseHeader() : QHttpResponseHeader() {
    }
    static void x_1(Smoke::Stack x) {
	// QHttpResponseHeader(const QHttpResponseHeader&)
	x_QHttpResponseHeader* xret = new x_QHttpResponseHeader(*(const QHttpResponseHeader *)x[1].s_class);
	x[0].s_class = (void*)xret;
    }
    x_QHttpResponseHeader(const QHttpResponseHeader& x1) : QHttpResponseHeader(x1) {
    }
    void x_2(Smoke::Stack x) const {
	// statusCode()
	int xret = this->QHttpResponseHeader::statusCode();
	x[0].s_int = xret;
    }
    void x_3(Smoke::Stack x) const {
	// reasonPhrase()
	QString xret = this->QHttpResponseHeader::reasonPhrase();
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_4(Smoke::Stack x) const {
	// majorVersion()
	int xret = this->QHttpResponseHeader::majorVersion();
	x[0].s_int = xret;
    }
    void x_5(Smoke::Stack x) const {
	// minorVersion()
	int xret = this->QHttpResponseHeader::minorVersion();
	x[0].s_int = xret;
    }
    void x_6(Smoke::Stack x) const {
	// toString()
	QString xret = this->QHttpResponseHeader::toString();
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_7(Smoke::Stack x) {
	// parseLine(const QString&, int)
	bool xret = this->QHttpResponseHeader::parseLine(*(const QString *)x[1].s_voidp,(int)x[2].s_int);
	x[0].s_bool = xret;
    }
    virtual int majorVersion() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(4317, (void*)this, x)) return (int)x[0].s_int;
	return this->QHttpResponseHeader::majorVersion();
    }
    virtual int minorVersion() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(4318, (void*)this, x)) return (int)x[0].s_int;
	return this->QHttpResponseHeader::minorVersion();
    }
    virtual bool parseLine(const QString& x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_voidp = (void*)&x1;
	x[2].s_int = x2;
	if(qt_Smoke->binding->callMethod(4321, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QHttpResponseHeader::parseLine(x1, x2);
    }
    virtual QString toString() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(4319, (void*)this, x)) {
	    QString *xptr = (QString *)x[0].s_class;
	    QString xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QHttpResponseHeader::toString();
    }
    ~x_QHttpResponseHeader() { qt_Smoke->binding->deleted(150, (void*)this); }
};
void xcall_QHttpResponseHeader(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QHttpResponseHeader *xself = (x_QHttpResponseHeader*)obj;
    switch(xi) {
	case 0: x_QHttpResponseHeader::x_0(args);	break;
	case 1: x_QHttpResponseHeader::x_1(args);	break;
	case 2: xself->x_2(args);	break;
	case 3: xself->x_3(args);	break;
	case 4: xself->x_4(args);	break;
	case 5: xself->x_5(args);	break;
	case 6: xself->x_6(args);	break;
	case 7: xself->x_7(args);	break;
	case 8: delete (QHttpResponseHeader*)xself;	break;
    }
}
