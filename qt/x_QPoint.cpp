//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qpoint.h>
#include <qwindowdefs.h>

class x_QPoint : public QPoint {
public:
    static void x_0(xargs *x) {
	// QPoint()
	x_QPoint* xret = new x_QPoint();
	x[0].x_voidp = (void*)xret;
    }
    x_QPoint() : QPoint() {
    }
    static void x_1(xargs *x) {
	// QPoint(int, int)
	x_QPoint* xret = new x_QPoint((int)x[1].x_int,(int)x[2].x_int);
	x[0].x_voidp = (void*)xret;
    }
    x_QPoint(int x1, int x2) : QPoint(x1, x2) {
    }
    void x_2(xargs *x) const {
	// isNull()
	bool xret = this->QPoint::isNull();
	x[0].x_bool = (bool)xret;
    }
    void x_3(xargs *x) const {
	// x()
	int xret = this->QPoint::x();
	x[0].x_int = (int)xret;
    }
    void x_4(xargs *x) const {
	// y()
	int xret = this->QPoint::y();
	x[0].x_int = (int)xret;
    }
    void x_5(xargs *x) {
	// setX(int)
	this->QPoint::setX((int)x[1].x_int);
    }
    void x_6(xargs *x) {
	// setY(int)
	this->QPoint::setY((int)x[1].x_int);
    }
    void x_7(xargs *x) const {
	// manhattanLength()
	int xret = this->QPoint::manhattanLength();
	x[0].x_int = (int)xret;
    }
    void x_8(xargs *x) {
	// rx()
	QCOORD& xret = this->QPoint::rx();
	x[0].x_voidp = (void*)&xret;
    }
    void x_9(xargs *x) {
	// ry()
	QCOORD& xret = this->QPoint::ry();
	x[0].x_voidp = (void*)&xret;
    }
    void x_10(xargs *x) {
	// operator+=(const QPoint&)
	QPoint& xret = this->QPoint::operator+=(*(const QPoint *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_11(xargs *x) {
	// operator-=(const QPoint&)
	QPoint& xret = this->QPoint::operator-=(*(const QPoint *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_12(xargs *x) {
	// operator*=(int)
	QPoint& xret = this->QPoint::operator*=((int)x[1].x_int);
	x[0].x_voidp = (void*)&xret;
    }
    void x_13(xargs *x) {
	// operator*=(double)
	QPoint& xret = this->QPoint::operator*=((double)x[1].x_double);
	x[0].x_voidp = (void*)&xret;
    }
    void x_14(xargs *x) {
	// operator/=(int)
	QPoint& xret = this->QPoint::operator/=((int)x[1].x_int);
	x[0].x_voidp = (void*)&xret;
    }
    void x_15(xargs *x) {
	// operator/=(double)
	QPoint& xret = this->QPoint::operator/=((double)x[1].x_double);
	x[0].x_voidp = (void*)&xret;
    }
    ~x_QPoint() {}
};
void xcall_QPoint(xargs *x, void *s, int xi) {
    x_QPoint *xself = (x_QPoint*)s;
    switch(xi) {
	case 0: x_QPoint::x_0(x);	break;
	case 1: x_QPoint::x_1(x);	break;
	case 2: xself->x_2(x);	break;
	case 3: xself->x_3(x);	break;
	case 4: xself->x_4(x);	break;
	case 5: xself->x_5(x);	break;
	case 6: xself->x_6(x);	break;
	case 7: xself->x_7(x);	break;
	case 8: xself->x_8(x);	break;
	case 9: xself->x_9(x);	break;
	case 10: xself->x_10(x);	break;
	case 11: xself->x_11(x);	break;
	case 12: xself->x_12(x);	break;
	case 13: xself->x_13(x);	break;
	case 14: xself->x_14(x);	break;
	case 15: xself->x_15(x);	break;
    }
}
