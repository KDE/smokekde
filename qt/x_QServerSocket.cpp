//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke.h>
#include <qt_smoke.h>
#include <qvariant.h>
#include <qglobal.h>
#include <qstring.h>
#include <qhostaddress.h>
#include <qserversocket.h>

class x_QServerSocket : public QServerSocket {
public:
    void x_0(Smoke::Stack x) const {
	// metaObject()
	QMetaObject* xret = this->QServerSocket::metaObject();
	x[0].s_class = (void*)xret;
    }
    void x_1(Smoke::Stack x) const {
	// className()
	const char* xret = this->QServerSocket::className();
	x[0].s_voidp = (void*)xret;
    }
    void x_2(Smoke::Stack x) {
	// qt_cast(const char*)
	void* xret = this->QServerSocket::qt_cast((const char*)x[1].s_voidp);
	x[0].s_voidp = (void*)xret;
    }
    void x_3(Smoke::Stack x) {
	// qt_invoke(int, QUObject*)
	bool xret = this->QServerSocket::qt_invoke((int)x[1].s_int,(QUObject*)x[2].s_voidp);
	x[0].s_bool = xret;
    }
    void x_4(Smoke::Stack x) {
	// qt_emit(int, QUObject*)
	bool xret = this->QServerSocket::qt_emit((int)x[1].s_int,(QUObject*)x[2].s_voidp);
	x[0].s_bool = xret;
    }
    void x_5(Smoke::Stack x) {
	// qt_property(int, int, QVariant*)
	bool xret = this->QServerSocket::qt_property((int)x[1].s_int,(int)x[2].s_int,(QVariant*)x[3].s_class);
	x[0].s_bool = xret;
    }
    void x_6(Smoke::Stack x) {
	// qObject()
	QObject* xret = this->QServerSocket::qObject();
	x[0].s_class = (void*)xret;
    }
    static void x_7(Smoke::Stack x) {
	// QServerSocket(Q_UINT16, int, QObject*, const char*)
	x_QServerSocket* xret = new x_QServerSocket((Q_UINT16)x[1].s_ushort,(int)x[2].s_int,(QObject*)x[3].s_class,(const char*)x[4].s_voidp);
	x[0].s_class = (void*)xret;
    }
    x_QServerSocket(Q_UINT16 x1, int x2, QObject* x3, const char* x4) : QServerSocket(x1, x2, x3, x4) {
    }
    static void x_8(Smoke::Stack x) {
	// QServerSocket(Q_UINT16, int, QObject*)
	x_QServerSocket* xret = new x_QServerSocket((Q_UINT16)x[1].s_ushort,(int)x[2].s_int,(QObject*)x[3].s_class);
	x[0].s_class = (void*)xret;
    }
    x_QServerSocket(Q_UINT16 x1, int x2, QObject* x3) : QServerSocket(x1, x2, x3) {
    }
    static void x_9(Smoke::Stack x) {
	// QServerSocket(Q_UINT16, int)
	x_QServerSocket* xret = new x_QServerSocket((Q_UINT16)x[1].s_ushort,(int)x[2].s_int);
	x[0].s_class = (void*)xret;
    }
    x_QServerSocket(Q_UINT16 x1, int x2) : QServerSocket(x1, x2) {
    }
    static void x_10(Smoke::Stack x) {
	// QServerSocket(Q_UINT16)
	x_QServerSocket* xret = new x_QServerSocket((Q_UINT16)x[1].s_ushort);
	x[0].s_class = (void*)xret;
    }
    x_QServerSocket(Q_UINT16 x1) : QServerSocket(x1) {
    }
    static void x_11(Smoke::Stack x) {
	// QServerSocket(const QHostAddress&, Q_UINT16, int, QObject*, const char*)
	x_QServerSocket* xret = new x_QServerSocket(*(const QHostAddress *)x[1].s_class,(Q_UINT16)x[2].s_ushort,(int)x[3].s_int,(QObject*)x[4].s_class,(const char*)x[5].s_voidp);
	x[0].s_class = (void*)xret;
    }
    x_QServerSocket(const QHostAddress& x1, Q_UINT16 x2, int x3, QObject* x4, const char* x5) : QServerSocket(x1, x2, x3, x4, x5) {
    }
    static void x_12(Smoke::Stack x) {
	// QServerSocket(const QHostAddress&, Q_UINT16, int, QObject*)
	x_QServerSocket* xret = new x_QServerSocket(*(const QHostAddress *)x[1].s_class,(Q_UINT16)x[2].s_ushort,(int)x[3].s_int,(QObject*)x[4].s_class);
	x[0].s_class = (void*)xret;
    }
    x_QServerSocket(const QHostAddress& x1, Q_UINT16 x2, int x3, QObject* x4) : QServerSocket(x1, x2, x3, x4) {
    }
    static void x_13(Smoke::Stack x) {
	// QServerSocket(const QHostAddress&, Q_UINT16, int)
	x_QServerSocket* xret = new x_QServerSocket(*(const QHostAddress *)x[1].s_class,(Q_UINT16)x[2].s_ushort,(int)x[3].s_int);
	x[0].s_class = (void*)xret;
    }
    x_QServerSocket(const QHostAddress& x1, Q_UINT16 x2, int x3) : QServerSocket(x1, x2, x3) {
    }
    static void x_14(Smoke::Stack x) {
	// QServerSocket(const QHostAddress&, Q_UINT16)
	x_QServerSocket* xret = new x_QServerSocket(*(const QHostAddress *)x[1].s_class,(Q_UINT16)x[2].s_ushort);
	x[0].s_class = (void*)xret;
    }
    x_QServerSocket(const QHostAddress& x1, Q_UINT16 x2) : QServerSocket(x1, x2) {
    }
    static void x_15(Smoke::Stack x) {
	// QServerSocket(QObject*, const char*)
	x_QServerSocket* xret = new x_QServerSocket((QObject*)x[1].s_class,(const char*)x[2].s_voidp);
	x[0].s_class = (void*)xret;
    }
    x_QServerSocket(QObject* x1, const char* x2) : QServerSocket(x1, x2) {
    }
    static void x_16(Smoke::Stack x) {
	// QServerSocket(QObject*)
	x_QServerSocket* xret = new x_QServerSocket((QObject*)x[1].s_class);
	x[0].s_class = (void*)xret;
    }
    x_QServerSocket(QObject* x1) : QServerSocket(x1) {
    }
    static void x_17(Smoke::Stack x) {
	// QServerSocket()
	x_QServerSocket* xret = new x_QServerSocket();
	x[0].s_class = (void*)xret;
    }
    x_QServerSocket() : QServerSocket() {
    }
    void x_18(Smoke::Stack x) const {
	// ok()
	bool xret = this->QServerSocket::ok();
	x[0].s_bool = xret;
    }
    void x_19(Smoke::Stack x) const {
	// port()
	Q_UINT16 xret = this->QServerSocket::port();
	x[0].s_ushort = xret;
    }
    void x_20(Smoke::Stack x) const {
	// socket()
	int xret = this->QServerSocket::socket();
	x[0].s_int = xret;
    }
    void x_21(Smoke::Stack x) {
	// setSocket(int)
	this->QServerSocket::setSocket((int)x[1].s_int);
	(void)x; // noop (for compiler warning)
    }
    void x_22(Smoke::Stack x) const {
	// address()
	QHostAddress xret = this->QServerSocket::address();
	x[0].s_class = (void*)new QHostAddress(xret);
    }
    static void x_23(Smoke::Stack x) {
	// staticMetaObject()
	QMetaObject* xret = QServerSocket::staticMetaObject();
	x[0].s_class = (void*)xret;
    }
    static void x_24(Smoke::Stack x) {
	// tr(const char*, const char*)
	QString xret = QServerSocket::tr((const char*)x[1].s_voidp,(const char*)x[2].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    static void x_25(Smoke::Stack x) {
	// tr(const char*)
	QString xret = QServerSocket::tr((const char*)x[1].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    static void x_26(Smoke::Stack x) {
	// trUtf8(const char*, const char*)
	QString xret = QServerSocket::trUtf8((const char*)x[1].s_voidp,(const char*)x[2].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    static void x_27(Smoke::Stack x) {
	// trUtf8(const char*)
	QString xret = QServerSocket::trUtf8((const char*)x[1].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_28(Smoke::Stack x) {
	// socketDevice()
	QSocketDevice* xret = this->QServerSocket::socketDevice();
	x[0].s_class = (void*)xret;
    }
    virtual bool checkConnectArgs(const char* x1, const QObject* x2, const char* x3) {
	Smoke::StackItem x[4];
	x[1].s_voidp = (void*)x1;
	x[2].s_class = (void*)x2;
	x[3].s_voidp = (void*)x3;
	if(qt_Smoke->binding->callMethod(6519, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QObject::checkConnectArgs(x1, x2, x3);
    }
    virtual void childEvent(QChildEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(6515, (void*)this, x)) return;
	this->QObject::childEvent(x1);
    }
    virtual const char* className() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(7979, (void*)this, x)) return (const char*)x[0].s_class;
	return this->QServerSocket::className();
    }
    virtual void connectNotify(const char* x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(6517, (void*)this, x)) return;
	this->QObject::connectNotify(x1);
    }
    virtual void customEvent(QCustomEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(6516, (void*)this, x)) return;
	this->QObject::customEvent(x1);
    }
    virtual void disconnectNotify(const char* x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(6518, (void*)this, x)) return;
	this->QObject::disconnectNotify(x1);
    }
    virtual bool event(QEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(6453, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
	Smoke::StackItem x[3];
	x[1].s_class = (void*)x1;
	x[2].s_class = (void*)x2;
	if(qt_Smoke->binding->callMethod(6454, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QObject::eventFilter(x1, x2);
    }
    virtual void insertChild(QObject* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(6476, (void*)this, x)) return;
	this->QObject::insertChild(x1);
    }
    virtual QMetaObject* metaObject() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(7978, (void*)this, x)) return (QMetaObject*)x[0].s_class;
	return this->QServerSocket::metaObject();
    }
    virtual void newConnection(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = x1;
	qt_Smoke->binding->callMethod(8002, (void*)this, x, true /*pure virtual*/);
	return;
	// ABSTRACT
    }
    virtual QVariant property(const char* x1) const {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(6490, (void*)this, x)) {
	    QVariant *xptr = (QVariant *)x[0].s_class;
	    QVariant xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QObject::property(x1);
    }
    virtual void* qt_cast(const char* x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(7980, (void*)this, x)) return (void*)x[0].s_voidp;
	return this->QServerSocket::qt_cast(x1);
    }
    virtual bool qt_emit(int x1, QUObject* x2) {
	Smoke::StackItem x[3];
	x[1].s_int = x1;
	x[2].s_voidp = (void*)x2;
	if(qt_Smoke->binding->callMethod(7982, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QServerSocket::qt_emit(x1, x2);
    }
    virtual bool qt_invoke(int x1, QUObject* x2) {
	Smoke::StackItem x[3];
	x[1].s_int = x1;
	x[2].s_voidp = (void*)x2;
	if(qt_Smoke->binding->callMethod(7981, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QServerSocket::qt_invoke(x1, x2);
    }
    virtual bool qt_property(int x1, int x2, QVariant* x3) {
	Smoke::StackItem x[4];
	x[1].s_int = x1;
	x[2].s_int = x2;
	x[3].s_class = (void*)x3;
	if(qt_Smoke->binding->callMethod(7983, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QServerSocket::qt_property(x1, x2, x3);
    }
    virtual void removeChild(QObject* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(6477, (void*)this, x)) return;
	this->QObject::removeChild(x1);
    }
    virtual void setName(const char* x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(6459, (void*)this, x)) return;
	this->QObject::setName(x1);
    }
    virtual bool setProperty(const char* x1, const QVariant& x2) {
	Smoke::StackItem x[3];
	x[1].s_voidp = (void*)x1;
	x[2].s_class = (void*)&x2;
	if(qt_Smoke->binding->callMethod(6489, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QObject::setProperty(x1, x2);
    }
    virtual void setSocket(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = x1;
	if(qt_Smoke->binding->callMethod(8000, (void*)this, x)) return;
	this->QServerSocket::setSocket(x1);
    }
    virtual void timerEvent(QTimerEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(6514, (void*)this, x)) return;
	this->QObject::timerEvent(x1);
    }
    ~x_QServerSocket() { qt_Smoke->binding->deleted(254, (void*)this); }
};
void xcall_QServerSocket(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QServerSocket *xself = (x_QServerSocket*)obj;
    switch(xi) {
	case 0: xself->x_0(args);	break;
	case 1: xself->x_1(args);	break;
	case 2: xself->x_2(args);	break;
	case 3: xself->x_3(args);	break;
	case 4: xself->x_4(args);	break;
	case 5: xself->x_5(args);	break;
	case 6: xself->x_6(args);	break;
	case 7: x_QServerSocket::x_7(args);	break;
	case 8: x_QServerSocket::x_8(args);	break;
	case 9: x_QServerSocket::x_9(args);	break;
	case 10: x_QServerSocket::x_10(args);	break;
	case 11: x_QServerSocket::x_11(args);	break;
	case 12: x_QServerSocket::x_12(args);	break;
	case 13: x_QServerSocket::x_13(args);	break;
	case 14: x_QServerSocket::x_14(args);	break;
	case 15: x_QServerSocket::x_15(args);	break;
	case 16: x_QServerSocket::x_16(args);	break;
	case 17: x_QServerSocket::x_17(args);	break;
	case 18: xself->x_18(args);	break;
	case 19: xself->x_19(args);	break;
	case 20: xself->x_20(args);	break;
	case 21: xself->x_21(args);	break;
	case 22: xself->x_22(args);	break;
	case 23: x_QServerSocket::x_23(args);	break;
	case 24: x_QServerSocket::x_24(args);	break;
	case 25: x_QServerSocket::x_25(args);	break;
	case 26: x_QServerSocket::x_26(args);	break;
	case 27: x_QServerSocket::x_27(args);	break;
	case 28: xself->x_28(args);	break;
	case 29: delete (QServerSocket*)xself;	break;
    }
}
