//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qvariant.h>
#include <qglobal.h>
#include <qhostaddress.h>
#include <qserversocket.h>

class x_QServerSocket : public QServerSocket {
public:
    static void x_0(xargs *x) {
	// QServerSocket(Q_UINT16, int, QObject*, const char*)
	x_QServerSocket* xret = new x_QServerSocket(*(Q_UINT16 *)x[1].x_voidp,(int)x[2].x_int,(QObject*)x[3].x_voidp,(const char*)x[4].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QServerSocket(Q_UINT16 x1, int x2, QObject* x3, const char* x4) : QServerSocket(x1, x2, x3, x4) {
    }
    static void x_1(xargs *x) {
	// QServerSocket(Q_UINT16, int, QObject*)
	x_QServerSocket* xret = new x_QServerSocket(*(Q_UINT16 *)x[1].x_voidp,(int)x[2].x_int,(QObject*)x[3].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QServerSocket(Q_UINT16 x1, int x2, QObject* x3) : QServerSocket(x1, x2, x3) {
    }
    static void x_2(xargs *x) {
	// QServerSocket(Q_UINT16, int)
	x_QServerSocket* xret = new x_QServerSocket(*(Q_UINT16 *)x[1].x_voidp,(int)x[2].x_int);
	x[0].x_voidp = (void*)xret;
    }
    x_QServerSocket(Q_UINT16 x1, int x2) : QServerSocket(x1, x2) {
    }
    static void x_3(xargs *x) {
	// QServerSocket(Q_UINT16)
	x_QServerSocket* xret = new x_QServerSocket(*(Q_UINT16 *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QServerSocket(Q_UINT16 x1) : QServerSocket(x1) {
    }
    static void x_4(xargs *x) {
	// QServerSocket(const QHostAddress&, Q_UINT16, int, QObject*, const char*)
	x_QServerSocket* xret = new x_QServerSocket(*(const QHostAddress *)x[1].x_voidp,*(Q_UINT16 *)x[2].x_voidp,(int)x[3].x_int,(QObject*)x[4].x_voidp,(const char*)x[5].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QServerSocket(const QHostAddress& x1, Q_UINT16 x2, int x3, QObject* x4, const char* x5) : QServerSocket(x1, x2, x3, x4, x5) {
    }
    static void x_5(xargs *x) {
	// QServerSocket(const QHostAddress&, Q_UINT16, int, QObject*)
	x_QServerSocket* xret = new x_QServerSocket(*(const QHostAddress *)x[1].x_voidp,*(Q_UINT16 *)x[2].x_voidp,(int)x[3].x_int,(QObject*)x[4].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QServerSocket(const QHostAddress& x1, Q_UINT16 x2, int x3, QObject* x4) : QServerSocket(x1, x2, x3, x4) {
    }
    static void x_6(xargs *x) {
	// QServerSocket(const QHostAddress&, Q_UINT16, int)
	x_QServerSocket* xret = new x_QServerSocket(*(const QHostAddress *)x[1].x_voidp,*(Q_UINT16 *)x[2].x_voidp,(int)x[3].x_int);
	x[0].x_voidp = (void*)xret;
    }
    x_QServerSocket(const QHostAddress& x1, Q_UINT16 x2, int x3) : QServerSocket(x1, x2, x3) {
    }
    static void x_7(xargs *x) {
	// QServerSocket(const QHostAddress&, Q_UINT16)
	x_QServerSocket* xret = new x_QServerSocket(*(const QHostAddress *)x[1].x_voidp,*(Q_UINT16 *)x[2].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QServerSocket(const QHostAddress& x1, Q_UINT16 x2) : QServerSocket(x1, x2) {
    }
    static void x_8(xargs *x) {
	// QServerSocket(QObject*, const char*)
	x_QServerSocket* xret = new x_QServerSocket((QObject*)x[1].x_voidp,(const char*)x[2].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QServerSocket(QObject* x1, const char* x2) : QServerSocket(x1, x2) {
    }
    static void x_9(xargs *x) {
	// QServerSocket(QObject*)
	x_QServerSocket* xret = new x_QServerSocket((QObject*)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QServerSocket(QObject* x1) : QServerSocket(x1) {
    }
    static void x_10(xargs *x) {
	// QServerSocket()
	x_QServerSocket* xret = new x_QServerSocket();
	x[0].x_voidp = (void*)xret;
    }
    x_QServerSocket() : QServerSocket() {
    }
    void x_11(xargs *x) const {
	// ok()
	bool xret = this->QServerSocket::ok();
	x[0].x_bool = (bool)xret;
    }
    void x_12(xargs *x) const {
	// port()
	Q_UINT16 xret = this->QServerSocket::port();
	x[0].x_voidp = (void*)new Q_UINT16(xret);
    }
    void x_13(xargs *x) const {
	// socket()
	int xret = this->QServerSocket::socket();
	x[0].x_int = (int)xret;
    }
    void x_14(xargs *x) {
	// setSocket(int)
	this->QServerSocket::setSocket((int)x[1].x_int);
    }
    void x_15(xargs *x) const {
	// address()
	QHostAddress xret = this->QServerSocket::address();
	x[0].x_voidp = (void*)new QHostAddress(xret);
    }
    void x_16(xargs *x) {
	// newConnection(int)
	this->QServerSocket::newConnection((int)x[1].x_int);
    }
    void x_17(xargs *x) {
	// socketDevice()
	QSocketDevice* xret = this->QServerSocket::socketDevice();
	x[0].x_voidp = (void*)xret;
    }
    virtual bool checkConnectArgs(const char* x1, const QObject* x2, const char* x3) {
	xargs x[4];
	x[1].x_voidp = (void*)x1;
	x[2].x_voidp = (void*)x2;
	x[3].x_voidp = (void*)x3;
	if(call_method((void*)this, 5475, x)) return (bool)x[0].x_bool;
	return this->QObject::checkConnectArgs(x1, x2, x3);
    }
    virtual void childEvent(QChildEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5471, x)) return;
	this->QObject::childEvent(x1);
    }
    virtual void connectNotify(const char* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5473, x)) return;
	this->QObject::connectNotify(x1);
    }
    virtual void customEvent(QCustomEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5472, x)) return;
	this->QObject::customEvent(x1);
    }
    virtual void disconnectNotify(const char* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5474, x)) return;
	this->QObject::disconnectNotify(x1);
    }
    virtual bool event(QEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5410, x)) return (bool)x[0].x_bool;
	return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
	xargs x[3];
	x[1].x_voidp = (void*)x1;
	x[2].x_voidp = (void*)x2;
	if(call_method((void*)this, 5411, x)) return (bool)x[0].x_bool;
	return this->QObject::eventFilter(x1, x2);
    }
    virtual void insertChild(QObject* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5433, x)) return;
	this->QObject::insertChild(x1);
    }
    virtual void newConnection(int x1) {
	xargs x[2];
	x[1].x_int = (int)x1;
	call_method_abstract((void*)this, 6714, x);
	return;
	// ABSTRACT
    }
    virtual QVariant property(const char* x1) const {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5447, x)) {
	    QVariant *xptr = (QVariant *)x[0].x_voidp;
	    QVariant xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QObject::property(x1);
    }
    virtual void removeChild(QObject* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5434, x)) return;
	this->QObject::removeChild(x1);
    }
    virtual void setName(const char* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5416, x)) return;
	this->QObject::setName(x1);
    }
    virtual bool setProperty(const char* x1, const QVariant& x2) {
	xargs x[3];
	x[1].x_voidp = (void*)x1;
	x[2].x_voidp = (void*)&x2;
	if(call_method((void*)this, 5446, x)) return (bool)x[0].x_bool;
	return this->QObject::setProperty(x1, x2);
    }
    virtual void setSocket(int x1) {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 6712, x)) return;
	this->QServerSocket::setSocket(x1);
    }
    virtual void timerEvent(QTimerEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5470, x)) return;
	this->QObject::timerEvent(x1);
    }
    ~x_QServerSocket() {}
};
void xcall_QServerSocket(xargs *x, void *s, int xi) {
    x_QServerSocket *xself = (x_QServerSocket*)s;
    switch(xi) {
	case 0: x_QServerSocket::x_0(x);	break;
	case 1: x_QServerSocket::x_1(x);	break;
	case 2: x_QServerSocket::x_2(x);	break;
	case 3: x_QServerSocket::x_3(x);	break;
	case 4: x_QServerSocket::x_4(x);	break;
	case 5: x_QServerSocket::x_5(x);	break;
	case 6: x_QServerSocket::x_6(x);	break;
	case 7: x_QServerSocket::x_7(x);	break;
	case 8: x_QServerSocket::x_8(x);	break;
	case 9: x_QServerSocket::x_9(x);	break;
	case 10: x_QServerSocket::x_10(x);	break;
	case 11: xself->x_11(x);	break;
	case 12: xself->x_12(x);	break;
	case 13: xself->x_13(x);	break;
	case 14: xself->x_14(x);	break;
	case 15: xself->x_15(x);	break;
	case 16: xself->x_16(x);	break;
	case 17: xself->x_17(x);	break;
	case 18: delete (QServerSocket*)xself;	break;
    }
}
