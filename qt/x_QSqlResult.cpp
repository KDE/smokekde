//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke.h>
#include <qt_smoke.h>
#include <qvariant.h>
#include <qsqlresult.h>
#include <qstring.h>
#include <qsqlerror.h>

class x_QSqlResult : public QSqlResult {
public:
    static void x_0(Smoke::Stack x) {
	// QSqlResult(const QSqlDriver*)
	x_QSqlResult* xret = new x_QSqlResult((const QSqlDriver*)x[1].s_class);
	x[0].s_class = (void*)xret;
    }
    x_QSqlResult(const QSqlDriver* x1) : QSqlResult(x1) {
    }
    void x_1(Smoke::Stack x) const {
	// at()
	int xret = this->QSqlResult::at();
	x[0].s_int = (int)xret;
    }
    void x_2(Smoke::Stack x) const {
	// lastQuery()
	QString xret = this->QSqlResult::lastQuery();
	x[0].s_class = (void*)new QString(xret);
    }
    void x_3(Smoke::Stack x) const {
	// lastError()
	QSqlError xret = this->QSqlResult::lastError();
	x[0].s_class = (void*)new QSqlError(xret);
    }
    void x_4(Smoke::Stack x) const {
	// isValid()
	bool xret = this->QSqlResult::isValid();
	x[0].s_bool = (bool)xret;
    }
    void x_5(Smoke::Stack x) const {
	// isActive()
	bool xret = this->QSqlResult::isActive();
	x[0].s_bool = (bool)xret;
    }
    void x_6(Smoke::Stack x) const {
	// isSelect()
	bool xret = this->QSqlResult::isSelect();
	x[0].s_bool = (bool)xret;
    }
    void x_7(Smoke::Stack x) const {
	// isForwardOnly()
	bool xret = this->QSqlResult::isForwardOnly();
	x[0].s_bool = (bool)xret;
    }
    void x_8(Smoke::Stack x) const {
	// driver()
	const QSqlDriver* xret = this->QSqlResult::driver();
	x[0].s_class = (void*)xret;
    }
    void x_9(Smoke::Stack x) {
	// setAt(int)
	this->QSqlResult::setAt((int)x[1].s_int);
    }
    void x_10(Smoke::Stack x) {
	// setActive(bool)
	this->QSqlResult::setActive((bool)x[1].s_bool);
    }
    void x_11(Smoke::Stack x) {
	// setLastError(const QSqlError&)
	this->QSqlResult::setLastError(*(const QSqlError *)x[1].s_class);
    }
    void x_12(Smoke::Stack x) {
	// setQuery(const QString&)
	this->QSqlResult::setQuery(*(const QString *)x[1].s_class);
    }
    void x_13(Smoke::Stack x) {
	// setSelect(bool)
	this->QSqlResult::setSelect((bool)x[1].s_bool);
    }
    void x_14(Smoke::Stack x) {
	// setForwardOnly(bool)
	this->QSqlResult::setForwardOnly((bool)x[1].s_bool);
    }
    void x_15(Smoke::Stack x) {
	// data(int)
	QVariant xret = this->QSqlResult::data((int)x[1].s_int);
	x[0].s_class = (void*)new QVariant(xret);
    }
    void x_16(Smoke::Stack x) {
	// isNull(int)
	bool xret = this->QSqlResult::isNull((int)x[1].s_int);
	x[0].s_bool = (bool)xret;
    }
    void x_17(Smoke::Stack x) {
	// reset(const QString&)
	bool xret = this->QSqlResult::reset(*(const QString *)x[1].s_class);
	x[0].s_bool = (bool)xret;
    }
    void x_18(Smoke::Stack x) {
	// fetch(int)
	bool xret = this->QSqlResult::fetch((int)x[1].s_int);
	x[0].s_bool = (bool)xret;
    }
    void x_19(Smoke::Stack x) {
	// fetchNext()
	bool xret = this->QSqlResult::fetchNext();
	x[0].s_bool = (bool)xret;
    }
    void x_20(Smoke::Stack x) {
	// fetchPrev()
	bool xret = this->QSqlResult::fetchPrev();
	x[0].s_bool = (bool)xret;
    }
    void x_21(Smoke::Stack x) {
	// fetchFirst()
	bool xret = this->QSqlResult::fetchFirst();
	x[0].s_bool = (bool)xret;
    }
    void x_22(Smoke::Stack x) {
	// fetchLast()
	bool xret = this->QSqlResult::fetchLast();
	x[0].s_bool = (bool)xret;
    }
    void x_23(Smoke::Stack x) {
	// size()
	int xret = this->QSqlResult::size();
	x[0].s_int = (int)xret;
    }
    void x_24(Smoke::Stack x) {
	// numRowsAffected()
	int xret = this->QSqlResult::numRowsAffected();
	x[0].s_int = (int)xret;
    }
    virtual QVariant data(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	qt_Smoke->callMethod(7651, (void*)this, x, true /*pure virtual*/);
	QVariant *xptr = (QVariant *)x[0].s_class;
	QVariant xret(*xptr);
	delete xptr;
	return xret;
	// ABSTRACT
    }
    virtual bool fetch(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	qt_Smoke->callMethod(7654, (void*)this, x, true /*pure virtual*/);
return (bool)x[0].s_bool;
	// ABSTRACT
    }
    virtual bool fetchFirst() {
	Smoke::StackItem x[1];
	qt_Smoke->callMethod(7657, (void*)this, x, true /*pure virtual*/);
return (bool)x[0].s_bool;
	// ABSTRACT
    }
    virtual bool fetchLast() {
	Smoke::StackItem x[1];
	qt_Smoke->callMethod(7658, (void*)this, x, true /*pure virtual*/);
return (bool)x[0].s_bool;
	// ABSTRACT
    }
    virtual bool fetchNext() {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(7655, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QSqlResult::fetchNext();
    }
    virtual bool fetchPrev() {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(7656, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QSqlResult::fetchPrev();
    }
    virtual bool isNull(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	qt_Smoke->callMethod(7652, (void*)this, x, true /*pure virtual*/);
return (bool)x[0].s_bool;
	// ABSTRACT
    }
    virtual int numRowsAffected() {
	Smoke::StackItem x[1];
	qt_Smoke->callMethod(7660, (void*)this, x, true /*pure virtual*/);
return (int)x[0].s_int;
	// ABSTRACT
    }
    virtual bool reset(const QString& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	qt_Smoke->callMethod(7653, (void*)this, x, true /*pure virtual*/);
return (bool)x[0].s_bool;
	// ABSTRACT
    }
    virtual void setActive(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = (bool)x1;
	if(qt_Smoke->callMethod(7646, (void*)this, x)) return;
	this->QSqlResult::setActive(x1);
    }
    virtual void setAt(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(qt_Smoke->callMethod(7645, (void*)this, x)) return;
	this->QSqlResult::setAt(x1);
    }
    virtual void setForwardOnly(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = (bool)x1;
	if(qt_Smoke->callMethod(7650, (void*)this, x)) return;
	this->QSqlResult::setForwardOnly(x1);
    }
    virtual void setLastError(const QSqlError& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->callMethod(7647, (void*)this, x)) return;
	this->QSqlResult::setLastError(x1);
    }
    virtual void setQuery(const QString& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->callMethod(7648, (void*)this, x)) return;
	this->QSqlResult::setQuery(x1);
    }
    virtual void setSelect(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = (bool)x1;
	if(qt_Smoke->callMethod(7649, (void*)this, x)) return;
	this->QSqlResult::setSelect(x1);
    }
    virtual int size() {
	Smoke::StackItem x[1];
	qt_Smoke->callMethod(7659, (void*)this, x, true /*pure virtual*/);
return (int)x[0].s_int;
	// ABSTRACT
    }
    ~x_QSqlResult() {}
};
void xcall_QSqlResult(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QSqlResult *xself = (x_QSqlResult*)obj;
    switch(xi) {
	case 0: x_QSqlResult::x_0(args);	break;
	case 1: xself->x_1(args);	break;
	case 2: xself->x_2(args);	break;
	case 3: xself->x_3(args);	break;
	case 4: xself->x_4(args);	break;
	case 5: xself->x_5(args);	break;
	case 6: xself->x_6(args);	break;
	case 7: xself->x_7(args);	break;
	case 8: xself->x_8(args);	break;
	case 9: xself->x_9(args);	break;
	case 10: xself->x_10(args);	break;
	case 11: xself->x_11(args);	break;
	case 12: xself->x_12(args);	break;
	case 13: xself->x_13(args);	break;
	case 14: xself->x_14(args);	break;
	case 15: xself->x_15(args);	break;
	case 16: xself->x_16(args);	break;
	case 17: xself->x_17(args);	break;
	case 18: xself->x_18(args);	break;
	case 19: xself->x_19(args);	break;
	case 20: xself->x_20(args);	break;
	case 21: xself->x_21(args);	break;
	case 22: xself->x_22(args);	break;
	case 23: xself->x_23(args);	break;
	case 24: xself->x_24(args);	break;
	case 25: delete (QSqlResult*)xself;	break;
    }
}
