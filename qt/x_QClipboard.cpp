//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke.h>
#include <qt_smoke.h>
#include <qclipboard.h>
#include <qimage.h>
#include <qcstring.h>
#include <qstring.h>
#include <qpixmap.h>

class x_QClipboard {
private:
    QClipboard *xthis;
public:
    x_QClipboard(void *x) : xthis((QClipboard*)x) {}
    static void x_0(Smoke::Stack x) {
	x[0].s_enum = (long)QClipboard::Clipboard;
    }
    static void x_1(Smoke::Stack x) {
	x[0].s_enum = (long)QClipboard::Selection;
    }
    void x_2(Smoke::Stack x) const {
	// metaObject()
	QMetaObject* xret = xthis->QClipboard::metaObject();
	x[0].s_class = (void*)xret;
    }
    void x_3(Smoke::Stack x) const {
	// className()
	const char* xret = xthis->QClipboard::className();
	x[0].s_voidp = (void*)xret;
    }
    void x_4(Smoke::Stack x) {
	// qt_cast(const char*)
	void* xret = xthis->QClipboard::qt_cast((const char*)x[1].s_voidp);
	x[0].s_voidp = (void*)xret;
    }
    void x_5(Smoke::Stack x) {
	// qt_invoke(int, QUObject*)
	bool xret = xthis->QClipboard::qt_invoke((int)x[1].s_int,(QUObject*)x[2].s_voidp);
	x[0].s_bool = xret;
    }
    void x_6(Smoke::Stack x) {
	// qt_emit(int, QUObject*)
	bool xret = xthis->QClipboard::qt_emit((int)x[1].s_int,(QUObject*)x[2].s_voidp);
	x[0].s_bool = xret;
    }
    void x_7(Smoke::Stack x) {
	// qt_property(int, int, QVariant*)
	bool xret = xthis->QClipboard::qt_property((int)x[1].s_int,(int)x[2].s_int,(QVariant*)x[3].s_class);
	x[0].s_bool = xret;
    }
    void x_8(Smoke::Stack x) {
	// qObject()
	QObject* xret = xthis->QClipboard::qObject();
	x[0].s_class = (void*)xret;
    }
    void x_9(Smoke::Stack x) {
	// clear(QClipboard::Mode)
	xthis->QClipboard::clear((QClipboard::Mode)x[1].s_enum);
	(void)x; // noop (for compiler warning)
    }
    void x_10(Smoke::Stack x) {
	// clear()
	xthis->QClipboard::clear();
	(void)x; // noop (for compiler warning)
    }
    void x_11(Smoke::Stack x) const {
	// supportsSelection()
	bool xret = xthis->QClipboard::supportsSelection();
	x[0].s_bool = xret;
    }
    void x_12(Smoke::Stack x) const {
	// ownsSelection()
	bool xret = xthis->QClipboard::ownsSelection();
	x[0].s_bool = xret;
    }
    void x_13(Smoke::Stack x) const {
	// ownsClipboard()
	bool xret = xthis->QClipboard::ownsClipboard();
	x[0].s_bool = xret;
    }
    void x_14(Smoke::Stack x) {
	// setSelectionMode(bool)
	xthis->QClipboard::setSelectionMode((bool)x[1].s_bool);
	(void)x; // noop (for compiler warning)
    }
    void x_15(Smoke::Stack x) const {
	// selectionModeEnabled()
	bool xret = xthis->QClipboard::selectionModeEnabled();
	x[0].s_bool = xret;
    }
    void x_16(Smoke::Stack x) const {
	// text(QClipboard::Mode)
	QString xret = xthis->QClipboard::text((QClipboard::Mode)x[1].s_enum);
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_17(Smoke::Stack x) const {
	// text(QCString&, QClipboard::Mode)
	QString xret = xthis->QClipboard::text(*(QCString *)x[1].s_voidp,(QClipboard::Mode)x[2].s_enum);
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_18(Smoke::Stack x) {
	// setText(const QString&, QClipboard::Mode)
	xthis->QClipboard::setText(*(const QString *)x[1].s_voidp,(QClipboard::Mode)x[2].s_enum);
	(void)x; // noop (for compiler warning)
    }
    void x_19(Smoke::Stack x) const {
	// data(QClipboard::Mode)
	QMimeSource* xret = xthis->QClipboard::data((QClipboard::Mode)x[1].s_enum);
	x[0].s_class = (void*)xret;
    }
    void x_20(Smoke::Stack x) {
	// setData(QMimeSource*, QClipboard::Mode)
	xthis->QClipboard::setData((QMimeSource*)x[1].s_class,(QClipboard::Mode)x[2].s_enum);
	(void)x; // noop (for compiler warning)
    }
    void x_21(Smoke::Stack x) const {
	// image(QClipboard::Mode)
	QImage xret = xthis->QClipboard::image((QClipboard::Mode)x[1].s_enum);
	x[0].s_class = (void*)new QImage(xret);
    }
    void x_22(Smoke::Stack x) const {
	// pixmap(QClipboard::Mode)
	QPixmap xret = xthis->QClipboard::pixmap((QClipboard::Mode)x[1].s_enum);
	x[0].s_class = (void*)new QPixmap(xret);
    }
    void x_23(Smoke::Stack x) {
	// setImage(const QImage&, QClipboard::Mode)
	xthis->QClipboard::setImage(*(const QImage *)x[1].s_class,(QClipboard::Mode)x[2].s_enum);
	(void)x; // noop (for compiler warning)
    }
    void x_24(Smoke::Stack x) {
	// setPixmap(const QPixmap&, QClipboard::Mode)
	xthis->QClipboard::setPixmap(*(const QPixmap *)x[1].s_class,(QClipboard::Mode)x[2].s_enum);
	(void)x; // noop (for compiler warning)
    }
    void x_25(Smoke::Stack x) const {
	// text()
	QString xret = xthis->QClipboard::text();
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_26(Smoke::Stack x) const {
	// text(QCString&)
	QString xret = xthis->QClipboard::text(*(QCString *)x[1].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_27(Smoke::Stack x) {
	// setText(const QString&)
	xthis->QClipboard::setText(*(const QString *)x[1].s_voidp);
	(void)x; // noop (for compiler warning)
    }
    void x_28(Smoke::Stack x) const {
	// data()
	QMimeSource* xret = xthis->QClipboard::data();
	x[0].s_class = (void*)xret;
    }
    void x_29(Smoke::Stack x) {
	// setData(QMimeSource*)
	xthis->QClipboard::setData((QMimeSource*)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_30(Smoke::Stack x) const {
	// image()
	QImage xret = xthis->QClipboard::image();
	x[0].s_class = (void*)new QImage(xret);
    }
    void x_31(Smoke::Stack x) const {
	// pixmap()
	QPixmap xret = xthis->QClipboard::pixmap();
	x[0].s_class = (void*)new QPixmap(xret);
    }
    void x_32(Smoke::Stack x) {
	// setImage(const QImage&)
	xthis->QClipboard::setImage(*(const QImage *)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_33(Smoke::Stack x) {
	// setPixmap(const QPixmap&)
	xthis->QClipboard::setPixmap(*(const QPixmap *)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    static void x_34(Smoke::Stack x) {
	// staticMetaObject()
	QMetaObject* xret = QClipboard::staticMetaObject();
	x[0].s_class = (void*)xret;
    }
    static void x_35(Smoke::Stack x) {
	// tr(const char*, const char*)
	QString xret = QClipboard::tr((const char*)x[1].s_voidp,(const char*)x[2].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    static void x_36(Smoke::Stack x) {
	// tr(const char*)
	QString xret = QClipboard::tr((const char*)x[1].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    static void x_37(Smoke::Stack x) {
	// trUtf8(const char*, const char*)
	QString xret = QClipboard::trUtf8((const char*)x[1].s_voidp,(const char*)x[2].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    static void x_38(Smoke::Stack x) {
	// trUtf8(const char*)
	QString xret = QClipboard::trUtf8((const char*)x[1].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    static void xenum_operation(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
	switch(xtype) {
	  case 73: //QClipboard::Mode
	    switch(xop) {
	      case Smoke::EnumNew:
		xdata = (void*)new QClipboard::Mode;
		break;
	      case Smoke::EnumDelete:
		delete (QClipboard::Mode*)xdata;
		break;
	      case Smoke::EnumFromLong:
		*(QClipboard::Mode*)xdata = (QClipboard::Mode)xvalue;
		break;
	      case Smoke::EnumToLong:
		xvalue = (long)*(QClipboard::Mode*)xdata;
		break;
	    }
	    break;
	}
    }
    ~x_QClipboard() { qt_Smoke->binding->deleted(40, (void*)this); }
};
void xenum_QClipboard(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
    x_QClipboard::xenum_operation(xop, xtype, xdata, xvalue);
}
void xcall_QClipboard(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QClipboard xtmp(obj), *xself = &xtmp;
    switch(xi) {
	case 0: x_QClipboard::x_0(args);	break;
	case 1: x_QClipboard::x_1(args);	break;
	case 2: xself->x_2(args);	break;
	case 3: xself->x_3(args);	break;
	case 4: xself->x_4(args);	break;
	case 5: xself->x_5(args);	break;
	case 6: xself->x_6(args);	break;
	case 7: xself->x_7(args);	break;
	case 8: xself->x_8(args);	break;
	case 9: xself->x_9(args);	break;
	case 10: xself->x_10(args);	break;
	case 11: xself->x_11(args);	break;
	case 12: xself->x_12(args);	break;
	case 13: xself->x_13(args);	break;
	case 14: xself->x_14(args);	break;
	case 15: xself->x_15(args);	break;
	case 16: xself->x_16(args);	break;
	case 17: xself->x_17(args);	break;
	case 18: xself->x_18(args);	break;
	case 19: xself->x_19(args);	break;
	case 20: xself->x_20(args);	break;
	case 21: xself->x_21(args);	break;
	case 22: xself->x_22(args);	break;
	case 23: xself->x_23(args);	break;
	case 24: xself->x_24(args);	break;
	case 25: xself->x_25(args);	break;
	case 26: xself->x_26(args);	break;
	case 27: xself->x_27(args);	break;
	case 28: xself->x_28(args);	break;
	case 29: xself->x_29(args);	break;
	case 30: xself->x_30(args);	break;
	case 31: xself->x_31(args);	break;
	case 32: xself->x_32(args);	break;
	case 33: xself->x_33(args);	break;
	case 34: x_QClipboard::x_34(args);	break;
	case 35: x_QClipboard::x_35(args);	break;
	case 36: x_QClipboard::x_36(args);	break;
	case 37: x_QClipboard::x_37(args);	break;
	case 38: x_QClipboard::x_38(args);	break;
    }
}
