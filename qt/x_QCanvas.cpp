//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qpoint.h>
#include <qcolor.h>
#include <qpointarray.h>
#include <qpainter.h>
#include <qsize.h>
#include <qcanvas.h>
#include <qvariant.h>
#include <qpixmap.h>
#include <qrect.h>

class x_QCanvas : public QCanvas {
public:
    static void x_0(xargs *x) {
	// QCanvas(QObject*, const char*)
	x_QCanvas* xret = new x_QCanvas((QObject*)x[1].x_voidp,(const char*)x[2].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QCanvas(QObject* x1, const char* x2) : QCanvas(x1, x2) {
    }
    static void x_1(xargs *x) {
	// QCanvas(QObject*)
	x_QCanvas* xret = new x_QCanvas((QObject*)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QCanvas(QObject* x1) : QCanvas(x1) {
    }
    static void x_2(xargs *x) {
	// QCanvas()
	x_QCanvas* xret = new x_QCanvas();
	x[0].x_voidp = (void*)xret;
    }
    x_QCanvas() : QCanvas() {
    }
    static void x_3(xargs *x) {
	// QCanvas(int, int)
	x_QCanvas* xret = new x_QCanvas((int)x[1].x_int,(int)x[2].x_int);
	x[0].x_voidp = (void*)xret;
    }
    x_QCanvas(int x1, int x2) : QCanvas(x1, x2) {
    }
    static void x_4(xargs *x) {
	// QCanvas(QPixmap, int, int, int, int)
	x_QCanvas* xret = new x_QCanvas(*(QPixmap *)x[1].x_voidp,(int)x[2].x_int,(int)x[3].x_int,(int)x[4].x_int,(int)x[5].x_int);
	x[0].x_voidp = (void*)xret;
    }
    x_QCanvas(QPixmap x1, int x2, int x3, int x4, int x5) : QCanvas(x1, x2, x3, x4, x5) {
    }
    void x_5(xargs *x) {
	// setTiles(QPixmap, int, int, int, int)
	this->QCanvas::setTiles(*(QPixmap *)x[1].x_voidp,(int)x[2].x_int,(int)x[3].x_int,(int)x[4].x_int,(int)x[5].x_int);
    }
    void x_6(xargs *x) {
	// setBackgroundPixmap(const QPixmap&)
	this->QCanvas::setBackgroundPixmap(*(const QPixmap *)x[1].x_voidp);
    }
    void x_7(xargs *x) const {
	// backgroundPixmap()
	QPixmap xret = this->QCanvas::backgroundPixmap();
	x[0].x_voidp = (void*)new QPixmap(xret);
    }
    void x_8(xargs *x) {
	// setBackgroundColor(const QColor&)
	this->QCanvas::setBackgroundColor(*(const QColor *)x[1].x_voidp);
    }
    void x_9(xargs *x) const {
	// backgroundColor()
	QColor xret = this->QCanvas::backgroundColor();
	x[0].x_voidp = (void*)new QColor(xret);
    }
    void x_10(xargs *x) {
	// setTile(int, int, int)
	this->QCanvas::setTile((int)x[1].x_int,(int)x[2].x_int,(int)x[3].x_int);
    }
    void x_11(xargs *x) const {
	// tile(int, int)
	int xret = this->QCanvas::tile((int)x[1].x_int,(int)x[2].x_int);
	x[0].x_int = (int)xret;
    }
    void x_12(xargs *x) const {
	// tilesHorizontally()
	int xret = this->QCanvas::tilesHorizontally();
	x[0].x_int = (int)xret;
    }
    void x_13(xargs *x) const {
	// tilesVertically()
	int xret = this->QCanvas::tilesVertically();
	x[0].x_int = (int)xret;
    }
    void x_14(xargs *x) const {
	// tileWidth()
	int xret = this->QCanvas::tileWidth();
	x[0].x_int = (int)xret;
    }
    void x_15(xargs *x) const {
	// tileHeight()
	int xret = this->QCanvas::tileHeight();
	x[0].x_int = (int)xret;
    }
    void x_16(xargs *x) {
	// resize(int, int)
	this->QCanvas::resize((int)x[1].x_int,(int)x[2].x_int);
    }
    void x_17(xargs *x) const {
	// width()
	int xret = this->QCanvas::width();
	x[0].x_int = (int)xret;
    }
    void x_18(xargs *x) const {
	// height()
	int xret = this->QCanvas::height();
	x[0].x_int = (int)xret;
    }
    void x_19(xargs *x) const {
	// size()
	QSize xret = this->QCanvas::size();
	x[0].x_voidp = (void*)new QSize(xret);
    }
    void x_20(xargs *x) const {
	// rect()
	QRect xret = this->QCanvas::rect();
	x[0].x_voidp = (void*)new QRect(xret);
    }
    void x_21(xargs *x) const {
	// onCanvas(int, int)
	bool xret = this->QCanvas::onCanvas((int)x[1].x_int,(int)x[2].x_int);
	x[0].x_bool = (bool)xret;
    }
    void x_22(xargs *x) const {
	// onCanvas(const QPoint&)
	bool xret = this->QCanvas::onCanvas(*(const QPoint *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_23(xargs *x) const {
	// validChunk(int, int)
	bool xret = this->QCanvas::validChunk((int)x[1].x_int,(int)x[2].x_int);
	x[0].x_bool = (bool)xret;
    }
    void x_24(xargs *x) const {
	// validChunk(const QPoint&)
	bool xret = this->QCanvas::validChunk(*(const QPoint *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_25(xargs *x) const {
	// chunkSize()
	int xret = this->QCanvas::chunkSize();
	x[0].x_int = (int)xret;
    }
    void x_26(xargs *x) {
	// retune(int, int)
	this->QCanvas::retune((int)x[1].x_int,(int)x[2].x_int);
    }
    void x_27(xargs *x) {
	// retune(int)
	this->QCanvas::retune((int)x[1].x_int);
    }
    void x_28(xargs *x) const {
	// sameChunk(int, int, int, int)
	bool xret = this->QCanvas::sameChunk((int)x[1].x_int,(int)x[2].x_int,(int)x[3].x_int,(int)x[4].x_int);
	x[0].x_bool = (bool)xret;
    }
    void x_29(xargs *x) {
	// setChangedChunk(int, int)
	this->QCanvas::setChangedChunk((int)x[1].x_int,(int)x[2].x_int);
    }
    void x_30(xargs *x) {
	// setChangedChunkContaining(int, int)
	this->QCanvas::setChangedChunkContaining((int)x[1].x_int,(int)x[2].x_int);
    }
    void x_31(xargs *x) {
	// setAllChanged()
	this->QCanvas::setAllChanged();
    }
    void x_32(xargs *x) {
	// setChanged(const QRect&)
	this->QCanvas::setChanged(*(const QRect *)x[1].x_voidp);
    }
    void x_33(xargs *x) {
	// setUnchanged(const QRect&)
	this->QCanvas::setUnchanged(*(const QRect *)x[1].x_voidp);
    }
    void x_34(xargs *x) {
	// addItemToChunk(QCanvasItem*, int, int)
	this->QCanvas::addItemToChunk((QCanvasItem*)x[1].x_voidp,(int)x[2].x_int,(int)x[3].x_int);
    }
    void x_35(xargs *x) {
	// removeItemFromChunk(QCanvasItem*, int, int)
	this->QCanvas::removeItemFromChunk((QCanvasItem*)x[1].x_voidp,(int)x[2].x_int,(int)x[3].x_int);
    }
    void x_36(xargs *x) {
	// addItemToChunkContaining(QCanvasItem*, int, int)
	this->QCanvas::addItemToChunkContaining((QCanvasItem*)x[1].x_voidp,(int)x[2].x_int,(int)x[3].x_int);
    }
    void x_37(xargs *x) {
	// removeItemFromChunkContaining(QCanvasItem*, int, int)
	this->QCanvas::removeItemFromChunkContaining((QCanvasItem*)x[1].x_voidp,(int)x[2].x_int,(int)x[3].x_int);
    }
    void x_38(xargs *x) {
	// allItems()
	QCanvasItemList xret = this->QCanvas::allItems();
	x[0].x_voidp = (void*)new QCanvasItemList(xret);
    }
    void x_39(xargs *x) const {
	// collisions(const QPoint&)
	QCanvasItemList xret = this->QCanvas::collisions(*(const QPoint *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QCanvasItemList(xret);
    }
    void x_40(xargs *x) const {
	// collisions(const QRect&)
	QCanvasItemList xret = this->QCanvas::collisions(*(const QRect *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QCanvasItemList(xret);
    }
    void x_41(xargs *x) const {
	// collisions(const QPointArray&, const QCanvasItem*, bool)
	QCanvasItemList xret = this->QCanvas::collisions(*(const QPointArray *)x[1].x_voidp,(const QCanvasItem*)x[2].x_voidp,(bool)x[3].x_bool);
	x[0].x_voidp = (void*)new QCanvasItemList(xret);
    }
    void x_42(xargs *x) {
	// drawArea(const QRect&, QPainter*, bool)
	this->QCanvas::drawArea(*(const QRect *)x[1].x_voidp,(QPainter*)x[2].x_voidp,(bool)x[3].x_bool);
    }
    void x_43(xargs *x) {
	// drawArea(const QRect&, QPainter*)
	this->QCanvas::drawArea(*(const QRect *)x[1].x_voidp,(QPainter*)x[2].x_voidp);
    }
    void x_44(xargs *x) {
	// addView(QCanvasView*)
	this->QCanvas::addView((QCanvasView*)x[1].x_voidp);
    }
    void x_45(xargs *x) {
	// removeView(QCanvasView*)
	this->QCanvas::removeView((QCanvasView*)x[1].x_voidp);
    }
    void x_46(xargs *x) {
	// drawCanvasArea(const QRect&, QPainter*, bool)
	this->QCanvas::drawCanvasArea(*(const QRect *)x[1].x_voidp,(QPainter*)x[2].x_voidp,(bool)x[3].x_bool);
    }
    void x_47(xargs *x) {
	// drawCanvasArea(const QRect&, QPainter*)
	this->QCanvas::drawCanvasArea(*(const QRect *)x[1].x_voidp,(QPainter*)x[2].x_voidp);
    }
    void x_48(xargs *x) {
	// drawCanvasArea(const QRect&)
	this->QCanvas::drawCanvasArea(*(const QRect *)x[1].x_voidp);
    }
    void x_49(xargs *x) {
	// drawViewArea(QCanvasView*, QPainter*, const QRect&, bool)
	this->QCanvas::drawViewArea((QCanvasView*)x[1].x_voidp,(QPainter*)x[2].x_voidp,*(const QRect *)x[3].x_voidp,(bool)x[4].x_bool);
    }
    void x_50(xargs *x) {
	// addItem(QCanvasItem*)
	this->QCanvas::addItem((QCanvasItem*)x[1].x_voidp);
    }
    void x_51(xargs *x) {
	// addAnimation(QCanvasItem*)
	this->QCanvas::addAnimation((QCanvasItem*)x[1].x_voidp);
    }
    void x_52(xargs *x) {
	// removeItem(QCanvasItem*)
	this->QCanvas::removeItem((QCanvasItem*)x[1].x_voidp);
    }
    void x_53(xargs *x) {
	// removeAnimation(QCanvasItem*)
	this->QCanvas::removeAnimation((QCanvasItem*)x[1].x_voidp);
    }
    void x_54(xargs *x) {
	// setAdvancePeriod(int)
	this->QCanvas::setAdvancePeriod((int)x[1].x_int);
    }
    void x_55(xargs *x) {
	// setUpdatePeriod(int)
	this->QCanvas::setUpdatePeriod((int)x[1].x_int);
    }
    void x_56(xargs *x) {
	// setDoubleBuffering(bool)
	this->QCanvas::setDoubleBuffering((bool)x[1].x_bool);
    }
    void x_57(xargs *x) {
	// advance()
	this->QCanvas::advance();
    }
    void x_58(xargs *x) {
	// update()
	this->QCanvas::update();
    }
    void x_59(xargs *x) {
	// resized()
	this->QCanvas::resized();
    }
    void x_60(xargs *x) {
	// drawBackground(QPainter&, const QRect&)
	this->QCanvas::drawBackground(*(QPainter *)x[1].x_voidp,*(const QRect *)x[2].x_voidp);
    }
    void x_61(xargs *x) {
	// drawForeground(QPainter&, const QRect&)
	this->QCanvas::drawForeground(*(QPainter *)x[1].x_voidp,*(const QRect *)x[2].x_voidp);
    }
    virtual void addAnimation(QCanvasItem* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 493, x)) return;
	this->QCanvas::addAnimation(x1);
    }
    virtual void addItem(QCanvasItem* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 492, x)) return;
	this->QCanvas::addItem(x1);
    }
    virtual void addView(QCanvasView* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 486, x)) return;
	this->QCanvas::addView(x1);
    }
    virtual void advance() {
	xargs x[1];
	if(call_method((void*)this, 499, x)) return;
	this->QCanvas::advance();
    }
    virtual bool checkConnectArgs(const char* x1, const QObject* x2, const char* x3) {
	xargs x[4];
	x[1].x_voidp = (void*)x1;
	x[2].x_voidp = (void*)x2;
	x[3].x_voidp = (void*)x3;
	if(call_method((void*)this, 5475, x)) return (bool)x[0].x_bool;
	return this->QObject::checkConnectArgs(x1, x2, x3);
    }
    virtual void childEvent(QChildEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5471, x)) return;
	this->QObject::childEvent(x1);
    }
    virtual void connectNotify(const char* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5473, x)) return;
	this->QObject::connectNotify(x1);
    }
    virtual void customEvent(QCustomEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5472, x)) return;
	this->QObject::customEvent(x1);
    }
    virtual void disconnectNotify(const char* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5474, x)) return;
	this->QObject::disconnectNotify(x1);
    }
    virtual void drawBackground(QPainter& x1, const QRect& x2) {
	xargs x[3];
	x[1].x_voidp = (void*)&x1;
	x[2].x_voidp = (void*)&x2;
	if(call_method((void*)this, 502, x)) return;
	this->QCanvas::drawBackground(x1, x2);
    }
    virtual void drawForeground(QPainter& x1, const QRect& x2) {
	xargs x[3];
	x[1].x_voidp = (void*)&x1;
	x[2].x_voidp = (void*)&x2;
	if(call_method((void*)this, 503, x)) return;
	this->QCanvas::drawForeground(x1, x2);
    }
    virtual bool event(QEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5410, x)) return (bool)x[0].x_bool;
	return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
	xargs x[3];
	x[1].x_voidp = (void*)x1;
	x[2].x_voidp = (void*)x2;
	if(call_method((void*)this, 5411, x)) return (bool)x[0].x_bool;
	return this->QObject::eventFilter(x1, x2);
    }
    virtual void insertChild(QObject* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5433, x)) return;
	this->QObject::insertChild(x1);
    }
    virtual QVariant property(const char* x1) const {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5447, x)) {
	    QVariant *xptr = (QVariant *)x[0].x_voidp;
	    QVariant xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QObject::property(x1);
    }
    virtual void removeAnimation(QCanvasItem* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 495, x)) return;
	this->QCanvas::removeAnimation(x1);
    }
    virtual void removeChild(QObject* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5434, x)) return;
	this->QObject::removeChild(x1);
    }
    virtual void removeItem(QCanvasItem* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 494, x)) return;
	this->QCanvas::removeItem(x1);
    }
    virtual void removeView(QCanvasView* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 487, x)) return;
	this->QCanvas::removeView(x1);
    }
    virtual void resize(int x1, int x2) {
	xargs x[3];
	x[1].x_int = (int)x1;
	x[2].x_int = (int)x2;
	if(call_method((void*)this, 458, x)) return;
	this->QCanvas::resize(x1, x2);
    }
    virtual void retune(int x1, int x2) {
	xargs x[3];
	x[1].x_int = (int)x1;
	x[2].x_int = (int)x2;
	if(call_method((void*)this, 468, x)) return;
	this->QCanvas::retune(x1, x2);
    }
    virtual void setAdvancePeriod(int x1) {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 496, x)) return;
	this->QCanvas::setAdvancePeriod(x1);
    }
    virtual void setAllChanged() {
	xargs x[1];
	if(call_method((void*)this, 473, x)) return;
	this->QCanvas::setAllChanged();
    }
    virtual void setBackgroundColor(const QColor& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 450, x)) return;
	this->QCanvas::setBackgroundColor(x1);
    }
    virtual void setBackgroundPixmap(const QPixmap& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 448, x)) return;
	this->QCanvas::setBackgroundPixmap(x1);
    }
    virtual void setChanged(const QRect& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 474, x)) return;
	this->QCanvas::setChanged(x1);
    }
    virtual void setChangedChunk(int x1, int x2) {
	xargs x[3];
	x[1].x_int = (int)x1;
	x[2].x_int = (int)x2;
	if(call_method((void*)this, 471, x)) return;
	this->QCanvas::setChangedChunk(x1, x2);
    }
    virtual void setChangedChunkContaining(int x1, int x2) {
	xargs x[3];
	x[1].x_int = (int)x1;
	x[2].x_int = (int)x2;
	if(call_method((void*)this, 472, x)) return;
	this->QCanvas::setChangedChunkContaining(x1, x2);
    }
    virtual void setDoubleBuffering(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 498, x)) return;
	this->QCanvas::setDoubleBuffering(x1);
    }
    virtual void setName(const char* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5416, x)) return;
	this->QObject::setName(x1);
    }
    virtual bool setProperty(const char* x1, const QVariant& x2) {
	xargs x[3];
	x[1].x_voidp = (void*)x1;
	x[2].x_voidp = (void*)&x2;
	if(call_method((void*)this, 5446, x)) return (bool)x[0].x_bool;
	return this->QObject::setProperty(x1, x2);
    }
    virtual void setTile(int x1, int x2, int x3) {
	xargs x[4];
	x[1].x_int = (int)x1;
	x[2].x_int = (int)x2;
	x[3].x_int = (int)x3;
	if(call_method((void*)this, 452, x)) return;
	this->QCanvas::setTile(x1, x2, x3);
    }
    virtual void setTiles(QPixmap x1, int x2, int x3, int x4, int x5) {
	xargs x[6];
	x[1].x_voidp = (void*)&x1;
	x[2].x_int = (int)x2;
	x[3].x_int = (int)x3;
	x[4].x_int = (int)x4;
	x[5].x_int = (int)x5;
	if(call_method((void*)this, 447, x)) return;
	this->QCanvas::setTiles(x1, x2, x3, x4, x5);
    }
    virtual void setUnchanged(const QRect& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 475, x)) return;
	this->QCanvas::setUnchanged(x1);
    }
    virtual void setUpdatePeriod(int x1) {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 497, x)) return;
	this->QCanvas::setUpdatePeriod(x1);
    }
    virtual void timerEvent(QTimerEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5470, x)) return;
	this->QObject::timerEvent(x1);
    }
    virtual void update() {
	xargs x[1];
	if(call_method((void*)this, 500, x)) return;
	this->QCanvas::update();
    }
    ~x_QCanvas() {}
};
void xcall_QCanvas(xargs *x, void *s, int xi) {
    x_QCanvas *xself = (x_QCanvas*)s;
    switch(xi) {
	case 0: x_QCanvas::x_0(x);	break;
	case 1: x_QCanvas::x_1(x);	break;
	case 2: x_QCanvas::x_2(x);	break;
	case 3: x_QCanvas::x_3(x);	break;
	case 4: x_QCanvas::x_4(x);	break;
	case 5: xself->x_5(x);	break;
	case 6: xself->x_6(x);	break;
	case 7: xself->x_7(x);	break;
	case 8: xself->x_8(x);	break;
	case 9: xself->x_9(x);	break;
	case 10: xself->x_10(x);	break;
	case 11: xself->x_11(x);	break;
	case 12: xself->x_12(x);	break;
	case 13: xself->x_13(x);	break;
	case 14: xself->x_14(x);	break;
	case 15: xself->x_15(x);	break;
	case 16: xself->x_16(x);	break;
	case 17: xself->x_17(x);	break;
	case 18: xself->x_18(x);	break;
	case 19: xself->x_19(x);	break;
	case 20: xself->x_20(x);	break;
	case 21: xself->x_21(x);	break;
	case 22: xself->x_22(x);	break;
	case 23: xself->x_23(x);	break;
	case 24: xself->x_24(x);	break;
	case 25: xself->x_25(x);	break;
	case 26: xself->x_26(x);	break;
	case 27: xself->x_27(x);	break;
	case 28: xself->x_28(x);	break;
	case 29: xself->x_29(x);	break;
	case 30: xself->x_30(x);	break;
	case 31: xself->x_31(x);	break;
	case 32: xself->x_32(x);	break;
	case 33: xself->x_33(x);	break;
	case 34: xself->x_34(x);	break;
	case 35: xself->x_35(x);	break;
	case 36: xself->x_36(x);	break;
	case 37: xself->x_37(x);	break;
	case 38: xself->x_38(x);	break;
	case 39: xself->x_39(x);	break;
	case 40: xself->x_40(x);	break;
	case 41: xself->x_41(x);	break;
	case 42: xself->x_42(x);	break;
	case 43: xself->x_43(x);	break;
	case 44: xself->x_44(x);	break;
	case 45: xself->x_45(x);	break;
	case 46: xself->x_46(x);	break;
	case 47: xself->x_47(x);	break;
	case 48: xself->x_48(x);	break;
	case 49: xself->x_49(x);	break;
	case 50: xself->x_50(x);	break;
	case 51: xself->x_51(x);	break;
	case 52: xself->x_52(x);	break;
	case 53: xself->x_53(x);	break;
	case 54: xself->x_54(x);	break;
	case 55: xself->x_55(x);	break;
	case 56: xself->x_56(x);	break;
	case 57: xself->x_57(x);	break;
	case 58: xself->x_58(x);	break;
	case 59: xself->x_59(x);	break;
	case 60: xself->x_60(x);	break;
	case 61: xself->x_61(x);	break;
	case 62: delete (QCanvas*)xself;	break;
    }
}
