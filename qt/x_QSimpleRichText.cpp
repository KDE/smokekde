//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qpoint.h>
#include <qcolor.h>
#include <qsimplerichtext.h>
#include <qfont.h>
#include <qstring.h>
#include <qregion.h>
#include <qpalette.h>
#include <qrect.h>

class x_QSimpleRichText : public QSimpleRichText {
public:
    static void x_0(xargs *x) {
	// QSimpleRichText(const QString&, const QFont&, const QString&, const QStyleSheet*)
	x_QSimpleRichText* xret = new x_QSimpleRichText(*(const QString *)x[1].x_voidp,*(const QFont *)x[2].x_voidp,*(const QString *)x[3].x_voidp,(const QStyleSheet*)x[4].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QSimpleRichText(const QString& x1, const QFont& x2, const QString& x3, const QStyleSheet* x4) : QSimpleRichText(x1, x2, x3, x4) {
    }
    static void x_1(xargs *x) {
	// QSimpleRichText(const QString&, const QFont&, const QString&)
	x_QSimpleRichText* xret = new x_QSimpleRichText(*(const QString *)x[1].x_voidp,*(const QFont *)x[2].x_voidp,*(const QString *)x[3].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QSimpleRichText(const QString& x1, const QFont& x2, const QString& x3) : QSimpleRichText(x1, x2, x3) {
    }
    static void x_2(xargs *x) {
	// QSimpleRichText(const QString&, const QFont&)
	x_QSimpleRichText* xret = new x_QSimpleRichText(*(const QString *)x[1].x_voidp,*(const QFont *)x[2].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QSimpleRichText(const QString& x1, const QFont& x2) : QSimpleRichText(x1, x2) {
    }
    static void x_3(xargs *x) {
	// QSimpleRichText(const QString&, const QFont&, const QString&, const QStyleSheet*, const QMimeSourceFactory*, int, const QColor&, bool)
	x_QSimpleRichText* xret = new x_QSimpleRichText(*(const QString *)x[1].x_voidp,*(const QFont *)x[2].x_voidp,*(const QString *)x[3].x_voidp,(const QStyleSheet*)x[4].x_voidp,(const QMimeSourceFactory*)x[5].x_voidp,(int)x[6].x_int,*(const QColor *)x[7].x_voidp,(bool)x[8].x_bool);
	x[0].x_voidp = (void*)xret;
    }
    x_QSimpleRichText(const QString& x1, const QFont& x2, const QString& x3, const QStyleSheet* x4, const QMimeSourceFactory* x5, int x6, const QColor& x7, bool x8) : QSimpleRichText(x1, x2, x3, x4, x5, x6, x7, x8) {
    }
    static void x_4(xargs *x) {
	// QSimpleRichText(const QString&, const QFont&, const QString&, const QStyleSheet*, const QMimeSourceFactory*, int, const QColor&)
	x_QSimpleRichText* xret = new x_QSimpleRichText(*(const QString *)x[1].x_voidp,*(const QFont *)x[2].x_voidp,*(const QString *)x[3].x_voidp,(const QStyleSheet*)x[4].x_voidp,(const QMimeSourceFactory*)x[5].x_voidp,(int)x[6].x_int,*(const QColor *)x[7].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QSimpleRichText(const QString& x1, const QFont& x2, const QString& x3, const QStyleSheet* x4, const QMimeSourceFactory* x5, int x6, const QColor& x7) : QSimpleRichText(x1, x2, x3, x4, x5, x6, x7) {
    }
    static void x_5(xargs *x) {
	// QSimpleRichText(const QString&, const QFont&, const QString&, const QStyleSheet*, const QMimeSourceFactory*, int)
	x_QSimpleRichText* xret = new x_QSimpleRichText(*(const QString *)x[1].x_voidp,*(const QFont *)x[2].x_voidp,*(const QString *)x[3].x_voidp,(const QStyleSheet*)x[4].x_voidp,(const QMimeSourceFactory*)x[5].x_voidp,(int)x[6].x_int);
	x[0].x_voidp = (void*)xret;
    }
    x_QSimpleRichText(const QString& x1, const QFont& x2, const QString& x3, const QStyleSheet* x4, const QMimeSourceFactory* x5, int x6) : QSimpleRichText(x1, x2, x3, x4, x5, x6) {
    }
    static void x_6(xargs *x) {
	// QSimpleRichText(const QString&, const QFont&, const QString&, const QStyleSheet*, const QMimeSourceFactory*)
	x_QSimpleRichText* xret = new x_QSimpleRichText(*(const QString *)x[1].x_voidp,*(const QFont *)x[2].x_voidp,*(const QString *)x[3].x_voidp,(const QStyleSheet*)x[4].x_voidp,(const QMimeSourceFactory*)x[5].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QSimpleRichText(const QString& x1, const QFont& x2, const QString& x3, const QStyleSheet* x4, const QMimeSourceFactory* x5) : QSimpleRichText(x1, x2, x3, x4, x5) {
    }
    void x_7(xargs *x) {
	// setWidth(int)
	this->QSimpleRichText::setWidth((int)x[1].x_int);
    }
    void x_8(xargs *x) {
	// setWidth(QPainter*, int)
	this->QSimpleRichText::setWidth((QPainter*)x[1].x_voidp,(int)x[2].x_int);
    }
    void x_9(xargs *x) {
	// setDefaultFont(const QFont&)
	this->QSimpleRichText::setDefaultFont(*(const QFont *)x[1].x_voidp);
    }
    void x_10(xargs *x) const {
	// width()
	int xret = this->QSimpleRichText::width();
	x[0].x_int = (int)xret;
    }
    void x_11(xargs *x) const {
	// widthUsed()
	int xret = this->QSimpleRichText::widthUsed();
	x[0].x_int = (int)xret;
    }
    void x_12(xargs *x) const {
	// height()
	int xret = this->QSimpleRichText::height();
	x[0].x_int = (int)xret;
    }
    void x_13(xargs *x) {
	// adjustSize()
	this->QSimpleRichText::adjustSize();
    }
    void x_14(xargs *x) const {
	// draw(QPainter*, int, int, const QRect&, const QColorGroup&, const QBrush*)
	this->QSimpleRichText::draw((QPainter*)x[1].x_voidp,(int)x[2].x_int,(int)x[3].x_int,*(const QRect *)x[4].x_voidp,*(const QColorGroup *)x[5].x_voidp,(const QBrush*)x[6].x_voidp);
    }
    void x_15(xargs *x) const {
	// draw(QPainter*, int, int, const QRect&, const QColorGroup&)
	this->QSimpleRichText::draw((QPainter*)x[1].x_voidp,(int)x[2].x_int,(int)x[3].x_int,*(const QRect *)x[4].x_voidp,*(const QColorGroup *)x[5].x_voidp);
    }
    void x_16(xargs *x) const {
	// draw(QPainter*, int, int, const QRegion&, const QColorGroup&, const QBrush*)
	this->QSimpleRichText::draw((QPainter*)x[1].x_voidp,(int)x[2].x_int,(int)x[3].x_int,*(const QRegion *)x[4].x_voidp,*(const QColorGroup *)x[5].x_voidp,(const QBrush*)x[6].x_voidp);
    }
    void x_17(xargs *x) const {
	// draw(QPainter*, int, int, const QRegion&, const QColorGroup&)
	this->QSimpleRichText::draw((QPainter*)x[1].x_voidp,(int)x[2].x_int,(int)x[3].x_int,*(const QRegion *)x[4].x_voidp,*(const QColorGroup *)x[5].x_voidp);
    }
    void x_18(xargs *x) const {
	// context()
	QString xret = this->QSimpleRichText::context();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_19(xargs *x) const {
	// anchorAt(const QPoint&)
	QString xret = this->QSimpleRichText::anchorAt(*(const QPoint *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_20(xargs *x) const {
	// inText(const QPoint&)
	bool xret = this->QSimpleRichText::inText(*(const QPoint *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    ~x_QSimpleRichText() {}
};
void xcall_QSimpleRichText(xargs *x, void *s, int xi) {
    x_QSimpleRichText *xself = (x_QSimpleRichText*)s;
    switch(xi) {
	case 0: x_QSimpleRichText::x_0(x);	break;
	case 1: x_QSimpleRichText::x_1(x);	break;
	case 2: x_QSimpleRichText::x_2(x);	break;
	case 3: x_QSimpleRichText::x_3(x);	break;
	case 4: x_QSimpleRichText::x_4(x);	break;
	case 5: x_QSimpleRichText::x_5(x);	break;
	case 6: x_QSimpleRichText::x_6(x);	break;
	case 7: xself->x_7(x);	break;
	case 8: xself->x_8(x);	break;
	case 9: xself->x_9(x);	break;
	case 10: xself->x_10(x);	break;
	case 11: xself->x_11(x);	break;
	case 12: xself->x_12(x);	break;
	case 13: xself->x_13(x);	break;
	case 14: xself->x_14(x);	break;
	case 15: xself->x_15(x);	break;
	case 16: xself->x_16(x);	break;
	case 17: xself->x_17(x);	break;
	case 18: xself->x_18(x);	break;
	case 19: xself->x_19(x);	break;
	case 20: xself->x_20(x);	break;
	case 21: delete (QSimpleRichText*)xself;	break;
    }
}
