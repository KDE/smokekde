//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qpoint.h>
#include <qregion.h>
#include <qwmatrix.h>
#include <qpointarray.h>
#include <qrect.h>

class x_QWMatrix : public QWMatrix {
public:
    static void x_0(xargs *x) {
	// QWMatrix()
	x_QWMatrix* xret = new x_QWMatrix();
	x[0].x_voidp = (void*)xret;
    }
    x_QWMatrix() : QWMatrix() {
    }
    static void x_1(xargs *x) {
	// QWMatrix(double, double, double, double, double, double)
	x_QWMatrix* xret = new x_QWMatrix((double)x[1].x_double,(double)x[2].x_double,(double)x[3].x_double,(double)x[4].x_double,(double)x[5].x_double,(double)x[6].x_double);
	x[0].x_voidp = (void*)xret;
    }
    x_QWMatrix(double x1, double x2, double x3, double x4, double x5, double x6) : QWMatrix(x1, x2, x3, x4, x5, x6) {
    }
    void x_2(xargs *x) {
	// setMatrix(double, double, double, double, double, double)
	this->QWMatrix::setMatrix((double)x[1].x_double,(double)x[2].x_double,(double)x[3].x_double,(double)x[4].x_double,(double)x[5].x_double,(double)x[6].x_double);
    }
    void x_3(xargs *x) const {
	// m11()
	double xret = this->QWMatrix::m11();
	x[0].x_double = (double)xret;
    }
    void x_4(xargs *x) const {
	// m12()
	double xret = this->QWMatrix::m12();
	x[0].x_double = (double)xret;
    }
    void x_5(xargs *x) const {
	// m21()
	double xret = this->QWMatrix::m21();
	x[0].x_double = (double)xret;
    }
    void x_6(xargs *x) const {
	// m22()
	double xret = this->QWMatrix::m22();
	x[0].x_double = (double)xret;
    }
    void x_7(xargs *x) const {
	// dx()
	double xret = this->QWMatrix::dx();
	x[0].x_double = (double)xret;
    }
    void x_8(xargs *x) const {
	// dy()
	double xret = this->QWMatrix::dy();
	x[0].x_double = (double)xret;
    }
    void x_9(xargs *x) const {
	// map(int, int, int*, int*)
	this->QWMatrix::map((int)x[1].x_int,(int)x[2].x_int,(int*)x[3].x_voidp,(int*)x[4].x_voidp);
    }
    void x_10(xargs *x) const {
	// map(double, double, double*, double*)
	this->QWMatrix::map((double)x[1].x_double,(double)x[2].x_double,(double*)x[3].x_voidp,(double*)x[4].x_voidp);
    }
    void x_11(xargs *x) const {
	// mapRect(const QRect&)
	QRect xret = this->QWMatrix::mapRect(*(const QRect *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QRect(xret);
    }
    void x_12(xargs *x) const {
	// map(const QPoint&)
	QPoint xret = this->QWMatrix::map(*(const QPoint *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QPoint(xret);
    }
    void x_13(xargs *x) const {
	// map(const QRect&)
	QRect xret = this->QWMatrix::map(*(const QRect *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QRect(xret);
    }
    void x_14(xargs *x) const {
	// map(const QPointArray&)
	QPointArray xret = this->QWMatrix::map(*(const QPointArray *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QPointArray(xret);
    }
    void x_15(xargs *x) {
	// reset()
	this->QWMatrix::reset();
    }
    void x_16(xargs *x) const {
	// isIdentity()
	bool xret = this->QWMatrix::isIdentity();
	x[0].x_bool = (bool)xret;
    }
    void x_17(xargs *x) {
	// translate(double, double)
	QWMatrix& xret = this->QWMatrix::translate((double)x[1].x_double,(double)x[2].x_double);
	x[0].x_voidp = (void*)&xret;
    }
    void x_18(xargs *x) {
	// scale(double, double)
	QWMatrix& xret = this->QWMatrix::scale((double)x[1].x_double,(double)x[2].x_double);
	x[0].x_voidp = (void*)&xret;
    }
    void x_19(xargs *x) {
	// shear(double, double)
	QWMatrix& xret = this->QWMatrix::shear((double)x[1].x_double,(double)x[2].x_double);
	x[0].x_voidp = (void*)&xret;
    }
    void x_20(xargs *x) {
	// rotate(double)
	QWMatrix& xret = this->QWMatrix::rotate((double)x[1].x_double);
	x[0].x_voidp = (void*)&xret;
    }
    void x_21(xargs *x) const {
	// isInvertible()
	bool xret = this->QWMatrix::isInvertible();
	x[0].x_bool = (bool)xret;
    }
    void x_22(xargs *x) const {
	// invert(bool*)
	QWMatrix xret = this->QWMatrix::invert((bool*)x[1].x_voidp);
	x[0].x_voidp = (void*)new QWMatrix(xret);
    }
    void x_23(xargs *x) const {
	// invert()
	QWMatrix xret = this->QWMatrix::invert();
	x[0].x_voidp = (void*)new QWMatrix(xret);
    }
    void x_24(xargs *x) const {
	// operator==(const QWMatrix&)
	bool xret = this->QWMatrix::operator==(*(const QWMatrix *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_25(xargs *x) const {
	// operator!=(const QWMatrix&)
	bool xret = this->QWMatrix::operator!=(*(const QWMatrix *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_26(xargs *x) {
	// operator*=(const QWMatrix&)
	QWMatrix& xret = this->QWMatrix::operator*=(*(const QWMatrix *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_27(xargs *x) const {
	// operator *(const QPoint&)
	QPoint xret = this->QWMatrix::operator *(*(const QPoint *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QPoint(xret);
    }
    void x_28(xargs *x) const {
	// operator *(const QRect&)
	QRegion xret = this->QWMatrix::operator *(*(const QRect *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QRegion(xret);
    }
    void x_29(xargs *x) const {
	// operator *(const QRegion&)
	QRegion xret = this->QWMatrix::operator *(*(const QRegion *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QRegion(xret);
    }
    void x_30(xargs *x) const {
	// operator *(const QPointArray&)
	QPointArray xret = this->QWMatrix::operator *(*(const QPointArray *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QPointArray(xret);
    }
    ~x_QWMatrix() {}
};
void xcall_QWMatrix(xargs *x, void *s, int xi) {
    x_QWMatrix *xself = (x_QWMatrix*)s;
    switch(xi) {
	case 0: x_QWMatrix::x_0(x);	break;
	case 1: x_QWMatrix::x_1(x);	break;
	case 2: xself->x_2(x);	break;
	case 3: xself->x_3(x);	break;
	case 4: xself->x_4(x);	break;
	case 5: xself->x_5(x);	break;
	case 6: xself->x_6(x);	break;
	case 7: xself->x_7(x);	break;
	case 8: xself->x_8(x);	break;
	case 9: xself->x_9(x);	break;
	case 10: xself->x_10(x);	break;
	case 11: xself->x_11(x);	break;
	case 12: xself->x_12(x);	break;
	case 13: xself->x_13(x);	break;
	case 14: xself->x_14(x);	break;
	case 15: xself->x_15(x);	break;
	case 16: xself->x_16(x);	break;
	case 17: xself->x_17(x);	break;
	case 18: xself->x_18(x);	break;
	case 19: xself->x_19(x);	break;
	case 20: xself->x_20(x);	break;
	case 21: xself->x_21(x);	break;
	case 22: xself->x_22(x);	break;
	case 23: xself->x_23(x);	break;
	case 24: xself->x_24(x);	break;
	case 25: xself->x_25(x);	break;
	case 26: xself->x_26(x);	break;
	case 27: xself->x_27(x);	break;
	case 28: xself->x_28(x);	break;
	case 29: xself->x_29(x);	break;
	case 30: xself->x_30(x);	break;
    }
}
