//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qregion.h>
#include <qevent.h>
#include <qrect.h>

class x_QPaintEvent : public QPaintEvent {
public:
    static void x_0(xargs *x) {
	// QPaintEvent(const QRegion&, bool)
	x_QPaintEvent* xret = new x_QPaintEvent(*(const QRegion *)x[1].x_voidp,(bool)x[2].x_bool);
	x[0].x_voidp = (void*)xret;
    }
    x_QPaintEvent(const QRegion& x1, bool x2) : QPaintEvent(x1, x2) {
    }
    static void x_1(xargs *x) {
	// QPaintEvent(const QRegion&)
	x_QPaintEvent* xret = new x_QPaintEvent(*(const QRegion *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QPaintEvent(const QRegion& x1) : QPaintEvent(x1) {
    }
    static void x_2(xargs *x) {
	// QPaintEvent(const QRect&, bool)
	x_QPaintEvent* xret = new x_QPaintEvent(*(const QRect *)x[1].x_voidp,(bool)x[2].x_bool);
	x[0].x_voidp = (void*)xret;
    }
    x_QPaintEvent(const QRect& x1, bool x2) : QPaintEvent(x1, x2) {
    }
    static void x_3(xargs *x) {
	// QPaintEvent(const QRect&)
	x_QPaintEvent* xret = new x_QPaintEvent(*(const QRect *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QPaintEvent(const QRect& x1) : QPaintEvent(x1) {
    }
    void x_4(xargs *x) const {
	// rect()
	const QRect& xret = this->QPaintEvent::rect();
	x[0].x_voidp = (void*)&xret;
    }
    void x_5(xargs *x) const {
	// region()
	const QRegion& xret = this->QPaintEvent::region();
	x[0].x_voidp = (void*)&xret;
    }
    void x_6(xargs *x) const {
	// erased()
	bool xret = this->QPaintEvent::erased();
	x[0].x_bool = (bool)xret;
    }
    ~x_QPaintEvent() {}
};
void xcall_QPaintEvent(xargs *x, void *s, int xi) {
    x_QPaintEvent *xself = (x_QPaintEvent*)s;
    switch(xi) {
	case 0: x_QPaintEvent::x_0(x);	break;
	case 1: x_QPaintEvent::x_1(x);	break;
	case 2: x_QPaintEvent::x_2(x);	break;
	case 3: x_QPaintEvent::x_3(x);	break;
	case 4: xself->x_4(x);	break;
	case 5: xself->x_5(x);	break;
	case 6: xself->x_6(x);	break;
    }
}
