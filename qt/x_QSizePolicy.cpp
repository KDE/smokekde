//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qglobal.h>
#include <qsizepolicy.h>

class x_QSizePolicy : public QSizePolicy {
public:
    static void x_0(xargs *x) {
	x[0].x_long = (long)QSizePolicy::Fixed;
    }
    static void x_1(xargs *x) {
	x[0].x_long = (long)QSizePolicy::Minimum;
    }
    static void x_2(xargs *x) {
	x[0].x_long = (long)QSizePolicy::Maximum;
    }
    static void x_3(xargs *x) {
	x[0].x_long = (long)QSizePolicy::Preferred;
    }
    static void x_4(xargs *x) {
	x[0].x_long = (long)QSizePolicy::MinimumExpanding;
    }
    static void x_5(xargs *x) {
	x[0].x_long = (long)QSizePolicy::Expanding;
    }
    static void x_6(xargs *x) {
	x[0].x_long = (long)QSizePolicy::Ignored;
    }
    static void x_7(xargs *x) {
	x[0].x_long = (long)QSizePolicy::NoDirection;
    }
    static void x_8(xargs *x) {
	x[0].x_long = (long)QSizePolicy::Horizontally;
    }
    static void x_9(xargs *x) {
	x[0].x_long = (long)QSizePolicy::Vertically;
    }
    static void x_10(xargs *x) {
	x[0].x_long = (long)QSizePolicy::BothDirections;
    }
    static void x_11(xargs *x) {
	x[0].x_long = (long)QSizePolicy::Horizontal;
    }
    static void x_12(xargs *x) {
	x[0].x_long = (long)QSizePolicy::Vertical;
    }
    static void x_13(xargs *x) {
	// QSizePolicy()
	x_QSizePolicy* xret = new x_QSizePolicy();
	x[0].x_voidp = (void*)xret;
    }
    x_QSizePolicy() : QSizePolicy() {
    }
    static void x_14(xargs *x) {
	// QSizePolicy(QSizePolicy::SizeType, QSizePolicy::SizeType, bool)
	x_QSizePolicy* xret = new x_QSizePolicy((QSizePolicy::SizeType)x[1].x_long,(QSizePolicy::SizeType)x[2].x_long,(bool)x[3].x_bool);
	x[0].x_voidp = (void*)xret;
    }
    x_QSizePolicy(QSizePolicy::SizeType x1, QSizePolicy::SizeType x2, bool x3) : QSizePolicy(x1, x2, x3) {
    }
    static void x_15(xargs *x) {
	// QSizePolicy(QSizePolicy::SizeType, QSizePolicy::SizeType)
	x_QSizePolicy* xret = new x_QSizePolicy((QSizePolicy::SizeType)x[1].x_long,(QSizePolicy::SizeType)x[2].x_long);
	x[0].x_voidp = (void*)xret;
    }
    x_QSizePolicy(QSizePolicy::SizeType x1, QSizePolicy::SizeType x2) : QSizePolicy(x1, x2) {
    }
    static void x_16(xargs *x) {
	// QSizePolicy(QSizePolicy::SizeType, QSizePolicy::SizeType, uchar, uchar, bool)
	x_QSizePolicy* xret = new x_QSizePolicy((QSizePolicy::SizeType)x[1].x_long,(QSizePolicy::SizeType)x[2].x_long,*(uchar *)x[3].x_voidp,*(uchar *)x[4].x_voidp,(bool)x[5].x_bool);
	x[0].x_voidp = (void*)xret;
    }
    x_QSizePolicy(QSizePolicy::SizeType x1, QSizePolicy::SizeType x2, uchar x3, uchar x4, bool x5) : QSizePolicy(x1, x2, x3, x4, x5) {
    }
    static void x_17(xargs *x) {
	// QSizePolicy(QSizePolicy::SizeType, QSizePolicy::SizeType, uchar, uchar)
	x_QSizePolicy* xret = new x_QSizePolicy((QSizePolicy::SizeType)x[1].x_long,(QSizePolicy::SizeType)x[2].x_long,*(uchar *)x[3].x_voidp,*(uchar *)x[4].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QSizePolicy(QSizePolicy::SizeType x1, QSizePolicy::SizeType x2, uchar x3, uchar x4) : QSizePolicy(x1, x2, x3, x4) {
    }
    void x_18(xargs *x) const {
	// horData()
	QSizePolicy::SizeType xret = this->QSizePolicy::horData();
	x[0].x_long = (long)xret;
    }
    void x_19(xargs *x) const {
	// verData()
	QSizePolicy::SizeType xret = this->QSizePolicy::verData();
	x[0].x_long = (long)xret;
    }
    void x_20(xargs *x) const {
	// mayShrinkHorizontally()
	bool xret = this->QSizePolicy::mayShrinkHorizontally();
	x[0].x_bool = (bool)xret;
    }
    void x_21(xargs *x) const {
	// mayShrinkVertically()
	bool xret = this->QSizePolicy::mayShrinkVertically();
	x[0].x_bool = (bool)xret;
    }
    void x_22(xargs *x) const {
	// mayGrowHorizontally()
	bool xret = this->QSizePolicy::mayGrowHorizontally();
	x[0].x_bool = (bool)xret;
    }
    void x_23(xargs *x) const {
	// mayGrowVertically()
	bool xret = this->QSizePolicy::mayGrowVertically();
	x[0].x_bool = (bool)xret;
    }
    void x_24(xargs *x) const {
	// expanding()
	QSizePolicy::ExpandData xret = this->QSizePolicy::expanding();
	x[0].x_long = (long)xret;
    }
    void x_25(xargs *x) {
	// setHorData(QSizePolicy::SizeType)
	this->QSizePolicy::setHorData((QSizePolicy::SizeType)x[1].x_long);
    }
    void x_26(xargs *x) {
	// setVerData(QSizePolicy::SizeType)
	this->QSizePolicy::setVerData((QSizePolicy::SizeType)x[1].x_long);
    }
    void x_27(xargs *x) {
	// setHeightForWidth(bool)
	this->QSizePolicy::setHeightForWidth((bool)x[1].x_bool);
    }
    void x_28(xargs *x) const {
	// hasHeightForWidth()
	bool xret = this->QSizePolicy::hasHeightForWidth();
	x[0].x_bool = (bool)xret;
    }
    void x_29(xargs *x) const {
	// operator==(const QSizePolicy&)
	bool xret = this->QSizePolicy::operator==(*(const QSizePolicy *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_30(xargs *x) const {
	// operator!=(const QSizePolicy&)
	bool xret = this->QSizePolicy::operator!=(*(const QSizePolicy *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_31(xargs *x) const {
	// horStretch()
	uint xret = this->QSizePolicy::horStretch();
	x[0].x_uint = (uint)xret;
    }
    void x_32(xargs *x) const {
	// verStretch()
	uint xret = this->QSizePolicy::verStretch();
	x[0].x_uint = (uint)xret;
    }
    void x_33(xargs *x) {
	// setHorStretch(uchar)
	this->QSizePolicy::setHorStretch(*(uchar *)x[1].x_voidp);
    }
    void x_34(xargs *x) {
	// setVerStretch(uchar)
	this->QSizePolicy::setVerStretch(*(uchar *)x[1].x_voidp);
    }
    ~x_QSizePolicy() {}
};
void xcall_QSizePolicy(xargs *x, void *s, int xi) {
    x_QSizePolicy *xself = (x_QSizePolicy*)s;
    switch(xi) {
	case 0: x_QSizePolicy::x_0(x);	break;
	case 1: x_QSizePolicy::x_1(x);	break;
	case 2: x_QSizePolicy::x_2(x);	break;
	case 3: x_QSizePolicy::x_3(x);	break;
	case 4: x_QSizePolicy::x_4(x);	break;
	case 5: x_QSizePolicy::x_5(x);	break;
	case 6: x_QSizePolicy::x_6(x);	break;
	case 7: x_QSizePolicy::x_7(x);	break;
	case 8: x_QSizePolicy::x_8(x);	break;
	case 9: x_QSizePolicy::x_9(x);	break;
	case 10: x_QSizePolicy::x_10(x);	break;
	case 11: x_QSizePolicy::x_11(x);	break;
	case 12: x_QSizePolicy::x_12(x);	break;
	case 13: x_QSizePolicy::x_13(x);	break;
	case 14: x_QSizePolicy::x_14(x);	break;
	case 15: x_QSizePolicy::x_15(x);	break;
	case 16: x_QSizePolicy::x_16(x);	break;
	case 17: x_QSizePolicy::x_17(x);	break;
	case 18: xself->x_18(x);	break;
	case 19: xself->x_19(x);	break;
	case 20: xself->x_20(x);	break;
	case 21: xself->x_21(x);	break;
	case 22: xself->x_22(x);	break;
	case 23: xself->x_23(x);	break;
	case 24: xself->x_24(x);	break;
	case 25: xself->x_25(x);	break;
	case 26: xself->x_26(x);	break;
	case 27: xself->x_27(x);	break;
	case 28: xself->x_28(x);	break;
	case 29: xself->x_29(x);	break;
	case 30: xself->x_30(x);	break;
	case 31: xself->x_31(x);	break;
	case 32: xself->x_32(x);	break;
	case 33: xself->x_33(x);	break;
	case 34: xself->x_34(x);	break;
    }
}
