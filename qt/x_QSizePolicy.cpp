//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke.h>
#include <qt_smoke.h>
#include <qsizepolicy.h>

class x_QSizePolicy : public QSizePolicy {
public:
    static void x_0(Smoke::Stack x) {
	x[0].s_enum = (long)QSizePolicy::Fixed;
    }
    static void x_1(Smoke::Stack x) {
	x[0].s_enum = (long)QSizePolicy::Minimum;
    }
    static void x_2(Smoke::Stack x) {
	x[0].s_enum = (long)QSizePolicy::Maximum;
    }
    static void x_3(Smoke::Stack x) {
	x[0].s_enum = (long)QSizePolicy::Preferred;
    }
    static void x_4(Smoke::Stack x) {
	x[0].s_enum = (long)QSizePolicy::MinimumExpanding;
    }
    static void x_5(Smoke::Stack x) {
	x[0].s_enum = (long)QSizePolicy::Expanding;
    }
    static void x_6(Smoke::Stack x) {
	x[0].s_enum = (long)QSizePolicy::Ignored;
    }
    static void x_7(Smoke::Stack x) {
	x[0].s_enum = (long)QSizePolicy::NoDirection;
    }
    static void x_8(Smoke::Stack x) {
	x[0].s_enum = (long)QSizePolicy::Horizontally;
    }
    static void x_9(Smoke::Stack x) {
	x[0].s_enum = (long)QSizePolicy::Vertically;
    }
    static void x_10(Smoke::Stack x) {
	x[0].s_enum = (long)QSizePolicy::BothDirections;
    }
    static void x_11(Smoke::Stack x) {
	x[0].s_enum = (long)QSizePolicy::Horizontal;
    }
    static void x_12(Smoke::Stack x) {
	x[0].s_enum = (long)QSizePolicy::Vertical;
    }
    static void x_13(Smoke::Stack x) {
	// QSizePolicy()
	x_QSizePolicy* xret = new x_QSizePolicy();
	x[0].s_class = (void*)xret;
    }
    x_QSizePolicy() : QSizePolicy() {
    }
    static void x_14(Smoke::Stack x) {
	// QSizePolicy(QSizePolicy::SizeType, QSizePolicy::SizeType, bool)
	x_QSizePolicy* xret = new x_QSizePolicy((QSizePolicy::SizeType)x[1].s_enum,(QSizePolicy::SizeType)x[2].s_enum,(bool)x[3].s_bool);
	x[0].s_class = (void*)xret;
    }
    x_QSizePolicy(QSizePolicy::SizeType x1, QSizePolicy::SizeType x2, bool x3) : QSizePolicy(x1, x2, x3) {
    }
    static void x_15(Smoke::Stack x) {
	// QSizePolicy(QSizePolicy::SizeType, QSizePolicy::SizeType)
	x_QSizePolicy* xret = new x_QSizePolicy((QSizePolicy::SizeType)x[1].s_enum,(QSizePolicy::SizeType)x[2].s_enum);
	x[0].s_class = (void*)xret;
    }
    x_QSizePolicy(QSizePolicy::SizeType x1, QSizePolicy::SizeType x2) : QSizePolicy(x1, x2) {
    }
    static void x_16(Smoke::Stack x) {
	// QSizePolicy(QSizePolicy::SizeType, QSizePolicy::SizeType, uchar, uchar, bool)
	x_QSizePolicy* xret = new x_QSizePolicy((QSizePolicy::SizeType)x[1].s_enum,(QSizePolicy::SizeType)x[2].s_enum,(uchar)x[3].s_uchar,(uchar)x[4].s_uchar,(bool)x[5].s_bool);
	x[0].s_class = (void*)xret;
    }
    x_QSizePolicy(QSizePolicy::SizeType x1, QSizePolicy::SizeType x2, uchar x3, uchar x4, bool x5) : QSizePolicy(x1, x2, x3, x4, x5) {
    }
    static void x_17(Smoke::Stack x) {
	// QSizePolicy(QSizePolicy::SizeType, QSizePolicy::SizeType, uchar, uchar)
	x_QSizePolicy* xret = new x_QSizePolicy((QSizePolicy::SizeType)x[1].s_enum,(QSizePolicy::SizeType)x[2].s_enum,(uchar)x[3].s_uchar,(uchar)x[4].s_uchar);
	x[0].s_class = (void*)xret;
    }
    x_QSizePolicy(QSizePolicy::SizeType x1, QSizePolicy::SizeType x2, uchar x3, uchar x4) : QSizePolicy(x1, x2, x3, x4) {
    }
    void x_18(Smoke::Stack x) const {
	// horData()
	QSizePolicy::SizeType xret = this->QSizePolicy::horData();
	x[0].s_enum = xret;
    }
    void x_19(Smoke::Stack x) const {
	// verData()
	QSizePolicy::SizeType xret = this->QSizePolicy::verData();
	x[0].s_enum = xret;
    }
    void x_20(Smoke::Stack x) const {
	// mayShrinkHorizontally()
	bool xret = this->QSizePolicy::mayShrinkHorizontally();
	x[0].s_bool = xret;
    }
    void x_21(Smoke::Stack x) const {
	// mayShrinkVertically()
	bool xret = this->QSizePolicy::mayShrinkVertically();
	x[0].s_bool = xret;
    }
    void x_22(Smoke::Stack x) const {
	// mayGrowHorizontally()
	bool xret = this->QSizePolicy::mayGrowHorizontally();
	x[0].s_bool = xret;
    }
    void x_23(Smoke::Stack x) const {
	// mayGrowVertically()
	bool xret = this->QSizePolicy::mayGrowVertically();
	x[0].s_bool = xret;
    }
    void x_24(Smoke::Stack x) const {
	// expanding()
	QSizePolicy::ExpandData xret = this->QSizePolicy::expanding();
	x[0].s_enum = xret;
    }
    void x_25(Smoke::Stack x) {
	// setHorData(QSizePolicy::SizeType)
	this->QSizePolicy::setHorData((QSizePolicy::SizeType)x[1].s_enum);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_26(Smoke::Stack x) {
	// setVerData(QSizePolicy::SizeType)
	this->QSizePolicy::setVerData((QSizePolicy::SizeType)x[1].s_enum);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_27(Smoke::Stack x) {
	// setHeightForWidth(bool)
	this->QSizePolicy::setHeightForWidth((bool)x[1].s_bool);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_28(Smoke::Stack x) const {
	// hasHeightForWidth()
	bool xret = this->QSizePolicy::hasHeightForWidth();
	x[0].s_bool = xret;
    }
    void x_29(Smoke::Stack x) const {
	// operator==(const QSizePolicy&)
	bool xret = this->QSizePolicy::operator==(*(const QSizePolicy *)x[1].s_class);
	x[0].s_bool = xret;
    }
    void x_30(Smoke::Stack x) const {
	// operator!=(const QSizePolicy&)
	bool xret = this->QSizePolicy::operator!=(*(const QSizePolicy *)x[1].s_class);
	x[0].s_bool = xret;
    }
    void x_31(Smoke::Stack x) const {
	// horStretch()
	uint xret = this->QSizePolicy::horStretch();
	x[0].s_uint = xret;
    }
    void x_32(Smoke::Stack x) const {
	// verStretch()
	uint xret = this->QSizePolicy::verStretch();
	x[0].s_uint = xret;
    }
    void x_33(Smoke::Stack x) {
	// setHorStretch(uchar)
	this->QSizePolicy::setHorStretch((uchar)x[1].s_uchar);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_34(Smoke::Stack x) {
	// setVerStretch(uchar)
	this->QSizePolicy::setVerStretch((uchar)x[1].s_uchar);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    ~x_QSizePolicy() { qt_Smoke->binding->deleted(262, (void*)this); }
};
void xcall_QSizePolicy(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QSizePolicy *xself = (x_QSizePolicy*)obj;
    switch(xi) {
	case 0: x_QSizePolicy::x_0(args);	break;
	case 1: x_QSizePolicy::x_1(args);	break;
	case 2: x_QSizePolicy::x_2(args);	break;
	case 3: x_QSizePolicy::x_3(args);	break;
	case 4: x_QSizePolicy::x_4(args);	break;
	case 5: x_QSizePolicy::x_5(args);	break;
	case 6: x_QSizePolicy::x_6(args);	break;
	case 7: x_QSizePolicy::x_7(args);	break;
	case 8: x_QSizePolicy::x_8(args);	break;
	case 9: x_QSizePolicy::x_9(args);	break;
	case 10: x_QSizePolicy::x_10(args);	break;
	case 11: x_QSizePolicy::x_11(args);	break;
	case 12: x_QSizePolicy::x_12(args);	break;
	case 13: x_QSizePolicy::x_13(args);	break;
	case 14: x_QSizePolicy::x_14(args);	break;
	case 15: x_QSizePolicy::x_15(args);	break;
	case 16: x_QSizePolicy::x_16(args);	break;
	case 17: x_QSizePolicy::x_17(args);	break;
	case 18: xself->x_18(args);	break;
	case 19: xself->x_19(args);	break;
	case 20: xself->x_20(args);	break;
	case 21: xself->x_21(args);	break;
	case 22: xself->x_22(args);	break;
	case 23: xself->x_23(args);	break;
	case 24: xself->x_24(args);	break;
	case 25: xself->x_25(args);	break;
	case 26: xself->x_26(args);	break;
	case 27: xself->x_27(args);	break;
	case 28: xself->x_28(args);	break;
	case 29: xself->x_29(args);	break;
	case 30: xself->x_30(args);	break;
	case 31: xself->x_31(args);	break;
	case 32: xself->x_32(args);	break;
	case 33: xself->x_33(args);	break;
	case 34: xself->x_34(args);	break;
	case 35: delete (QSizePolicy*)xself;	break;
    }
}
