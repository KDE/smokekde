//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke.h>
#include <qt_smoke.h>
#include <qvariant.h>
#include <qsound.h>
#include <qstring.h>

class x_QSound : public QSound {
public:
    void x_0(Smoke::Stack x) const {
	// metaObject()
	QMetaObject* xret = this->QSound::metaObject();
	x[0].s_class = (void*)xret;
    }
    void x_1(Smoke::Stack x) const {
	// className()
	const char* xret = this->QSound::className();
	x[0].s_voidp = (void*)xret;
    }
    void x_2(Smoke::Stack x) {
	// qt_cast(const char*)
	void* xret = this->QSound::qt_cast((const char*)x[1].s_voidp);
	x[0].s_voidp = (void*)xret;
    }
    void x_3(Smoke::Stack x) {
	// qt_invoke(int, QUObject*)
	bool xret = this->QSound::qt_invoke((int)x[1].s_int,(QUObject*)x[2].s_voidp);
	x[0].s_bool = xret;
    }
    void x_4(Smoke::Stack x) {
	// qt_emit(int, QUObject*)
	bool xret = this->QSound::qt_emit((int)x[1].s_int,(QUObject*)x[2].s_voidp);
	x[0].s_bool = xret;
    }
    void x_5(Smoke::Stack x) {
	// qt_property(int, int, QVariant*)
	bool xret = this->QSound::qt_property((int)x[1].s_int,(int)x[2].s_int,(QVariant*)x[3].s_class);
	x[0].s_bool = xret;
    }
    void x_6(Smoke::Stack x) {
	// qObject()
	QObject* xret = this->QSound::qObject();
	x[0].s_class = (void*)xret;
    }
    static void x_7(Smoke::Stack x) {
	// QSound(const QString&, QObject*, const char*)
	x_QSound* xret = new x_QSound(*(const QString *)x[1].s_voidp,(QObject*)x[2].s_class,(const char*)x[3].s_voidp);
	x[0].s_class = (void*)xret;
    }
    x_QSound(const QString& x1, QObject* x2, const char* x3) : QSound(x1, x2, x3) {
    }
    static void x_8(Smoke::Stack x) {
	// QSound(const QString&, QObject*)
	x_QSound* xret = new x_QSound(*(const QString *)x[1].s_voidp,(QObject*)x[2].s_class);
	x[0].s_class = (void*)xret;
    }
    x_QSound(const QString& x1, QObject* x2) : QSound(x1, x2) {
    }
    static void x_9(Smoke::Stack x) {
	// QSound(const QString&)
	x_QSound* xret = new x_QSound(*(const QString *)x[1].s_voidp);
	x[0].s_class = (void*)xret;
    }
    x_QSound(const QString& x1) : QSound(x1) {
    }
    void x_10(Smoke::Stack x) const {
	// loops()
	int xret = this->QSound::loops();
	x[0].s_int = xret;
    }
    void x_11(Smoke::Stack x) const {
	// loopsRemaining()
	int xret = this->QSound::loopsRemaining();
	x[0].s_int = xret;
    }
    void x_12(Smoke::Stack x) {
	// setLoops(int)
	this->QSound::setLoops((int)x[1].s_int);
	(void)x; // noop (for compiler warning)
    }
    void x_13(Smoke::Stack x) const {
	// fileName()
	QString xret = this->QSound::fileName();
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_14(Smoke::Stack x) const {
	// isFinished()
	bool xret = this->QSound::isFinished();
	x[0].s_bool = xret;
    }
    void x_15(Smoke::Stack x) {
	// play()
	this->QSound::play();
	(void)x; // noop (for compiler warning)
    }
    void x_16(Smoke::Stack x) {
	// stop()
	this->QSound::stop();
	(void)x; // noop (for compiler warning)
    }
    static void x_17(Smoke::Stack x) {
	// staticMetaObject()
	QMetaObject* xret = QSound::staticMetaObject();
	x[0].s_class = (void*)xret;
    }
    static void x_18(Smoke::Stack x) {
	// tr(const char*, const char*)
	QString xret = QSound::tr((const char*)x[1].s_voidp,(const char*)x[2].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    static void x_19(Smoke::Stack x) {
	// tr(const char*)
	QString xret = QSound::tr((const char*)x[1].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    static void x_20(Smoke::Stack x) {
	// trUtf8(const char*, const char*)
	QString xret = QSound::trUtf8((const char*)x[1].s_voidp,(const char*)x[2].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    static void x_21(Smoke::Stack x) {
	// trUtf8(const char*)
	QString xret = QSound::trUtf8((const char*)x[1].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    static void x_22(Smoke::Stack x) {
	// isAvailable()
	bool xret = QSound::isAvailable();
	x[0].s_bool = xret;
    }
    static void x_23(Smoke::Stack x) {
	// play(const QString&)
	QSound::play(*(const QString *)x[1].s_voidp);
	(void)x; // noop (for compiler warning)
    }
    static void x_24(Smoke::Stack x) {
	// available()
	bool xret = QSound::available();
	x[0].s_bool = xret;
    }
    virtual bool checkConnectArgs(const char* x1, const QObject* x2, const char* x3) {
	Smoke::StackItem x[4];
	x[1].s_voidp = (void*)x1;
	x[2].s_class = (void*)x2;
	x[3].s_voidp = (void*)x3;
	if(qt_Smoke->binding->callMethod(6521, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QObject::checkConnectArgs(x1, x2, x3);
    }
    virtual void childEvent(QChildEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(6517, (void*)this, x)) return;
	this->QObject::childEvent(x1);
    }
    virtual const char* className() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(8462, (void*)this, x)) return (const char*)x[0].s_class;
	return this->QSound::className();
    }
    virtual void connectNotify(const char* x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(6519, (void*)this, x)) return;
	this->QObject::connectNotify(x1);
    }
    virtual void customEvent(QCustomEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(6518, (void*)this, x)) return;
	this->QObject::customEvent(x1);
    }
    virtual void disconnectNotify(const char* x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(6520, (void*)this, x)) return;
	this->QObject::disconnectNotify(x1);
    }
    virtual bool event(QEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(6455, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
	Smoke::StackItem x[3];
	x[1].s_class = (void*)x1;
	x[2].s_class = (void*)x2;
	if(qt_Smoke->binding->callMethod(6456, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QObject::eventFilter(x1, x2);
    }
    virtual void insertChild(QObject* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(6478, (void*)this, x)) return;
	this->QObject::insertChild(x1);
    }
    virtual QMetaObject* metaObject() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(8461, (void*)this, x)) return (QMetaObject*)x[0].s_class;
	return this->QSound::metaObject();
    }
    virtual QVariant property(const char* x1) const {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(6492, (void*)this, x)) {
	    QVariant *xptr = (QVariant *)x[0].s_class;
	    QVariant xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QObject::property(x1);
    }
    virtual void* qt_cast(const char* x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(8463, (void*)this, x)) return (void*)x[0].s_voidp;
	return this->QSound::qt_cast(x1);
    }
    virtual bool qt_emit(int x1, QUObject* x2) {
	Smoke::StackItem x[3];
	x[1].s_int = x1;
	x[2].s_voidp = (void*)x2;
	if(qt_Smoke->binding->callMethod(8465, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QSound::qt_emit(x1, x2);
    }
    virtual bool qt_invoke(int x1, QUObject* x2) {
	Smoke::StackItem x[3];
	x[1].s_int = x1;
	x[2].s_voidp = (void*)x2;
	if(qt_Smoke->binding->callMethod(8464, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QSound::qt_invoke(x1, x2);
    }
    virtual bool qt_property(int x1, int x2, QVariant* x3) {
	Smoke::StackItem x[4];
	x[1].s_int = x1;
	x[2].s_int = x2;
	x[3].s_class = (void*)x3;
	if(qt_Smoke->binding->callMethod(8466, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QSound::qt_property(x1, x2, x3);
    }
    virtual void removeChild(QObject* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(6479, (void*)this, x)) return;
	this->QObject::removeChild(x1);
    }
    virtual void setName(const char* x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(6461, (void*)this, x)) return;
	this->QObject::setName(x1);
    }
    virtual bool setProperty(const char* x1, const QVariant& x2) {
	Smoke::StackItem x[3];
	x[1].s_voidp = (void*)x1;
	x[2].s_class = (void*)&x2;
	if(qt_Smoke->binding->callMethod(6491, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QObject::setProperty(x1, x2);
    }
    virtual void timerEvent(QTimerEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(6516, (void*)this, x)) return;
	this->QObject::timerEvent(x1);
    }
    ~x_QSound() { qt_Smoke->binding->deleted(271, (void*)this); }
};
void xcall_QSound(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QSound *xself = (x_QSound*)obj;
    switch(xi) {
	case 0: xself->x_0(args);	break;
	case 1: xself->x_1(args);	break;
	case 2: xself->x_2(args);	break;
	case 3: xself->x_3(args);	break;
	case 4: xself->x_4(args);	break;
	case 5: xself->x_5(args);	break;
	case 6: xself->x_6(args);	break;
	case 7: x_QSound::x_7(args);	break;
	case 8: x_QSound::x_8(args);	break;
	case 9: x_QSound::x_9(args);	break;
	case 10: xself->x_10(args);	break;
	case 11: xself->x_11(args);	break;
	case 12: xself->x_12(args);	break;
	case 13: xself->x_13(args);	break;
	case 14: xself->x_14(args);	break;
	case 15: xself->x_15(args);	break;
	case 16: xself->x_16(args);	break;
	case 17: x_QSound::x_17(args);	break;
	case 18: x_QSound::x_18(args);	break;
	case 19: x_QSound::x_19(args);	break;
	case 20: x_QSound::x_20(args);	break;
	case 21: x_QSound::x_21(args);	break;
	case 22: x_QSound::x_22(args);	break;
	case 23: x_QSound::x_23(args);	break;
	case 24: x_QSound::x_24(args);	break;
	case 25: delete (QSound*)xself;	break;
    }
}
