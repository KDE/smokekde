//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qfontdatabase.h>
#include <qfont.h>
#include <qstring.h>
#include <qstringlist.h>

class x_QFontDatabase : public QFontDatabase {
public:
    static void x_0(xargs *x) {
	// QFontDatabase()
	x_QFontDatabase* xret = new x_QFontDatabase();
	x[0].x_voidp = (void*)xret;
    }
    x_QFontDatabase() : QFontDatabase() {
    }
    void x_1(xargs *x) const {
	// families()
	QStringList xret = this->QFontDatabase::families();
	x[0].x_voidp = (void*)new QStringList(xret);
    }
    void x_2(xargs *x) const {
	// styles(const QString&)
	QStringList xret = this->QFontDatabase::styles(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QStringList(xret);
    }
    void x_3(xargs *x) {
	// pointSizes(const QString&, const QString&)
	QValueList<int> xret = this->QFontDatabase::pointSizes(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp);
	x[0].x_voidp = (void*)new QValueList<int>(xret);
    }
    void x_4(xargs *x) {
	// pointSizes(const QString&)
	QValueList<int> xret = this->QFontDatabase::pointSizes(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QValueList<int>(xret);
    }
    void x_5(xargs *x) {
	// smoothSizes(const QString&, const QString&)
	QValueList<int> xret = this->QFontDatabase::smoothSizes(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp);
	x[0].x_voidp = (void*)new QValueList<int>(xret);
    }
    void x_6(xargs *x) {
	// styleString(const QFont&)
	QString xret = this->QFontDatabase::styleString(*(const QFont *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_7(xargs *x) {
	// font(const QString&, const QString&, int)
	QFont xret = this->QFontDatabase::font(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp,(int)x[3].x_int);
	x[0].x_voidp = (void*)new QFont(xret);
    }
    void x_8(xargs *x) const {
	// isBitmapScalable(const QString&, const QString&)
	bool xret = this->QFontDatabase::isBitmapScalable(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_9(xargs *x) const {
	// isBitmapScalable(const QString&)
	bool xret = this->QFontDatabase::isBitmapScalable(*(const QString *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_10(xargs *x) const {
	// isSmoothlyScalable(const QString&, const QString&)
	bool xret = this->QFontDatabase::isSmoothlyScalable(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_11(xargs *x) const {
	// isSmoothlyScalable(const QString&)
	bool xret = this->QFontDatabase::isSmoothlyScalable(*(const QString *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_12(xargs *x) const {
	// isScalable(const QString&, const QString&)
	bool xret = this->QFontDatabase::isScalable(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_13(xargs *x) const {
	// isScalable(const QString&)
	bool xret = this->QFontDatabase::isScalable(*(const QString *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_14(xargs *x) const {
	// isFixedPitch(const QString&, const QString&)
	bool xret = this->QFontDatabase::isFixedPitch(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_15(xargs *x) const {
	// isFixedPitch(const QString&)
	bool xret = this->QFontDatabase::isFixedPitch(*(const QString *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_16(xargs *x) const {
	// italic(const QString&, const QString&)
	bool xret = this->QFontDatabase::italic(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_17(xargs *x) const {
	// bold(const QString&, const QString&)
	bool xret = this->QFontDatabase::bold(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_18(xargs *x) const {
	// weight(const QString&, const QString&)
	int xret = this->QFontDatabase::weight(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp);
	x[0].x_int = (int)xret;
    }
    void x_19(xargs *x) const {
	// families(bool)
	QStringList xret = this->QFontDatabase::families((bool)x[1].x_bool);
	x[0].x_voidp = (void*)new QStringList(xret);
    }
    void x_20(xargs *x) const {
	// styles(const QString&, const QString&)
	QStringList xret = this->QFontDatabase::styles(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp);
	x[0].x_voidp = (void*)new QStringList(xret);
    }
    void x_21(xargs *x) {
	// pointSizes(const QString&, const QString&, const QString&)
	QValueList<int> xret = this->QFontDatabase::pointSizes(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp,*(const QString *)x[3].x_voidp);
	x[0].x_voidp = (void*)new QValueList<int>(xret);
    }
    void x_22(xargs *x) {
	// smoothSizes(const QString&, const QString&, const QString&)
	QValueList<int> xret = this->QFontDatabase::smoothSizes(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp,*(const QString *)x[3].x_voidp);
	x[0].x_voidp = (void*)new QValueList<int>(xret);
    }
    void x_23(xargs *x) {
	// font(const QString&, const QString&, int, const QString&)
	QFont xret = this->QFontDatabase::font(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp,(int)x[3].x_int,*(const QString *)x[4].x_voidp);
	x[0].x_voidp = (void*)new QFont(xret);
    }
    void x_24(xargs *x) const {
	// isBitmapScalable(const QString&, const QString&, const QString&)
	bool xret = this->QFontDatabase::isBitmapScalable(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp,*(const QString *)x[3].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_25(xargs *x) const {
	// isSmoothlyScalable(const QString&, const QString&, const QString&)
	bool xret = this->QFontDatabase::isSmoothlyScalable(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp,*(const QString *)x[3].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_26(xargs *x) const {
	// isScalable(const QString&, const QString&, const QString&)
	bool xret = this->QFontDatabase::isScalable(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp,*(const QString *)x[3].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_27(xargs *x) const {
	// isFixedPitch(const QString&, const QString&, const QString&)
	bool xret = this->QFontDatabase::isFixedPitch(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp,*(const QString *)x[3].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_28(xargs *x) const {
	// italic(const QString&, const QString&, const QString&)
	bool xret = this->QFontDatabase::italic(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp,*(const QString *)x[3].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_29(xargs *x) const {
	// bold(const QString&, const QString&, const QString&)
	bool xret = this->QFontDatabase::bold(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp,*(const QString *)x[3].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_30(xargs *x) const {
	// weight(const QString&, const QString&, const QString&)
	int xret = this->QFontDatabase::weight(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp,*(const QString *)x[3].x_voidp);
	x[0].x_int = (int)xret;
    }
    static void x_31(xargs *x) {
	// standardSizes()
	QValueList<int> xret = QFontDatabase::standardSizes();
	x[0].x_voidp = (void*)new QValueList<int>(xret);
    }
    static void x_32(xargs *x) {
	// scriptName(QFont::Script)
	QString xret = QFontDatabase::scriptName((QFont::Script)x[1].x_long);
	x[0].x_voidp = (void*)new QString(xret);
    }
    static void x_33(xargs *x) {
	// scriptSample(QFont::Script)
	QString xret = QFontDatabase::scriptSample((QFont::Script)x[1].x_long);
	x[0].x_voidp = (void*)new QString(xret);
    }
    ~x_QFontDatabase() {}
};
void xcall_QFontDatabase(xargs *x, void *s, int xi) {
    x_QFontDatabase *xself = (x_QFontDatabase*)s;
    switch(xi) {
	case 0: x_QFontDatabase::x_0(x);	break;
	case 1: xself->x_1(x);	break;
	case 2: xself->x_2(x);	break;
	case 3: xself->x_3(x);	break;
	case 4: xself->x_4(x);	break;
	case 5: xself->x_5(x);	break;
	case 6: xself->x_6(x);	break;
	case 7: xself->x_7(x);	break;
	case 8: xself->x_8(x);	break;
	case 9: xself->x_9(x);	break;
	case 10: xself->x_10(x);	break;
	case 11: xself->x_11(x);	break;
	case 12: xself->x_12(x);	break;
	case 13: xself->x_13(x);	break;
	case 14: xself->x_14(x);	break;
	case 15: xself->x_15(x);	break;
	case 16: xself->x_16(x);	break;
	case 17: xself->x_17(x);	break;
	case 18: xself->x_18(x);	break;
	case 19: xself->x_19(x);	break;
	case 20: xself->x_20(x);	break;
	case 21: xself->x_21(x);	break;
	case 22: xself->x_22(x);	break;
	case 23: xself->x_23(x);	break;
	case 24: xself->x_24(x);	break;
	case 25: xself->x_25(x);	break;
	case 26: xself->x_26(x);	break;
	case 27: xself->x_27(x);	break;
	case 28: xself->x_28(x);	break;
	case 29: xself->x_29(x);	break;
	case 30: xself->x_30(x);	break;
	case 31: x_QFontDatabase::x_31(x);	break;
	case 32: x_QFontDatabase::x_32(x);	break;
	case 33: x_QFontDatabase::x_33(x);	break;
    }
}
