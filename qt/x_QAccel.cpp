//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qvariant.h>
#include <qkeysequence.h>
#include <qstring.h>
#include <qaccel.h>

class x_QAccel : public QAccel {
public:
    static void x_0(xargs *x) {
	// QAccel(QWidget*, const char*)
	x_QAccel* xret = new x_QAccel((QWidget*)x[1].x_voidp,(const char*)x[2].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QAccel(QWidget* x1, const char* x2) : QAccel(x1, x2) {
    }
    static void x_1(xargs *x) {
	// QAccel(QWidget*)
	x_QAccel* xret = new x_QAccel((QWidget*)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QAccel(QWidget* x1) : QAccel(x1) {
    }
    static void x_2(xargs *x) {
	// QAccel(QWidget*, QObject*, const char*)
	x_QAccel* xret = new x_QAccel((QWidget*)x[1].x_voidp,(QObject*)x[2].x_voidp,(const char*)x[3].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QAccel(QWidget* x1, QObject* x2, const char* x3) : QAccel(x1, x2, x3) {
    }
    static void x_3(xargs *x) {
	// QAccel(QWidget*, QObject*)
	x_QAccel* xret = new x_QAccel((QWidget*)x[1].x_voidp,(QObject*)x[2].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QAccel(QWidget* x1, QObject* x2) : QAccel(x1, x2) {
    }
    void x_4(xargs *x) const {
	// isEnabled()
	bool xret = this->QAccel::isEnabled();
	x[0].x_bool = (bool)xret;
    }
    void x_5(xargs *x) {
	// setEnabled(bool)
	this->QAccel::setEnabled((bool)x[1].x_bool);
    }
    void x_6(xargs *x) const {
	// count()
	uint xret = this->QAccel::count();
	x[0].x_uint = (uint)xret;
    }
    void x_7(xargs *x) {
	// insertItem(const QKeySequence&, int)
	int xret = this->QAccel::insertItem(*(const QKeySequence *)x[1].x_voidp,(int)x[2].x_int);
	x[0].x_int = (int)xret;
    }
    void x_8(xargs *x) {
	// insertItem(const QKeySequence&)
	int xret = this->QAccel::insertItem(*(const QKeySequence *)x[1].x_voidp);
	x[0].x_int = (int)xret;
    }
    void x_9(xargs *x) {
	// removeItem(int)
	this->QAccel::removeItem((int)x[1].x_int);
    }
    void x_10(xargs *x) {
	// clear()
	this->QAccel::clear();
    }
    void x_11(xargs *x) {
	// key(int)
	QKeySequence xret = this->QAccel::key((int)x[1].x_int);
	x[0].x_voidp = (void*)new QKeySequence(xret);
    }
    void x_12(xargs *x) const {
	// findKey(const QKeySequence&)
	int xret = this->QAccel::findKey(*(const QKeySequence *)x[1].x_voidp);
	x[0].x_int = (int)xret;
    }
    void x_13(xargs *x) const {
	// isItemEnabled(int)
	bool xret = this->QAccel::isItemEnabled((int)x[1].x_int);
	x[0].x_bool = (bool)xret;
    }
    void x_14(xargs *x) {
	// setItemEnabled(int, bool)
	this->QAccel::setItemEnabled((int)x[1].x_int,(bool)x[2].x_bool);
    }
    void x_15(xargs *x) {
	// connectItem(int, const QObject*, const char*)
	bool xret = this->QAccel::connectItem((int)x[1].x_int,(const QObject*)x[2].x_voidp,(const char*)x[3].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_16(xargs *x) {
	// disconnectItem(int, const QObject*, const char*)
	bool xret = this->QAccel::disconnectItem((int)x[1].x_int,(const QObject*)x[2].x_voidp,(const char*)x[3].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_17(xargs *x) {
	// repairEventFilter()
	this->QAccel::repairEventFilter();
    }
    void x_18(xargs *x) {
	// setWhatsThis(int, const QString&)
	this->QAccel::setWhatsThis((int)x[1].x_int,*(const QString *)x[2].x_voidp);
    }
    void x_19(xargs *x) const {
	// whatsThis(int)
	QString xret = this->QAccel::whatsThis((int)x[1].x_int);
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_20(xargs *x) {
	// setIgnoreWhatsThis(bool)
	this->QAccel::setIgnoreWhatsThis((bool)x[1].x_bool);
    }
    void x_21(xargs *x) const {
	// ignoreWhatsThis()
	bool xret = this->QAccel::ignoreWhatsThis();
	x[0].x_bool = (bool)xret;
    }
    void x_22(xargs *x) {
	// activated(int)
	this->QAccel::activated((int)x[1].x_int);
    }
    static void x_23(xargs *x) {
	// shortcutKey(const QString&)
	QKeySequence xret = QAccel::shortcutKey(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QKeySequence(xret);
    }
    static void x_24(xargs *x) {
	// keyToString(QKeySequence)
	QString xret = QAccel::keyToString(*(QKeySequence *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QString(xret);
    }
    static void x_25(xargs *x) {
	// stringToKey(const QString&)
	QKeySequence xret = QAccel::stringToKey(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QKeySequence(xret);
    }
    void x_26(xargs *x) {
	// eventFilter(QObject*, QEvent*)
	bool xret = this->QAccel::eventFilter((QObject*)x[1].x_voidp,(QEvent*)x[2].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    virtual bool checkConnectArgs(const char* x1, const QObject* x2, const char* x3) {
	xargs x[4];
	x[1].x_voidp = (void*)x1;
	x[2].x_voidp = (void*)x2;
	x[3].x_voidp = (void*)x3;
	if(call_method((void*)this, 5475, x)) return (bool)x[0].x_bool;
	return this->QObject::checkConnectArgs(x1, x2, x3);
    }
    virtual void childEvent(QChildEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5471, x)) return;
	this->QObject::childEvent(x1);
    }
    virtual void connectNotify(const char* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5473, x)) return;
	this->QObject::connectNotify(x1);
    }
    virtual void customEvent(QCustomEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5472, x)) return;
	this->QObject::customEvent(x1);
    }
    virtual void disconnectNotify(const char* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5474, x)) return;
	this->QObject::disconnectNotify(x1);
    }
    virtual bool event(QEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5410, x)) return (bool)x[0].x_bool;
	return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
	xargs x[3];
	x[1].x_voidp = (void*)x1;
	x[2].x_voidp = (void*)x2;
	if(call_method((void*)this, 27, x)) return (bool)x[0].x_bool;
	return this->QAccel::eventFilter(x1, x2);
    }
    virtual void insertChild(QObject* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5433, x)) return;
	this->QObject::insertChild(x1);
    }
    virtual QVariant property(const char* x1) const {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5447, x)) {
	    QVariant *xptr = (QVariant *)x[0].x_voidp;
	    QVariant xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QObject::property(x1);
    }
    virtual void removeChild(QObject* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5434, x)) return;
	this->QObject::removeChild(x1);
    }
    virtual void setName(const char* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5416, x)) return;
	this->QObject::setName(x1);
    }
    virtual bool setProperty(const char* x1, const QVariant& x2) {
	xargs x[3];
	x[1].x_voidp = (void*)x1;
	x[2].x_voidp = (void*)&x2;
	if(call_method((void*)this, 5446, x)) return (bool)x[0].x_bool;
	return this->QObject::setProperty(x1, x2);
    }
    virtual void timerEvent(QTimerEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5470, x)) return;
	this->QObject::timerEvent(x1);
    }
    ~x_QAccel() {}
};
void xcall_QAccel(xargs *x, void *s, int xi) {
    x_QAccel *xself = (x_QAccel*)s;
    switch(xi) {
	case 0: x_QAccel::x_0(x);	break;
	case 1: x_QAccel::x_1(x);	break;
	case 2: x_QAccel::x_2(x);	break;
	case 3: x_QAccel::x_3(x);	break;
	case 4: xself->x_4(x);	break;
	case 5: xself->x_5(x);	break;
	case 6: xself->x_6(x);	break;
	case 7: xself->x_7(x);	break;
	case 8: xself->x_8(x);	break;
	case 9: xself->x_9(x);	break;
	case 10: xself->x_10(x);	break;
	case 11: xself->x_11(x);	break;
	case 12: xself->x_12(x);	break;
	case 13: xself->x_13(x);	break;
	case 14: xself->x_14(x);	break;
	case 15: xself->x_15(x);	break;
	case 16: xself->x_16(x);	break;
	case 17: xself->x_17(x);	break;
	case 18: xself->x_18(x);	break;
	case 19: xself->x_19(x);	break;
	case 20: xself->x_20(x);	break;
	case 21: xself->x_21(x);	break;
	case 22: xself->x_22(x);	break;
	case 23: x_QAccel::x_23(x);	break;
	case 24: x_QAccel::x_24(x);	break;
	case 25: x_QAccel::x_25(x);	break;
	case 26: xself->x_26(x);	break;
	case 27: delete (QAccel*)xself;	break;
    }
}
