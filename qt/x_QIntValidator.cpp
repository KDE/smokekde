//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qvariant.h>
#include <qstring.h>
#include <qvalidator.h>

class x_QIntValidator : public QIntValidator {
public:
    static void x_0(xargs *x) {
	// QIntValidator(QObject*, const char*)
	x_QIntValidator* xret = new x_QIntValidator((QObject*)x[1].x_voidp,(const char*)x[2].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QIntValidator(QObject* x1, const char* x2) : QIntValidator(x1, x2) {
    }
    static void x_1(xargs *x) {
	// QIntValidator(QObject*)
	x_QIntValidator* xret = new x_QIntValidator((QObject*)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QIntValidator(QObject* x1) : QIntValidator(x1) {
    }
    static void x_2(xargs *x) {
	// QIntValidator(int, int, QObject*, const char*)
	x_QIntValidator* xret = new x_QIntValidator((int)x[1].x_int,(int)x[2].x_int,(QObject*)x[3].x_voidp,(const char*)x[4].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QIntValidator(int x1, int x2, QObject* x3, const char* x4) : QIntValidator(x1, x2, x3, x4) {
    }
    static void x_3(xargs *x) {
	// QIntValidator(int, int, QObject*)
	x_QIntValidator* xret = new x_QIntValidator((int)x[1].x_int,(int)x[2].x_int,(QObject*)x[3].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QIntValidator(int x1, int x2, QObject* x3) : QIntValidator(x1, x2, x3) {
    }
    void x_4(xargs *x) const {
	// validate(QString&, int&)
	QValidator::State xret = this->QIntValidator::validate(*(QString *)x[1].x_voidp,*(int *)x[2].x_voidp);
	x[0].x_long = (long)xret;
    }
    void x_5(xargs *x) {
	// setBottom(int)
	this->QIntValidator::setBottom((int)x[1].x_int);
    }
    void x_6(xargs *x) {
	// setTop(int)
	this->QIntValidator::setTop((int)x[1].x_int);
    }
    void x_7(xargs *x) {
	// setRange(int, int)
	this->QIntValidator::setRange((int)x[1].x_int,(int)x[2].x_int);
    }
    void x_8(xargs *x) const {
	// bottom()
	int xret = this->QIntValidator::bottom();
	x[0].x_int = (int)xret;
    }
    void x_9(xargs *x) const {
	// top()
	int xret = this->QIntValidator::top();
	x[0].x_int = (int)xret;
    }
    virtual bool checkConnectArgs(const char* x1, const QObject* x2, const char* x3) {
	xargs x[4];
	x[1].x_voidp = (void*)x1;
	x[2].x_voidp = (void*)x2;
	x[3].x_voidp = (void*)x3;
	if(call_method((void*)this, 5475, x)) return (bool)x[0].x_bool;
	return this->QObject::checkConnectArgs(x1, x2, x3);
    }
    virtual void childEvent(QChildEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5471, x)) return;
	this->QObject::childEvent(x1);
    }
    virtual void connectNotify(const char* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5473, x)) return;
	this->QObject::connectNotify(x1);
    }
    virtual void customEvent(QCustomEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5472, x)) return;
	this->QObject::customEvent(x1);
    }
    virtual void disconnectNotify(const char* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5474, x)) return;
	this->QObject::disconnectNotify(x1);
    }
    virtual bool event(QEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5410, x)) return (bool)x[0].x_bool;
	return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
	xargs x[3];
	x[1].x_voidp = (void*)x1;
	x[2].x_voidp = (void*)x2;
	if(call_method((void*)this, 5411, x)) return (bool)x[0].x_bool;
	return this->QObject::eventFilter(x1, x2);
    }
    virtual void fixup(QString& x1) const {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9260, x)) return;
	this->QValidator::fixup(x1);
    }
    virtual void insertChild(QObject* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5433, x)) return;
	this->QObject::insertChild(x1);
    }
    virtual QVariant property(const char* x1) const {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5447, x)) {
	    QVariant *xptr = (QVariant *)x[0].x_voidp;
	    QVariant xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QObject::property(x1);
    }
    virtual void removeChild(QObject* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5434, x)) return;
	this->QObject::removeChild(x1);
    }
    virtual void setName(const char* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5416, x)) return;
	this->QObject::setName(x1);
    }
    virtual bool setProperty(const char* x1, const QVariant& x2) {
	xargs x[3];
	x[1].x_voidp = (void*)x1;
	x[2].x_voidp = (void*)&x2;
	if(call_method((void*)this, 5446, x)) return (bool)x[0].x_bool;
	return this->QObject::setProperty(x1, x2);
    }
    virtual void setRange(int x1, int x2) {
	xargs x[3];
	x[1].x_int = (int)x1;
	x[2].x_int = (int)x2;
	if(call_method((void*)this, 3891, x)) return;
	this->QIntValidator::setRange(x1, x2);
    }
    virtual void timerEvent(QTimerEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5470, x)) return;
	this->QObject::timerEvent(x1);
    }
    virtual QValidator::State validate(QString& x1, int& x2) const {
	xargs x[3];
	x[1].x_voidp = (void*)&x1;
	x[2].x_voidp = (void*)&x2;
	if(call_method((void*)this, 3888, x)) return (QValidator::State)x[0].x_long;
	return this->QIntValidator::validate(x1, x2);
    }
    ~x_QIntValidator() {}
};
void xcall_QIntValidator(xargs *x, void *s, int xi) {
    x_QIntValidator *xself = (x_QIntValidator*)s;
    switch(xi) {
	case 0: x_QIntValidator::x_0(x);	break;
	case 1: x_QIntValidator::x_1(x);	break;
	case 2: x_QIntValidator::x_2(x);	break;
	case 3: x_QIntValidator::x_3(x);	break;
	case 4: xself->x_4(x);	break;
	case 5: xself->x_5(x);	break;
	case 6: xself->x_6(x);	break;
	case 7: xself->x_7(x);	break;
	case 8: xself->x_8(x);	break;
	case 9: xself->x_9(x);	break;
	case 10: delete (QIntValidator*)xself;	break;
    }
}
