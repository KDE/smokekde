//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke.h>
#include <qt_smoke.h>
#include <qvariant.h>
#include <qeventloop.h>
#include <qstring.h>

class x_QEventLoop : public QEventLoop {
public:
    static void x_0(Smoke::Stack x) {
	x[0].s_enum = (long)QEventLoop::AllEvents;
    }
    static void x_1(Smoke::Stack x) {
	x[0].s_enum = (long)QEventLoop::ExcludeUserInput;
    }
    static void x_2(Smoke::Stack x) {
	x[0].s_enum = (long)QEventLoop::ExcludeSocketNotifiers;
    }
    static void x_3(Smoke::Stack x) {
	x[0].s_enum = (long)QEventLoop::WaitForMore;
    }
    void x_4(Smoke::Stack x) const {
	// metaObject()
	QMetaObject* xret = this->QEventLoop::metaObject();
	x[0].s_class = (void*)xret;
    }
    void x_5(Smoke::Stack x) const {
	// className()
	const char* xret = this->QEventLoop::className();
	x[0].s_voidp = (void*)xret;
    }
    void x_6(Smoke::Stack x) {
	// qt_cast(const char*)
	void* xret = this->QEventLoop::qt_cast((const char*)x[1].s_voidp);
	x[0].s_voidp = (void*)xret;
    }
    void x_7(Smoke::Stack x) {
	// qt_invoke(int, QUObject*)
	bool xret = this->QEventLoop::qt_invoke((int)x[1].s_int,(QUObject*)x[2].s_voidp);
	x[0].s_bool = xret;
    }
    void x_8(Smoke::Stack x) {
	// qt_emit(int, QUObject*)
	bool xret = this->QEventLoop::qt_emit((int)x[1].s_int,(QUObject*)x[2].s_voidp);
	x[0].s_bool = xret;
    }
    void x_9(Smoke::Stack x) {
	// qt_property(int, int, QVariant*)
	bool xret = this->QEventLoop::qt_property((int)x[1].s_int,(int)x[2].s_int,(QVariant*)x[3].s_class);
	x[0].s_bool = xret;
    }
    void x_10(Smoke::Stack x) {
	// qObject()
	QObject* xret = this->QEventLoop::qObject();
	x[0].s_class = (void*)xret;
    }
    static void x_11(Smoke::Stack x) {
	// QEventLoop(QObject*, const char*)
	x_QEventLoop* xret = new x_QEventLoop((QObject*)x[1].s_class,(const char*)x[2].s_voidp);
	x[0].s_class = (void*)xret;
    }
    x_QEventLoop(QObject* x1, const char* x2) : QEventLoop(x1, x2) {
    }
    static void x_12(Smoke::Stack x) {
	// QEventLoop(QObject*)
	x_QEventLoop* xret = new x_QEventLoop((QObject*)x[1].s_class);
	x[0].s_class = (void*)xret;
    }
    x_QEventLoop(QObject* x1) : QEventLoop(x1) {
    }
    static void x_13(Smoke::Stack x) {
	// QEventLoop()
	x_QEventLoop* xret = new x_QEventLoop();
	x[0].s_class = (void*)xret;
    }
    x_QEventLoop() : QEventLoop() {
    }
    void x_14(Smoke::Stack x) {
	// processEvents(QEventLoop::ProcessEventsFlags, int)
	this->QEventLoop::processEvents((QEventLoop::ProcessEventsFlags)x[1].s_uint,(int)x[2].s_int);
	(void)x; // noop (for compiler warning)
    }
    void x_15(Smoke::Stack x) {
	// processEvents(QEventLoop::ProcessEventsFlags)
	bool xret = this->QEventLoop::processEvents((QEventLoop::ProcessEventsFlags)x[1].s_uint);
	x[0].s_bool = xret;
    }
    void x_16(Smoke::Stack x) const {
	// hasPendingEvents()
	bool xret = this->QEventLoop::hasPendingEvents();
	x[0].s_bool = xret;
    }
    void x_17(Smoke::Stack x) {
	// registerSocketNotifier(QSocketNotifier*)
	this->QEventLoop::registerSocketNotifier((QSocketNotifier*)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_18(Smoke::Stack x) {
	// unregisterSocketNotifier(QSocketNotifier*)
	this->QEventLoop::unregisterSocketNotifier((QSocketNotifier*)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_19(Smoke::Stack x) {
	// setSocketNotifierPending(QSocketNotifier*)
	this->QEventLoop::setSocketNotifierPending((QSocketNotifier*)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_20(Smoke::Stack x) {
	// activateSocketNotifiers()
	int xret = this->QEventLoop::activateSocketNotifiers();
	x[0].s_int = xret;
    }
    void x_21(Smoke::Stack x) {
	// activateTimers()
	int xret = this->QEventLoop::activateTimers();
	x[0].s_int = xret;
    }
    void x_22(Smoke::Stack x) const {
	// timeToWait()
	int xret = this->QEventLoop::timeToWait();
	x[0].s_int = xret;
    }
    void x_23(Smoke::Stack x) {
	// exec()
	int xret = this->QEventLoop::exec();
	x[0].s_int = xret;
    }
    void x_24(Smoke::Stack x) {
	// exit(int)
	this->QEventLoop::exit((int)x[1].s_int);
	(void)x; // noop (for compiler warning)
    }
    void x_25(Smoke::Stack x) {
	// exit()
	this->QEventLoop::exit();
	(void)x; // noop (for compiler warning)
    }
    void x_26(Smoke::Stack x) {
	// enterLoop()
	int xret = this->QEventLoop::enterLoop();
	x[0].s_int = xret;
    }
    void x_27(Smoke::Stack x) {
	// exitLoop()
	this->QEventLoop::exitLoop();
	(void)x; // noop (for compiler warning)
    }
    void x_28(Smoke::Stack x) const {
	// loopLevel()
	int xret = this->QEventLoop::loopLevel();
	x[0].s_int = xret;
    }
    void x_29(Smoke::Stack x) {
	// wakeUp()
	this->QEventLoop::wakeUp();
	(void)x; // noop (for compiler warning)
    }
    void x_30(Smoke::Stack x) {
	// awake()
	this->QEventLoop::awake();
	(void)x; // noop (for compiler warning)
    }
    void x_31(Smoke::Stack x) {
	// aboutToBlock()
	this->QEventLoop::aboutToBlock();
	(void)x; // noop (for compiler warning)
    }
    static void x_32(Smoke::Stack x) {
	// staticMetaObject()
	QMetaObject* xret = QEventLoop::staticMetaObject();
	x[0].s_class = (void*)xret;
    }
    static void x_33(Smoke::Stack x) {
	// tr(const char*, const char*)
	QString xret = QEventLoop::tr((const char*)x[1].s_voidp,(const char*)x[2].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    static void x_34(Smoke::Stack x) {
	// tr(const char*)
	QString xret = QEventLoop::tr((const char*)x[1].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    static void x_35(Smoke::Stack x) {
	// trUtf8(const char*, const char*)
	QString xret = QEventLoop::trUtf8((const char*)x[1].s_voidp,(const char*)x[2].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    static void x_36(Smoke::Stack x) {
	// trUtf8(const char*)
	QString xret = QEventLoop::trUtf8((const char*)x[1].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    virtual bool checkConnectArgs(const char* x1, const QObject* x2, const char* x3) {
	Smoke::StackItem x[4];
	x[1].s_voidp = (void*)x1;
	x[2].s_class = (void*)x2;
	x[3].s_voidp = (void*)x3;
	if(qt_Smoke->binding->callMethod(6711, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QObject::checkConnectArgs(x1, x2, x3);
    }
    virtual void childEvent(QChildEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(6707, (void*)this, x)) return;
	this->QObject::childEvent(x1);
    }
    virtual const char* className() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(2958, (void*)this, x)) return (const char*)x[0].s_class;
	return this->QEventLoop::className();
    }
    virtual void connectNotify(const char* x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(6709, (void*)this, x)) return;
	this->QObject::connectNotify(x1);
    }
    virtual void customEvent(QCustomEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(6708, (void*)this, x)) return;
	this->QObject::customEvent(x1);
    }
    virtual void disconnectNotify(const char* x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(6710, (void*)this, x)) return;
	this->QObject::disconnectNotify(x1);
    }
    virtual int enterLoop() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(2980, (void*)this, x)) return (int)x[0].s_int;
	return this->QEventLoop::enterLoop();
    }
    virtual bool event(QEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(6641, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
	Smoke::StackItem x[3];
	x[1].s_class = (void*)x1;
	x[2].s_class = (void*)x2;
	if(qt_Smoke->binding->callMethod(6642, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QObject::eventFilter(x1, x2);
    }
    virtual int exec() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(2977, (void*)this, x)) return (int)x[0].s_int;
	return this->QEventLoop::exec();
    }
    virtual void exit(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = x1;
	if(qt_Smoke->binding->callMethod(2978, (void*)this, x)) return;
	this->QEventLoop::exit(x1);
    }
    virtual void exitLoop() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(2981, (void*)this, x)) return;
	this->QEventLoop::exitLoop();
    }
    virtual bool hasPendingEvents() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(2970, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QEventLoop::hasPendingEvents();
    }
    virtual void insertChild(QObject* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(6664, (void*)this, x)) return;
	this->QObject::insertChild(x1);
    }
    virtual int loopLevel() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(2982, (void*)this, x)) return (int)x[0].s_int;
	return this->QEventLoop::loopLevel();
    }
    virtual QMetaObject* metaObject() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(2957, (void*)this, x)) return (QMetaObject*)x[0].s_class;
	return this->QEventLoop::metaObject();
    }
    virtual bool processEvents(QEventLoop::ProcessEventsFlags x1) {
	Smoke::StackItem x[2];
	x[1].s_uint = x1;
	if(qt_Smoke->binding->callMethod(2969, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QEventLoop::processEvents(x1);
    }
    virtual QVariant property(const char* x1) const {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(6678, (void*)this, x)) {
	    QVariant *xptr = (QVariant *)x[0].s_class;
	    QVariant xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QObject::property(x1);
    }
    virtual void* qt_cast(const char* x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(2959, (void*)this, x)) return (void*)x[0].s_voidp;
	return this->QEventLoop::qt_cast(x1);
    }
    virtual bool qt_emit(int x1, QUObject* x2) {
	Smoke::StackItem x[3];
	x[1].s_int = x1;
	x[2].s_voidp = (void*)x2;
	if(qt_Smoke->binding->callMethod(2961, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QEventLoop::qt_emit(x1, x2);
    }
    virtual bool qt_invoke(int x1, QUObject* x2) {
	Smoke::StackItem x[3];
	x[1].s_int = x1;
	x[2].s_voidp = (void*)x2;
	if(qt_Smoke->binding->callMethod(2960, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QEventLoop::qt_invoke(x1, x2);
    }
    virtual bool qt_property(int x1, int x2, QVariant* x3) {
	Smoke::StackItem x[4];
	x[1].s_int = x1;
	x[2].s_int = x2;
	x[3].s_class = (void*)x3;
	if(qt_Smoke->binding->callMethod(2962, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QEventLoop::qt_property(x1, x2, x3);
    }
    virtual void registerSocketNotifier(QSocketNotifier* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(2971, (void*)this, x)) return;
	this->QEventLoop::registerSocketNotifier(x1);
    }
    virtual void removeChild(QObject* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(6665, (void*)this, x)) return;
	this->QObject::removeChild(x1);
    }
    virtual void setName(const char* x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(6647, (void*)this, x)) return;
	this->QObject::setName(x1);
    }
    virtual bool setProperty(const char* x1, const QVariant& x2) {
	Smoke::StackItem x[3];
	x[1].s_voidp = (void*)x1;
	x[2].s_class = (void*)&x2;
	if(qt_Smoke->binding->callMethod(6677, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QObject::setProperty(x1, x2);
    }
    virtual void timerEvent(QTimerEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(6706, (void*)this, x)) return;
	this->QObject::timerEvent(x1);
    }
    virtual void unregisterSocketNotifier(QSocketNotifier* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(2972, (void*)this, x)) return;
	this->QEventLoop::unregisterSocketNotifier(x1);
    }
    virtual void wakeUp() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(2983, (void*)this, x)) return;
	this->QEventLoop::wakeUp();
    }
    static void xenum_operation(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
	switch(xtype) {
	  case 207: //QEventLoop::ProcessEvents
	    switch(xop) {
	      case Smoke::EnumNew:
		xdata = (void*)new QEventLoop::ProcessEvents;
		break;
	      case Smoke::EnumDelete:
		delete (QEventLoop::ProcessEvents*)xdata;
		break;
	      case Smoke::EnumFromLong:
		*(QEventLoop::ProcessEvents*)xdata = (QEventLoop::ProcessEvents)xvalue;
		break;
	      case Smoke::EnumToLong:
		xvalue = (long)*(QEventLoop::ProcessEvents*)xdata;
		break;
	    }
	    break;
	}
    }
    ~x_QEventLoop() { qt_Smoke->binding->deleted(107, (void*)this); }
};
void xenum_QEventLoop(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
    x_QEventLoop::xenum_operation(xop, xtype, xdata, xvalue);
}
void xcall_QEventLoop(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QEventLoop *xself = (x_QEventLoop*)obj;
    switch(xi) {
	case 0: x_QEventLoop::x_0(args);	break;
	case 1: x_QEventLoop::x_1(args);	break;
	case 2: x_QEventLoop::x_2(args);	break;
	case 3: x_QEventLoop::x_3(args);	break;
	case 4: xself->x_4(args);	break;
	case 5: xself->x_5(args);	break;
	case 6: xself->x_6(args);	break;
	case 7: xself->x_7(args);	break;
	case 8: xself->x_8(args);	break;
	case 9: xself->x_9(args);	break;
	case 10: xself->x_10(args);	break;
	case 11: x_QEventLoop::x_11(args);	break;
	case 12: x_QEventLoop::x_12(args);	break;
	case 13: x_QEventLoop::x_13(args);	break;
	case 14: xself->x_14(args);	break;
	case 15: xself->x_15(args);	break;
	case 16: xself->x_16(args);	break;
	case 17: xself->x_17(args);	break;
	case 18: xself->x_18(args);	break;
	case 19: xself->x_19(args);	break;
	case 20: xself->x_20(args);	break;
	case 21: xself->x_21(args);	break;
	case 22: xself->x_22(args);	break;
	case 23: xself->x_23(args);	break;
	case 24: xself->x_24(args);	break;
	case 25: xself->x_25(args);	break;
	case 26: xself->x_26(args);	break;
	case 27: xself->x_27(args);	break;
	case 28: xself->x_28(args);	break;
	case 29: xself->x_29(args);	break;
	case 30: xself->x_30(args);	break;
	case 31: xself->x_31(args);	break;
	case 32: x_QEventLoop::x_32(args);	break;
	case 33: x_QEventLoop::x_33(args);	break;
	case 34: x_QEventLoop::x_34(args);	break;
	case 35: x_QEventLoop::x_35(args);	break;
	case 36: x_QEventLoop::x_36(args);	break;
	case 37: delete (QEventLoop*)xself;	break;
    }
}
