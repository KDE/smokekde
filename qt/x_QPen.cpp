//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qcolor.h>
#include <qpen.h>

class x_QPen : public QPen {
public:
    static void x_0(xargs *x) {
	// QPen()
	x_QPen* xret = new x_QPen();
	x[0].x_voidp = (void*)xret;
    }
    x_QPen() : QPen() {
    }
    static void x_1(xargs *x) {
	// QPen(Qt::PenStyle)
	x_QPen* xret = new x_QPen((Qt::PenStyle)x[1].x_long);
	x[0].x_voidp = (void*)xret;
    }
    x_QPen(Qt::PenStyle x1) : QPen(x1) {
    }
    static void x_2(xargs *x) {
	// QPen(const QColor&, uint, Qt::PenStyle)
	x_QPen* xret = new x_QPen(*(const QColor *)x[1].x_voidp,(uint)x[2].x_uint,(Qt::PenStyle)x[3].x_long);
	x[0].x_voidp = (void*)xret;
    }
    x_QPen(const QColor& x1, uint x2, Qt::PenStyle x3) : QPen(x1, x2, x3) {
    }
    static void x_3(xargs *x) {
	// QPen(const QColor&, uint)
	x_QPen* xret = new x_QPen(*(const QColor *)x[1].x_voidp,(uint)x[2].x_uint);
	x[0].x_voidp = (void*)xret;
    }
    x_QPen(const QColor& x1, uint x2) : QPen(x1, x2) {
    }
    static void x_4(xargs *x) {
	// QPen(const QColor&)
	x_QPen* xret = new x_QPen(*(const QColor *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QPen(const QColor& x1) : QPen(x1) {
    }
    static void x_5(xargs *x) {
	// QPen(const QColor&, uint, Qt::PenStyle, Qt::PenCapStyle, Qt::PenJoinStyle)
	x_QPen* xret = new x_QPen(*(const QColor *)x[1].x_voidp,(uint)x[2].x_uint,(Qt::PenStyle)x[3].x_long,(Qt::PenCapStyle)x[4].x_long,(Qt::PenJoinStyle)x[5].x_long);
	x[0].x_voidp = (void*)xret;
    }
    x_QPen(const QColor& x1, uint x2, Qt::PenStyle x3, Qt::PenCapStyle x4, Qt::PenJoinStyle x5) : QPen(x1, x2, x3, x4, x5) {
    }
    static void x_6(xargs *x) {
	// QPen(const QPen&)
	x_QPen* xret = new x_QPen(*(const QPen *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QPen(const QPen& x1) : QPen(x1) {
    }
    void x_7(xargs *x) {
	// operator=(const QPen&)
	QPen& xret = this->QPen::operator=(*(const QPen *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_8(xargs *x) const {
	// style()
	Qt::PenStyle xret = this->QPen::style();
	x[0].x_long = (long)xret;
    }
    void x_9(xargs *x) {
	// setStyle(Qt::PenStyle)
	this->QPen::setStyle((Qt::PenStyle)x[1].x_long);
    }
    void x_10(xargs *x) const {
	// width()
	uint xret = this->QPen::width();
	x[0].x_uint = (uint)xret;
    }
    void x_11(xargs *x) {
	// setWidth(uint)
	this->QPen::setWidth((uint)x[1].x_uint);
    }
    void x_12(xargs *x) const {
	// color()
	const QColor& xret = this->QPen::color();
	x[0].x_voidp = (void*)&xret;
    }
    void x_13(xargs *x) {
	// setColor(const QColor&)
	this->QPen::setColor(*(const QColor *)x[1].x_voidp);
    }
    void x_14(xargs *x) const {
	// capStyle()
	Qt::PenCapStyle xret = this->QPen::capStyle();
	x[0].x_long = (long)xret;
    }
    void x_15(xargs *x) {
	// setCapStyle(Qt::PenCapStyle)
	this->QPen::setCapStyle((Qt::PenCapStyle)x[1].x_long);
    }
    void x_16(xargs *x) const {
	// joinStyle()
	Qt::PenJoinStyle xret = this->QPen::joinStyle();
	x[0].x_long = (long)xret;
    }
    void x_17(xargs *x) {
	// setJoinStyle(Qt::PenJoinStyle)
	this->QPen::setJoinStyle((Qt::PenJoinStyle)x[1].x_long);
    }
    void x_18(xargs *x) const {
	// operator==(const QPen&)
	bool xret = this->QPen::operator==(*(const QPen *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_19(xargs *x) const {
	// operator!=(const QPen&)
	bool xret = this->QPen::operator!=(*(const QPen *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    ~x_QPen() {}
};
void xcall_QPen(xargs *x, void *s, int xi) {
    x_QPen *xself = (x_QPen*)s;
    switch(xi) {
	case 0: x_QPen::x_0(x);	break;
	case 1: x_QPen::x_1(x);	break;
	case 2: x_QPen::x_2(x);	break;
	case 3: x_QPen::x_3(x);	break;
	case 4: x_QPen::x_4(x);	break;
	case 5: x_QPen::x_5(x);	break;
	case 6: x_QPen::x_6(x);	break;
	case 7: xself->x_7(x);	break;
	case 8: xself->x_8(x);	break;
	case 9: xself->x_9(x);	break;
	case 10: xself->x_10(x);	break;
	case 11: xself->x_11(x);	break;
	case 12: xself->x_12(x);	break;
	case 13: xself->x_13(x);	break;
	case 14: xself->x_14(x);	break;
	case 15: xself->x_15(x);	break;
	case 16: xself->x_16(x);	break;
	case 17: xself->x_17(x);	break;
	case 18: xself->x_18(x);	break;
	case 19: xself->x_19(x);	break;
	case 20: delete (QPen*)xself;	break;
    }
}
