//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke.h>
#include <qt_smoke.h>
#include <qcolor.h>
#include <qpen.h>
#include <qnamespace.h>

class x_QPen : public QPen {
public:
    static void x_0(Smoke::Stack x) {
	// QPen()
	x_QPen* xret = new x_QPen();
	x[0].s_class = (void*)xret;
    }
    x_QPen() : QPen() {
    }
    static void x_1(Smoke::Stack x) {
	// QPen(Qt::PenStyle)
	x_QPen* xret = new x_QPen((Qt::PenStyle)x[1].s_enum);
	x[0].s_class = (void*)xret;
    }
    x_QPen(Qt::PenStyle x1) : QPen(x1) {
    }
    static void x_2(Smoke::Stack x) {
	// QPen(const QColor&, uint, Qt::PenStyle)
	x_QPen* xret = new x_QPen(*(const QColor *)x[1].s_class,(uint)x[2].s_uint,(Qt::PenStyle)x[3].s_enum);
	x[0].s_class = (void*)xret;
    }
    x_QPen(const QColor& x1, uint x2, Qt::PenStyle x3) : QPen(x1, x2, x3) {
    }
    static void x_3(Smoke::Stack x) {
	// QPen(const QColor&, uint)
	x_QPen* xret = new x_QPen(*(const QColor *)x[1].s_class,(uint)x[2].s_uint);
	x[0].s_class = (void*)xret;
    }
    x_QPen(const QColor& x1, uint x2) : QPen(x1, x2) {
    }
    static void x_4(Smoke::Stack x) {
	// QPen(const QColor&)
	x_QPen* xret = new x_QPen(*(const QColor *)x[1].s_class);
	x[0].s_class = (void*)xret;
    }
    x_QPen(const QColor& x1) : QPen(x1) {
    }
    static void x_5(Smoke::Stack x) {
	// QPen(const QColor&, uint, Qt::PenStyle, Qt::PenCapStyle, Qt::PenJoinStyle)
	x_QPen* xret = new x_QPen(*(const QColor *)x[1].s_class,(uint)x[2].s_uint,(Qt::PenStyle)x[3].s_enum,(Qt::PenCapStyle)x[4].s_enum,(Qt::PenJoinStyle)x[5].s_enum);
	x[0].s_class = (void*)xret;
    }
    x_QPen(const QColor& x1, uint x2, Qt::PenStyle x3, Qt::PenCapStyle x4, Qt::PenJoinStyle x5) : QPen(x1, x2, x3, x4, x5) {
    }
    static void x_6(Smoke::Stack x) {
	// QPen(const QPen&)
	x_QPen* xret = new x_QPen(*(const QPen *)x[1].s_class);
	x[0].s_class = (void*)xret;
    }
    x_QPen(const QPen& x1) : QPen(x1) {
    }
    void x_7(Smoke::Stack x) {
	// operator=(const QPen&)
	QPen& xret = this->QPen::operator=(*(const QPen *)x[1].s_class);
	x[0].s_class = (void*)&xret;
    }
    void x_8(Smoke::Stack x) const {
	// style()
	Qt::PenStyle xret = this->QPen::style();
	x[0].s_enum = xret;
    }
    void x_9(Smoke::Stack x) {
	// setStyle(Qt::PenStyle)
	this->QPen::setStyle((Qt::PenStyle)x[1].s_enum);
	(void)x; // noop (for compiler warning)
    }
    void x_10(Smoke::Stack x) const {
	// width()
	uint xret = this->QPen::width();
	x[0].s_uint = xret;
    }
    void x_11(Smoke::Stack x) {
	// setWidth(uint)
	this->QPen::setWidth((uint)x[1].s_uint);
	(void)x; // noop (for compiler warning)
    }
    void x_12(Smoke::Stack x) const {
	// color()
	const QColor& xret = this->QPen::color();
	x[0].s_class = (void*)&xret;
    }
    void x_13(Smoke::Stack x) {
	// setColor(const QColor&)
	this->QPen::setColor(*(const QColor *)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_14(Smoke::Stack x) const {
	// capStyle()
	Qt::PenCapStyle xret = this->QPen::capStyle();
	x[0].s_enum = xret;
    }
    void x_15(Smoke::Stack x) {
	// setCapStyle(Qt::PenCapStyle)
	this->QPen::setCapStyle((Qt::PenCapStyle)x[1].s_enum);
	(void)x; // noop (for compiler warning)
    }
    void x_16(Smoke::Stack x) const {
	// joinStyle()
	Qt::PenJoinStyle xret = this->QPen::joinStyle();
	x[0].s_enum = xret;
    }
    void x_17(Smoke::Stack x) {
	// setJoinStyle(Qt::PenJoinStyle)
	this->QPen::setJoinStyle((Qt::PenJoinStyle)x[1].s_enum);
	(void)x; // noop (for compiler warning)
    }
    void x_18(Smoke::Stack x) const {
	// operator==(const QPen&)
	bool xret = this->QPen::operator==(*(const QPen *)x[1].s_class);
	x[0].s_bool = xret;
    }
    void x_19(Smoke::Stack x) const {
	// operator!=(const QPen&)
	bool xret = this->QPen::operator!=(*(const QPen *)x[1].s_class);
	x[0].s_bool = xret;
    }
    ~x_QPen() { qt_Smoke->binding->deleted(232, (void*)this); }
};
void xcall_QPen(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QPen *xself = (x_QPen*)obj;
    switch(xi) {
	case 0: x_QPen::x_0(args);	break;
	case 1: x_QPen::x_1(args);	break;
	case 2: x_QPen::x_2(args);	break;
	case 3: x_QPen::x_3(args);	break;
	case 4: x_QPen::x_4(args);	break;
	case 5: x_QPen::x_5(args);	break;
	case 6: x_QPen::x_6(args);	break;
	case 7: xself->x_7(args);	break;
	case 8: xself->x_8(args);	break;
	case 9: xself->x_9(args);	break;
	case 10: xself->x_10(args);	break;
	case 11: xself->x_11(args);	break;
	case 12: xself->x_12(args);	break;
	case 13: xself->x_13(args);	break;
	case 14: xself->x_14(args);	break;
	case 15: xself->x_15(args);	break;
	case 16: xself->x_16(args);	break;
	case 17: xself->x_17(args);	break;
	case 18: xself->x_18(args);	break;
	case 19: xself->x_19(args);	break;
	case 20: delete (QPen*)xself;	break;
    }
}
