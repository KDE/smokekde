//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qsqlrecord.h>
#include <qstring.h>
#include <qsqlerror.h>
#include <qvariant.h>
#include <qsqldatabase.h>
#include <qsqlquery.h>
#include <qsqlindex.h>
#include <qstringlist.h>

class x_QSqlDatabase : public QSqlDatabase {
public:
    void x_0(xargs *x) {
	// open()
	bool xret = this->QSqlDatabase::open();
	x[0].x_bool = (bool)xret;
    }
    void x_1(xargs *x) {
	// open(const QString&, const QString&)
	bool xret = this->QSqlDatabase::open(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_2(xargs *x) {
	// close()
	this->QSqlDatabase::close();
    }
    void x_3(xargs *x) const {
	// isOpen()
	bool xret = this->QSqlDatabase::isOpen();
	x[0].x_bool = (bool)xret;
    }
    void x_4(xargs *x) const {
	// isOpenError()
	bool xret = this->QSqlDatabase::isOpenError();
	x[0].x_bool = (bool)xret;
    }
    void x_5(xargs *x) const {
	// tables()
	QStringList xret = this->QSqlDatabase::tables();
	x[0].x_voidp = (void*)new QStringList(xret);
    }
    void x_6(xargs *x) const {
	// primaryIndex(const QString&)
	QSqlIndex xret = this->QSqlDatabase::primaryIndex(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QSqlIndex(xret);
    }
    void x_7(xargs *x) const {
	// record(const QString&)
	QSqlRecord xret = this->QSqlDatabase::record(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QSqlRecord(xret);
    }
    void x_8(xargs *x) const {
	// record(const QSqlQuery&)
	QSqlRecord xret = this->QSqlDatabase::record(*(const QSqlQuery *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QSqlRecord(xret);
    }
    void x_9(xargs *x) const {
	// recordInfo(const QString&)
	QSqlRecordInfo xret = this->QSqlDatabase::recordInfo(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QSqlRecordInfo(xret);
    }
    void x_10(xargs *x) const {
	// recordInfo(const QSqlQuery&)
	QSqlRecordInfo xret = this->QSqlDatabase::recordInfo(*(const QSqlQuery *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QSqlRecordInfo(xret);
    }
    void x_11(xargs *x) const {
	// exec(const QString&)
	QSqlQuery xret = this->QSqlDatabase::exec(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QSqlQuery(xret);
    }
    void x_12(xargs *x) const {
	// exec()
	QSqlQuery xret = this->QSqlDatabase::exec();
	x[0].x_voidp = (void*)new QSqlQuery(xret);
    }
    void x_13(xargs *x) const {
	// lastError()
	QSqlError xret = this->QSqlDatabase::lastError();
	x[0].x_voidp = (void*)new QSqlError(xret);
    }
    void x_14(xargs *x) {
	// transaction()
	bool xret = this->QSqlDatabase::transaction();
	x[0].x_bool = (bool)xret;
    }
    void x_15(xargs *x) {
	// commit()
	bool xret = this->QSqlDatabase::commit();
	x[0].x_bool = (bool)xret;
    }
    void x_16(xargs *x) {
	// rollback()
	bool xret = this->QSqlDatabase::rollback();
	x[0].x_bool = (bool)xret;
    }
    void x_17(xargs *x) {
	// setDatabaseName(const QString&)
	this->QSqlDatabase::setDatabaseName(*(const QString *)x[1].x_voidp);
    }
    void x_18(xargs *x) {
	// setUserName(const QString&)
	this->QSqlDatabase::setUserName(*(const QString *)x[1].x_voidp);
    }
    void x_19(xargs *x) {
	// setPassword(const QString&)
	this->QSqlDatabase::setPassword(*(const QString *)x[1].x_voidp);
    }
    void x_20(xargs *x) {
	// setHostName(const QString&)
	this->QSqlDatabase::setHostName(*(const QString *)x[1].x_voidp);
    }
    void x_21(xargs *x) {
	// setPort(int)
	this->QSqlDatabase::setPort((int)x[1].x_int);
    }
    void x_22(xargs *x) const {
	// databaseName()
	QString xret = this->QSqlDatabase::databaseName();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_23(xargs *x) const {
	// userName()
	QString xret = this->QSqlDatabase::userName();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_24(xargs *x) const {
	// password()
	QString xret = this->QSqlDatabase::password();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_25(xargs *x) const {
	// hostName()
	QString xret = this->QSqlDatabase::hostName();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_26(xargs *x) const {
	// driverName()
	QString xret = this->QSqlDatabase::driverName();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_27(xargs *x) const {
	// port()
	int xret = this->QSqlDatabase::port();
	x[0].x_int = (int)xret;
    }
    void x_28(xargs *x) const {
	// driver()
	QSqlDriver* xret = this->QSqlDatabase::driver();
	x[0].x_voidp = (void*)xret;
    }
    static void x_29(xargs *x) {
	// addDatabase(const QString&, const QString&)
	QSqlDatabase* xret = QSqlDatabase::addDatabase(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    static void x_30(xargs *x) {
	// addDatabase(const QString&)
	QSqlDatabase* xret = QSqlDatabase::addDatabase(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    static void x_31(xargs *x) {
	// database(const QString&, bool)
	QSqlDatabase* xret = QSqlDatabase::database(*(const QString *)x[1].x_voidp,(bool)x[2].x_bool);
	x[0].x_voidp = (void*)xret;
    }
    static void x_32(xargs *x) {
	// database(const QString&)
	QSqlDatabase* xret = QSqlDatabase::database(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    static void x_33(xargs *x) {
	// database()
	QSqlDatabase* xret = QSqlDatabase::database();
	x[0].x_voidp = (void*)xret;
    }
    static void x_34(xargs *x) {
	// removeDatabase(const QString&)
	QSqlDatabase::removeDatabase(*(const QString *)x[1].x_voidp);
    }
    static void x_35(xargs *x) {
	// contains(const QString&)
	bool xret = QSqlDatabase::contains(*(const QString *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    static void x_36(xargs *x) {
	// contains()
	bool xret = QSqlDatabase::contains();
	x[0].x_bool = (bool)xret;
    }
    static void x_37(xargs *x) {
	// drivers()
	QStringList xret = QSqlDatabase::drivers();
	x[0].x_voidp = (void*)new QStringList(xret);
    }
    static void x_38(xargs *x) {
	// registerSqlDriver(const QString&, const QSqlDriverCreatorBase*)
	QSqlDatabase::registerSqlDriver(*(const QString *)x[1].x_voidp,(const QSqlDriverCreatorBase*)x[2].x_voidp);
    }
    static void x_39(xargs *x) {
	// QSqlDatabase(const QString&, const QString&, QObject*, const char*)
	x_QSqlDatabase* xret = new x_QSqlDatabase(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp,(QObject*)x[3].x_voidp,(const char*)x[4].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QSqlDatabase(const QString& x1, const QString& x2, QObject* x3, const char* x4) : QSqlDatabase(x1, x2, x3, x4) {
    }
    static void x_40(xargs *x) {
	// QSqlDatabase(const QString&, const QString&, QObject*)
	x_QSqlDatabase* xret = new x_QSqlDatabase(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp,(QObject*)x[3].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QSqlDatabase(const QString& x1, const QString& x2, QObject* x3) : QSqlDatabase(x1, x2, x3) {
    }
    static void x_41(xargs *x) {
	// QSqlDatabase(const QString&, const QString&)
	x_QSqlDatabase* xret = new x_QSqlDatabase(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QSqlDatabase(const QString& x1, const QString& x2) : QSqlDatabase(x1, x2) {
    }
    virtual bool checkConnectArgs(const char* x1, const QObject* x2, const char* x3) {
	xargs x[4];
	x[1].x_voidp = (void*)x1;
	x[2].x_voidp = (void*)x2;
	x[3].x_voidp = (void*)x3;
	if(call_method((void*)this, 5475, x)) return (bool)x[0].x_bool;
	return this->QObject::checkConnectArgs(x1, x2, x3);
    }
    virtual void childEvent(QChildEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5471, x)) return;
	this->QObject::childEvent(x1);
    }
    virtual void connectNotify(const char* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5473, x)) return;
	this->QObject::connectNotify(x1);
    }
    virtual void customEvent(QCustomEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5472, x)) return;
	this->QObject::customEvent(x1);
    }
    virtual void disconnectNotify(const char* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5474, x)) return;
	this->QObject::disconnectNotify(x1);
    }
    virtual bool event(QEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5410, x)) return (bool)x[0].x_bool;
	return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
	xargs x[3];
	x[1].x_voidp = (void*)x1;
	x[2].x_voidp = (void*)x2;
	if(call_method((void*)this, 5411, x)) return (bool)x[0].x_bool;
	return this->QObject::eventFilter(x1, x2);
    }
    virtual void insertChild(QObject* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5433, x)) return;
	this->QObject::insertChild(x1);
    }
    virtual QVariant property(const char* x1) const {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5447, x)) {
	    QVariant *xptr = (QVariant *)x[0].x_voidp;
	    QVariant xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QObject::property(x1);
    }
    virtual void removeChild(QObject* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5434, x)) return;
	this->QObject::removeChild(x1);
    }
    virtual void setDatabaseName(const QString& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 7321, x)) return;
	this->QSqlDatabase::setDatabaseName(x1);
    }
    virtual void setHostName(const QString& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 7324, x)) return;
	this->QSqlDatabase::setHostName(x1);
    }
    virtual void setName(const char* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5416, x)) return;
	this->QObject::setName(x1);
    }
    virtual void setPassword(const QString& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 7323, x)) return;
	this->QSqlDatabase::setPassword(x1);
    }
    virtual void setPort(int x1) {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 7325, x)) return;
	this->QSqlDatabase::setPort(x1);
    }
    virtual bool setProperty(const char* x1, const QVariant& x2) {
	xargs x[3];
	x[1].x_voidp = (void*)x1;
	x[2].x_voidp = (void*)&x2;
	if(call_method((void*)this, 5446, x)) return (bool)x[0].x_bool;
	return this->QObject::setProperty(x1, x2);
    }
    virtual void setUserName(const QString& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 7322, x)) return;
	this->QSqlDatabase::setUserName(x1);
    }
    virtual void timerEvent(QTimerEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5470, x)) return;
	this->QObject::timerEvent(x1);
    }
    ~x_QSqlDatabase() {}
};
void xcall_QSqlDatabase(xargs *x, void *s, int xi) {
    x_QSqlDatabase *xself = (x_QSqlDatabase*)s;
    switch(xi) {
	case 0: xself->x_0(x);	break;
	case 1: xself->x_1(x);	break;
	case 2: xself->x_2(x);	break;
	case 3: xself->x_3(x);	break;
	case 4: xself->x_4(x);	break;
	case 5: xself->x_5(x);	break;
	case 6: xself->x_6(x);	break;
	case 7: xself->x_7(x);	break;
	case 8: xself->x_8(x);	break;
	case 9: xself->x_9(x);	break;
	case 10: xself->x_10(x);	break;
	case 11: xself->x_11(x);	break;
	case 12: xself->x_12(x);	break;
	case 13: xself->x_13(x);	break;
	case 14: xself->x_14(x);	break;
	case 15: xself->x_15(x);	break;
	case 16: xself->x_16(x);	break;
	case 17: xself->x_17(x);	break;
	case 18: xself->x_18(x);	break;
	case 19: xself->x_19(x);	break;
	case 20: xself->x_20(x);	break;
	case 21: xself->x_21(x);	break;
	case 22: xself->x_22(x);	break;
	case 23: xself->x_23(x);	break;
	case 24: xself->x_24(x);	break;
	case 25: xself->x_25(x);	break;
	case 26: xself->x_26(x);	break;
	case 27: xself->x_27(x);	break;
	case 28: xself->x_28(x);	break;
	case 29: x_QSqlDatabase::x_29(x);	break;
	case 30: x_QSqlDatabase::x_30(x);	break;
	case 31: x_QSqlDatabase::x_31(x);	break;
	case 32: x_QSqlDatabase::x_32(x);	break;
	case 33: x_QSqlDatabase::x_33(x);	break;
	case 34: x_QSqlDatabase::x_34(x);	break;
	case 35: x_QSqlDatabase::x_35(x);	break;
	case 36: x_QSqlDatabase::x_36(x);	break;
	case 37: x_QSqlDatabase::x_37(x);	break;
	case 38: x_QSqlDatabase::x_38(x);	break;
	case 39: x_QSqlDatabase::x_39(x);	break;
	case 40: x_QSqlDatabase::x_40(x);	break;
	case 41: x_QSqlDatabase::x_41(x);	break;
	case 42: delete (QSqlDatabase*)xself;	break;
    }
}
