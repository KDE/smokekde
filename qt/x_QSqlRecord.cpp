//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qvariant.h>
#include <qsqlrecord.h>
#include <qstring.h>
#include <qsqlfield.h>
#include <qstringlist.h>

class x_QSqlRecord : public QSqlRecord {
public:
    static void x_0(xargs *x) {
	// QSqlRecord()
	x_QSqlRecord* xret = new x_QSqlRecord();
	x[0].x_voidp = (void*)xret;
    }
    x_QSqlRecord() : QSqlRecord() {
    }
    static void x_1(xargs *x) {
	// QSqlRecord(const QSqlRecord&)
	x_QSqlRecord* xret = new x_QSqlRecord(*(const QSqlRecord *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QSqlRecord(const QSqlRecord& x1) : QSqlRecord(x1) {
    }
    void x_2(xargs *x) {
	// operator=(const QSqlRecord&)
	QSqlRecord& xret = this->QSqlRecord::operator=(*(const QSqlRecord *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_3(xargs *x) const {
	// value(int)
	QVariant xret = this->QSqlRecord::value((int)x[1].x_int);
	x[0].x_voidp = (void*)new QVariant(xret);
    }
    void x_4(xargs *x) const {
	// value(const QString&)
	QVariant xret = this->QSqlRecord::value(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QVariant(xret);
    }
    void x_5(xargs *x) {
	// setValue(int, const QVariant&)
	this->QSqlRecord::setValue((int)x[1].x_int,*(const QVariant *)x[2].x_voidp);
    }
    void x_6(xargs *x) {
	// setValue(const QString&, const QVariant&)
	this->QSqlRecord::setValue(*(const QString *)x[1].x_voidp,*(const QVariant *)x[2].x_voidp);
    }
    void x_7(xargs *x) const {
	// isGenerated(int)
	bool xret = this->QSqlRecord::isGenerated((int)x[1].x_int);
	x[0].x_bool = (bool)xret;
    }
    void x_8(xargs *x) const {
	// isGenerated(const QString&)
	bool xret = this->QSqlRecord::isGenerated(*(const QString *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_9(xargs *x) {
	// setGenerated(const QString&, bool)
	this->QSqlRecord::setGenerated(*(const QString *)x[1].x_voidp,(bool)x[2].x_bool);
    }
    void x_10(xargs *x) {
	// setGenerated(int, bool)
	this->QSqlRecord::setGenerated((int)x[1].x_int,(bool)x[2].x_bool);
    }
    void x_11(xargs *x) {
	// setNull(int)
	this->QSqlRecord::setNull((int)x[1].x_int);
    }
    void x_12(xargs *x) {
	// setNull(const QString&)
	this->QSqlRecord::setNull(*(const QString *)x[1].x_voidp);
    }
    void x_13(xargs *x) {
	// isNull(int)
	bool xret = this->QSqlRecord::isNull((int)x[1].x_int);
	x[0].x_bool = (bool)xret;
    }
    void x_14(xargs *x) {
	// isNull(const QString&)
	bool xret = this->QSqlRecord::isNull(*(const QString *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_15(xargs *x) const {
	// position(const QString&)
	int xret = this->QSqlRecord::position(*(const QString *)x[1].x_voidp);
	x[0].x_int = (int)xret;
    }
    void x_16(xargs *x) const {
	// fieldName(int)
	QString xret = this->QSqlRecord::fieldName((int)x[1].x_int);
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_17(xargs *x) {
	// field(int)
	QSqlField* xret = this->QSqlRecord::field((int)x[1].x_int);
	x[0].x_voidp = (void*)xret;
    }
    void x_18(xargs *x) {
	// field(const QString&)
	QSqlField* xret = this->QSqlRecord::field(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    void x_19(xargs *x) const {
	// field(int)
	const QSqlField* xret = this->QSqlRecord::field((int)x[1].x_int);
	x[0].x_voidp = (void*)xret;
    }
    void x_20(xargs *x) const {
	// field(const QString&)
	const QSqlField* xret = this->QSqlRecord::field(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    void x_21(xargs *x) {
	// append(const QSqlField&)
	this->QSqlRecord::append(*(const QSqlField *)x[1].x_voidp);
    }
    void x_22(xargs *x) {
	// insert(int, const QSqlField&)
	this->QSqlRecord::insert((int)x[1].x_int,*(const QSqlField *)x[2].x_voidp);
    }
    void x_23(xargs *x) {
	// remove(int)
	this->QSqlRecord::remove((int)x[1].x_int);
    }
    void x_24(xargs *x) const {
	// isEmpty()
	bool xret = this->QSqlRecord::isEmpty();
	x[0].x_bool = (bool)xret;
    }
    void x_25(xargs *x) const {
	// contains(const QString&)
	bool xret = this->QSqlRecord::contains(*(const QString *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_26(xargs *x) {
	// clear()
	this->QSqlRecord::clear();
    }
    void x_27(xargs *x) {
	// clearValues(bool)
	this->QSqlRecord::clearValues((bool)x[1].x_bool);
    }
    void x_28(xargs *x) {
	// clearValues()
	this->QSqlRecord::clearValues();
    }
    void x_29(xargs *x) const {
	// count()
	uint xret = this->QSqlRecord::count();
	x[0].x_uint = (uint)xret;
    }
    void x_30(xargs *x) const {
	// toString(const QString&, const QString&)
	QString xret = this->QSqlRecord::toString(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp);
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_31(xargs *x) const {
	// toString(const QString&)
	QString xret = this->QSqlRecord::toString(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_32(xargs *x) const {
	// toString()
	QString xret = this->QSqlRecord::toString();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_33(xargs *x) const {
	// toStringList(const QString&)
	QStringList xret = this->QSqlRecord::toStringList(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QStringList(xret);
    }
    void x_34(xargs *x) const {
	// toStringList()
	QStringList xret = this->QSqlRecord::toStringList();
	x[0].x_voidp = (void*)new QStringList(xret);
    }
    virtual void append(const QSqlField& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 7564, x)) return;
	this->QSqlRecord::append(x1);
    }
    virtual void clear() {
	xargs x[1];
	if(call_method((void*)this, 7569, x)) return;
	this->QSqlRecord::clear();
    }
    virtual void clearValues(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 7570, x)) return;
	this->QSqlRecord::clearValues(x1);
    }
    virtual void insert(int x1, const QSqlField& x2) {
	xargs x[3];
	x[1].x_int = (int)x1;
	x[2].x_voidp = (void*)&x2;
	if(call_method((void*)this, 7565, x)) return;
	this->QSqlRecord::insert(x1, x2);
    }
    virtual void remove(int x1) {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 7566, x)) return;
	this->QSqlRecord::remove(x1);
    }
    virtual void setGenerated(const QString& x1, bool x2) {
	xargs x[3];
	x[1].x_voidp = (void*)&x1;
	x[2].x_bool = (bool)x2;
	if(call_method((void*)this, 7552, x)) return;
	this->QSqlRecord::setGenerated(x1, x2);
    }
    virtual void setGenerated(int x1, bool x2) {
	xargs x[3];
	x[1].x_int = (int)x1;
	x[2].x_bool = (bool)x2;
	if(call_method((void*)this, 7553, x)) return;
	this->QSqlRecord::setGenerated(x1, x2);
    }
    virtual void setNull(const QString& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 7555, x)) return;
	this->QSqlRecord::setNull(x1);
    }
    virtual void setNull(int x1) {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 7554, x)) return;
	this->QSqlRecord::setNull(x1);
    }
    virtual void setValue(const QString& x1, const QVariant& x2) {
	xargs x[3];
	x[1].x_voidp = (void*)&x1;
	x[2].x_voidp = (void*)&x2;
	if(call_method((void*)this, 7549, x)) return;
	this->QSqlRecord::setValue(x1, x2);
    }
    virtual void setValue(int x1, const QVariant& x2) {
	xargs x[3];
	x[1].x_int = (int)x1;
	x[2].x_voidp = (void*)&x2;
	if(call_method((void*)this, 7548, x)) return;
	this->QSqlRecord::setValue(x1, x2);
    }
    virtual QString toString(const QString& x1, const QString& x2) const {
	xargs x[3];
	x[1].x_voidp = (void*)&x1;
	x[2].x_voidp = (void*)&x2;
	if(call_method((void*)this, 7573, x)) {
	    QString *xptr = (QString *)x[0].x_voidp;
	    QString xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QSqlRecord::toString(x1, x2);
    }
    virtual QStringList toStringList(const QString& x1) const {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 7576, x)) {
	    QStringList *xptr = (QStringList *)x[0].x_voidp;
	    QStringList xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QSqlRecord::toStringList(x1);
    }
    virtual QVariant value(const QString& x1) const {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 7547, x)) {
	    QVariant *xptr = (QVariant *)x[0].x_voidp;
	    QVariant xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QSqlRecord::value(x1);
    }
    virtual QVariant value(int x1) const {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 7546, x)) {
	    QVariant *xptr = (QVariant *)x[0].x_voidp;
	    QVariant xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QSqlRecord::value(x1);
    }
    ~x_QSqlRecord() {}
};
void xcall_QSqlRecord(xargs *x, void *s, int xi) {
    x_QSqlRecord *xself = (x_QSqlRecord*)s;
    switch(xi) {
	case 0: x_QSqlRecord::x_0(x);	break;
	case 1: x_QSqlRecord::x_1(x);	break;
	case 2: xself->x_2(x);	break;
	case 3: xself->x_3(x);	break;
	case 4: xself->x_4(x);	break;
	case 5: xself->x_5(x);	break;
	case 6: xself->x_6(x);	break;
	case 7: xself->x_7(x);	break;
	case 8: xself->x_8(x);	break;
	case 9: xself->x_9(x);	break;
	case 10: xself->x_10(x);	break;
	case 11: xself->x_11(x);	break;
	case 12: xself->x_12(x);	break;
	case 13: xself->x_13(x);	break;
	case 14: xself->x_14(x);	break;
	case 15: xself->x_15(x);	break;
	case 16: xself->x_16(x);	break;
	case 17: xself->x_17(x);	break;
	case 18: xself->x_18(x);	break;
	case 19: xself->x_19(x);	break;
	case 20: xself->x_20(x);	break;
	case 21: xself->x_21(x);	break;
	case 22: xself->x_22(x);	break;
	case 23: xself->x_23(x);	break;
	case 24: xself->x_24(x);	break;
	case 25: xself->x_25(x);	break;
	case 26: xself->x_26(x);	break;
	case 27: xself->x_27(x);	break;
	case 28: xself->x_28(x);	break;
	case 29: xself->x_29(x);	break;
	case 30: xself->x_30(x);	break;
	case 31: xself->x_31(x);	break;
	case 32: xself->x_32(x);	break;
	case 33: xself->x_33(x);	break;
	case 34: xself->x_34(x);	break;
	case 35: delete (QSqlRecord*)xself;	break;
    }
}
