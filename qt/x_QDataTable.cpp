//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qcursor.h>
#include <qcolor.h>
#include <qiconset.h>
#include <qdatatable.h>
#include <qstring.h>
#include <qsize.h>
#include <qvariant.h>
#include <qregion.h>
#include <qstringlist.h>
#include <qpoint.h>
#include <qfont.h>
#include <qsqlerror.h>
#include <qbitmap.h>
#include <qsizepolicy.h>
#include <qpalette.h>
#include <qnamespace.h>
#include <qsqlindex.h>
#include <qpixmap.h>
#include <qrect.h>
#include <qstyle.h>
#include <qtable.h>
#include <qscrollbar.h>

class x_QDataTable : public QDataTable {
public:
    static void x_0(xargs *x) {
	x[0].x_long = (long)QDataTable::RefreshData;
    }
    static void x_1(xargs *x) {
	x[0].x_long = (long)QDataTable::RefreshColumns;
    }
    static void x_2(xargs *x) {
	x[0].x_long = (long)QDataTable::RefreshAll;
    }
    static void x_3(xargs *x) {
	// QDataTable(QWidget*, const char*)
	x_QDataTable* xret = new x_QDataTable((QWidget*)x[1].x_voidp,(const char*)x[2].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QDataTable(QWidget* x1, const char* x2) : QDataTable(x1, x2) {
    }
    static void x_4(xargs *x) {
	// QDataTable(QWidget*)
	x_QDataTable* xret = new x_QDataTable((QWidget*)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QDataTable(QWidget* x1) : QDataTable(x1) {
    }
    static void x_5(xargs *x) {
	// QDataTable()
	x_QDataTable* xret = new x_QDataTable();
	x[0].x_voidp = (void*)xret;
    }
    x_QDataTable() : QDataTable() {
    }
    static void x_6(xargs *x) {
	// QDataTable(QSqlCursor*, bool, QWidget*, const char*)
	x_QDataTable* xret = new x_QDataTable((QSqlCursor*)x[1].x_voidp,(bool)x[2].x_bool,(QWidget*)x[3].x_voidp,(const char*)x[4].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QDataTable(QSqlCursor* x1, bool x2, QWidget* x3, const char* x4) : QDataTable(x1, x2, x3, x4) {
    }
    static void x_7(xargs *x) {
	// QDataTable(QSqlCursor*, bool, QWidget*)
	x_QDataTable* xret = new x_QDataTable((QSqlCursor*)x[1].x_voidp,(bool)x[2].x_bool,(QWidget*)x[3].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QDataTable(QSqlCursor* x1, bool x2, QWidget* x3) : QDataTable(x1, x2, x3) {
    }
    static void x_8(xargs *x) {
	// QDataTable(QSqlCursor*, bool)
	x_QDataTable* xret = new x_QDataTable((QSqlCursor*)x[1].x_voidp,(bool)x[2].x_bool);
	x[0].x_voidp = (void*)xret;
    }
    x_QDataTable(QSqlCursor* x1, bool x2) : QDataTable(x1, x2) {
    }
    static void x_9(xargs *x) {
	// QDataTable(QSqlCursor*)
	x_QDataTable* xret = new x_QDataTable((QSqlCursor*)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QDataTable(QSqlCursor* x1) : QDataTable(x1) {
    }
    void x_10(xargs *x) {
	// addColumn(const QString&, const QString&, int, const QIconSet&)
	this->QDataTable::addColumn(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp,(int)x[3].x_int,*(const QIconSet *)x[4].x_voidp);
    }
    void x_11(xargs *x) {
	// addColumn(const QString&, const QString&, int)
	this->QDataTable::addColumn(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp,(int)x[3].x_int);
    }
    void x_12(xargs *x) {
	// addColumn(const QString&, const QString&)
	this->QDataTable::addColumn(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp);
    }
    void x_13(xargs *x) {
	// addColumn(const QString&)
	this->QDataTable::addColumn(*(const QString *)x[1].x_voidp);
    }
    void x_14(xargs *x) {
	// removeColumn(uint)
	this->QDataTable::removeColumn((uint)x[1].x_uint);
    }
    void x_15(xargs *x) {
	// setColumn(uint, const QString&, const QString&, int, const QIconSet&)
	this->QDataTable::setColumn((uint)x[1].x_uint,*(const QString *)x[2].x_voidp,*(const QString *)x[3].x_voidp,(int)x[4].x_int,*(const QIconSet *)x[5].x_voidp);
    }
    void x_16(xargs *x) {
	// setColumn(uint, const QString&, const QString&, int)
	this->QDataTable::setColumn((uint)x[1].x_uint,*(const QString *)x[2].x_voidp,*(const QString *)x[3].x_voidp,(int)x[4].x_int);
    }
    void x_17(xargs *x) {
	// setColumn(uint, const QString&, const QString&)
	this->QDataTable::setColumn((uint)x[1].x_uint,*(const QString *)x[2].x_voidp,*(const QString *)x[3].x_voidp);
    }
    void x_18(xargs *x) {
	// setColumn(uint, const QString&)
	this->QDataTable::setColumn((uint)x[1].x_uint,*(const QString *)x[2].x_voidp);
    }
    void x_19(xargs *x) const {
	// nullText()
	QString xret = this->QDataTable::nullText();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_20(xargs *x) const {
	// trueText()
	QString xret = this->QDataTable::trueText();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_21(xargs *x) const {
	// falseText()
	QString xret = this->QDataTable::falseText();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_22(xargs *x) const {
	// dateFormat()
	Qt::DateFormat xret = this->QDataTable::dateFormat();
	x[0].x_long = (long)xret;
    }
    void x_23(xargs *x) const {
	// confirmEdits()
	bool xret = this->QDataTable::confirmEdits();
	x[0].x_bool = (bool)xret;
    }
    void x_24(xargs *x) const {
	// confirmInsert()
	bool xret = this->QDataTable::confirmInsert();
	x[0].x_bool = (bool)xret;
    }
    void x_25(xargs *x) const {
	// confirmUpdate()
	bool xret = this->QDataTable::confirmUpdate();
	x[0].x_bool = (bool)xret;
    }
    void x_26(xargs *x) const {
	// confirmDelete()
	bool xret = this->QDataTable::confirmDelete();
	x[0].x_bool = (bool)xret;
    }
    void x_27(xargs *x) const {
	// confirmCancels()
	bool xret = this->QDataTable::confirmCancels();
	x[0].x_bool = (bool)xret;
    }
    void x_28(xargs *x) const {
	// autoDelete()
	bool xret = this->QDataTable::autoDelete();
	x[0].x_bool = (bool)xret;
    }
    void x_29(xargs *x) const {
	// autoEdit()
	bool xret = this->QDataTable::autoEdit();
	x[0].x_bool = (bool)xret;
    }
    void x_30(xargs *x) const {
	// filter()
	QString xret = this->QDataTable::filter();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_31(xargs *x) const {
	// sort()
	QStringList xret = this->QDataTable::sort();
	x[0].x_voidp = (void*)new QStringList(xret);
    }
    void x_32(xargs *x) {
	// setSqlCursor(QSqlCursor*, bool, bool)
	this->QDataTable::setSqlCursor((QSqlCursor*)x[1].x_voidp,(bool)x[2].x_bool,(bool)x[3].x_bool);
    }
    void x_33(xargs *x) {
	// setSqlCursor(QSqlCursor*, bool)
	this->QDataTable::setSqlCursor((QSqlCursor*)x[1].x_voidp,(bool)x[2].x_bool);
    }
    void x_34(xargs *x) {
	// setSqlCursor(QSqlCursor*)
	this->QDataTable::setSqlCursor((QSqlCursor*)x[1].x_voidp);
    }
    void x_35(xargs *x) {
	// setSqlCursor()
	this->QDataTable::setSqlCursor();
    }
    void x_36(xargs *x) const {
	// sqlCursor()
	QSqlCursor* xret = this->QDataTable::sqlCursor();
	x[0].x_voidp = (void*)xret;
    }
    void x_37(xargs *x) {
	// setNullText(const QString&)
	this->QDataTable::setNullText(*(const QString *)x[1].x_voidp);
    }
    void x_38(xargs *x) {
	// setTrueText(const QString&)
	this->QDataTable::setTrueText(*(const QString *)x[1].x_voidp);
    }
    void x_39(xargs *x) {
	// setFalseText(const QString&)
	this->QDataTable::setFalseText(*(const QString *)x[1].x_voidp);
    }
    void x_40(xargs *x) {
	// setDateFormat(const Qt::DateFormat)
	this->QDataTable::setDateFormat(*(const Qt::DateFormat *)x[1].x_voidp);
    }
    void x_41(xargs *x) {
	// setConfirmEdits(bool)
	this->QDataTable::setConfirmEdits((bool)x[1].x_bool);
    }
    void x_42(xargs *x) {
	// setConfirmInsert(bool)
	this->QDataTable::setConfirmInsert((bool)x[1].x_bool);
    }
    void x_43(xargs *x) {
	// setConfirmUpdate(bool)
	this->QDataTable::setConfirmUpdate((bool)x[1].x_bool);
    }
    void x_44(xargs *x) {
	// setConfirmDelete(bool)
	this->QDataTable::setConfirmDelete((bool)x[1].x_bool);
    }
    void x_45(xargs *x) {
	// setConfirmCancels(bool)
	this->QDataTable::setConfirmCancels((bool)x[1].x_bool);
    }
    void x_46(xargs *x) {
	// setAutoDelete(bool)
	this->QDataTable::setAutoDelete((bool)x[1].x_bool);
    }
    void x_47(xargs *x) {
	// setAutoEdit(bool)
	this->QDataTable::setAutoEdit((bool)x[1].x_bool);
    }
    void x_48(xargs *x) {
	// setFilter(const QString&)
	this->QDataTable::setFilter(*(const QString *)x[1].x_voidp);
    }
    void x_49(xargs *x) {
	// setSort(const QStringList&)
	this->QDataTable::setSort(*(const QStringList *)x[1].x_voidp);
    }
    void x_50(xargs *x) {
	// setSort(const QSqlIndex&)
	this->QDataTable::setSort(*(const QSqlIndex *)x[1].x_voidp);
    }
    void x_51(xargs *x) {
	// refresh(QDataTable::Refresh)
	this->QDataTable::refresh((QDataTable::Refresh)x[1].x_long);
    }
    void x_52(xargs *x) {
	// sortColumn(int, bool, bool)
	this->QDataTable::sortColumn((int)x[1].x_int,(bool)x[2].x_bool,(bool)x[3].x_bool);
    }
    void x_53(xargs *x) {
	// sortColumn(int, bool)
	this->QDataTable::sortColumn((int)x[1].x_int,(bool)x[2].x_bool);
    }
    void x_54(xargs *x) {
	// sortColumn(int)
	this->QDataTable::sortColumn((int)x[1].x_int);
    }
    void x_55(xargs *x) const {
	// text(int, int)
	QString xret = this->QDataTable::text((int)x[1].x_int,(int)x[2].x_int);
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_56(xargs *x) const {
	// value(int, int)
	QVariant xret = this->QDataTable::value((int)x[1].x_int,(int)x[2].x_int);
	x[0].x_voidp = (void*)new QVariant(xret);
    }
    void x_57(xargs *x) const {
	// currentRecord()
	QSqlRecord* xret = this->QDataTable::currentRecord();
	x[0].x_voidp = (void*)xret;
    }
    void x_58(xargs *x) {
	// installEditorFactory(QSqlEditorFactory*)
	this->QDataTable::installEditorFactory((QSqlEditorFactory*)x[1].x_voidp);
    }
    void x_59(xargs *x) {
	// installPropertyMap(QSqlPropertyMap*)
	this->QDataTable::installPropertyMap((QSqlPropertyMap*)x[1].x_voidp);
    }
    void x_60(xargs *x) const {
	// numCols()
	int xret = this->QDataTable::numCols();
	x[0].x_int = (int)xret;
    }
    void x_61(xargs *x) const {
	// numRows()
	int xret = this->QDataTable::numRows();
	x[0].x_int = (int)xret;
    }
    void x_62(xargs *x) {
	// setNumCols(int)
	this->QDataTable::setNumCols((int)x[1].x_int);
    }
    void x_63(xargs *x) {
	// setNumRows(int)
	this->QDataTable::setNumRows((int)x[1].x_int);
    }
    void x_64(xargs *x) {
	// findBuffer(const QSqlIndex&, int)
	bool xret = this->QDataTable::findBuffer(*(const QSqlIndex *)x[1].x_voidp,(int)x[2].x_int);
	x[0].x_bool = (bool)xret;
    }
    void x_65(xargs *x) {
	// findBuffer(const QSqlIndex&)
	bool xret = this->QDataTable::findBuffer(*(const QSqlIndex *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_66(xargs *x) {
	// find(const QString&, bool, bool)
	this->QDataTable::find(*(const QString *)x[1].x_voidp,(bool)x[2].x_bool,(bool)x[3].x_bool);
    }
    void x_67(xargs *x) {
	// sortAscending(int)
	this->QDataTable::sortAscending((int)x[1].x_int);
    }
    void x_68(xargs *x) {
	// sortDescending(int)
	this->QDataTable::sortDescending((int)x[1].x_int);
    }
    void x_69(xargs *x) {
	// refresh()
	this->QDataTable::refresh();
    }
    void x_70(xargs *x) {
	// setColumnWidth(int, int)
	this->QDataTable::setColumnWidth((int)x[1].x_int,(int)x[2].x_int);
    }
    void x_71(xargs *x) {
	// currentChanged(QSqlRecord*)
	this->QDataTable::currentChanged((QSqlRecord*)x[1].x_voidp);
    }
    void x_72(xargs *x) {
	// primeInsert(QSqlRecord*)
	this->QDataTable::primeInsert((QSqlRecord*)x[1].x_voidp);
    }
    void x_73(xargs *x) {
	// primeUpdate(QSqlRecord*)
	this->QDataTable::primeUpdate((QSqlRecord*)x[1].x_voidp);
    }
    void x_74(xargs *x) {
	// primeDelete(QSqlRecord*)
	this->QDataTable::primeDelete((QSqlRecord*)x[1].x_voidp);
    }
    void x_75(xargs *x) {
	// beforeInsert(QSqlRecord*)
	this->QDataTable::beforeInsert((QSqlRecord*)x[1].x_voidp);
    }
    void x_76(xargs *x) {
	// beforeUpdate(QSqlRecord*)
	this->QDataTable::beforeUpdate((QSqlRecord*)x[1].x_voidp);
    }
    void x_77(xargs *x) {
	// beforeDelete(QSqlRecord*)
	this->QDataTable::beforeDelete((QSqlRecord*)x[1].x_voidp);
    }
    void x_78(xargs *x) {
	// cursorChanged(QSql::Op)
	this->QDataTable::cursorChanged((QSql::Op)x[1].x_long);
    }
    void x_79(xargs *x) {
	// insertCurrent()
	bool xret = this->QDataTable::insertCurrent();
	x[0].x_bool = (bool)xret;
    }
    void x_80(xargs *x) {
	// updateCurrent()
	bool xret = this->QDataTable::updateCurrent();
	x[0].x_bool = (bool)xret;
    }
    void x_81(xargs *x) {
	// deleteCurrent()
	bool xret = this->QDataTable::deleteCurrent();
	x[0].x_bool = (bool)xret;
    }
    void x_82(xargs *x) {
	// confirmEdit(QSql::Op)
	QSql::Confirm xret = this->QDataTable::confirmEdit((QSql::Op)x[1].x_long);
	x[0].x_long = (long)xret;
    }
    void x_83(xargs *x) {
	// confirmCancel(QSql::Op)
	QSql::Confirm xret = this->QDataTable::confirmCancel((QSql::Op)x[1].x_long);
	x[0].x_long = (long)xret;
    }
    void x_84(xargs *x) {
	// handleError(const QSqlError&)
	this->QDataTable::handleError(*(const QSqlError *)x[1].x_voidp);
    }
    void x_85(xargs *x) {
	// beginInsert()
	bool xret = this->QDataTable::beginInsert();
	x[0].x_bool = (bool)xret;
    }
    void x_86(xargs *x) {
	// beginUpdate(int, int, bool)
	QWidget* xret = this->QDataTable::beginUpdate((int)x[1].x_int,(int)x[2].x_int,(bool)x[3].x_bool);
	x[0].x_voidp = (void*)xret;
    }
    void x_87(xargs *x) {
	// eventFilter(QObject*, QEvent*)
	bool xret = this->QDataTable::eventFilter((QObject*)x[1].x_voidp,(QEvent*)x[2].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_88(xargs *x) {
	// resizeEvent(QResizeEvent*)
	this->QDataTable::resizeEvent((QResizeEvent*)x[1].x_voidp);
    }
    void x_89(xargs *x) {
	// contentsMousePressEvent(QMouseEvent*)
	this->QDataTable::contentsMousePressEvent((QMouseEvent*)x[1].x_voidp);
    }
    void x_90(xargs *x) {
	// contentsContextMenuEvent(QContextMenuEvent*)
	this->QDataTable::contentsContextMenuEvent((QContextMenuEvent*)x[1].x_voidp);
    }
    void x_91(xargs *x) {
	// endEdit(int, int, bool, bool)
	this->QDataTable::endEdit((int)x[1].x_int,(int)x[2].x_int,(bool)x[3].x_bool,(bool)x[4].x_bool);
    }
    void x_92(xargs *x) const {
	// createEditor(int, int, bool)
	QWidget* xret = this->QDataTable::createEditor((int)x[1].x_int,(int)x[2].x_int,(bool)x[3].x_bool);
	x[0].x_voidp = (void*)xret;
    }
    void x_93(xargs *x) {
	// activateNextCell()
	this->QDataTable::activateNextCell();
    }
    void x_94(xargs *x) const {
	// indexOf(uint)
	int xret = this->QDataTable::indexOf((uint)x[1].x_uint);
	x[0].x_int = (int)xret;
    }
    void x_95(xargs *x) {
	// reset()
	this->QDataTable::reset();
    }
    void x_96(xargs *x) {
	// setSize(QSqlCursor*)
	this->QDataTable::setSize((QSqlCursor*)x[1].x_voidp);
    }
    void x_97(xargs *x) {
	// repaintCell(int, int)
	this->QDataTable::repaintCell((int)x[1].x_int,(int)x[2].x_int);
    }
    void x_98(xargs *x) {
	// paintCell(QPainter*, int, int, const QRect&, bool, const QColorGroup&)
	this->QDataTable::paintCell((QPainter*)x[1].x_voidp,(int)x[2].x_int,(int)x[3].x_int,*(const QRect *)x[4].x_voidp,(bool)x[5].x_bool,*(const QColorGroup *)x[6].x_voidp);
    }
    void x_99(xargs *x) {
	// paintField(QPainter*, const QSqlField*, const QRect&, bool)
	this->QDataTable::paintField((QPainter*)x[1].x_voidp,(const QSqlField*)x[2].x_voidp,*(const QRect *)x[3].x_voidp,(bool)x[4].x_bool);
    }
    void x_100(xargs *x) {
	// fieldAlignment(const QSqlField*)
	int xret = this->QDataTable::fieldAlignment((const QSqlField*)x[1].x_voidp);
	x[0].x_int = (int)xret;
    }
    void x_101(xargs *x) {
	// columnClicked(int)
	this->QDataTable::columnClicked((int)x[1].x_int);
    }
    void x_102(xargs *x) {
	// resizeData(int)
	this->QDataTable::resizeData((int)x[1].x_int);
    }
    void x_103(xargs *x) const {
	// item(int, int)
	QTableItem* xret = this->QDataTable::item((int)x[1].x_int,(int)x[2].x_int);
	x[0].x_voidp = (void*)xret;
    }
    void x_104(xargs *x) {
	// setItem(int, int, QTableItem*)
	this->QDataTable::setItem((int)x[1].x_int,(int)x[2].x_int,(QTableItem*)x[3].x_voidp);
    }
    void x_105(xargs *x) {
	// clearCell(int, int)
	this->QDataTable::clearCell((int)x[1].x_int,(int)x[2].x_int);
    }
    void x_106(xargs *x) {
	// setPixmap(int, int, const QPixmap&)
	this->QDataTable::setPixmap((int)x[1].x_int,(int)x[2].x_int,*(const QPixmap *)x[3].x_voidp);
    }
    void x_107(xargs *x) {
	// takeItem(QTableItem*)
	this->QDataTable::takeItem((QTableItem*)x[1].x_voidp);
    }
    virtual void activateNextCell() {
	xargs x[1];
	if(call_method((void*)this, 1463, x)) return;
	this->QDataTable::activateNextCell();
    }
    virtual void addChild(QWidget* x1, int x2, int x3) {
	xargs x[4];
	x[1].x_voidp = (void*)x1;
	x[2].x_int = (int)x2;
	x[3].x_int = (int)x3;
	if(call_method((void*)this, 6590, x)) return;
	this->QScrollView::addChild(x1, x2, x3);
    }
    virtual void addColumn(const QString& x1, const QString& x2, int x3, const QIconSet& x4) {
	xargs x[5];
	x[1].x_voidp = (void*)&x1;
	x[2].x_voidp = (void*)&x2;
	x[3].x_int = (int)x3;
	x[4].x_voidp = (void*)&x4;
	if(call_method((void*)this, 1380, x)) return;
	this->QDataTable::addColumn(x1, x2, x3, x4);
    }
    virtual int addSelection(const QTableSelection& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 8253, x)) return (int)x[0].x_int;
	return this->QTable::addSelection(x1);
    }
    virtual void adjustColumn(int x1) {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 8289, x)) return;
	this->QTable::adjustColumn(x1);
    }
    virtual void adjustRow(int x1) {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 8290, x)) return;
	this->QTable::adjustRow(x1);
    }
    virtual void adjustSize() {
	xargs x[1];
	if(call_method((void*)this, 9618, x)) return;
	this->QWidget::adjustSize();
    }
    virtual bool beginInsert() {
	xargs x[1];
	if(call_method((void*)this, 1455, x)) return (bool)x[0].x_bool;
	return this->QDataTable::beginInsert();
    }
    virtual QWidget* beginUpdate(int x1, int x2, bool x3) {
	xargs x[4];
	x[1].x_int = (int)x1;
	x[2].x_int = (int)x2;
	x[3].x_bool = (bool)x3;
	if(call_method((void*)this, 1456, x)) 	return (QWidget*)x[0].x_voidp;
	return this->QDataTable::beginUpdate(x1, x2, x3);
    }
    virtual QRect cellGeometry(int x1, int x2) const {
	xargs x[3];
	x[1].x_int = (int)x1;
	x[2].x_int = (int)x2;
	if(call_method((void*)this, 8232, x)) {
	    QRect *xptr = (QRect *)x[0].x_voidp;
	    QRect xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QTable::cellGeometry(x1, x2);
    }
    virtual QRect cellRect(int x1, int x2) const {
	xargs x[3];
	x[1].x_int = (int)x1;
	x[2].x_int = (int)x2;
	if(call_method((void*)this, 8268, x)) {
	    QRect *xptr = (QRect *)x[0].x_voidp;
	    QRect xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QTable::cellRect(x1, x2);
    }
    virtual QWidget* cellWidget(int x1, int x2) const {
	xargs x[3];
	x[1].x_int = (int)x1;
	x[2].x_int = (int)x2;
	if(call_method((void*)this, 8266, x)) 	return (QWidget*)x[0].x_voidp;
	return this->QTable::cellWidget(x1, x2);
    }
    virtual bool checkConnectArgs(const char* x1, const QObject* x2, const char* x3) {
	xargs x[4];
	x[1].x_voidp = (void*)x1;
	x[2].x_voidp = (void*)x2;
	x[3].x_voidp = (void*)x3;
	if(call_method((void*)this, 5475, x)) return (bool)x[0].x_bool;
	return this->QObject::checkConnectArgs(x1, x2, x3);
    }
    virtual void childEvent(QChildEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5471, x)) return;
	this->QObject::childEvent(x1);
    }
    virtual void clearCell(int x1, int x2) {
	xargs x[3];
	x[1].x_int = (int)x1;
	x[2].x_int = (int)x2;
	if(call_method((void*)this, 1475, x)) return;
	this->QDataTable::clearCell(x1, x2);
    }
    virtual void clearCellWidget(int x1, int x2) {
	xargs x[3];
	x[1].x_int = (int)x1;
	x[2].x_int = (int)x2;
	if(call_method((void*)this, 8267, x)) return;
	this->QTable::clearCellWidget(x1, x2);
    }
    virtual bool close(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 9605, x)) return (bool)x[0].x_bool;
	return this->QWidget::close(x1);
    }
    virtual void closeEvent(QCloseEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 9713, x)) return;
	this->QWidget::closeEvent(x1);
    }
    virtual bool cmd(int x1, QPainter* x2, QPDevCmdParam* x3) {
	xargs x[4];
	x[1].x_int = (int)x1;
	x[2].x_voidp = (void*)x2;
	x[3].x_voidp = (void*)x3;
	if(call_method((void*)this, 5558, x)) return (bool)x[0].x_bool;
	return this->QPaintDevice::cmd(x1, x2, x3);
    }
    virtual int columnAt(int x1) const {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 8237, x)) return (int)x[0].x_int;
	return this->QTable::columnAt(x1);
    }
    virtual void columnClicked(int x1) {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 1471, x)) return;
	this->QDataTable::columnClicked(x1);
    }
    virtual void columnIndexChanged(int x1, int x2, int x3) {
	xargs x[4];
	x[1].x_int = (int)x1;
	x[2].x_int = (int)x2;
	x[3].x_int = (int)x3;
	if(call_method((void*)this, 8368, x)) return;
	this->QTable::columnIndexChanged(x1, x2, x3);
    }
    virtual int columnPos(int x1) const {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 8235, x)) return (int)x[0].x_int;
	return this->QTable::columnPos(x1);
    }
    virtual int columnWidth(int x1) const {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 8233, x)) return (int)x[0].x_int;
	return this->QTable::columnWidth(x1);
    }
    virtual void columnWidthChanged(int x1) {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 8366, x)) return;
	this->QTable::columnWidthChanged(x1);
    }
    virtual QSql::Confirm confirmCancel(QSql::Op x1) {
	xargs x[2];
	x[1].x_long = (long)x1;
	if(call_method((void*)this, 1453, x)) return (QSql::Confirm)x[0].x_long;
	return this->QDataTable::confirmCancel(x1);
    }
    virtual QSql::Confirm confirmEdit(QSql::Op x1) {
	xargs x[2];
	x[1].x_long = (long)x1;
	if(call_method((void*)this, 1452, x)) return (QSql::Confirm)x[0].x_long;
	return this->QDataTable::confirmEdit(x1);
    }
    virtual void connectNotify(const char* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5473, x)) return;
	this->QObject::connectNotify(x1);
    }
    virtual void contentsContextMenuEvent(QContextMenuEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 1460, x)) return;
	this->QDataTable::contentsContextMenuEvent(x1);
    }
    virtual void contentsDragEnterEvent(QDragEnterEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 8346, x)) return;
	this->QTable::contentsDragEnterEvent(x1);
    }
    virtual void contentsDragLeaveEvent(QDragLeaveEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 8348, x)) return;
	this->QTable::contentsDragLeaveEvent(x1);
    }
    virtual void contentsDragMoveEvent(QDragMoveEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 8347, x)) return;
	this->QTable::contentsDragMoveEvent(x1);
    }
    virtual void contentsDropEvent(QDropEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 8349, x)) return;
	this->QTable::contentsDropEvent(x1);
    }
    virtual void contentsMouseDoubleClickEvent(QMouseEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 8337, x)) return;
	this->QTable::contentsMouseDoubleClickEvent(x1);
    }
    virtual void contentsMouseMoveEvent(QMouseEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 8336, x)) return;
	this->QTable::contentsMouseMoveEvent(x1);
    }
    virtual void contentsMousePressEvent(QMouseEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 1459, x)) return;
	this->QDataTable::contentsMousePressEvent(x1);
    }
    virtual void contentsMouseReleaseEvent(QMouseEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 8338, x)) return;
	this->QTable::contentsMouseReleaseEvent(x1);
    }
    virtual void contentsWheelEvent(QWheelEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 6660, x)) return;
	this->QScrollView::contentsWheelEvent(x1);
    }
    virtual void contextMenuEvent(QContextMenuEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 6689, x)) return;
	this->QScrollView::contextMenuEvent(x1);
    }
    virtual void create(WId x1, bool x2, bool x3) {
	xargs x[4];
	x[1].x_voidp = (void*)&x1;
	x[2].x_bool = (bool)x2;
	x[3].x_bool = (bool)x3;
	if(call_method((void*)this, 9733, x)) return;
	this->QWidget::create(x1, x2, x3);
    }
    virtual QWidget* createEditor(int x1, int x2, bool x3) const {
	xargs x[4];
	x[1].x_int = (int)x1;
	x[2].x_int = (int)x2;
	x[3].x_bool = (bool)x3;
	if(call_method((void*)this, 1462, x)) 	return (QWidget*)x[0].x_voidp;
	return this->QDataTable::createEditor(x1, x2, x3);
    }
    virtual int currentSelection() const {
	xargs x[1];
	if(call_method((void*)this, 8256, x)) return (int)x[0].x_int;
	return this->QTable::currentSelection();
    }
    virtual void customEvent(QCustomEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5472, x)) return;
	this->QObject::customEvent(x1);
    }
    virtual bool customWhatsThis() const {
	xargs x[1];
	if(call_method((void*)this, 9643, x)) return (bool)x[0].x_bool;
	return this->QWidget::customWhatsThis();
    }
    virtual bool deleteCurrent() {
	xargs x[1];
	if(call_method((void*)this, 1451, x)) return (bool)x[0].x_bool;
	return this->QDataTable::deleteCurrent();
    }
    virtual void destroy(bool x1, bool x2) {
	xargs x[3];
	x[1].x_bool = (bool)x1;
	x[2].x_bool = (bool)x2;
	if(call_method((void*)this, 9737, x)) return;
	this->QWidget::destroy(x1, x2);
    }
    virtual void disconnectNotify(const char* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5474, x)) return;
	this->QObject::disconnectNotify(x1);
    }
    virtual void dragEnterEvent(QDragEnterEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 9719, x)) return;
	this->QWidget::dragEnterEvent(x1);
    }
    virtual void dragLeaveEvent(QDragLeaveEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 9721, x)) return;
	this->QWidget::dragLeaveEvent(x1);
    }
    virtual void dragMoveEvent(QDragMoveEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 9720, x)) return;
	this->QWidget::dragMoveEvent(x1);
    }
    virtual QDragObject* dragObject() {
	xargs x[1];
	if(call_method((void*)this, 8350, x)) 	return (QDragObject*)x[0].x_voidp;
	return this->QTable::dragObject();
    }
    virtual void drawContents(QPainter* x1, int x2, int x3, int x4, int x5) {
	xargs x[6];
	x[1].x_voidp = (void*)x1;
	x[2].x_int = (int)x2;
	x[3].x_int = (int)x3;
	x[4].x_int = (int)x4;
	x[5].x_int = (int)x5;
	if(call_method((void*)this, 8334, x)) return;
	this->QTable::drawContents(x1, x2, x3, x4, x5);
    }
    virtual void drawContentsOffset(QPainter* x1, int x2, int x3, int x4, int x5, int x6, int x7) {
	xargs x[8];
	x[1].x_voidp = (void*)x1;
	x[2].x_int = (int)x2;
	x[3].x_int = (int)x3;
	x[4].x_int = (int)x4;
	x[5].x_int = (int)x5;
	x[6].x_int = (int)x6;
	x[7].x_int = (int)x7;
	if(call_method((void*)this, 6651, x)) return;
	this->QScrollView::drawContentsOffset(x1, x2, x3, x4, x5, x6, x7);
    }
    virtual void drawFrame(QPainter* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 2946, x)) return;
	this->QFrame::drawFrame(x1);
    }
    virtual void dropEvent(QDropEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 9722, x)) return;
	this->QWidget::dropEvent(x1);
    }
    virtual void editCell(int x1, int x2, bool x3) {
	xargs x[4];
	x[1].x_int = (int)x1;
	x[2].x_int = (int)x2;
	x[3].x_bool = (bool)x3;
	if(call_method((void*)this, 8321, x)) return;
	this->QTable::editCell(x1, x2, x3);
    }
    virtual void enabledChange(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 9727, x)) return;
	this->QWidget::enabledChange(x1);
    }
    virtual void endEdit(int x1, int x2, bool x3, bool x4) {
	xargs x[5];
	x[1].x_int = (int)x1;
	x[2].x_int = (int)x2;
	x[3].x_bool = (bool)x3;
	x[4].x_bool = (bool)x4;
	if(call_method((void*)this, 1461, x)) return;
	this->QDataTable::endEdit(x1, x2, x3, x4);
    }
    virtual void enterEvent(QEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 9708, x)) return;
	this->QWidget::enterEvent(x1);
    }
    virtual bool event(QEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 9698, x)) return (bool)x[0].x_bool;
	return this->QWidget::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
	xargs x[3];
	x[1].x_voidp = (void*)x1;
	x[2].x_voidp = (void*)x2;
	if(call_method((void*)this, 1457, x)) return (bool)x[0].x_bool;
	return this->QDataTable::eventFilter(x1, x2);
    }
    virtual int fieldAlignment(const QSqlField* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 1470, x)) return (int)x[0].x_int;
	return this->QDataTable::fieldAlignment(x1);
    }
    virtual void find(const QString& x1, bool x2, bool x3) {
	xargs x[4];
	x[1].x_voidp = (void*)&x1;
	x[2].x_bool = (bool)x2;
	x[3].x_bool = (bool)x3;
	if(call_method((void*)this, 1436, x)) return;
	this->QDataTable::find(x1, x2, x3);
    }
    virtual void focusInEvent(QFocusEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 8341, x)) return;
	this->QTable::focusInEvent(x1);
    }
    virtual bool focusNextPrevChild(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 6680, x)) return (bool)x[0].x_bool;
	return this->QScrollView::focusNextPrevChild(x1);
    }
    virtual void focusOutEvent(QFocusEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 8342, x)) return;
	this->QTable::focusOutEvent(x1);
    }
    virtual void fontChange(const QFont& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9729, x)) return;
	this->QWidget::fontChange(x1);
    }
    virtual int fontInf(QFont* x1, int x2) const {
	xargs x[3];
	x[1].x_voidp = (void*)x1;
	x[2].x_int = (int)x2;
	if(call_method((void*)this, 5563, x)) return (int)x[0].x_int;
	return this->QPaintDevice::fontInf(x1, x2);
    }
    virtual int fontMet(QFont* x1, int x2, const char* x3, int x4) const {
	xargs x[5];
	x[1].x_voidp = (void*)x1;
	x[2].x_int = (int)x2;
	x[3].x_voidp = (void*)x3;
	x[4].x_int = (int)x4;
	if(call_method((void*)this, 5560, x)) return (int)x[0].x_int;
	return this->QPaintDevice::fontMet(x1, x2, x3, x4);
    }
    virtual void frameChanged() {
	xargs x[1];
	if(call_method((void*)this, 6674, x)) return;
	this->QScrollView::frameChanged();
    }
    virtual void handleError(const QSqlError& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 1454, x)) return;
	this->QDataTable::handleError(x1);
    }
    virtual int heightForWidth(int x1) const {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 9617, x)) return (int)x[0].x_int;
	return this->QWidget::heightForWidth(x1);
    }
    virtual void hide() {
	xargs x[1];
	if(call_method((void*)this, 9675, x)) return;
	this->QWidget::hide();
    }
    virtual void hideColumn(int x1) {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 8284, x)) return;
	this->QTable::hideColumn(x1);
    }
    virtual void hideEvent(QHideEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 9724, x)) return;
	this->QWidget::hideEvent(x1);
    }
    virtual void hideRow(int x1) {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 8283, x)) return;
	this->QTable::hideRow(x1);
    }
    virtual void imComposeEvent(QIMEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 9716, x)) return;
	this->QWidget::imComposeEvent(x1);
    }
    virtual void imEndEvent(QIMEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 9717, x)) return;
	this->QWidget::imEndEvent(x1);
    }
    virtual void imStartEvent(QIMEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 9715, x)) return;
	this->QWidget::imStartEvent(x1);
    }
    virtual void insertChild(QObject* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5433, x)) return;
	this->QObject::insertChild(x1);
    }
    virtual void insertColumns(int x1, int x2) {
	xargs x[3];
	x[1].x_int = (int)x1;
	x[2].x_int = (int)x2;
	if(call_method((void*)this, 8315, x)) return;
	this->QTable::insertColumns(x1, x2);
    }
    virtual bool insertCurrent() {
	xargs x[1];
	if(call_method((void*)this, 1449, x)) return (bool)x[0].x_bool;
	return this->QDataTable::insertCurrent();
    }
    virtual void insertRows(int x1, int x2) {
	xargs x[3];
	x[1].x_int = (int)x1;
	x[2].x_int = (int)x2;
	if(call_method((void*)this, 8313, x)) return;
	this->QTable::insertRows(x1, x2);
    }
    virtual void insertWidget(int x1, int x2, QWidget* x3) {
	xargs x[4];
	x[1].x_int = (int)x1;
	x[2].x_int = (int)x2;
	x[3].x_voidp = (void*)x3;
	if(call_method((void*)this, 8359, x)) return;
	this->QTable::insertWidget(x1, x2, x3);
    }
    virtual QTableItem* item(int x1, int x2) const {
	xargs x[3];
	x[1].x_int = (int)x1;
	x[2].x_int = (int)x2;
	if(call_method((void*)this, 1473, x)) 	return (QTableItem*)x[0].x_voidp;
	return this->QDataTable::item(x1, x2);
    }
    virtual void keyPressEvent(QKeyEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 8340, x)) return;
	this->QTable::keyPressEvent(x1);
    }
    virtual void keyReleaseEvent(QKeyEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 9705, x)) return;
	this->QWidget::keyReleaseEvent(x1);
    }
    virtual void leaveEvent(QEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 9709, x)) return;
	this->QWidget::leaveEvent(x1);
    }
    virtual int metric(int x1) const {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 9731, x)) return (int)x[0].x_int;
	return this->QWidget::metric(x1);
    }
    virtual QSize minimumSizeHint() const {
	xargs x[1];
	if(call_method((void*)this, 6636, x)) {
	    QSize *xptr = (QSize *)x[0].x_voidp;
	    QSize xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QScrollView::minimumSizeHint();
    }
    virtual void mouseDoubleClickEvent(QMouseEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 6686, x)) return;
	this->QScrollView::mouseDoubleClickEvent(x1);
    }
    virtual void mouseMoveEvent(QMouseEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 6687, x)) return;
	this->QScrollView::mouseMoveEvent(x1);
    }
    virtual void mousePressEvent(QMouseEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 6684, x)) return;
	this->QScrollView::mousePressEvent(x1);
    }
    virtual void mouseReleaseEvent(QMouseEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 6685, x)) return;
	this->QScrollView::mouseReleaseEvent(x1);
    }
    virtual void move(int x1, int x2) {
	xargs x[3];
	x[1].x_int = (int)x1;
	x[2].x_int = (int)x2;
	if(call_method((void*)this, 9687, x)) return;
	this->QWidget::move(x1, x2);
    }
    virtual void moveChild(QWidget* x1, int x2, int x3) {
	xargs x[4];
	x[1].x_voidp = (void*)x1;
	x[2].x_int = (int)x2;
	x[3].x_int = (int)x3;
	if(call_method((void*)this, 6593, x)) return;
	this->QScrollView::moveChild(x1, x2, x3);
    }
    virtual void moveEvent(QMoveEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 9711, x)) return;
	this->QWidget::moveEvent(x1);
    }
    virtual int numCols() const {
	xargs x[1];
	if(call_method((void*)this, 1430, x)) return (int)x[0].x_int;
	return this->QDataTable::numCols();
    }
    virtual int numRows() const {
	xargs x[1];
	if(call_method((void*)this, 1431, x)) return (int)x[0].x_int;
	return this->QDataTable::numRows();
    }
    virtual void paintCell(QPainter* x1, int x2, int x3, const QRect& x4, bool x5) {
	xargs x[6];
	x[1].x_voidp = (void*)x1;
	x[2].x_int = (int)x2;
	x[3].x_int = (int)x3;
	x[4].x_voidp = (void*)&x4;
	x[5].x_bool = (bool)x5;
	if(call_method((void*)this, 8269, x)) return;
	this->QTable::paintCell(x1, x2, x3, x4, x5);
    }
    virtual void paintCell(QPainter* x1, int x2, int x3, const QRect& x4, bool x5, const QColorGroup& x6) {
	xargs x[7];
	x[1].x_voidp = (void*)x1;
	x[2].x_int = (int)x2;
	x[3].x_int = (int)x3;
	x[4].x_voidp = (void*)&x4;
	x[5].x_bool = (bool)x5;
	x[6].x_voidp = (void*)&x6;
	if(call_method((void*)this, 1468, x)) return;
	this->QDataTable::paintCell(x1, x2, x3, x4, x5, x6);
    }
    virtual void paintEmptyArea(QPainter* x1, int x2, int x3, int x4, int x5) {
	xargs x[6];
	x[1].x_voidp = (void*)x1;
	x[2].x_int = (int)x2;
	x[3].x_int = (int)x3;
	x[4].x_int = (int)x4;
	x[5].x_int = (int)x5;
	if(call_method((void*)this, 8352, x)) return;
	this->QTable::paintEmptyArea(x1, x2, x3, x4, x5);
    }
    virtual void paintEvent(QPaintEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 2944, x)) return;
	this->QFrame::paintEvent(x1);
    }
    virtual void paintField(QPainter* x1, const QSqlField* x2, const QRect& x3, bool x4) {
	xargs x[5];
	x[1].x_voidp = (void*)x1;
	x[2].x_voidp = (void*)x2;
	x[3].x_voidp = (void*)&x3;
	x[4].x_bool = (bool)x4;
	if(call_method((void*)this, 1469, x)) return;
	this->QDataTable::paintField(x1, x2, x3, x4);
    }
    virtual void paintFocus(QPainter* x1, const QRect& x2) {
	xargs x[3];
	x[1].x_voidp = (void*)x1;
	x[2].x_voidp = (void*)&x2;
	if(call_method((void*)this, 8271, x)) return;
	this->QTable::paintFocus(x1, x2);
    }
    virtual void paletteChange(const QPalette& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9728, x)) return;
	this->QWidget::paletteChange(x1);
    }
    virtual QPixmap pixmap(int x1, int x2) const {
	xargs x[3];
	x[1].x_int = (int)x1;
	x[2].x_int = (int)x2;
	if(call_method((void*)this, 8230, x)) {
	    QPixmap *xptr = (QPixmap *)x[0].x_voidp;
	    QPixmap xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QTable::pixmap(x1, x2);
    }
    virtual void polish() {
	xargs x[1];
	if(call_method((void*)this, 9681, x)) return;
	this->QWidget::polish();
    }
    virtual QVariant property(const char* x1) const {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5447, x)) {
	    QVariant *xptr = (QVariant *)x[0].x_voidp;
	    QVariant xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QObject::property(x1);
    }
    virtual void refresh() {
	xargs x[1];
	if(call_method((void*)this, 1439, x)) return;
	this->QDataTable::refresh();
    }
    virtual void removeChild(QObject* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 6637, x)) return;
	this->QScrollView::removeChild(x1);
    }
    virtual void removeColumn(int x1) {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 8319, x)) return;
	this->QTable::removeColumn(x1);
    }
    virtual void removeColumn(uint x1) {
	xargs x[2];
	x[1].x_uint = (uint)x1;
	if(call_method((void*)this, 1384, x)) return;
	this->QDataTable::removeColumn(x1);
    }
    virtual void removeColumns(const QMemArray<int>& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 8320, x)) return;
	this->QTable::removeColumns(x1);
    }
    virtual void removeRow(int x1) {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 8317, x)) return;
	this->QTable::removeRow(x1);
    }
    virtual void removeRows(const QMemArray<int>& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 8318, x)) return;
	this->QTable::removeRows(x1);
    }
    virtual void removeSelection(const QTableSelection& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 8254, x)) return;
	this->QTable::removeSelection(x1);
    }
    virtual void removeSelection(int x1) {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 8255, x)) return;
	this->QTable::removeSelection(x1);
    }
    virtual void reparent(QWidget* x1, Qt::WFlags x2, const QPoint& x3, bool x4) {
	xargs x[5];
	x[1].x_voidp = (void*)x1;
	x[2].x_voidp = (void*)&x2;
	x[3].x_voidp = (void*)&x3;
	x[4].x_bool = (bool)x4;
	if(call_method((void*)this, 9621, x)) return;
	this->QWidget::reparent(x1, x2, x3, x4);
    }
    virtual void resize(int x1, int x2) {
	xargs x[3];
	x[1].x_int = (int)x1;
	x[2].x_int = (int)x2;
	if(call_method((void*)this, 6615, x)) return;
	this->QScrollView::resize(x1, x2);
    }
    virtual void resizeContents(int x1, int x2) {
	xargs x[3];
	x[1].x_int = (int)x1;
	x[2].x_int = (int)x2;
	if(call_method((void*)this, 6640, x)) return;
	this->QScrollView::resizeContents(x1, x2);
    }
    virtual void resizeData(int x1) {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 1472, x)) return;
	this->QDataTable::resizeData(x1);
    }
    virtual void resizeEvent(QResizeEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 1458, x)) return;
	this->QDataTable::resizeEvent(x1);
    }
    virtual int resolution() const {
	xargs x[1];
	if(call_method((void*)this, 5556, x)) return (int)x[0].x_int;
	return this->QPaintDevice::resolution();
    }
    virtual int rowAt(int x1) const {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 8238, x)) return (int)x[0].x_int;
	return this->QTable::rowAt(x1);
    }
    virtual int rowHeight(int x1) const {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 8234, x)) return (int)x[0].x_int;
	return this->QTable::rowHeight(x1);
    }
    virtual void rowHeightChanged(int x1) {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 8367, x)) return;
	this->QTable::rowHeightChanged(x1);
    }
    virtual void rowIndexChanged(int x1, int x2, int x3) {
	xargs x[4];
	x[1].x_int = (int)x1;
	x[2].x_int = (int)x2;
	x[3].x_int = (int)x3;
	if(call_method((void*)this, 8369, x)) return;
	this->QTable::rowIndexChanged(x1, x2, x3);
    }
    virtual int rowPos(int x1) const {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 8236, x)) return (int)x[0].x_int;
	return this->QTable::rowPos(x1);
    }
    virtual void setAcceptDrops(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 9638, x)) return;
	this->QWidget::setAcceptDrops(x1);
    }
    virtual void setActiveWindow() {
	xargs x[1];
	if(call_method((void*)this, 9592, x)) return;
	this->QWidget::setActiveWindow();
    }
    virtual void setAutoDelete(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 1416, x)) return;
	this->QDataTable::setAutoDelete(x1);
    }
    virtual void setAutoEdit(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 1417, x)) return;
	this->QDataTable::setAutoEdit(x1);
    }
    virtual void setAutoMask(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 9639, x)) return;
	this->QWidget::setAutoMask(x1);
    }
    virtual void setBackgroundColor(const QColor& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9588, x)) return;
	this->QWidget::setBackgroundColor(x1);
    }
    virtual void setBackgroundMode(Qt::BackgroundMode x1) {
	xargs x[2];
	x[1].x_long = (long)x1;
	if(call_method((void*)this, 9550, x)) return;
	this->QWidget::setBackgroundMode(x1);
    }
    virtual void setBackgroundOrigin(QWidget::BackgroundOrigin x1) {
	xargs x[2];
	x[1].x_long = (long)x1;
	if(call_method((void*)this, 9641, x)) return;
	this->QWidget::setBackgroundOrigin(x1);
    }
    virtual void setBackgroundPixmap(const QPixmap& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9590, x)) return;
	this->QWidget::setBackgroundPixmap(x1);
    }
    virtual void setCaption(const QString& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9656, x)) return;
	this->QWidget::setCaption(x1);
    }
    virtual void setCellContentFromEditor(int x1, int x2) {
	xargs x[3];
	x[1].x_int = (int)x1;
	x[2].x_int = (int)x2;
	if(call_method((void*)this, 8355, x)) return;
	this->QTable::setCellContentFromEditor(x1, x2);
    }
    virtual void setCellWidget(int x1, int x2, QWidget* x3) {
	xargs x[4];
	x[1].x_int = (int)x1;
	x[2].x_int = (int)x2;
	x[3].x_voidp = (void*)x3;
	if(call_method((void*)this, 8265, x)) return;
	this->QTable::setCellWidget(x1, x2, x3);
    }
    virtual void setColumn(uint x1, const QString& x2, const QString& x3, int x4, const QIconSet& x5) {
	xargs x[6];
	x[1].x_uint = (uint)x1;
	x[2].x_voidp = (void*)&x2;
	x[3].x_voidp = (void*)&x3;
	x[4].x_int = (int)x4;
	x[5].x_voidp = (void*)&x5;
	if(call_method((void*)this, 1385, x)) return;
	this->QDataTable::setColumn(x1, x2, x3, x4, x5);
    }
    virtual void setColumnMovingEnabled(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 8306, x)) return;
	this->QTable::setColumnMovingEnabled(x1);
    }
    virtual void setColumnReadOnly(int x1, bool x2) {
	xargs x[3];
	x[1].x_int = (int)x1;
	x[2].x_bool = (bool)x2;
	if(call_method((void*)this, 8310, x)) return;
	this->QTable::setColumnReadOnly(x1, x2);
    }
    virtual void setColumnStretchable(int x1, bool x2) {
	xargs x[3];
	x[1].x_int = (int)x1;
	x[2].x_bool = (bool)x2;
	if(call_method((void*)this, 8291, x)) return;
	this->QTable::setColumnStretchable(x1, x2);
    }
    virtual void setColumnWidth(int x1, int x2) {
	xargs x[3];
	x[1].x_int = (int)x1;
	x[2].x_int = (int)x2;
	if(call_method((void*)this, 1440, x)) return;
	this->QDataTable::setColumnWidth(x1, x2);
    }
    virtual void setConfirmCancels(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 1415, x)) return;
	this->QDataTable::setConfirmCancels(x1);
    }
    virtual void setConfirmDelete(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 1414, x)) return;
	this->QDataTable::setConfirmDelete(x1);
    }
    virtual void setConfirmEdits(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 1411, x)) return;
	this->QDataTable::setConfirmEdits(x1);
    }
    virtual void setConfirmInsert(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 1412, x)) return;
	this->QDataTable::setConfirmInsert(x1);
    }
    virtual void setConfirmUpdate(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 1413, x)) return;
	this->QDataTable::setConfirmUpdate(x1);
    }
    virtual void setContentsPos(int x1, int x2) {
	xargs x[3];
	x[1].x_int = (int)x1;
	x[2].x_int = (int)x2;
	if(call_method((void*)this, 6642, x)) return;
	this->QScrollView::setContentsPos(x1, x2);
    }
    virtual void setCornerWidget(QWidget* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 6604, x)) return;
	this->QScrollView::setCornerWidget(x1);
    }
    virtual void setCurrentCell(int x1, int x2) {
	xargs x[3];
	x[1].x_int = (int)x1;
	x[2].x_int = (int)x2;
	if(call_method((void*)this, 8303, x)) return;
	this->QTable::setCurrentCell(x1, x2);
    }
    virtual void setCursor(const QCursor& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9577, x)) return;
	this->QWidget::setCursor(x1);
    }
    virtual void setDateFormat(const Qt::DateFormat x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 1410, x)) return;
	this->QDataTable::setDateFormat(x1);
    }
    virtual void setDragAutoScroll(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 6638, x)) return;
	this->QScrollView::setDragAutoScroll(x1);
    }
    virtual void setDragEnabled(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 8311, x)) return;
	this->QTable::setDragEnabled(x1);
    }
    virtual void setEnabled(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 8276, x)) return;
	this->QTable::setEnabled(x1);
    }
    virtual void setEraseColor(const QColor& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9554, x)) return;
	this->QWidget::setEraseColor(x1);
    }
    virtual void setErasePixmap(const QPixmap& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9556, x)) return;
	this->QWidget::setErasePixmap(x1);
    }
    virtual void setFalseText(const QString& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 1409, x)) return;
	this->QDataTable::setFalseText(x1);
    }
    virtual void setFilter(const QString& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 1418, x)) return;
	this->QDataTable::setFilter(x1);
    }
    virtual void setFocus() {
	xargs x[1];
	if(call_method((void*)this, 9660, x)) return;
	this->QWidget::setFocus();
    }
    virtual void setFocusPolicy(QWidget::FocusPolicy x1) {
	xargs x[2];
	x[1].x_long = (long)x1;
	if(call_method((void*)this, 9595, x)) return;
	this->QWidget::setFocusPolicy(x1);
    }
    virtual void setFocusProxy(QWidget* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 9597, x)) return;
	this->QWidget::setFocusProxy(x1);
    }
    virtual void setFocusStyle(QTable::FocusStyle x1) {
	xargs x[2];
	x[1].x_long = (long)x1;
	if(call_method((void*)this, 8278, x)) return;
	this->QTable::setFocusStyle(x1);
    }
    virtual void setFont(const QFont& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9571, x)) return;
	this->QWidget::setFont(x1);
    }
    virtual void setFrameRect(const QRect& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 2943, x)) return;
	this->QFrame::setFrameRect(x1);
    }
    virtual void setFrameStyle(int x1) {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 2927, x)) return;
	this->QFrame::setFrameStyle(x1);
    }
    virtual void setGeometry(const QRect& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9692, x)) return;
	this->QWidget::setGeometry(x1);
    }
    virtual void setGeometry(int x1, int x2, int x3, int x4) {
	xargs x[5];
	x[1].x_int = (int)x1;
	x[2].x_int = (int)x2;
	x[3].x_int = (int)x3;
	x[4].x_int = (int)x4;
	if(call_method((void*)this, 9691, x)) return;
	this->QWidget::setGeometry(x1, x2, x3, x4);
    }
    virtual void setHBarGeometry(QScrollBar& x1, int x2, int x3, int x4, int x5) {
	xargs x[6];
	x[1].x_voidp = (void*)&x1;
	x[2].x_int = (int)x2;
	x[3].x_int = (int)x3;
	x[4].x_int = (int)x4;
	x[5].x_int = (int)x5;
	if(call_method((void*)this, 6681, x)) return;
	this->QScrollView::setHBarGeometry(x1, x2, x3, x4, x5);
    }
    virtual void setHScrollBarMode(QScrollView::ScrollBarMode x1) {
	xargs x[2];
	x[1].x_long = (long)x1;
	if(call_method((void*)this, 6602, x)) return;
	this->QScrollView::setHScrollBarMode(x1);
    }
    virtual void setIcon(const QPixmap& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9657, x)) return;
	this->QWidget::setIcon(x1);
    }
    virtual void setIconText(const QString& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9658, x)) return;
	this->QWidget::setIconText(x1);
    }
    virtual void setItem(int x1, int x2, QTableItem* x3) {
	xargs x[4];
	x[1].x_int = (int)x1;
	x[2].x_int = (int)x2;
	x[3].x_voidp = (void*)x3;
	if(call_method((void*)this, 1474, x)) return;
	this->QDataTable::setItem(x1, x2, x3);
    }
    virtual void setKeyCompression(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 9750, x)) return;
	this->QWidget::setKeyCompression(x1);
    }
    virtual void setLeftMargin(int x1) {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 8301, x)) return;
	this->QTable::setLeftMargin(x1);
    }
    virtual void setLineWidth(int x1) {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 2937, x)) return;
	this->QFrame::setLineWidth(x1);
    }
    virtual void setMargin(int x1) {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 2939, x)) return;
	this->QFrame::setMargin(x1);
    }
    virtual void setMargins(int x1, int x2, int x3, int x4) {
	xargs x[5];
	x[1].x_int = (int)x1;
	x[2].x_int = (int)x2;
	x[3].x_int = (int)x3;
	x[4].x_int = (int)x4;
	if(call_method((void*)this, 6675, x)) return;
	this->QScrollView::setMargins(x1, x2, x3, x4);
    }
    virtual void setMask(const QBitmap& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9584, x)) return;
	this->QWidget::setMask(x1);
    }
    virtual void setMask(const QRegion& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9585, x)) return;
	this->QWidget::setMask(x1);
    }
    virtual void setMaximumSize(int x1, int x2) {
	xargs x[3];
	x[1].x_int = (int)x1;
	x[2].x_int = (int)x2;
	if(call_method((void*)this, 9527, x)) return;
	this->QWidget::setMaximumSize(x1, x2);
    }
    virtual void setMicroFocusHint(int x1, int x2, int x3, int x4, bool x5, QFont* x6) {
	xargs x[7];
	x[1].x_int = (int)x1;
	x[2].x_int = (int)x2;
	x[3].x_int = (int)x3;
	x[4].x_int = (int)x4;
	x[5].x_bool = (bool)x5;
	x[6].x_voidp = (void*)x6;
	if(call_method((void*)this, 9751, x)) return;
	this->QWidget::setMicroFocusHint(x1, x2, x3, x4, x5, x6);
    }
    virtual void setMidLineWidth(int x1) {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 2941, x)) return;
	this->QFrame::setMidLineWidth(x1);
    }
    virtual void setMinimumSize(int x1, int x2) {
	xargs x[3];
	x[1].x_int = (int)x1;
	x[2].x_int = (int)x2;
	if(call_method((void*)this, 9525, x)) return;
	this->QWidget::setMinimumSize(x1, x2);
    }
    virtual void setMouseTracking(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 9659, x)) return;
	this->QWidget::setMouseTracking(x1);
    }
    virtual void setName(const char* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 9494, x)) return;
	this->QWidget::setName(x1);
    }
    virtual void setNullText(const QString& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 1407, x)) return;
	this->QDataTable::setNullText(x1);
    }
    virtual void setNumCols(int x1) {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 1432, x)) return;
	this->QDataTable::setNumCols(x1);
    }
    virtual void setNumRows(int x1) {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 1433, x)) return;
	this->QDataTable::setNumRows(x1);
    }
    virtual void setPalette(const QPalette& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9560, x)) return;
	this->QWidget::setPalette(x1);
    }
    virtual void setPaletteBackgroundColor(const QColor& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9565, x)) return;
	this->QWidget::setPaletteBackgroundColor(x1);
    }
    virtual void setPaletteBackgroundPixmap(const QPixmap& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9567, x)) return;
	this->QWidget::setPaletteBackgroundPixmap(x1);
    }
    virtual void setPixmap(int x1, int x2, const QPixmap& x3) {
	xargs x[4];
	x[1].x_int = (int)x1;
	x[2].x_int = (int)x2;
	x[3].x_voidp = (void*)&x3;
	if(call_method((void*)this, 1476, x)) return;
	this->QDataTable::setPixmap(x1, x2, x3);
    }
    virtual bool setProperty(const char* x1, const QVariant& x2) {
	xargs x[3];
	x[1].x_voidp = (void*)x1;
	x[2].x_voidp = (void*)&x2;
	if(call_method((void*)this, 5446, x)) return (bool)x[0].x_bool;
	return this->QObject::setProperty(x1, x2);
    }
    virtual void setReadOnly(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 8308, x)) return;
	this->QTable::setReadOnly(x1);
    }
    virtual void setResizePolicy(QScrollView::ResizePolicy x1) {
	xargs x[2];
	x[1].x_long = (long)x1;
	if(call_method((void*)this, 6586, x)) return;
	this->QScrollView::setResizePolicy(x1);
    }
    virtual void setResolution(int x1) {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 5555, x)) return;
	this->QPaintDevice::setResolution(x1);
    }
    virtual void setRowHeight(int x1, int x2) {
	xargs x[3];
	x[1].x_int = (int)x1;
	x[2].x_int = (int)x2;
	if(call_method((void*)this, 8288, x)) return;
	this->QTable::setRowHeight(x1, x2);
    }
    virtual void setRowMovingEnabled(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 8307, x)) return;
	this->QTable::setRowMovingEnabled(x1);
    }
    virtual void setRowReadOnly(int x1, bool x2) {
	xargs x[3];
	x[1].x_int = (int)x1;
	x[2].x_bool = (bool)x2;
	if(call_method((void*)this, 8309, x)) return;
	this->QTable::setRowReadOnly(x1, x2);
    }
    virtual void setRowStretchable(int x1, bool x2) {
	xargs x[3];
	x[1].x_int = (int)x1;
	x[2].x_bool = (bool)x2;
	if(call_method((void*)this, 8292, x)) return;
	this->QTable::setRowStretchable(x1, x2);
    }
    virtual void setSelectionMode(QTable::SelectionMode x1) {
	xargs x[2];
	x[1].x_long = (long)x1;
	if(call_method((void*)this, 8223, x)) return;
	this->QTable::setSelectionMode(x1);
    }
    virtual void setShowGrid(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 8282, x)) return;
	this->QTable::setShowGrid(x1);
    }
    virtual void setSizeIncrement(int x1, int x2) {
	xargs x[3];
	x[1].x_int = (int)x1;
	x[2].x_int = (int)x2;
	if(call_method((void*)this, 9534, x)) return;
	this->QWidget::setSizeIncrement(x1, x2);
    }
    virtual void setSizePolicy(QSizePolicy x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9616, x)) return;
	this->QWidget::setSizePolicy(x1);
    }
    virtual void setSort(const QSqlIndex& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 1420, x)) return;
	this->QDataTable::setSort(x1);
    }
    virtual void setSort(const QStringList& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 1419, x)) return;
	this->QDataTable::setSort(x1);
    }
    virtual void setSorting(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 8295, x)) return;
	this->QTable::setSorting(x1);
    }
    virtual void setSqlCursor(QSqlCursor* x1, bool x2, bool x3) {
	xargs x[4];
	x[1].x_voidp = (void*)x1;
	x[2].x_bool = (bool)x2;
	x[3].x_bool = (bool)x3;
	if(call_method((void*)this, 1402, x)) return;
	this->QDataTable::setSqlCursor(x1, x2, x3);
    }
    virtual void setText(int x1, int x2, const QString& x3) {
	xargs x[4];
	x[1].x_int = (int)x1;
	x[2].x_int = (int)x2;
	x[3].x_voidp = (void*)&x3;
	if(call_method((void*)this, 8226, x)) return;
	this->QTable::setText(x1, x2, x3);
    }
    virtual void setTopMargin(int x1) {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 8302, x)) return;
	this->QTable::setTopMargin(x1);
    }
    virtual void setTrueText(const QString& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 1408, x)) return;
	this->QDataTable::setTrueText(x1);
    }
    virtual void setUpdatesEnabled(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 9662, x)) return;
	this->QWidget::setUpdatesEnabled(x1);
    }
    virtual void setVBarGeometry(QScrollBar& x1, int x2, int x3, int x4, int x5) {
	xargs x[6];
	x[1].x_voidp = (void*)&x1;
	x[2].x_int = (int)x2;
	x[3].x_int = (int)x3;
	x[4].x_int = (int)x4;
	x[5].x_int = (int)x5;
	if(call_method((void*)this, 6682, x)) return;
	this->QScrollView::setVBarGeometry(x1, x2, x3, x4, x5);
    }
    virtual void setVScrollBarMode(QScrollView::ScrollBarMode x1) {
	xargs x[2];
	x[1].x_long = (long)x1;
	if(call_method((void*)this, 6600, x)) return;
	this->QScrollView::setVScrollBarMode(x1);
    }
    virtual void setWFlags(Qt::WFlags x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9744, x)) return;
	this->QWidget::setWFlags(x1);
    }
    virtual void setWState(uint x1) {
	xargs x[2];
	x[1].x_uint = (uint)x1;
	if(call_method((void*)this, 9741, x)) return;
	this->QWidget::setWState(x1);
    }
    virtual void show() {
	xargs x[1];
	if(call_method((void*)this, 6617, x)) return;
	this->QScrollView::show();
    }
    virtual void showColumn(int x1) {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 8286, x)) return;
	this->QTable::showColumn(x1);
    }
    virtual void showEvent(QShowEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 8344, x)) return;
	this->QTable::showEvent(x1);
    }
    virtual void showMaximized() {
	xargs x[1];
	if(call_method((void*)this, 9678, x)) return;
	this->QWidget::showMaximized();
    }
    virtual void showMinimized() {
	xargs x[1];
	if(call_method((void*)this, 9677, x)) return;
	this->QWidget::showMinimized();
    }
    virtual void showNormal() {
	xargs x[1];
	if(call_method((void*)this, 9680, x)) return;
	this->QWidget::showNormal();
    }
    virtual void showRow(int x1) {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 8285, x)) return;
	this->QTable::showRow(x1);
    }
    virtual QSize sizeHint() const {
	xargs x[1];
	if(call_method((void*)this, 8272, x)) {
	    QSize *xptr = (QSize *)x[0].x_voidp;
	    QSize xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QTable::sizeHint();
    }
    virtual QSizePolicy sizePolicy() const {
	xargs x[1];
	if(call_method((void*)this, 9615, x)) {
	    QSizePolicy *xptr = (QSizePolicy *)x[0].x_voidp;
	    QSizePolicy xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QWidget::sizePolicy();
    }
    virtual void sortAscending(int x1) {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 1437, x)) return;
	this->QDataTable::sortAscending(x1);
    }
    virtual void sortColumn(int x1, bool x2, bool x3) {
	xargs x[4];
	x[1].x_int = (int)x1;
	x[2].x_bool = (bool)x2;
	x[3].x_bool = (bool)x3;
	if(call_method((void*)this, 1422, x)) return;
	this->QDataTable::sortColumn(x1, x2, x3);
    }
    virtual void sortDescending(int x1) {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 1438, x)) return;
	this->QDataTable::sortDescending(x1);
    }
    virtual void startDrag() {
	xargs x[1];
	if(call_method((void*)this, 8351, x)) return;
	this->QTable::startDrag();
    }
    virtual void styleChange(QStyle& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 6588, x)) return;
	this->QScrollView::styleChange(x1);
    }
    virtual void swapCells(int x1, int x2, int x3, int x4) {
	xargs x[5];
	x[1].x_int = (int)x1;
	x[2].x_int = (int)x2;
	x[3].x_int = (int)x3;
	x[4].x_int = (int)x4;
	if(call_method((void*)this, 8300, x)) return;
	this->QTable::swapCells(x1, x2, x3, x4);
    }
    virtual void swapColumns(int x1, int x2, bool x3) {
	xargs x[4];
	x[1].x_int = (int)x1;
	x[2].x_int = (int)x2;
	x[3].x_bool = (bool)x3;
	if(call_method((void*)this, 8298, x)) return;
	this->QTable::swapColumns(x1, x2, x3);
    }
    virtual void swapRows(int x1, int x2, bool x3) {
	xargs x[4];
	x[1].x_int = (int)x1;
	x[2].x_int = (int)x2;
	x[3].x_bool = (bool)x3;
	if(call_method((void*)this, 8296, x)) return;
	this->QTable::swapRows(x1, x2, x3);
    }
    virtual void tabletEvent(QTabletEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 9718, x)) return;
	this->QWidget::tabletEvent(x1);
    }
    virtual void takeItem(QTableItem* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 1477, x)) return;
	this->QDataTable::takeItem(x1);
    }
    virtual QString text(int x1, int x2) const {
	xargs x[3];
	x[1].x_int = (int)x1;
	x[2].x_int = (int)x2;
	if(call_method((void*)this, 1425, x)) {
	    QString *xptr = (QString *)x[0].x_voidp;
	    QString xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDataTable::text(x1, x2);
    }
    virtual void timerEvent(QTimerEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5470, x)) return;
	this->QObject::timerEvent(x1);
    }
    virtual void unsetCursor() {
	xargs x[1];
	if(call_method((void*)this, 9578, x)) return;
	this->QWidget::unsetCursor();
    }
    virtual bool updateCurrent() {
	xargs x[1];
	if(call_method((void*)this, 1450, x)) return (bool)x[0].x_bool;
	return this->QDataTable::updateCurrent();
    }
    virtual void updateMask() {
	xargs x[1];
	if(call_method((void*)this, 9725, x)) return;
	this->QWidget::updateMask();
    }
    virtual void viewportContextMenuEvent(QContextMenuEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 6673, x)) return;
	this->QScrollView::viewportContextMenuEvent(x1);
    }
    virtual void viewportDragEnterEvent(QDragEnterEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 6668, x)) return;
	this->QScrollView::viewportDragEnterEvent(x1);
    }
    virtual void viewportDragLeaveEvent(QDragLeaveEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 6670, x)) return;
	this->QScrollView::viewportDragLeaveEvent(x1);
    }
    virtual void viewportDragMoveEvent(QDragMoveEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 6669, x)) return;
	this->QScrollView::viewportDragMoveEvent(x1);
    }
    virtual void viewportDropEvent(QDropEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 6671, x)) return;
	this->QScrollView::viewportDropEvent(x1);
    }
    virtual void viewportMouseDoubleClickEvent(QMouseEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 6666, x)) return;
	this->QScrollView::viewportMouseDoubleClickEvent(x1);
    }
    virtual void viewportMouseMoveEvent(QMouseEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 6667, x)) return;
	this->QScrollView::viewportMouseMoveEvent(x1);
    }
    virtual void viewportMousePressEvent(QMouseEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 6664, x)) return;
	this->QScrollView::viewportMousePressEvent(x1);
    }
    virtual void viewportMouseReleaseEvent(QMouseEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 6665, x)) return;
	this->QScrollView::viewportMouseReleaseEvent(x1);
    }
    virtual void viewportPaintEvent(QPaintEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 6662, x)) return;
	this->QScrollView::viewportPaintEvent(x1);
    }
    virtual void viewportResizeEvent(QResizeEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 8343, x)) return;
	this->QTable::viewportResizeEvent(x1);
    }
    virtual void viewportWheelEvent(QWheelEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 6672, x)) return;
	this->QScrollView::viewportWheelEvent(x1);
    }
    virtual void wheelEvent(QWheelEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 6688, x)) return;
	this->QScrollView::wheelEvent(x1);
    }
    virtual void windowActivationChange(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 8361, x)) return;
	this->QTable::windowActivationChange(x1);
    }
    ~x_QDataTable() {}
};
void xcall_QDataTable(xargs *x, void *s, int xi) {
    x_QDataTable *xself = (x_QDataTable*)s;
    switch(xi) {
	case 0: x_QDataTable::x_0(x);	break;
	case 1: x_QDataTable::x_1(x);	break;
	case 2: x_QDataTable::x_2(x);	break;
	case 3: x_QDataTable::x_3(x);	break;
	case 4: x_QDataTable::x_4(x);	break;
	case 5: x_QDataTable::x_5(x);	break;
	case 6: x_QDataTable::x_6(x);	break;
	case 7: x_QDataTable::x_7(x);	break;
	case 8: x_QDataTable::x_8(x);	break;
	case 9: x_QDataTable::x_9(x);	break;
	case 10: xself->x_10(x);	break;
	case 11: xself->x_11(x);	break;
	case 12: xself->x_12(x);	break;
	case 13: xself->x_13(x);	break;
	case 14: xself->x_14(x);	break;
	case 15: xself->x_15(x);	break;
	case 16: xself->x_16(x);	break;
	case 17: xself->x_17(x);	break;
	case 18: xself->x_18(x);	break;
	case 19: xself->x_19(x);	break;
	case 20: xself->x_20(x);	break;
	case 21: xself->x_21(x);	break;
	case 22: xself->x_22(x);	break;
	case 23: xself->x_23(x);	break;
	case 24: xself->x_24(x);	break;
	case 25: xself->x_25(x);	break;
	case 26: xself->x_26(x);	break;
	case 27: xself->x_27(x);	break;
	case 28: xself->x_28(x);	break;
	case 29: xself->x_29(x);	break;
	case 30: xself->x_30(x);	break;
	case 31: xself->x_31(x);	break;
	case 32: xself->x_32(x);	break;
	case 33: xself->x_33(x);	break;
	case 34: xself->x_34(x);	break;
	case 35: xself->x_35(x);	break;
	case 36: xself->x_36(x);	break;
	case 37: xself->x_37(x);	break;
	case 38: xself->x_38(x);	break;
	case 39: xself->x_39(x);	break;
	case 40: xself->x_40(x);	break;
	case 41: xself->x_41(x);	break;
	case 42: xself->x_42(x);	break;
	case 43: xself->x_43(x);	break;
	case 44: xself->x_44(x);	break;
	case 45: xself->x_45(x);	break;
	case 46: xself->x_46(x);	break;
	case 47: xself->x_47(x);	break;
	case 48: xself->x_48(x);	break;
	case 49: xself->x_49(x);	break;
	case 50: xself->x_50(x);	break;
	case 51: xself->x_51(x);	break;
	case 52: xself->x_52(x);	break;
	case 53: xself->x_53(x);	break;
	case 54: xself->x_54(x);	break;
	case 55: xself->x_55(x);	break;
	case 56: xself->x_56(x);	break;
	case 57: xself->x_57(x);	break;
	case 58: xself->x_58(x);	break;
	case 59: xself->x_59(x);	break;
	case 60: xself->x_60(x);	break;
	case 61: xself->x_61(x);	break;
	case 62: xself->x_62(x);	break;
	case 63: xself->x_63(x);	break;
	case 64: xself->x_64(x);	break;
	case 65: xself->x_65(x);	break;
	case 66: xself->x_66(x);	break;
	case 67: xself->x_67(x);	break;
	case 68: xself->x_68(x);	break;
	case 69: xself->x_69(x);	break;
	case 70: xself->x_70(x);	break;
	case 71: xself->x_71(x);	break;
	case 72: xself->x_72(x);	break;
	case 73: xself->x_73(x);	break;
	case 74: xself->x_74(x);	break;
	case 75: xself->x_75(x);	break;
	case 76: xself->x_76(x);	break;
	case 77: xself->x_77(x);	break;
	case 78: xself->x_78(x);	break;
	case 79: xself->x_79(x);	break;
	case 80: xself->x_80(x);	break;
	case 81: xself->x_81(x);	break;
	case 82: xself->x_82(x);	break;
	case 83: xself->x_83(x);	break;
	case 84: xself->x_84(x);	break;
	case 85: xself->x_85(x);	break;
	case 86: xself->x_86(x);	break;
	case 87: xself->x_87(x);	break;
	case 88: xself->x_88(x);	break;
	case 89: xself->x_89(x);	break;
	case 90: xself->x_90(x);	break;
	case 91: xself->x_91(x);	break;
	case 92: xself->x_92(x);	break;
	case 93: xself->x_93(x);	break;
	case 94: xself->x_94(x);	break;
	case 95: xself->x_95(x);	break;
	case 96: xself->x_96(x);	break;
	case 97: xself->x_97(x);	break;
	case 98: xself->x_98(x);	break;
	case 99: xself->x_99(x);	break;
	case 100: xself->x_100(x);	break;
	case 101: xself->x_101(x);	break;
	case 102: xself->x_102(x);	break;
	case 103: xself->x_103(x);	break;
	case 104: xself->x_104(x);	break;
	case 105: xself->x_105(x);	break;
	case 106: xself->x_106(x);	break;
	case 107: xself->x_107(x);	break;
	case 108: delete (QDataTable*)xself;	break;
    }
}
