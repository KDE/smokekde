//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke.h>
#include <qt_smoke.h>
#include <qcursor.h>
#include <qcolor.h>
#include <qiconset.h>
#include <qdatatable.h>
#include <qsql.h>
#include <qstring.h>
#include <qsize.h>
#include <qvariant.h>
#include <qregion.h>
#include <qscrollview.h>
#include <qstringlist.h>
#include <qpoint.h>
#include <qfont.h>
#include <qbitmap.h>
#include <qsqlerror.h>
#include <qsizepolicy.h>
#include <qpalette.h>
#include <qwidget.h>
#include <qnamespace.h>
#include <qsqlindex.h>
#include <qrect.h>
#include <qpixmap.h>
#include <qstyle.h>
#include <qscrollbar.h>
#include <qtable.h>

class x_QDataTable : public QDataTable {
public:
    static void x_0(Smoke::Stack x) {
	x[0].s_enum = (long)QDataTable::RefreshData;
    }
    static void x_1(Smoke::Stack x) {
	x[0].s_enum = (long)QDataTable::RefreshColumns;
    }
    static void x_2(Smoke::Stack x) {
	x[0].s_enum = (long)QDataTable::RefreshAll;
    }
    static void x_3(Smoke::Stack x) {
	// QDataTable(QWidget*, const char*)
	x_QDataTable* xret = new x_QDataTable((QWidget*)x[1].s_class,(const char*)x[2].s_class);
	x[0].s_class = (void*)xret;
    }
    x_QDataTable(QWidget* x1, const char* x2) : QDataTable(x1, x2) {
    }
    static void x_4(Smoke::Stack x) {
	// QDataTable(QWidget*)
	x_QDataTable* xret = new x_QDataTable((QWidget*)x[1].s_class);
	x[0].s_class = (void*)xret;
    }
    x_QDataTable(QWidget* x1) : QDataTable(x1) {
    }
    static void x_5(Smoke::Stack x) {
	// QDataTable()
	x_QDataTable* xret = new x_QDataTable();
	x[0].s_class = (void*)xret;
    }
    x_QDataTable() : QDataTable() {
    }
    static void x_6(Smoke::Stack x) {
	// QDataTable(QSqlCursor*, bool, QWidget*, const char*)
	x_QDataTable* xret = new x_QDataTable((QSqlCursor*)x[1].s_class,(bool)x[2].s_bool,(QWidget*)x[3].s_class,(const char*)x[4].s_class);
	x[0].s_class = (void*)xret;
    }
    x_QDataTable(QSqlCursor* x1, bool x2, QWidget* x3, const char* x4) : QDataTable(x1, x2, x3, x4) {
    }
    static void x_7(Smoke::Stack x) {
	// QDataTable(QSqlCursor*, bool, QWidget*)
	x_QDataTable* xret = new x_QDataTable((QSqlCursor*)x[1].s_class,(bool)x[2].s_bool,(QWidget*)x[3].s_class);
	x[0].s_class = (void*)xret;
    }
    x_QDataTable(QSqlCursor* x1, bool x2, QWidget* x3) : QDataTable(x1, x2, x3) {
    }
    static void x_8(Smoke::Stack x) {
	// QDataTable(QSqlCursor*, bool)
	x_QDataTable* xret = new x_QDataTable((QSqlCursor*)x[1].s_class,(bool)x[2].s_bool);
	x[0].s_class = (void*)xret;
    }
    x_QDataTable(QSqlCursor* x1, bool x2) : QDataTable(x1, x2) {
    }
    static void x_9(Smoke::Stack x) {
	// QDataTable(QSqlCursor*)
	x_QDataTable* xret = new x_QDataTable((QSqlCursor*)x[1].s_class);
	x[0].s_class = (void*)xret;
    }
    x_QDataTable(QSqlCursor* x1) : QDataTable(x1) {
    }
    void x_10(Smoke::Stack x) {
	// addColumn(const QString&, const QString&, int, const QIconSet&)
	this->QDataTable::addColumn(*(const QString *)x[1].s_class,*(const QString *)x[2].s_class,(int)x[3].s_int,*(const QIconSet *)x[4].s_class);
    }
    void x_11(Smoke::Stack x) {
	// addColumn(const QString&, const QString&, int)
	this->QDataTable::addColumn(*(const QString *)x[1].s_class,*(const QString *)x[2].s_class,(int)x[3].s_int);
    }
    void x_12(Smoke::Stack x) {
	// addColumn(const QString&, const QString&)
	this->QDataTable::addColumn(*(const QString *)x[1].s_class,*(const QString *)x[2].s_class);
    }
    void x_13(Smoke::Stack x) {
	// addColumn(const QString&)
	this->QDataTable::addColumn(*(const QString *)x[1].s_class);
    }
    void x_14(Smoke::Stack x) {
	// removeColumn(uint)
	this->QDataTable::removeColumn((uint)x[1].s_uint);
    }
    void x_15(Smoke::Stack x) {
	// setColumn(uint, const QString&, const QString&, int, const QIconSet&)
	this->QDataTable::setColumn((uint)x[1].s_uint,*(const QString *)x[2].s_class,*(const QString *)x[3].s_class,(int)x[4].s_int,*(const QIconSet *)x[5].s_class);
    }
    void x_16(Smoke::Stack x) {
	// setColumn(uint, const QString&, const QString&, int)
	this->QDataTable::setColumn((uint)x[1].s_uint,*(const QString *)x[2].s_class,*(const QString *)x[3].s_class,(int)x[4].s_int);
    }
    void x_17(Smoke::Stack x) {
	// setColumn(uint, const QString&, const QString&)
	this->QDataTable::setColumn((uint)x[1].s_uint,*(const QString *)x[2].s_class,*(const QString *)x[3].s_class);
    }
    void x_18(Smoke::Stack x) {
	// setColumn(uint, const QString&)
	this->QDataTable::setColumn((uint)x[1].s_uint,*(const QString *)x[2].s_class);
    }
    void x_19(Smoke::Stack x) const {
	// nullText()
	QString xret = this->QDataTable::nullText();
	x[0].s_class = (void*)new QString(xret);
    }
    void x_20(Smoke::Stack x) const {
	// trueText()
	QString xret = this->QDataTable::trueText();
	x[0].s_class = (void*)new QString(xret);
    }
    void x_21(Smoke::Stack x) const {
	// falseText()
	QString xret = this->QDataTable::falseText();
	x[0].s_class = (void*)new QString(xret);
    }
    void x_22(Smoke::Stack x) const {
	// dateFormat()
	Qt::DateFormat xret = this->QDataTable::dateFormat();
	x[0].s_class = (void*)new Qt::DateFormat(xret);
    }
    void x_23(Smoke::Stack x) const {
	// confirmEdits()
	bool xret = this->QDataTable::confirmEdits();
	x[0].s_bool = (bool)xret;
    }
    void x_24(Smoke::Stack x) const {
	// confirmInsert()
	bool xret = this->QDataTable::confirmInsert();
	x[0].s_bool = (bool)xret;
    }
    void x_25(Smoke::Stack x) const {
	// confirmUpdate()
	bool xret = this->QDataTable::confirmUpdate();
	x[0].s_bool = (bool)xret;
    }
    void x_26(Smoke::Stack x) const {
	// confirmDelete()
	bool xret = this->QDataTable::confirmDelete();
	x[0].s_bool = (bool)xret;
    }
    void x_27(Smoke::Stack x) const {
	// confirmCancels()
	bool xret = this->QDataTable::confirmCancels();
	x[0].s_bool = (bool)xret;
    }
    void x_28(Smoke::Stack x) const {
	// autoDelete()
	bool xret = this->QDataTable::autoDelete();
	x[0].s_bool = (bool)xret;
    }
    void x_29(Smoke::Stack x) const {
	// autoEdit()
	bool xret = this->QDataTable::autoEdit();
	x[0].s_bool = (bool)xret;
    }
    void x_30(Smoke::Stack x) const {
	// filter()
	QString xret = this->QDataTable::filter();
	x[0].s_class = (void*)new QString(xret);
    }
    void x_31(Smoke::Stack x) const {
	// sort()
	QStringList xret = this->QDataTable::sort();
	x[0].s_class = (void*)new QStringList(xret);
    }
    void x_32(Smoke::Stack x) {
	// setSqlCursor(QSqlCursor*, bool, bool)
	this->QDataTable::setSqlCursor((QSqlCursor*)x[1].s_class,(bool)x[2].s_bool,(bool)x[3].s_bool);
    }
    void x_33(Smoke::Stack x) {
	// setSqlCursor(QSqlCursor*, bool)
	this->QDataTable::setSqlCursor((QSqlCursor*)x[1].s_class,(bool)x[2].s_bool);
    }
    void x_34(Smoke::Stack x) {
	// setSqlCursor(QSqlCursor*)
	this->QDataTable::setSqlCursor((QSqlCursor*)x[1].s_class);
    }
    void x_35(Smoke::Stack x) {
	// setSqlCursor()
	this->QDataTable::setSqlCursor();
    }
    void x_36(Smoke::Stack x) const {
	// sqlCursor()
	QSqlCursor* xret = this->QDataTable::sqlCursor();
	x[0].s_class = (void*)xret;
    }
    void x_37(Smoke::Stack x) {
	// setNullText(const QString&)
	this->QDataTable::setNullText(*(const QString *)x[1].s_class);
    }
    void x_38(Smoke::Stack x) {
	// setTrueText(const QString&)
	this->QDataTable::setTrueText(*(const QString *)x[1].s_class);
    }
    void x_39(Smoke::Stack x) {
	// setFalseText(const QString&)
	this->QDataTable::setFalseText(*(const QString *)x[1].s_class);
    }
    void x_40(Smoke::Stack x) {
	// setDateFormat(const Qt::DateFormat)
	this->QDataTable::setDateFormat(*(const Qt::DateFormat *)x[1].s_class);
    }
    void x_41(Smoke::Stack x) {
	// setConfirmEdits(bool)
	this->QDataTable::setConfirmEdits((bool)x[1].s_bool);
    }
    void x_42(Smoke::Stack x) {
	// setConfirmInsert(bool)
	this->QDataTable::setConfirmInsert((bool)x[1].s_bool);
    }
    void x_43(Smoke::Stack x) {
	// setConfirmUpdate(bool)
	this->QDataTable::setConfirmUpdate((bool)x[1].s_bool);
    }
    void x_44(Smoke::Stack x) {
	// setConfirmDelete(bool)
	this->QDataTable::setConfirmDelete((bool)x[1].s_bool);
    }
    void x_45(Smoke::Stack x) {
	// setConfirmCancels(bool)
	this->QDataTable::setConfirmCancels((bool)x[1].s_bool);
    }
    void x_46(Smoke::Stack x) {
	// setAutoDelete(bool)
	this->QDataTable::setAutoDelete((bool)x[1].s_bool);
    }
    void x_47(Smoke::Stack x) {
	// setAutoEdit(bool)
	this->QDataTable::setAutoEdit((bool)x[1].s_bool);
    }
    void x_48(Smoke::Stack x) {
	// setFilter(const QString&)
	this->QDataTable::setFilter(*(const QString *)x[1].s_class);
    }
    void x_49(Smoke::Stack x) {
	// setSort(const QStringList&)
	this->QDataTable::setSort(*(const QStringList *)x[1].s_class);
    }
    void x_50(Smoke::Stack x) {
	// setSort(const QSqlIndex&)
	this->QDataTable::setSort(*(const QSqlIndex *)x[1].s_class);
    }
    void x_51(Smoke::Stack x) {
	// refresh(QDataTable::Refresh)
	this->QDataTable::refresh(*(QDataTable::Refresh *)x[1].s_class);
    }
    void x_52(Smoke::Stack x) {
	// sortColumn(int, bool, bool)
	this->QDataTable::sortColumn((int)x[1].s_int,(bool)x[2].s_bool,(bool)x[3].s_bool);
    }
    void x_53(Smoke::Stack x) {
	// sortColumn(int, bool)
	this->QDataTable::sortColumn((int)x[1].s_int,(bool)x[2].s_bool);
    }
    void x_54(Smoke::Stack x) {
	// sortColumn(int)
	this->QDataTable::sortColumn((int)x[1].s_int);
    }
    void x_55(Smoke::Stack x) const {
	// text(int, int)
	QString xret = this->QDataTable::text((int)x[1].s_int,(int)x[2].s_int);
	x[0].s_class = (void*)new QString(xret);
    }
    void x_56(Smoke::Stack x) const {
	// value(int, int)
	QVariant xret = this->QDataTable::value((int)x[1].s_int,(int)x[2].s_int);
	x[0].s_class = (void*)new QVariant(xret);
    }
    void x_57(Smoke::Stack x) const {
	// currentRecord()
	QSqlRecord* xret = this->QDataTable::currentRecord();
	x[0].s_class = (void*)xret;
    }
    void x_58(Smoke::Stack x) {
	// installEditorFactory(QSqlEditorFactory*)
	this->QDataTable::installEditorFactory((QSqlEditorFactory*)x[1].s_class);
    }
    void x_59(Smoke::Stack x) {
	// installPropertyMap(QSqlPropertyMap*)
	this->QDataTable::installPropertyMap((QSqlPropertyMap*)x[1].s_class);
    }
    void x_60(Smoke::Stack x) const {
	// numCols()
	int xret = this->QDataTable::numCols();
	x[0].s_int = (int)xret;
    }
    void x_61(Smoke::Stack x) const {
	// numRows()
	int xret = this->QDataTable::numRows();
	x[0].s_int = (int)xret;
    }
    void x_62(Smoke::Stack x) {
	// setNumCols(int)
	this->QDataTable::setNumCols((int)x[1].s_int);
    }
    void x_63(Smoke::Stack x) {
	// setNumRows(int)
	this->QDataTable::setNumRows((int)x[1].s_int);
    }
    void x_64(Smoke::Stack x) {
	// findBuffer(const QSqlIndex&, int)
	bool xret = this->QDataTable::findBuffer(*(const QSqlIndex *)x[1].s_class,(int)x[2].s_int);
	x[0].s_bool = (bool)xret;
    }
    void x_65(Smoke::Stack x) {
	// findBuffer(const QSqlIndex&)
	bool xret = this->QDataTable::findBuffer(*(const QSqlIndex *)x[1].s_class);
	x[0].s_bool = (bool)xret;
    }
    void x_66(Smoke::Stack x) {
	// find(const QString&, bool, bool)
	this->QDataTable::find(*(const QString *)x[1].s_class,(bool)x[2].s_bool,(bool)x[3].s_bool);
    }
    void x_67(Smoke::Stack x) {
	// sortAscending(int)
	this->QDataTable::sortAscending((int)x[1].s_int);
    }
    void x_68(Smoke::Stack x) {
	// sortDescending(int)
	this->QDataTable::sortDescending((int)x[1].s_int);
    }
    void x_69(Smoke::Stack x) {
	// refresh()
	this->QDataTable::refresh();
    }
    void x_70(Smoke::Stack x) {
	// setColumnWidth(int, int)
	this->QDataTable::setColumnWidth((int)x[1].s_int,(int)x[2].s_int);
    }
    void x_71(Smoke::Stack x) {
	// currentChanged(QSqlRecord*)
	this->QDataTable::currentChanged((QSqlRecord*)x[1].s_class);
    }
    void x_72(Smoke::Stack x) {
	// primeInsert(QSqlRecord*)
	this->QDataTable::primeInsert((QSqlRecord*)x[1].s_class);
    }
    void x_73(Smoke::Stack x) {
	// primeUpdate(QSqlRecord*)
	this->QDataTable::primeUpdate((QSqlRecord*)x[1].s_class);
    }
    void x_74(Smoke::Stack x) {
	// primeDelete(QSqlRecord*)
	this->QDataTable::primeDelete((QSqlRecord*)x[1].s_class);
    }
    void x_75(Smoke::Stack x) {
	// beforeInsert(QSqlRecord*)
	this->QDataTable::beforeInsert((QSqlRecord*)x[1].s_class);
    }
    void x_76(Smoke::Stack x) {
	// beforeUpdate(QSqlRecord*)
	this->QDataTable::beforeUpdate((QSqlRecord*)x[1].s_class);
    }
    void x_77(Smoke::Stack x) {
	// beforeDelete(QSqlRecord*)
	this->QDataTable::beforeDelete((QSqlRecord*)x[1].s_class);
    }
    void x_78(Smoke::Stack x) {
	// cursorChanged(QSql::Op)
	this->QDataTable::cursorChanged(*(QSql::Op *)x[1].s_class);
    }
    void x_79(Smoke::Stack x) {
	// insertCurrent()
	bool xret = this->QDataTable::insertCurrent();
	x[0].s_bool = (bool)xret;
    }
    void x_80(Smoke::Stack x) {
	// updateCurrent()
	bool xret = this->QDataTable::updateCurrent();
	x[0].s_bool = (bool)xret;
    }
    void x_81(Smoke::Stack x) {
	// deleteCurrent()
	bool xret = this->QDataTable::deleteCurrent();
	x[0].s_bool = (bool)xret;
    }
    void x_82(Smoke::Stack x) {
	// confirmEdit(QSql::Op)
	QSql::Confirm xret = this->QDataTable::confirmEdit(*(QSql::Op *)x[1].s_class);
	x[0].s_class = (void*)new QSql::Confirm(xret);
    }
    void x_83(Smoke::Stack x) {
	// confirmCancel(QSql::Op)
	QSql::Confirm xret = this->QDataTable::confirmCancel(*(QSql::Op *)x[1].s_class);
	x[0].s_class = (void*)new QSql::Confirm(xret);
    }
    void x_84(Smoke::Stack x) {
	// handleError(const QSqlError&)
	this->QDataTable::handleError(*(const QSqlError *)x[1].s_class);
    }
    void x_85(Smoke::Stack x) {
	// beginInsert()
	bool xret = this->QDataTable::beginInsert();
	x[0].s_bool = (bool)xret;
    }
    void x_86(Smoke::Stack x) {
	// beginUpdate(int, int, bool)
	QWidget* xret = this->QDataTable::beginUpdate((int)x[1].s_int,(int)x[2].s_int,(bool)x[3].s_bool);
	x[0].s_class = (void*)xret;
    }
    void x_87(Smoke::Stack x) {
	// eventFilter(QObject*, QEvent*)
	bool xret = this->QDataTable::eventFilter((QObject*)x[1].s_class,(QEvent*)x[2].s_class);
	x[0].s_bool = (bool)xret;
    }
    void x_88(Smoke::Stack x) {
	// resizeEvent(QResizeEvent*)
	this->QDataTable::resizeEvent((QResizeEvent*)x[1].s_class);
    }
    void x_89(Smoke::Stack x) {
	// contentsMousePressEvent(QMouseEvent*)
	this->QDataTable::contentsMousePressEvent((QMouseEvent*)x[1].s_class);
    }
    void x_90(Smoke::Stack x) {
	// contentsContextMenuEvent(QContextMenuEvent*)
	this->QDataTable::contentsContextMenuEvent((QContextMenuEvent*)x[1].s_class);
    }
    void x_91(Smoke::Stack x) {
	// endEdit(int, int, bool, bool)
	this->QDataTable::endEdit((int)x[1].s_int,(int)x[2].s_int,(bool)x[3].s_bool,(bool)x[4].s_bool);
    }
    void x_92(Smoke::Stack x) const {
	// createEditor(int, int, bool)
	QWidget* xret = this->QDataTable::createEditor((int)x[1].s_int,(int)x[2].s_int,(bool)x[3].s_bool);
	x[0].s_class = (void*)xret;
    }
    void x_93(Smoke::Stack x) {
	// activateNextCell()
	this->QDataTable::activateNextCell();
    }
    void x_94(Smoke::Stack x) const {
	// indexOf(uint)
	int xret = this->QDataTable::indexOf((uint)x[1].s_uint);
	x[0].s_int = (int)xret;
    }
    void x_95(Smoke::Stack x) {
	// reset()
	this->QDataTable::reset();
    }
    void x_96(Smoke::Stack x) {
	// setSize(QSqlCursor*)
	this->QDataTable::setSize((QSqlCursor*)x[1].s_class);
    }
    void x_97(Smoke::Stack x) {
	// repaintCell(int, int)
	this->QDataTable::repaintCell((int)x[1].s_int,(int)x[2].s_int);
    }
    void x_98(Smoke::Stack x) {
	// paintCell(QPainter*, int, int, const QRect&, bool, const QColorGroup&)
	this->QDataTable::paintCell((QPainter*)x[1].s_class,(int)x[2].s_int,(int)x[3].s_int,*(const QRect *)x[4].s_class,(bool)x[5].s_bool,*(const QColorGroup *)x[6].s_class);
    }
    void x_99(Smoke::Stack x) {
	// paintField(QPainter*, const QSqlField*, const QRect&, bool)
	this->QDataTable::paintField((QPainter*)x[1].s_class,(const QSqlField*)x[2].s_class,*(const QRect *)x[3].s_class,(bool)x[4].s_bool);
    }
    void x_100(Smoke::Stack x) {
	// fieldAlignment(const QSqlField*)
	int xret = this->QDataTable::fieldAlignment((const QSqlField*)x[1].s_class);
	x[0].s_int = (int)xret;
    }
    void x_101(Smoke::Stack x) {
	// columnClicked(int)
	this->QDataTable::columnClicked((int)x[1].s_int);
    }
    void x_102(Smoke::Stack x) {
	// resizeData(int)
	this->QDataTable::resizeData((int)x[1].s_int);
    }
    void x_103(Smoke::Stack x) const {
	// item(int, int)
	QTableItem* xret = this->QDataTable::item((int)x[1].s_int,(int)x[2].s_int);
	x[0].s_class = (void*)xret;
    }
    void x_104(Smoke::Stack x) {
	// setItem(int, int, QTableItem*)
	this->QDataTable::setItem((int)x[1].s_int,(int)x[2].s_int,(QTableItem*)x[3].s_class);
    }
    void x_105(Smoke::Stack x) {
	// clearCell(int, int)
	this->QDataTable::clearCell((int)x[1].s_int,(int)x[2].s_int);
    }
    void x_106(Smoke::Stack x) {
	// setPixmap(int, int, const QPixmap&)
	this->QDataTable::setPixmap((int)x[1].s_int,(int)x[2].s_int,*(const QPixmap *)x[3].s_class);
    }
    void x_107(Smoke::Stack x) {
	// takeItem(QTableItem*)
	this->QDataTable::takeItem((QTableItem*)x[1].s_class);
    }
    virtual void activateNextCell() {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(1471, (void*)this, x)) return;
	this->QDataTable::activateNextCell();
    }
    virtual void addChild(QWidget* x1, int x2, int x3) {
	Smoke::StackItem x[4];
	x[1].s_class = (void*)x1;
	x[2].s_int = (int)x2;
	x[3].s_int = (int)x3;
	if(qt_Smoke->callMethod(6632, (void*)this, x)) return;
	this->QScrollView::addChild(x1, x2, x3);
    }
    virtual void addColumn(const QString& x1, const QString& x2, int x3, const QIconSet& x4) {
	Smoke::StackItem x[5];
	x[1].s_class = (void*)&x1;
	x[2].s_class = (void*)&x2;
	x[3].s_int = (int)x3;
	x[4].s_class = (void*)&x4;
	if(qt_Smoke->callMethod(1388, (void*)this, x)) return;
	this->QDataTable::addColumn(x1, x2, x3, x4);
    }
    virtual int addSelection(const QTableSelection& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->callMethod(8334, (void*)this, x)) return (int)x[0].s_int;
	return this->QTable::addSelection(x1);
    }
    virtual void adjustColumn(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(qt_Smoke->callMethod(8370, (void*)this, x)) return;
	this->QTable::adjustColumn(x1);
    }
    virtual void adjustRow(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(qt_Smoke->callMethod(8371, (void*)this, x)) return;
	this->QTable::adjustRow(x1);
    }
    virtual void adjustSize() {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(9696, (void*)this, x)) return;
	this->QWidget::adjustSize();
    }
    virtual bool beginInsert() {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(1463, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDataTable::beginInsert();
    }
    virtual QWidget* beginUpdate(int x1, int x2, bool x3) {
	Smoke::StackItem x[4];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	x[3].s_bool = (bool)x3;
	if(qt_Smoke->callMethod(1464, (void*)this, x)) return (QWidget*)x[0].s_class;
	return this->QDataTable::beginUpdate(x1, x2, x3);
    }
    virtual QRect cellGeometry(int x1, int x2) const {
	Smoke::StackItem x[3];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	if(qt_Smoke->callMethod(8313, (void*)this, x)) {
	    QRect *xptr = (QRect *)x[0].s_class;
	    QRect xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QTable::cellGeometry(x1, x2);
    }
    virtual QRect cellRect(int x1, int x2) const {
	Smoke::StackItem x[3];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	if(qt_Smoke->callMethod(8349, (void*)this, x)) {
	    QRect *xptr = (QRect *)x[0].s_class;
	    QRect xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QTable::cellRect(x1, x2);
    }
    virtual QWidget* cellWidget(int x1, int x2) const {
	Smoke::StackItem x[3];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	if(qt_Smoke->callMethod(8347, (void*)this, x)) return (QWidget*)x[0].s_class;
	return this->QTable::cellWidget(x1, x2);
    }
    virtual bool checkConnectArgs(const char* x1, const QObject* x2, const char* x3) {
	Smoke::StackItem x[4];
	x[1].s_class = (void*)x1;
	x[2].s_class = (void*)x2;
	x[3].s_class = (void*)x3;
	if(qt_Smoke->callMethod(5477, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QObject::checkConnectArgs(x1, x2, x3);
    }
    virtual void childEvent(QChildEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(5473, (void*)this, x)) return;
	this->QObject::childEvent(x1);
    }
    virtual void clearCell(int x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	if(qt_Smoke->callMethod(1483, (void*)this, x)) return;
	this->QDataTable::clearCell(x1, x2);
    }
    virtual void clearCellWidget(int x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	if(qt_Smoke->callMethod(8348, (void*)this, x)) return;
	this->QTable::clearCellWidget(x1, x2);
    }
    virtual bool close(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = (bool)x1;
	if(qt_Smoke->callMethod(9683, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QWidget::close(x1);
    }
    virtual void closeEvent(QCloseEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(9791, (void*)this, x)) return;
	this->QWidget::closeEvent(x1);
    }
    virtual bool cmd(int x1, QPainter* x2, QPDevCmdParam* x3) {
	Smoke::StackItem x[4];
	x[1].s_int = (int)x1;
	x[2].s_class = (void*)x2;
	x[3].s_class = (void*)x3;
	if(qt_Smoke->callMethod(5573, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QPaintDevice::cmd(x1, x2, x3);
    }
    virtual int columnAt(int x1) const {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(qt_Smoke->callMethod(8318, (void*)this, x)) return (int)x[0].s_int;
	return this->QTable::columnAt(x1);
    }
    virtual void columnClicked(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(qt_Smoke->callMethod(1479, (void*)this, x)) return;
	this->QDataTable::columnClicked(x1);
    }
    virtual void columnIndexChanged(int x1, int x2, int x3) {
	Smoke::StackItem x[4];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	x[3].s_int = (int)x3;
	if(qt_Smoke->callMethod(8449, (void*)this, x)) return;
	this->QTable::columnIndexChanged(x1, x2, x3);
    }
    virtual int columnPos(int x1) const {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(qt_Smoke->callMethod(8316, (void*)this, x)) return (int)x[0].s_int;
	return this->QTable::columnPos(x1);
    }
    virtual int columnWidth(int x1) const {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(qt_Smoke->callMethod(8314, (void*)this, x)) return (int)x[0].s_int;
	return this->QTable::columnWidth(x1);
    }
    virtual void columnWidthChanged(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(qt_Smoke->callMethod(8447, (void*)this, x)) return;
	this->QTable::columnWidthChanged(x1);
    }
    virtual QSql::Confirm confirmCancel(QSql::Op x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->callMethod(1461, (void*)this, x)) {
	    QSql::Confirm *xptr = (QSql::Confirm *)x[0].s_class;
	    QSql::Confirm xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDataTable::confirmCancel(x1);
    }
    virtual QSql::Confirm confirmEdit(QSql::Op x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->callMethod(1460, (void*)this, x)) {
	    QSql::Confirm *xptr = (QSql::Confirm *)x[0].s_class;
	    QSql::Confirm xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDataTable::confirmEdit(x1);
    }
    virtual void connectNotify(const char* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(5475, (void*)this, x)) return;
	this->QObject::connectNotify(x1);
    }
    virtual void contentsContextMenuEvent(QContextMenuEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(1468, (void*)this, x)) return;
	this->QDataTable::contentsContextMenuEvent(x1);
    }
    virtual void contentsDragEnterEvent(QDragEnterEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(8427, (void*)this, x)) return;
	this->QTable::contentsDragEnterEvent(x1);
    }
    virtual void contentsDragLeaveEvent(QDragLeaveEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(8429, (void*)this, x)) return;
	this->QTable::contentsDragLeaveEvent(x1);
    }
    virtual void contentsDragMoveEvent(QDragMoveEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(8428, (void*)this, x)) return;
	this->QTable::contentsDragMoveEvent(x1);
    }
    virtual void contentsDropEvent(QDropEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(8430, (void*)this, x)) return;
	this->QTable::contentsDropEvent(x1);
    }
    virtual void contentsMouseDoubleClickEvent(QMouseEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(8418, (void*)this, x)) return;
	this->QTable::contentsMouseDoubleClickEvent(x1);
    }
    virtual void contentsMouseMoveEvent(QMouseEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(8417, (void*)this, x)) return;
	this->QTable::contentsMouseMoveEvent(x1);
    }
    virtual void contentsMousePressEvent(QMouseEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(1467, (void*)this, x)) return;
	this->QDataTable::contentsMousePressEvent(x1);
    }
    virtual void contentsMouseReleaseEvent(QMouseEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(8419, (void*)this, x)) return;
	this->QTable::contentsMouseReleaseEvent(x1);
    }
    virtual void contentsWheelEvent(QWheelEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(6702, (void*)this, x)) return;
	this->QScrollView::contentsWheelEvent(x1);
    }
    virtual void contextMenuEvent(QContextMenuEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(6731, (void*)this, x)) return;
	this->QScrollView::contextMenuEvent(x1);
    }
    virtual void create(WId x1, bool x2, bool x3) {
	Smoke::StackItem x[4];
	x[1].s_class = (void*)&x1;
	x[2].s_bool = (bool)x2;
	x[3].s_bool = (bool)x3;
	if(qt_Smoke->callMethod(9811, (void*)this, x)) return;
	this->QWidget::create(x1, x2, x3);
    }
    virtual QWidget* createEditor(int x1, int x2, bool x3) const {
	Smoke::StackItem x[4];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	x[3].s_bool = (bool)x3;
	if(qt_Smoke->callMethod(1470, (void*)this, x)) return (QWidget*)x[0].s_class;
	return this->QDataTable::createEditor(x1, x2, x3);
    }
    virtual int currentSelection() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(8337, (void*)this, x)) return (int)x[0].s_int;
	return this->QTable::currentSelection();
    }
    virtual void customEvent(QCustomEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(5474, (void*)this, x)) return;
	this->QObject::customEvent(x1);
    }
    virtual bool customWhatsThis() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(9721, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QWidget::customWhatsThis();
    }
    virtual bool deleteCurrent() {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(1459, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDataTable::deleteCurrent();
    }
    virtual void destroy(bool x1, bool x2) {
	Smoke::StackItem x[3];
	x[1].s_bool = (bool)x1;
	x[2].s_bool = (bool)x2;
	if(qt_Smoke->callMethod(9815, (void*)this, x)) return;
	this->QWidget::destroy(x1, x2);
    }
    virtual void disconnectNotify(const char* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(5476, (void*)this, x)) return;
	this->QObject::disconnectNotify(x1);
    }
    virtual void dragEnterEvent(QDragEnterEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(9797, (void*)this, x)) return;
	this->QWidget::dragEnterEvent(x1);
    }
    virtual void dragLeaveEvent(QDragLeaveEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(9799, (void*)this, x)) return;
	this->QWidget::dragLeaveEvent(x1);
    }
    virtual void dragMoveEvent(QDragMoveEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(9798, (void*)this, x)) return;
	this->QWidget::dragMoveEvent(x1);
    }
    virtual QDragObject* dragObject() {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(8431, (void*)this, x)) return (QDragObject*)x[0].s_class;
	return this->QTable::dragObject();
    }
    virtual void drawContents(QPainter* x1, int x2, int x3, int x4, int x5) {
	Smoke::StackItem x[6];
	x[1].s_class = (void*)x1;
	x[2].s_int = (int)x2;
	x[3].s_int = (int)x3;
	x[4].s_int = (int)x4;
	x[5].s_int = (int)x5;
	if(qt_Smoke->callMethod(8415, (void*)this, x)) return;
	this->QTable::drawContents(x1, x2, x3, x4, x5);
    }
    virtual void drawContentsOffset(QPainter* x1, int x2, int x3, int x4, int x5, int x6, int x7) {
	Smoke::StackItem x[8];
	x[1].s_class = (void*)x1;
	x[2].s_int = (int)x2;
	x[3].s_int = (int)x3;
	x[4].s_int = (int)x4;
	x[5].s_int = (int)x5;
	x[6].s_int = (int)x6;
	x[7].s_int = (int)x7;
	if(qt_Smoke->callMethod(6693, (void*)this, x)) return;
	this->QScrollView::drawContentsOffset(x1, x2, x3, x4, x5, x6, x7);
    }
    virtual void drawFrame(QPainter* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(2949, (void*)this, x)) return;
	this->QFrame::drawFrame(x1);
    }
    virtual void dropEvent(QDropEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(9800, (void*)this, x)) return;
	this->QWidget::dropEvent(x1);
    }
    virtual void editCell(int x1, int x2, bool x3) {
	Smoke::StackItem x[4];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	x[3].s_bool = (bool)x3;
	if(qt_Smoke->callMethod(8402, (void*)this, x)) return;
	this->QTable::editCell(x1, x2, x3);
    }
    virtual void enabledChange(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = (bool)x1;
	if(qt_Smoke->callMethod(9805, (void*)this, x)) return;
	this->QWidget::enabledChange(x1);
    }
    virtual void endEdit(int x1, int x2, bool x3, bool x4) {
	Smoke::StackItem x[5];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	x[3].s_bool = (bool)x3;
	x[4].s_bool = (bool)x4;
	if(qt_Smoke->callMethod(1469, (void*)this, x)) return;
	this->QDataTable::endEdit(x1, x2, x3, x4);
    }
    virtual void enterEvent(QEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(9786, (void*)this, x)) return;
	this->QWidget::enterEvent(x1);
    }
    virtual bool event(QEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(9776, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QWidget::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
	Smoke::StackItem x[3];
	x[1].s_class = (void*)x1;
	x[2].s_class = (void*)x2;
	if(qt_Smoke->callMethod(1465, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDataTable::eventFilter(x1, x2);
    }
    virtual int fieldAlignment(const QSqlField* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(1478, (void*)this, x)) return (int)x[0].s_int;
	return this->QDataTable::fieldAlignment(x1);
    }
    virtual void find(const QString& x1, bool x2, bool x3) {
	Smoke::StackItem x[4];
	x[1].s_class = (void*)&x1;
	x[2].s_bool = (bool)x2;
	x[3].s_bool = (bool)x3;
	if(qt_Smoke->callMethod(1444, (void*)this, x)) return;
	this->QDataTable::find(x1, x2, x3);
    }
    virtual void focusInEvent(QFocusEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(8422, (void*)this, x)) return;
	this->QTable::focusInEvent(x1);
    }
    virtual bool focusNextPrevChild(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = (bool)x1;
	if(qt_Smoke->callMethod(6722, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QScrollView::focusNextPrevChild(x1);
    }
    virtual void focusOutEvent(QFocusEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(8423, (void*)this, x)) return;
	this->QTable::focusOutEvent(x1);
    }
    virtual void fontChange(const QFont& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->callMethod(9807, (void*)this, x)) return;
	this->QWidget::fontChange(x1);
    }
    virtual int fontInf(QFont* x1, int x2) const {
	Smoke::StackItem x[3];
	x[1].s_class = (void*)x1;
	x[2].s_int = (int)x2;
	if(qt_Smoke->callMethod(5578, (void*)this, x)) return (int)x[0].s_int;
	return this->QPaintDevice::fontInf(x1, x2);
    }
    virtual int fontMet(QFont* x1, int x2, const char* x3, int x4) const {
	Smoke::StackItem x[5];
	x[1].s_class = (void*)x1;
	x[2].s_int = (int)x2;
	x[3].s_class = (void*)x3;
	x[4].s_int = (int)x4;
	if(qt_Smoke->callMethod(5575, (void*)this, x)) return (int)x[0].s_int;
	return this->QPaintDevice::fontMet(x1, x2, x3, x4);
    }
    virtual void frameChanged() {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(6716, (void*)this, x)) return;
	this->QScrollView::frameChanged();
    }
    virtual void handleError(const QSqlError& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->callMethod(1462, (void*)this, x)) return;
	this->QDataTable::handleError(x1);
    }
    virtual int heightForWidth(int x1) const {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(qt_Smoke->callMethod(9695, (void*)this, x)) return (int)x[0].s_int;
	return this->QWidget::heightForWidth(x1);
    }
    virtual void hide() {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(9753, (void*)this, x)) return;
	this->QWidget::hide();
    }
    virtual void hideColumn(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(qt_Smoke->callMethod(8365, (void*)this, x)) return;
	this->QTable::hideColumn(x1);
    }
    virtual void hideEvent(QHideEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(9802, (void*)this, x)) return;
	this->QWidget::hideEvent(x1);
    }
    virtual void hideRow(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(qt_Smoke->callMethod(8364, (void*)this, x)) return;
	this->QTable::hideRow(x1);
    }
    virtual void imComposeEvent(QIMEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(9794, (void*)this, x)) return;
	this->QWidget::imComposeEvent(x1);
    }
    virtual void imEndEvent(QIMEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(9795, (void*)this, x)) return;
	this->QWidget::imEndEvent(x1);
    }
    virtual void imStartEvent(QIMEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(9793, (void*)this, x)) return;
	this->QWidget::imStartEvent(x1);
    }
    virtual void insertChild(QObject* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(5435, (void*)this, x)) return;
	this->QObject::insertChild(x1);
    }
    virtual void insertColumns(int x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	if(qt_Smoke->callMethod(8396, (void*)this, x)) return;
	this->QTable::insertColumns(x1, x2);
    }
    virtual bool insertCurrent() {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(1457, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDataTable::insertCurrent();
    }
    virtual void insertRows(int x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	if(qt_Smoke->callMethod(8394, (void*)this, x)) return;
	this->QTable::insertRows(x1, x2);
    }
    virtual void insertWidget(int x1, int x2, QWidget* x3) {
	Smoke::StackItem x[4];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	x[3].s_class = (void*)x3;
	if(qt_Smoke->callMethod(8440, (void*)this, x)) return;
	this->QTable::insertWidget(x1, x2, x3);
    }
    virtual QTableItem* item(int x1, int x2) const {
	Smoke::StackItem x[3];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	if(qt_Smoke->callMethod(1481, (void*)this, x)) return (QTableItem*)x[0].s_class;
	return this->QDataTable::item(x1, x2);
    }
    virtual void keyPressEvent(QKeyEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(8421, (void*)this, x)) return;
	this->QTable::keyPressEvent(x1);
    }
    virtual void keyReleaseEvent(QKeyEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(9783, (void*)this, x)) return;
	this->QWidget::keyReleaseEvent(x1);
    }
    virtual void leaveEvent(QEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(9787, (void*)this, x)) return;
	this->QWidget::leaveEvent(x1);
    }
    virtual int metric(int x1) const {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(qt_Smoke->callMethod(9809, (void*)this, x)) return (int)x[0].s_int;
	return this->QWidget::metric(x1);
    }
    virtual QSize minimumSizeHint() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(6678, (void*)this, x)) {
	    QSize *xptr = (QSize *)x[0].s_class;
	    QSize xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QScrollView::minimumSizeHint();
    }
    virtual void mouseDoubleClickEvent(QMouseEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(6728, (void*)this, x)) return;
	this->QScrollView::mouseDoubleClickEvent(x1);
    }
    virtual void mouseMoveEvent(QMouseEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(6729, (void*)this, x)) return;
	this->QScrollView::mouseMoveEvent(x1);
    }
    virtual void mousePressEvent(QMouseEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(6726, (void*)this, x)) return;
	this->QScrollView::mousePressEvent(x1);
    }
    virtual void mouseReleaseEvent(QMouseEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(6727, (void*)this, x)) return;
	this->QScrollView::mouseReleaseEvent(x1);
    }
    virtual void move(int x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	if(qt_Smoke->callMethod(9765, (void*)this, x)) return;
	this->QWidget::move(x1, x2);
    }
    virtual void moveChild(QWidget* x1, int x2, int x3) {
	Smoke::StackItem x[4];
	x[1].s_class = (void*)x1;
	x[2].s_int = (int)x2;
	x[3].s_int = (int)x3;
	if(qt_Smoke->callMethod(6635, (void*)this, x)) return;
	this->QScrollView::moveChild(x1, x2, x3);
    }
    virtual void moveEvent(QMoveEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(9789, (void*)this, x)) return;
	this->QWidget::moveEvent(x1);
    }
    virtual int numCols() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(1438, (void*)this, x)) return (int)x[0].s_int;
	return this->QDataTable::numCols();
    }
    virtual int numRows() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(1439, (void*)this, x)) return (int)x[0].s_int;
	return this->QDataTable::numRows();
    }
    virtual void paintCell(QPainter* x1, int x2, int x3, const QRect& x4, bool x5) {
	Smoke::StackItem x[6];
	x[1].s_class = (void*)x1;
	x[2].s_int = (int)x2;
	x[3].s_int = (int)x3;
	x[4].s_class = (void*)&x4;
	x[5].s_bool = (bool)x5;
	if(qt_Smoke->callMethod(8350, (void*)this, x)) return;
	this->QTable::paintCell(x1, x2, x3, x4, x5);
    }
    virtual void paintCell(QPainter* x1, int x2, int x3, const QRect& x4, bool x5, const QColorGroup& x6) {
	Smoke::StackItem x[7];
	x[1].s_class = (void*)x1;
	x[2].s_int = (int)x2;
	x[3].s_int = (int)x3;
	x[4].s_class = (void*)&x4;
	x[5].s_bool = (bool)x5;
	x[6].s_class = (void*)&x6;
	if(qt_Smoke->callMethod(1476, (void*)this, x)) return;
	this->QDataTable::paintCell(x1, x2, x3, x4, x5, x6);
    }
    virtual void paintEmptyArea(QPainter* x1, int x2, int x3, int x4, int x5) {
	Smoke::StackItem x[6];
	x[1].s_class = (void*)x1;
	x[2].s_int = (int)x2;
	x[3].s_int = (int)x3;
	x[4].s_int = (int)x4;
	x[5].s_int = (int)x5;
	if(qt_Smoke->callMethod(8433, (void*)this, x)) return;
	this->QTable::paintEmptyArea(x1, x2, x3, x4, x5);
    }
    virtual void paintEvent(QPaintEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(2947, (void*)this, x)) return;
	this->QFrame::paintEvent(x1);
    }
    virtual void paintField(QPainter* x1, const QSqlField* x2, const QRect& x3, bool x4) {
	Smoke::StackItem x[5];
	x[1].s_class = (void*)x1;
	x[2].s_class = (void*)x2;
	x[3].s_class = (void*)&x3;
	x[4].s_bool = (bool)x4;
	if(qt_Smoke->callMethod(1477, (void*)this, x)) return;
	this->QDataTable::paintField(x1, x2, x3, x4);
    }
    virtual void paintFocus(QPainter* x1, const QRect& x2) {
	Smoke::StackItem x[3];
	x[1].s_class = (void*)x1;
	x[2].s_class = (void*)&x2;
	if(qt_Smoke->callMethod(8352, (void*)this, x)) return;
	this->QTable::paintFocus(x1, x2);
    }
    virtual void paletteChange(const QPalette& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->callMethod(9806, (void*)this, x)) return;
	this->QWidget::paletteChange(x1);
    }
    virtual QPixmap pixmap(int x1, int x2) const {
	Smoke::StackItem x[3];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	if(qt_Smoke->callMethod(8311, (void*)this, x)) {
	    QPixmap *xptr = (QPixmap *)x[0].s_class;
	    QPixmap xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QTable::pixmap(x1, x2);
    }
    virtual void polish() {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(9759, (void*)this, x)) return;
	this->QWidget::polish();
    }
    virtual QVariant property(const char* x1) const {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(5449, (void*)this, x)) {
	    QVariant *xptr = (QVariant *)x[0].s_class;
	    QVariant xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QObject::property(x1);
    }
    virtual void refresh() {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(1447, (void*)this, x)) return;
	this->QDataTable::refresh();
    }
    virtual void removeChild(QObject* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(6679, (void*)this, x)) return;
	this->QScrollView::removeChild(x1);
    }
    virtual void removeColumn(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(qt_Smoke->callMethod(8400, (void*)this, x)) return;
	this->QTable::removeColumn(x1);
    }
    virtual void removeColumn(uint x1) {
	Smoke::StackItem x[2];
	x[1].s_uint = (uint)x1;
	if(qt_Smoke->callMethod(1392, (void*)this, x)) return;
	this->QDataTable::removeColumn(x1);
    }
    virtual void removeColumns(const QMemArray<int>& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->callMethod(8401, (void*)this, x)) return;
	this->QTable::removeColumns(x1);
    }
    virtual void removeRow(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(qt_Smoke->callMethod(8398, (void*)this, x)) return;
	this->QTable::removeRow(x1);
    }
    virtual void removeRows(const QMemArray<int>& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->callMethod(8399, (void*)this, x)) return;
	this->QTable::removeRows(x1);
    }
    virtual void removeSelection(const QTableSelection& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->callMethod(8335, (void*)this, x)) return;
	this->QTable::removeSelection(x1);
    }
    virtual void removeSelection(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(qt_Smoke->callMethod(8336, (void*)this, x)) return;
	this->QTable::removeSelection(x1);
    }
    virtual void reparent(QWidget* x1, Qt::WFlags x2, const QPoint& x3, bool x4) {
	Smoke::StackItem x[5];
	x[1].s_class = (void*)x1;
	x[2].s_class = (void*)&x2;
	x[3].s_class = (void*)&x3;
	x[4].s_bool = (bool)x4;
	if(qt_Smoke->callMethod(9699, (void*)this, x)) return;
	this->QWidget::reparent(x1, x2, x3, x4);
    }
    virtual void resize(int x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	if(qt_Smoke->callMethod(6657, (void*)this, x)) return;
	this->QScrollView::resize(x1, x2);
    }
    virtual void resizeContents(int x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	if(qt_Smoke->callMethod(6682, (void*)this, x)) return;
	this->QScrollView::resizeContents(x1, x2);
    }
    virtual void resizeData(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(qt_Smoke->callMethod(1480, (void*)this, x)) return;
	this->QDataTable::resizeData(x1);
    }
    virtual void resizeEvent(QResizeEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(1466, (void*)this, x)) return;
	this->QDataTable::resizeEvent(x1);
    }
    virtual int resolution() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(5571, (void*)this, x)) return (int)x[0].s_int;
	return this->QPaintDevice::resolution();
    }
    virtual int rowAt(int x1) const {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(qt_Smoke->callMethod(8319, (void*)this, x)) return (int)x[0].s_int;
	return this->QTable::rowAt(x1);
    }
    virtual int rowHeight(int x1) const {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(qt_Smoke->callMethod(8315, (void*)this, x)) return (int)x[0].s_int;
	return this->QTable::rowHeight(x1);
    }
    virtual void rowHeightChanged(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(qt_Smoke->callMethod(8448, (void*)this, x)) return;
	this->QTable::rowHeightChanged(x1);
    }
    virtual void rowIndexChanged(int x1, int x2, int x3) {
	Smoke::StackItem x[4];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	x[3].s_int = (int)x3;
	if(qt_Smoke->callMethod(8450, (void*)this, x)) return;
	this->QTable::rowIndexChanged(x1, x2, x3);
    }
    virtual int rowPos(int x1) const {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(qt_Smoke->callMethod(8317, (void*)this, x)) return (int)x[0].s_int;
	return this->QTable::rowPos(x1);
    }
    virtual void setAcceptDrops(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = (bool)x1;
	if(qt_Smoke->callMethod(9716, (void*)this, x)) return;
	this->QWidget::setAcceptDrops(x1);
    }
    virtual void setActiveWindow() {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(9670, (void*)this, x)) return;
	this->QWidget::setActiveWindow();
    }
    virtual void setAutoDelete(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = (bool)x1;
	if(qt_Smoke->callMethod(1424, (void*)this, x)) return;
	this->QDataTable::setAutoDelete(x1);
    }
    virtual void setAutoEdit(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = (bool)x1;
	if(qt_Smoke->callMethod(1425, (void*)this, x)) return;
	this->QDataTable::setAutoEdit(x1);
    }
    virtual void setAutoMask(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = (bool)x1;
	if(qt_Smoke->callMethod(9717, (void*)this, x)) return;
	this->QWidget::setAutoMask(x1);
    }
    virtual void setBackgroundColor(const QColor& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->callMethod(9666, (void*)this, x)) return;
	this->QWidget::setBackgroundColor(x1);
    }
    virtual void setBackgroundMode(Qt::BackgroundMode x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->callMethod(9628, (void*)this, x)) return;
	this->QWidget::setBackgroundMode(x1);
    }
    virtual void setBackgroundOrigin(QWidget::BackgroundOrigin x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->callMethod(9719, (void*)this, x)) return;
	this->QWidget::setBackgroundOrigin(x1);
    }
    virtual void setBackgroundPixmap(const QPixmap& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->callMethod(9668, (void*)this, x)) return;
	this->QWidget::setBackgroundPixmap(x1);
    }
    virtual void setCaption(const QString& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->callMethod(9734, (void*)this, x)) return;
	this->QWidget::setCaption(x1);
    }
    virtual void setCellContentFromEditor(int x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	if(qt_Smoke->callMethod(8436, (void*)this, x)) return;
	this->QTable::setCellContentFromEditor(x1, x2);
    }
    virtual void setCellWidget(int x1, int x2, QWidget* x3) {
	Smoke::StackItem x[4];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	x[3].s_class = (void*)x3;
	if(qt_Smoke->callMethod(8346, (void*)this, x)) return;
	this->QTable::setCellWidget(x1, x2, x3);
    }
    virtual void setColumn(uint x1, const QString& x2, const QString& x3, int x4, const QIconSet& x5) {
	Smoke::StackItem x[6];
	x[1].s_uint = (uint)x1;
	x[2].s_class = (void*)&x2;
	x[3].s_class = (void*)&x3;
	x[4].s_int = (int)x4;
	x[5].s_class = (void*)&x5;
	if(qt_Smoke->callMethod(1393, (void*)this, x)) return;
	this->QDataTable::setColumn(x1, x2, x3, x4, x5);
    }
    virtual void setColumnMovingEnabled(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = (bool)x1;
	if(qt_Smoke->callMethod(8387, (void*)this, x)) return;
	this->QTable::setColumnMovingEnabled(x1);
    }
    virtual void setColumnReadOnly(int x1, bool x2) {
	Smoke::StackItem x[3];
	x[1].s_int = (int)x1;
	x[2].s_bool = (bool)x2;
	if(qt_Smoke->callMethod(8391, (void*)this, x)) return;
	this->QTable::setColumnReadOnly(x1, x2);
    }
    virtual void setColumnStretchable(int x1, bool x2) {
	Smoke::StackItem x[3];
	x[1].s_int = (int)x1;
	x[2].s_bool = (bool)x2;
	if(qt_Smoke->callMethod(8372, (void*)this, x)) return;
	this->QTable::setColumnStretchable(x1, x2);
    }
    virtual void setColumnWidth(int x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	if(qt_Smoke->callMethod(1448, (void*)this, x)) return;
	this->QDataTable::setColumnWidth(x1, x2);
    }
    virtual void setConfirmCancels(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = (bool)x1;
	if(qt_Smoke->callMethod(1423, (void*)this, x)) return;
	this->QDataTable::setConfirmCancels(x1);
    }
    virtual void setConfirmDelete(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = (bool)x1;
	if(qt_Smoke->callMethod(1422, (void*)this, x)) return;
	this->QDataTable::setConfirmDelete(x1);
    }
    virtual void setConfirmEdits(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = (bool)x1;
	if(qt_Smoke->callMethod(1419, (void*)this, x)) return;
	this->QDataTable::setConfirmEdits(x1);
    }
    virtual void setConfirmInsert(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = (bool)x1;
	if(qt_Smoke->callMethod(1420, (void*)this, x)) return;
	this->QDataTable::setConfirmInsert(x1);
    }
    virtual void setConfirmUpdate(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = (bool)x1;
	if(qt_Smoke->callMethod(1421, (void*)this, x)) return;
	this->QDataTable::setConfirmUpdate(x1);
    }
    virtual void setContentsPos(int x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	if(qt_Smoke->callMethod(6684, (void*)this, x)) return;
	this->QScrollView::setContentsPos(x1, x2);
    }
    virtual void setCornerWidget(QWidget* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(6646, (void*)this, x)) return;
	this->QScrollView::setCornerWidget(x1);
    }
    virtual void setCurrentCell(int x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	if(qt_Smoke->callMethod(8384, (void*)this, x)) return;
	this->QTable::setCurrentCell(x1, x2);
    }
    virtual void setCursor(const QCursor& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->callMethod(9655, (void*)this, x)) return;
	this->QWidget::setCursor(x1);
    }
    virtual void setDateFormat(const Qt::DateFormat x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->callMethod(1418, (void*)this, x)) return;
	this->QDataTable::setDateFormat(x1);
    }
    virtual void setDragAutoScroll(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = (bool)x1;
	if(qt_Smoke->callMethod(6680, (void*)this, x)) return;
	this->QScrollView::setDragAutoScroll(x1);
    }
    virtual void setDragEnabled(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = (bool)x1;
	if(qt_Smoke->callMethod(8392, (void*)this, x)) return;
	this->QTable::setDragEnabled(x1);
    }
    virtual void setEnabled(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = (bool)x1;
	if(qt_Smoke->callMethod(8357, (void*)this, x)) return;
	this->QTable::setEnabled(x1);
    }
    virtual void setEraseColor(const QColor& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->callMethod(9632, (void*)this, x)) return;
	this->QWidget::setEraseColor(x1);
    }
    virtual void setErasePixmap(const QPixmap& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->callMethod(9634, (void*)this, x)) return;
	this->QWidget::setErasePixmap(x1);
    }
    virtual void setFalseText(const QString& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->callMethod(1417, (void*)this, x)) return;
	this->QDataTable::setFalseText(x1);
    }
    virtual void setFilter(const QString& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->callMethod(1426, (void*)this, x)) return;
	this->QDataTable::setFilter(x1);
    }
    virtual void setFocus() {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(9738, (void*)this, x)) return;
	this->QWidget::setFocus();
    }
    virtual void setFocusPolicy(QWidget::FocusPolicy x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->callMethod(9673, (void*)this, x)) return;
	this->QWidget::setFocusPolicy(x1);
    }
    virtual void setFocusProxy(QWidget* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(9675, (void*)this, x)) return;
	this->QWidget::setFocusProxy(x1);
    }
    virtual void setFocusStyle(QTable::FocusStyle x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->callMethod(8359, (void*)this, x)) return;
	this->QTable::setFocusStyle(x1);
    }
    virtual void setFont(const QFont& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->callMethod(9649, (void*)this, x)) return;
	this->QWidget::setFont(x1);
    }
    virtual void setFrameRect(const QRect& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->callMethod(2946, (void*)this, x)) return;
	this->QFrame::setFrameRect(x1);
    }
    virtual void setFrameStyle(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(qt_Smoke->callMethod(2930, (void*)this, x)) return;
	this->QFrame::setFrameStyle(x1);
    }
    virtual void setGeometry(const QRect& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->callMethod(9770, (void*)this, x)) return;
	this->QWidget::setGeometry(x1);
    }
    virtual void setGeometry(int x1, int x2, int x3, int x4) {
	Smoke::StackItem x[5];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	x[3].s_int = (int)x3;
	x[4].s_int = (int)x4;
	if(qt_Smoke->callMethod(9769, (void*)this, x)) return;
	this->QWidget::setGeometry(x1, x2, x3, x4);
    }
    virtual void setHBarGeometry(QScrollBar& x1, int x2, int x3, int x4, int x5) {
	Smoke::StackItem x[6];
	x[1].s_class = (void*)&x1;
	x[2].s_int = (int)x2;
	x[3].s_int = (int)x3;
	x[4].s_int = (int)x4;
	x[5].s_int = (int)x5;
	if(qt_Smoke->callMethod(6723, (void*)this, x)) return;
	this->QScrollView::setHBarGeometry(x1, x2, x3, x4, x5);
    }
    virtual void setHScrollBarMode(QScrollView::ScrollBarMode x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->callMethod(6644, (void*)this, x)) return;
	this->QScrollView::setHScrollBarMode(x1);
    }
    virtual void setIcon(const QPixmap& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->callMethod(9735, (void*)this, x)) return;
	this->QWidget::setIcon(x1);
    }
    virtual void setIconText(const QString& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->callMethod(9736, (void*)this, x)) return;
	this->QWidget::setIconText(x1);
    }
    virtual void setItem(int x1, int x2, QTableItem* x3) {
	Smoke::StackItem x[4];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	x[3].s_class = (void*)x3;
	if(qt_Smoke->callMethod(1482, (void*)this, x)) return;
	this->QDataTable::setItem(x1, x2, x3);
    }
    virtual void setKeyCompression(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = (bool)x1;
	if(qt_Smoke->callMethod(9828, (void*)this, x)) return;
	this->QWidget::setKeyCompression(x1);
    }
    virtual void setLeftMargin(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(qt_Smoke->callMethod(8382, (void*)this, x)) return;
	this->QTable::setLeftMargin(x1);
    }
    virtual void setLineWidth(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(qt_Smoke->callMethod(2940, (void*)this, x)) return;
	this->QFrame::setLineWidth(x1);
    }
    virtual void setMargin(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(qt_Smoke->callMethod(2942, (void*)this, x)) return;
	this->QFrame::setMargin(x1);
    }
    virtual void setMargins(int x1, int x2, int x3, int x4) {
	Smoke::StackItem x[5];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	x[3].s_int = (int)x3;
	x[4].s_int = (int)x4;
	if(qt_Smoke->callMethod(6717, (void*)this, x)) return;
	this->QScrollView::setMargins(x1, x2, x3, x4);
    }
    virtual void setMask(const QBitmap& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->callMethod(9662, (void*)this, x)) return;
	this->QWidget::setMask(x1);
    }
    virtual void setMask(const QRegion& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->callMethod(9663, (void*)this, x)) return;
	this->QWidget::setMask(x1);
    }
    virtual void setMaximumSize(int x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	if(qt_Smoke->callMethod(9605, (void*)this, x)) return;
	this->QWidget::setMaximumSize(x1, x2);
    }
    virtual void setMicroFocusHint(int x1, int x2, int x3, int x4, bool x5, QFont* x6) {
	Smoke::StackItem x[7];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	x[3].s_int = (int)x3;
	x[4].s_int = (int)x4;
	x[5].s_bool = (bool)x5;
	x[6].s_class = (void*)x6;
	if(qt_Smoke->callMethod(9829, (void*)this, x)) return;
	this->QWidget::setMicroFocusHint(x1, x2, x3, x4, x5, x6);
    }
    virtual void setMidLineWidth(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(qt_Smoke->callMethod(2944, (void*)this, x)) return;
	this->QFrame::setMidLineWidth(x1);
    }
    virtual void setMinimumSize(int x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	if(qt_Smoke->callMethod(9603, (void*)this, x)) return;
	this->QWidget::setMinimumSize(x1, x2);
    }
    virtual void setMouseTracking(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = (bool)x1;
	if(qt_Smoke->callMethod(9737, (void*)this, x)) return;
	this->QWidget::setMouseTracking(x1);
    }
    virtual void setName(const char* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(9572, (void*)this, x)) return;
	this->QWidget::setName(x1);
    }
    virtual void setNullText(const QString& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->callMethod(1415, (void*)this, x)) return;
	this->QDataTable::setNullText(x1);
    }
    virtual void setNumCols(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(qt_Smoke->callMethod(1440, (void*)this, x)) return;
	this->QDataTable::setNumCols(x1);
    }
    virtual void setNumRows(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(qt_Smoke->callMethod(1441, (void*)this, x)) return;
	this->QDataTable::setNumRows(x1);
    }
    virtual void setPalette(const QPalette& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->callMethod(9638, (void*)this, x)) return;
	this->QWidget::setPalette(x1);
    }
    virtual void setPaletteBackgroundColor(const QColor& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->callMethod(9643, (void*)this, x)) return;
	this->QWidget::setPaletteBackgroundColor(x1);
    }
    virtual void setPaletteBackgroundPixmap(const QPixmap& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->callMethod(9645, (void*)this, x)) return;
	this->QWidget::setPaletteBackgroundPixmap(x1);
    }
    virtual void setPixmap(int x1, int x2, const QPixmap& x3) {
	Smoke::StackItem x[4];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	x[3].s_class = (void*)&x3;
	if(qt_Smoke->callMethod(1484, (void*)this, x)) return;
	this->QDataTable::setPixmap(x1, x2, x3);
    }
    virtual bool setProperty(const char* x1, const QVariant& x2) {
	Smoke::StackItem x[3];
	x[1].s_class = (void*)x1;
	x[2].s_class = (void*)&x2;
	if(qt_Smoke->callMethod(5448, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QObject::setProperty(x1, x2);
    }
    virtual void setReadOnly(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = (bool)x1;
	if(qt_Smoke->callMethod(8389, (void*)this, x)) return;
	this->QTable::setReadOnly(x1);
    }
    virtual void setResizePolicy(QScrollView::ResizePolicy x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->callMethod(6628, (void*)this, x)) return;
	this->QScrollView::setResizePolicy(x1);
    }
    virtual void setResolution(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(qt_Smoke->callMethod(5570, (void*)this, x)) return;
	this->QPaintDevice::setResolution(x1);
    }
    virtual void setRowHeight(int x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	if(qt_Smoke->callMethod(8369, (void*)this, x)) return;
	this->QTable::setRowHeight(x1, x2);
    }
    virtual void setRowMovingEnabled(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = (bool)x1;
	if(qt_Smoke->callMethod(8388, (void*)this, x)) return;
	this->QTable::setRowMovingEnabled(x1);
    }
    virtual void setRowReadOnly(int x1, bool x2) {
	Smoke::StackItem x[3];
	x[1].s_int = (int)x1;
	x[2].s_bool = (bool)x2;
	if(qt_Smoke->callMethod(8390, (void*)this, x)) return;
	this->QTable::setRowReadOnly(x1, x2);
    }
    virtual void setRowStretchable(int x1, bool x2) {
	Smoke::StackItem x[3];
	x[1].s_int = (int)x1;
	x[2].s_bool = (bool)x2;
	if(qt_Smoke->callMethod(8373, (void*)this, x)) return;
	this->QTable::setRowStretchable(x1, x2);
    }
    virtual void setSelectionMode(QTable::SelectionMode x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->callMethod(8304, (void*)this, x)) return;
	this->QTable::setSelectionMode(x1);
    }
    virtual void setShowGrid(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = (bool)x1;
	if(qt_Smoke->callMethod(8363, (void*)this, x)) return;
	this->QTable::setShowGrid(x1);
    }
    virtual void setSizeIncrement(int x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	if(qt_Smoke->callMethod(9612, (void*)this, x)) return;
	this->QWidget::setSizeIncrement(x1, x2);
    }
    virtual void setSizePolicy(QSizePolicy x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->callMethod(9694, (void*)this, x)) return;
	this->QWidget::setSizePolicy(x1);
    }
    virtual void setSort(const QSqlIndex& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->callMethod(1428, (void*)this, x)) return;
	this->QDataTable::setSort(x1);
    }
    virtual void setSort(const QStringList& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->callMethod(1427, (void*)this, x)) return;
	this->QDataTable::setSort(x1);
    }
    virtual void setSorting(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = (bool)x1;
	if(qt_Smoke->callMethod(8376, (void*)this, x)) return;
	this->QTable::setSorting(x1);
    }
    virtual void setSqlCursor(QSqlCursor* x1, bool x2, bool x3) {
	Smoke::StackItem x[4];
	x[1].s_class = (void*)x1;
	x[2].s_bool = (bool)x2;
	x[3].s_bool = (bool)x3;
	if(qt_Smoke->callMethod(1410, (void*)this, x)) return;
	this->QDataTable::setSqlCursor(x1, x2, x3);
    }
    virtual void setText(int x1, int x2, const QString& x3) {
	Smoke::StackItem x[4];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	x[3].s_class = (void*)&x3;
	if(qt_Smoke->callMethod(8307, (void*)this, x)) return;
	this->QTable::setText(x1, x2, x3);
    }
    virtual void setTopMargin(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(qt_Smoke->callMethod(8383, (void*)this, x)) return;
	this->QTable::setTopMargin(x1);
    }
    virtual void setTrueText(const QString& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->callMethod(1416, (void*)this, x)) return;
	this->QDataTable::setTrueText(x1);
    }
    virtual void setUpdatesEnabled(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = (bool)x1;
	if(qt_Smoke->callMethod(9740, (void*)this, x)) return;
	this->QWidget::setUpdatesEnabled(x1);
    }
    virtual void setVBarGeometry(QScrollBar& x1, int x2, int x3, int x4, int x5) {
	Smoke::StackItem x[6];
	x[1].s_class = (void*)&x1;
	x[2].s_int = (int)x2;
	x[3].s_int = (int)x3;
	x[4].s_int = (int)x4;
	x[5].s_int = (int)x5;
	if(qt_Smoke->callMethod(6724, (void*)this, x)) return;
	this->QScrollView::setVBarGeometry(x1, x2, x3, x4, x5);
    }
    virtual void setVScrollBarMode(QScrollView::ScrollBarMode x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->callMethod(6642, (void*)this, x)) return;
	this->QScrollView::setVScrollBarMode(x1);
    }
    virtual void setWFlags(Qt::WFlags x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->callMethod(9822, (void*)this, x)) return;
	this->QWidget::setWFlags(x1);
    }
    virtual void setWState(uint x1) {
	Smoke::StackItem x[2];
	x[1].s_uint = (uint)x1;
	if(qt_Smoke->callMethod(9819, (void*)this, x)) return;
	this->QWidget::setWState(x1);
    }
    virtual void show() {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(6659, (void*)this, x)) return;
	this->QScrollView::show();
    }
    virtual void showColumn(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(qt_Smoke->callMethod(8367, (void*)this, x)) return;
	this->QTable::showColumn(x1);
    }
    virtual void showEvent(QShowEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(8425, (void*)this, x)) return;
	this->QTable::showEvent(x1);
    }
    virtual void showMaximized() {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(9756, (void*)this, x)) return;
	this->QWidget::showMaximized();
    }
    virtual void showMinimized() {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(9755, (void*)this, x)) return;
	this->QWidget::showMinimized();
    }
    virtual void showNormal() {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(9758, (void*)this, x)) return;
	this->QWidget::showNormal();
    }
    virtual void showRow(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(qt_Smoke->callMethod(8366, (void*)this, x)) return;
	this->QTable::showRow(x1);
    }
    virtual QSize sizeHint() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(8353, (void*)this, x)) {
	    QSize *xptr = (QSize *)x[0].s_class;
	    QSize xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QTable::sizeHint();
    }
    virtual QSizePolicy sizePolicy() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(9693, (void*)this, x)) {
	    QSizePolicy *xptr = (QSizePolicy *)x[0].s_class;
	    QSizePolicy xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QWidget::sizePolicy();
    }
    virtual void sortAscending(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(qt_Smoke->callMethod(1445, (void*)this, x)) return;
	this->QDataTable::sortAscending(x1);
    }
    virtual void sortColumn(int x1, bool x2, bool x3) {
	Smoke::StackItem x[4];
	x[1].s_int = (int)x1;
	x[2].s_bool = (bool)x2;
	x[3].s_bool = (bool)x3;
	if(qt_Smoke->callMethod(1430, (void*)this, x)) return;
	this->QDataTable::sortColumn(x1, x2, x3);
    }
    virtual void sortDescending(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(qt_Smoke->callMethod(1446, (void*)this, x)) return;
	this->QDataTable::sortDescending(x1);
    }
    virtual void startDrag() {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(8432, (void*)this, x)) return;
	this->QTable::startDrag();
    }
    virtual void styleChange(QStyle& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->callMethod(6630, (void*)this, x)) return;
	this->QScrollView::styleChange(x1);
    }
    virtual void swapCells(int x1, int x2, int x3, int x4) {
	Smoke::StackItem x[5];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	x[3].s_int = (int)x3;
	x[4].s_int = (int)x4;
	if(qt_Smoke->callMethod(8381, (void*)this, x)) return;
	this->QTable::swapCells(x1, x2, x3, x4);
    }
    virtual void swapColumns(int x1, int x2, bool x3) {
	Smoke::StackItem x[4];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	x[3].s_bool = (bool)x3;
	if(qt_Smoke->callMethod(8379, (void*)this, x)) return;
	this->QTable::swapColumns(x1, x2, x3);
    }
    virtual void swapRows(int x1, int x2, bool x3) {
	Smoke::StackItem x[4];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	x[3].s_bool = (bool)x3;
	if(qt_Smoke->callMethod(8377, (void*)this, x)) return;
	this->QTable::swapRows(x1, x2, x3);
    }
    virtual void tabletEvent(QTabletEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(9796, (void*)this, x)) return;
	this->QWidget::tabletEvent(x1);
    }
    virtual void takeItem(QTableItem* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(1485, (void*)this, x)) return;
	this->QDataTable::takeItem(x1);
    }
    virtual QString text(int x1, int x2) const {
	Smoke::StackItem x[3];
	x[1].s_int = (int)x1;
	x[2].s_int = (int)x2;
	if(qt_Smoke->callMethod(1433, (void*)this, x)) {
	    QString *xptr = (QString *)x[0].s_class;
	    QString xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDataTable::text(x1, x2);
    }
    virtual void timerEvent(QTimerEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(5472, (void*)this, x)) return;
	this->QObject::timerEvent(x1);
    }
    virtual void unsetCursor() {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(9656, (void*)this, x)) return;
	this->QWidget::unsetCursor();
    }
    virtual bool updateCurrent() {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(1458, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDataTable::updateCurrent();
    }
    virtual void updateMask() {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(9803, (void*)this, x)) return;
	this->QWidget::updateMask();
    }
    virtual void viewportContextMenuEvent(QContextMenuEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(6715, (void*)this, x)) return;
	this->QScrollView::viewportContextMenuEvent(x1);
    }
    virtual void viewportDragEnterEvent(QDragEnterEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(6710, (void*)this, x)) return;
	this->QScrollView::viewportDragEnterEvent(x1);
    }
    virtual void viewportDragLeaveEvent(QDragLeaveEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(6712, (void*)this, x)) return;
	this->QScrollView::viewportDragLeaveEvent(x1);
    }
    virtual void viewportDragMoveEvent(QDragMoveEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(6711, (void*)this, x)) return;
	this->QScrollView::viewportDragMoveEvent(x1);
    }
    virtual void viewportDropEvent(QDropEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(6713, (void*)this, x)) return;
	this->QScrollView::viewportDropEvent(x1);
    }
    virtual void viewportMouseDoubleClickEvent(QMouseEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(6708, (void*)this, x)) return;
	this->QScrollView::viewportMouseDoubleClickEvent(x1);
    }
    virtual void viewportMouseMoveEvent(QMouseEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(6709, (void*)this, x)) return;
	this->QScrollView::viewportMouseMoveEvent(x1);
    }
    virtual void viewportMousePressEvent(QMouseEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(6706, (void*)this, x)) return;
	this->QScrollView::viewportMousePressEvent(x1);
    }
    virtual void viewportMouseReleaseEvent(QMouseEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(6707, (void*)this, x)) return;
	this->QScrollView::viewportMouseReleaseEvent(x1);
    }
    virtual void viewportPaintEvent(QPaintEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(6704, (void*)this, x)) return;
	this->QScrollView::viewportPaintEvent(x1);
    }
    virtual void viewportResizeEvent(QResizeEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(8424, (void*)this, x)) return;
	this->QTable::viewportResizeEvent(x1);
    }
    virtual void viewportWheelEvent(QWheelEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(6714, (void*)this, x)) return;
	this->QScrollView::viewportWheelEvent(x1);
    }
    virtual void wheelEvent(QWheelEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->callMethod(6730, (void*)this, x)) return;
	this->QScrollView::wheelEvent(x1);
    }
    virtual void windowActivationChange(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = (bool)x1;
	if(qt_Smoke->callMethod(8442, (void*)this, x)) return;
	this->QTable::windowActivationChange(x1);
    }
    ~x_QDataTable() {}
};
void xcall_QDataTable(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QDataTable *xself = (x_QDataTable*)obj;
    switch(xi) {
	case 0: x_QDataTable::x_0(args);	break;
	case 1: x_QDataTable::x_1(args);	break;
	case 2: x_QDataTable::x_2(args);	break;
	case 3: x_QDataTable::x_3(args);	break;
	case 4: x_QDataTable::x_4(args);	break;
	case 5: x_QDataTable::x_5(args);	break;
	case 6: x_QDataTable::x_6(args);	break;
	case 7: x_QDataTable::x_7(args);	break;
	case 8: x_QDataTable::x_8(args);	break;
	case 9: x_QDataTable::x_9(args);	break;
	case 10: xself->x_10(args);	break;
	case 11: xself->x_11(args);	break;
	case 12: xself->x_12(args);	break;
	case 13: xself->x_13(args);	break;
	case 14: xself->x_14(args);	break;
	case 15: xself->x_15(args);	break;
	case 16: xself->x_16(args);	break;
	case 17: xself->x_17(args);	break;
	case 18: xself->x_18(args);	break;
	case 19: xself->x_19(args);	break;
	case 20: xself->x_20(args);	break;
	case 21: xself->x_21(args);	break;
	case 22: xself->x_22(args);	break;
	case 23: xself->x_23(args);	break;
	case 24: xself->x_24(args);	break;
	case 25: xself->x_25(args);	break;
	case 26: xself->x_26(args);	break;
	case 27: xself->x_27(args);	break;
	case 28: xself->x_28(args);	break;
	case 29: xself->x_29(args);	break;
	case 30: xself->x_30(args);	break;
	case 31: xself->x_31(args);	break;
	case 32: xself->x_32(args);	break;
	case 33: xself->x_33(args);	break;
	case 34: xself->x_34(args);	break;
	case 35: xself->x_35(args);	break;
	case 36: xself->x_36(args);	break;
	case 37: xself->x_37(args);	break;
	case 38: xself->x_38(args);	break;
	case 39: xself->x_39(args);	break;
	case 40: xself->x_40(args);	break;
	case 41: xself->x_41(args);	break;
	case 42: xself->x_42(args);	break;
	case 43: xself->x_43(args);	break;
	case 44: xself->x_44(args);	break;
	case 45: xself->x_45(args);	break;
	case 46: xself->x_46(args);	break;
	case 47: xself->x_47(args);	break;
	case 48: xself->x_48(args);	break;
	case 49: xself->x_49(args);	break;
	case 50: xself->x_50(args);	break;
	case 51: xself->x_51(args);	break;
	case 52: xself->x_52(args);	break;
	case 53: xself->x_53(args);	break;
	case 54: xself->x_54(args);	break;
	case 55: xself->x_55(args);	break;
	case 56: xself->x_56(args);	break;
	case 57: xself->x_57(args);	break;
	case 58: xself->x_58(args);	break;
	case 59: xself->x_59(args);	break;
	case 60: xself->x_60(args);	break;
	case 61: xself->x_61(args);	break;
	case 62: xself->x_62(args);	break;
	case 63: xself->x_63(args);	break;
	case 64: xself->x_64(args);	break;
	case 65: xself->x_65(args);	break;
	case 66: xself->x_66(args);	break;
	case 67: xself->x_67(args);	break;
	case 68: xself->x_68(args);	break;
	case 69: xself->x_69(args);	break;
	case 70: xself->x_70(args);	break;
	case 71: xself->x_71(args);	break;
	case 72: xself->x_72(args);	break;
	case 73: xself->x_73(args);	break;
	case 74: xself->x_74(args);	break;
	case 75: xself->x_75(args);	break;
	case 76: xself->x_76(args);	break;
	case 77: xself->x_77(args);	break;
	case 78: xself->x_78(args);	break;
	case 79: xself->x_79(args);	break;
	case 80: xself->x_80(args);	break;
	case 81: xself->x_81(args);	break;
	case 82: xself->x_82(args);	break;
	case 83: xself->x_83(args);	break;
	case 84: xself->x_84(args);	break;
	case 85: xself->x_85(args);	break;
	case 86: xself->x_86(args);	break;
	case 87: xself->x_87(args);	break;
	case 88: xself->x_88(args);	break;
	case 89: xself->x_89(args);	break;
	case 90: xself->x_90(args);	break;
	case 91: xself->x_91(args);	break;
	case 92: xself->x_92(args);	break;
	case 93: xself->x_93(args);	break;
	case 94: xself->x_94(args);	break;
	case 95: xself->x_95(args);	break;
	case 96: xself->x_96(args);	break;
	case 97: xself->x_97(args);	break;
	case 98: xself->x_98(args);	break;
	case 99: xself->x_99(args);	break;
	case 100: xself->x_100(args);	break;
	case 101: xself->x_101(args);	break;
	case 102: xself->x_102(args);	break;
	case 103: xself->x_103(args);	break;
	case 104: xself->x_104(args);	break;
	case 105: xself->x_105(args);	break;
	case 106: xself->x_106(args);	break;
	case 107: xself->x_107(args);	break;
	case 108: delete (QDataTable*)xself;	break;
    }
}
