//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke.h>
#include <qt_smoke.h>
#include <qstring.h>
#include <qxml.h>

class x_QXmlDeclHandler {
private:
    QXmlDeclHandler *xthis;
public:
    x_QXmlDeclHandler(void *x) : xthis((QXmlDeclHandler*)x) {}
    void x_0(Smoke::Stack x) {
	// attributeDecl(const QString&, const QString&, const QString&, const QString&, const QString&)
	bool xret = xthis->QXmlDeclHandler::attributeDecl(*(const QString *)x[1].s_class,*(const QString *)x[2].s_class,*(const QString *)x[3].s_class,*(const QString *)x[4].s_class,*(const QString *)x[5].s_class);
	x[0].s_bool = (bool)xret;
    }
    void x_1(Smoke::Stack x) {
	// internalEntityDecl(const QString&, const QString&)
	bool xret = xthis->QXmlDeclHandler::internalEntityDecl(*(const QString *)x[1].s_class,*(const QString *)x[2].s_class);
	x[0].s_bool = (bool)xret;
    }
    void x_2(Smoke::Stack x) {
	// externalEntityDecl(const QString&, const QString&, const QString&)
	bool xret = xthis->QXmlDeclHandler::externalEntityDecl(*(const QString *)x[1].s_class,*(const QString *)x[2].s_class,*(const QString *)x[3].s_class);
	x[0].s_bool = (bool)xret;
    }
    void x_3(Smoke::Stack x) {
	// errorString()
	QString xret = xthis->QXmlDeclHandler::errorString();
	x[0].s_class = (void*)new QString(xret);
    }
    ~x_QXmlDeclHandler() {}
};
void xcall_QXmlDeclHandler(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QXmlDeclHandler xtmp(obj), *xself = &xtmp;
    switch(xi) {
	case 0: xself->x_0(args);	break;
	case 1: xself->x_1(args);	break;
	case 2: xself->x_2(args);	break;
	case 3: xself->x_3(args);	break;
    }
}
