//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke.h>
#include <qt_smoke.h>
#include <qvariant.h>
#include <qstring.h>
#include <qsqlform.h>

class x_QSqlForm : public QSqlForm {
public:
    void x_0(Smoke::Stack x) const {
	// metaObject()
	QMetaObject* xret = this->QSqlForm::metaObject();
	x[0].s_class = (void*)xret;
    }
    void x_1(Smoke::Stack x) const {
	// className()
	const char* xret = this->QSqlForm::className();
	x[0].s_voidp = (void*)xret;
    }
    void x_2(Smoke::Stack x) {
	// qt_cast(const char*)
	void* xret = this->QSqlForm::qt_cast((const char*)x[1].s_voidp);
	x[0].s_voidp = (void*)xret;
    }
    void x_3(Smoke::Stack x) {
	// qt_invoke(int, QUObject*)
	bool xret = this->QSqlForm::qt_invoke((int)x[1].s_int,(QUObject*)x[2].s_voidp);
	x[0].s_bool = xret;
    }
    void x_4(Smoke::Stack x) {
	// qt_emit(int, QUObject*)
	bool xret = this->QSqlForm::qt_emit((int)x[1].s_int,(QUObject*)x[2].s_voidp);
	x[0].s_bool = xret;
    }
    void x_5(Smoke::Stack x) {
	// qt_property(int, int, QVariant*)
	bool xret = this->QSqlForm::qt_property((int)x[1].s_int,(int)x[2].s_int,(QVariant*)x[3].s_class);
	x[0].s_bool = xret;
    }
    void x_6(Smoke::Stack x) {
	// qObject()
	QObject* xret = this->QSqlForm::qObject();
	x[0].s_class = (void*)xret;
    }
    static void x_7(Smoke::Stack x) {
	// QSqlForm(QObject*, const char*)
	x_QSqlForm* xret = new x_QSqlForm((QObject*)x[1].s_class,(const char*)x[2].s_voidp);
	x[0].s_class = (void*)xret;
    }
    x_QSqlForm(QObject* x1, const char* x2) : QSqlForm(x1, x2) {
    }
    static void x_8(Smoke::Stack x) {
	// QSqlForm(QObject*)
	x_QSqlForm* xret = new x_QSqlForm((QObject*)x[1].s_class);
	x[0].s_class = (void*)xret;
    }
    x_QSqlForm(QObject* x1) : QSqlForm(x1) {
    }
    static void x_9(Smoke::Stack x) {
	// QSqlForm()
	x_QSqlForm* xret = new x_QSqlForm();
	x[0].s_class = (void*)xret;
    }
    x_QSqlForm() : QSqlForm() {
    }
    void x_10(Smoke::Stack x) {
	// insert(QWidget*, const QString&)
	this->QSqlForm::insert((QWidget*)x[1].s_class,*(const QString *)x[2].s_voidp);
	(void)x; // noop (for compiler warning)
    }
    void x_11(Smoke::Stack x) {
	// remove(const QString&)
	this->QSqlForm::remove(*(const QString *)x[1].s_voidp);
	(void)x; // noop (for compiler warning)
    }
    void x_12(Smoke::Stack x) const {
	// count()
	uint xret = this->QSqlForm::count();
	x[0].s_uint = xret;
    }
    void x_13(Smoke::Stack x) const {
	// widget(uint)
	QWidget* xret = this->QSqlForm::widget((uint)x[1].s_uint);
	x[0].s_class = (void*)xret;
    }
    void x_14(Smoke::Stack x) const {
	// widgetToField(QWidget*)
	QSqlField* xret = this->QSqlForm::widgetToField((QWidget*)x[1].s_class);
	x[0].s_class = (void*)xret;
    }
    void x_15(Smoke::Stack x) const {
	// fieldToWidget(QSqlField*)
	QWidget* xret = this->QSqlForm::fieldToWidget((QSqlField*)x[1].s_class);
	x[0].s_class = (void*)xret;
    }
    void x_16(Smoke::Stack x) {
	// installPropertyMap(QSqlPropertyMap*)
	this->QSqlForm::installPropertyMap((QSqlPropertyMap*)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_17(Smoke::Stack x) {
	// setRecord(QSqlRecord*)
	this->QSqlForm::setRecord((QSqlRecord*)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_18(Smoke::Stack x) {
	// readField(QWidget*)
	this->QSqlForm::readField((QWidget*)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_19(Smoke::Stack x) {
	// writeField(QWidget*)
	this->QSqlForm::writeField((QWidget*)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_20(Smoke::Stack x) {
	// readFields()
	this->QSqlForm::readFields();
	(void)x; // noop (for compiler warning)
    }
    void x_21(Smoke::Stack x) {
	// writeFields()
	this->QSqlForm::writeFields();
	(void)x; // noop (for compiler warning)
    }
    void x_22(Smoke::Stack x) {
	// clear()
	this->QSqlForm::clear();
	(void)x; // noop (for compiler warning)
    }
    void x_23(Smoke::Stack x) {
	// clearValues(bool)
	this->QSqlForm::clearValues((bool)x[1].s_bool);
	(void)x; // noop (for compiler warning)
    }
    void x_24(Smoke::Stack x) {
	// clearValues()
	this->QSqlForm::clearValues();
	(void)x; // noop (for compiler warning)
    }
    static void x_25(Smoke::Stack x) {
	// staticMetaObject()
	QMetaObject* xret = QSqlForm::staticMetaObject();
	x[0].s_class = (void*)xret;
    }
    static void x_26(Smoke::Stack x) {
	// tr(const char*, const char*)
	QString xret = QSqlForm::tr((const char*)x[1].s_voidp,(const char*)x[2].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    static void x_27(Smoke::Stack x) {
	// tr(const char*)
	QString xret = QSqlForm::tr((const char*)x[1].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    static void x_28(Smoke::Stack x) {
	// trUtf8(const char*, const char*)
	QString xret = QSqlForm::trUtf8((const char*)x[1].s_voidp,(const char*)x[2].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    static void x_29(Smoke::Stack x) {
	// trUtf8(const char*)
	QString xret = QSqlForm::trUtf8((const char*)x[1].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_30(Smoke::Stack x) {
	// insert(QWidget*, QSqlField*)
	this->QSqlForm::insert((QWidget*)x[1].s_class,(QSqlField*)x[2].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_31(Smoke::Stack x) {
	// remove(QWidget*)
	this->QSqlForm::remove((QWidget*)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_32(Smoke::Stack x) {
	// clearMap()
	this->QSqlForm::clearMap();
	(void)x; // noop (for compiler warning)
    }
    virtual bool checkConnectArgs(const char* x1, const QObject* x2, const char* x3) {
	Smoke::StackItem x[4];
	x[1].s_voidp = (void*)x1;
	x[2].s_class = (void*)x2;
	x[3].s_voidp = (void*)x3;
	if(qt_Smoke->binding->callMethod(6714, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QObject::checkConnectArgs(x1, x2, x3);
    }
    virtual void childEvent(QChildEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(6710, (void*)this, x)) return;
	this->QObject::childEvent(x1);
    }
    virtual const char* className() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(9154, (void*)this, x)) return (const char*)x[0].s_class;
	return this->QSqlForm::className();
    }
    virtual void clear() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(9176, (void*)this, x)) return;
	this->QSqlForm::clear();
    }
    virtual void clearValues(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(9177, (void*)this, x)) return;
	this->QSqlForm::clearValues(x1);
    }
    virtual void connectNotify(const char* x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(6712, (void*)this, x)) return;
	this->QObject::connectNotify(x1);
    }
    virtual void customEvent(QCustomEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(6711, (void*)this, x)) return;
	this->QObject::customEvent(x1);
    }
    virtual void disconnectNotify(const char* x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(6713, (void*)this, x)) return;
	this->QObject::disconnectNotify(x1);
    }
    virtual bool event(QEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(6644, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
	Smoke::StackItem x[3];
	x[1].s_class = (void*)x1;
	x[2].s_class = (void*)x2;
	if(qt_Smoke->binding->callMethod(6645, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QObject::eventFilter(x1, x2);
    }
    virtual void insert(QWidget* x1, QSqlField* x2) {
	Smoke::StackItem x[3];
	x[1].s_class = (void*)x1;
	x[2].s_class = (void*)x2;
	if(qt_Smoke->binding->callMethod(9184, (void*)this, x)) return;
	this->QSqlForm::insert(x1, x2);
    }
    virtual void insert(QWidget* x1, const QString& x2) {
	Smoke::StackItem x[3];
	x[1].s_class = (void*)x1;
	x[2].s_voidp = (void*)&x2;
	if(qt_Smoke->binding->callMethod(9164, (void*)this, x)) return;
	this->QSqlForm::insert(x1, x2);
    }
    virtual void insertChild(QObject* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(6667, (void*)this, x)) return;
	this->QObject::insertChild(x1);
    }
    virtual QMetaObject* metaObject() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(9153, (void*)this, x)) return (QMetaObject*)x[0].s_class;
	return this->QSqlForm::metaObject();
    }
    virtual QVariant property(const char* x1) const {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(6681, (void*)this, x)) {
	    QVariant *xptr = (QVariant *)x[0].s_class;
	    QVariant xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QObject::property(x1);
    }
    virtual void* qt_cast(const char* x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(9155, (void*)this, x)) return (void*)x[0].s_voidp;
	return this->QSqlForm::qt_cast(x1);
    }
    virtual bool qt_emit(int x1, QUObject* x2) {
	Smoke::StackItem x[3];
	x[1].s_int = x1;
	x[2].s_voidp = (void*)x2;
	if(qt_Smoke->binding->callMethod(9157, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QSqlForm::qt_emit(x1, x2);
    }
    virtual bool qt_invoke(int x1, QUObject* x2) {
	Smoke::StackItem x[3];
	x[1].s_int = x1;
	x[2].s_voidp = (void*)x2;
	if(qt_Smoke->binding->callMethod(9156, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QSqlForm::qt_invoke(x1, x2);
    }
    virtual bool qt_property(int x1, int x2, QVariant* x3) {
	Smoke::StackItem x[4];
	x[1].s_int = x1;
	x[2].s_int = x2;
	x[3].s_class = (void*)x3;
	if(qt_Smoke->binding->callMethod(9158, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QSqlForm::qt_property(x1, x2, x3);
    }
    virtual void readField(QWidget* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(9172, (void*)this, x)) return;
	this->QSqlForm::readField(x1);
    }
    virtual void readFields() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(9174, (void*)this, x)) return;
	this->QSqlForm::readFields();
    }
    virtual void remove(QWidget* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(9185, (void*)this, x)) return;
	this->QSqlForm::remove(x1);
    }
    virtual void remove(const QString& x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)&x1;
	if(qt_Smoke->binding->callMethod(9165, (void*)this, x)) return;
	this->QSqlForm::remove(x1);
    }
    virtual void removeChild(QObject* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(6668, (void*)this, x)) return;
	this->QObject::removeChild(x1);
    }
    virtual void setName(const char* x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(6650, (void*)this, x)) return;
	this->QObject::setName(x1);
    }
    virtual bool setProperty(const char* x1, const QVariant& x2) {
	Smoke::StackItem x[3];
	x[1].s_voidp = (void*)x1;
	x[2].s_class = (void*)&x2;
	if(qt_Smoke->binding->callMethod(6680, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QObject::setProperty(x1, x2);
    }
    virtual void setRecord(QSqlRecord* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(9171, (void*)this, x)) return;
	this->QSqlForm::setRecord(x1);
    }
    virtual void timerEvent(QTimerEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(6709, (void*)this, x)) return;
	this->QObject::timerEvent(x1);
    }
    virtual void writeField(QWidget* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(9173, (void*)this, x)) return;
	this->QSqlForm::writeField(x1);
    }
    virtual void writeFields() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(9175, (void*)this, x)) return;
	this->QSqlForm::writeFields();
    }
    ~x_QSqlForm() { qt_Smoke->binding->deleted(288, (void*)this); }
};
void xcall_QSqlForm(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QSqlForm *xself = (x_QSqlForm*)obj;
    switch(xi) {
	case 0: xself->x_0(args);	break;
	case 1: xself->x_1(args);	break;
	case 2: xself->x_2(args);	break;
	case 3: xself->x_3(args);	break;
	case 4: xself->x_4(args);	break;
	case 5: xself->x_5(args);	break;
	case 6: xself->x_6(args);	break;
	case 7: x_QSqlForm::x_7(args);	break;
	case 8: x_QSqlForm::x_8(args);	break;
	case 9: x_QSqlForm::x_9(args);	break;
	case 10: xself->x_10(args);	break;
	case 11: xself->x_11(args);	break;
	case 12: xself->x_12(args);	break;
	case 13: xself->x_13(args);	break;
	case 14: xself->x_14(args);	break;
	case 15: xself->x_15(args);	break;
	case 16: xself->x_16(args);	break;
	case 17: xself->x_17(args);	break;
	case 18: xself->x_18(args);	break;
	case 19: xself->x_19(args);	break;
	case 20: xself->x_20(args);	break;
	case 21: xself->x_21(args);	break;
	case 22: xself->x_22(args);	break;
	case 23: xself->x_23(args);	break;
	case 24: xself->x_24(args);	break;
	case 25: x_QSqlForm::x_25(args);	break;
	case 26: x_QSqlForm::x_26(args);	break;
	case 27: x_QSqlForm::x_27(args);	break;
	case 28: x_QSqlForm::x_28(args);	break;
	case 29: x_QSqlForm::x_29(args);	break;
	case 30: xself->x_30(args);	break;
	case 31: xself->x_31(args);	break;
	case 32: xself->x_32(args);	break;
	case 33: delete (QSqlForm*)xself;	break;
    }
}
