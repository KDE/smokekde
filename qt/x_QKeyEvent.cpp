//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qevent.h>
#include <qstring.h>

class x_QKeyEvent : public QKeyEvent {
public:
    static void x_0(xargs *x) {
	// QKeyEvent(QEvent::Type, int, int, int, const QString&, bool, ushort)
	x_QKeyEvent* xret = new x_QKeyEvent((QEvent::Type)x[1].x_long,(int)x[2].x_int,(int)x[3].x_int,(int)x[4].x_int,*(const QString *)x[5].x_voidp,(bool)x[6].x_bool,(ushort)x[7].x_ushort);
	x[0].x_voidp = (void*)xret;
    }
    x_QKeyEvent(QEvent::Type x1, int x2, int x3, int x4, const QString& x5, bool x6, ushort x7) : QKeyEvent(x1, x2, x3, x4, x5, x6, x7) {
    }
    static void x_1(xargs *x) {
	// QKeyEvent(QEvent::Type, int, int, int, const QString&, bool)
	x_QKeyEvent* xret = new x_QKeyEvent((QEvent::Type)x[1].x_long,(int)x[2].x_int,(int)x[3].x_int,(int)x[4].x_int,*(const QString *)x[5].x_voidp,(bool)x[6].x_bool);
	x[0].x_voidp = (void*)xret;
    }
    x_QKeyEvent(QEvent::Type x1, int x2, int x3, int x4, const QString& x5, bool x6) : QKeyEvent(x1, x2, x3, x4, x5, x6) {
    }
    static void x_2(xargs *x) {
	// QKeyEvent(QEvent::Type, int, int, int, const QString&)
	x_QKeyEvent* xret = new x_QKeyEvent((QEvent::Type)x[1].x_long,(int)x[2].x_int,(int)x[3].x_int,(int)x[4].x_int,*(const QString *)x[5].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QKeyEvent(QEvent::Type x1, int x2, int x3, int x4, const QString& x5) : QKeyEvent(x1, x2, x3, x4, x5) {
    }
    static void x_3(xargs *x) {
	// QKeyEvent(QEvent::Type, int, int, int)
	x_QKeyEvent* xret = new x_QKeyEvent((QEvent::Type)x[1].x_long,(int)x[2].x_int,(int)x[3].x_int,(int)x[4].x_int);
	x[0].x_voidp = (void*)xret;
    }
    x_QKeyEvent(QEvent::Type x1, int x2, int x3, int x4) : QKeyEvent(x1, x2, x3, x4) {
    }
    void x_4(xargs *x) const {
	// key()
	int xret = this->QKeyEvent::key();
	x[0].x_int = (int)xret;
    }
    void x_5(xargs *x) const {
	// ascii()
	int xret = this->QKeyEvent::ascii();
	x[0].x_int = (int)xret;
    }
    void x_6(xargs *x) const {
	// state()
	Qt::ButtonState xret = this->QKeyEvent::state();
	x[0].x_long = (long)xret;
    }
    void x_7(xargs *x) const {
	// stateAfter()
	Qt::ButtonState xret = this->QKeyEvent::stateAfter();
	x[0].x_long = (long)xret;
    }
    void x_8(xargs *x) const {
	// isAccepted()
	bool xret = this->QKeyEvent::isAccepted();
	x[0].x_bool = (bool)xret;
    }
    void x_9(xargs *x) const {
	// text()
	QString xret = this->QKeyEvent::text();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_10(xargs *x) const {
	// isAutoRepeat()
	bool xret = this->QKeyEvent::isAutoRepeat();
	x[0].x_bool = (bool)xret;
    }
    void x_11(xargs *x) const {
	// count()
	int xret = this->QKeyEvent::count();
	x[0].x_int = (int)xret;
    }
    void x_12(xargs *x) {
	// accept()
	this->QKeyEvent::accept();
    }
    void x_13(xargs *x) {
	// ignore()
	this->QKeyEvent::ignore();
    }
    ~x_QKeyEvent() {}
};
void xcall_QKeyEvent(xargs *x, void *s, int xi) {
    x_QKeyEvent *xself = (x_QKeyEvent*)s;
    switch(xi) {
	case 0: x_QKeyEvent::x_0(x);	break;
	case 1: x_QKeyEvent::x_1(x);	break;
	case 2: x_QKeyEvent::x_2(x);	break;
	case 3: x_QKeyEvent::x_3(x);	break;
	case 4: xself->x_4(x);	break;
	case 5: xself->x_5(x);	break;
	case 6: xself->x_6(x);	break;
	case 7: xself->x_7(x);	break;
	case 8: xself->x_8(x);	break;
	case 9: xself->x_9(x);	break;
	case 10: xself->x_10(x);	break;
	case 11: xself->x_11(x);	break;
	case 12: xself->x_12(x);	break;
	case 13: xself->x_13(x);	break;
    }
}
