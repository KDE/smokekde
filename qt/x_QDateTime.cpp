//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qstring.h>
#include <qdatetime.h>

class x_QDateTime : public QDateTime {
public:
    static void x_0(xargs *x) {
	// QDateTime()
	x_QDateTime* xret = new x_QDateTime();
	x[0].x_voidp = (void*)xret;
    }
    x_QDateTime() : QDateTime() {
    }
    static void x_1(xargs *x) {
	// QDateTime(const QDate&)
	x_QDateTime* xret = new x_QDateTime(*(const QDate *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QDateTime(const QDate& x1) : QDateTime(x1) {
    }
    static void x_2(xargs *x) {
	// QDateTime(const QDate&, const QTime&)
	x_QDateTime* xret = new x_QDateTime(*(const QDate *)x[1].x_voidp,*(const QTime *)x[2].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QDateTime(const QDate& x1, const QTime& x2) : QDateTime(x1, x2) {
    }
    void x_3(xargs *x) const {
	// isNull()
	bool xret = this->QDateTime::isNull();
	x[0].x_bool = (bool)xret;
    }
    void x_4(xargs *x) const {
	// isValid()
	bool xret = this->QDateTime::isValid();
	x[0].x_bool = (bool)xret;
    }
    void x_5(xargs *x) const {
	// date()
	QDate xret = this->QDateTime::date();
	x[0].x_voidp = (void*)new QDate(xret);
    }
    void x_6(xargs *x) const {
	// time()
	QTime xret = this->QDateTime::time();
	x[0].x_voidp = (void*)new QTime(xret);
    }
    void x_7(xargs *x) {
	// setDate(const QDate&)
	this->QDateTime::setDate(*(const QDate *)x[1].x_voidp);
    }
    void x_8(xargs *x) {
	// setTime(const QTime&)
	this->QDateTime::setTime(*(const QTime *)x[1].x_voidp);
    }
    void x_9(xargs *x) {
	// setTime_t(uint)
	this->QDateTime::setTime_t((uint)x[1].x_uint);
    }
    void x_10(xargs *x) const {
	// toString(Qt::DateFormat)
	QString xret = this->QDateTime::toString((Qt::DateFormat)x[1].x_long);
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_11(xargs *x) const {
	// toString()
	QString xret = this->QDateTime::toString();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_12(xargs *x) const {
	// toString(const QString&)
	QString xret = this->QDateTime::toString(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_13(xargs *x) const {
	// addDays(int)
	QDateTime xret = this->QDateTime::addDays((int)x[1].x_int);
	x[0].x_voidp = (void*)new QDateTime(xret);
    }
    void x_14(xargs *x) const {
	// addMonths(int)
	QDateTime xret = this->QDateTime::addMonths((int)x[1].x_int);
	x[0].x_voidp = (void*)new QDateTime(xret);
    }
    void x_15(xargs *x) const {
	// addYears(int)
	QDateTime xret = this->QDateTime::addYears((int)x[1].x_int);
	x[0].x_voidp = (void*)new QDateTime(xret);
    }
    void x_16(xargs *x) const {
	// addSecs(int)
	QDateTime xret = this->QDateTime::addSecs((int)x[1].x_int);
	x[0].x_voidp = (void*)new QDateTime(xret);
    }
    void x_17(xargs *x) const {
	// daysTo(const QDateTime&)
	int xret = this->QDateTime::daysTo(*(const QDateTime *)x[1].x_voidp);
	x[0].x_int = (int)xret;
    }
    void x_18(xargs *x) const {
	// secsTo(const QDateTime&)
	int xret = this->QDateTime::secsTo(*(const QDateTime *)x[1].x_voidp);
	x[0].x_int = (int)xret;
    }
    void x_19(xargs *x) const {
	// operator==(const QDateTime&)
	bool xret = this->QDateTime::operator==(*(const QDateTime *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_20(xargs *x) const {
	// operator!=(const QDateTime&)
	bool xret = this->QDateTime::operator!=(*(const QDateTime *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_21(xargs *x) const {
	// operator<(const QDateTime&)
	bool xret = this->QDateTime::operator<(*(const QDateTime *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_22(xargs *x) const {
	// operator<=(const QDateTime&)
	bool xret = this->QDateTime::operator<=(*(const QDateTime *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_23(xargs *x) const {
	// operator>(const QDateTime&)
	bool xret = this->QDateTime::operator>(*(const QDateTime *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_24(xargs *x) const {
	// operator>=(const QDateTime&)
	bool xret = this->QDateTime::operator>=(*(const QDateTime *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    static void x_25(xargs *x) {
	// currentDateTime()
	QDateTime xret = QDateTime::currentDateTime();
	x[0].x_voidp = (void*)new QDateTime(xret);
    }
    static void x_26(xargs *x) {
	// fromString(const QString&, Qt::DateFormat)
	QDateTime xret = QDateTime::fromString(*(const QString *)x[1].x_voidp,(Qt::DateFormat)x[2].x_long);
	x[0].x_voidp = (void*)new QDateTime(xret);
    }
    static void x_27(xargs *x) {
	// fromString(const QString&)
	QDateTime xret = QDateTime::fromString(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QDateTime(xret);
    }
    ~x_QDateTime() {}
};
void xcall_QDateTime(xargs *x, void *s, int xi) {
    x_QDateTime *xself = (x_QDateTime*)s;
    switch(xi) {
	case 0: x_QDateTime::x_0(x);	break;
	case 1: x_QDateTime::x_1(x);	break;
	case 2: x_QDateTime::x_2(x);	break;
	case 3: xself->x_3(x);	break;
	case 4: xself->x_4(x);	break;
	case 5: xself->x_5(x);	break;
	case 6: xself->x_6(x);	break;
	case 7: xself->x_7(x);	break;
	case 8: xself->x_8(x);	break;
	case 9: xself->x_9(x);	break;
	case 10: xself->x_10(x);	break;
	case 11: xself->x_11(x);	break;
	case 12: xself->x_12(x);	break;
	case 13: xself->x_13(x);	break;
	case 14: xself->x_14(x);	break;
	case 15: xself->x_15(x);	break;
	case 16: xself->x_16(x);	break;
	case 17: xself->x_17(x);	break;
	case 18: xself->x_18(x);	break;
	case 19: xself->x_19(x);	break;
	case 20: xself->x_20(x);	break;
	case 21: xself->x_21(x);	break;
	case 22: xself->x_22(x);	break;
	case 23: xself->x_23(x);	break;
	case 24: xself->x_24(x);	break;
	case 25: x_QDateTime::x_25(x);	break;
	case 26: x_QDateTime::x_26(x);	break;
	case 27: x_QDateTime::x_27(x);	break;
    }
}
