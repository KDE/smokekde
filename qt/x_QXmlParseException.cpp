//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qstring.h>
#include <qxml.h>

class x_QXmlParseException : public QXmlParseException {
public:
    static void x_0(xargs *x) {
	// QXmlParseException(const QString&, int, int, const QString&, const QString&)
	x_QXmlParseException* xret = new x_QXmlParseException(*(const QString *)x[1].x_voidp,(int)x[2].x_int,(int)x[3].x_int,*(const QString *)x[4].x_voidp,*(const QString *)x[5].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QXmlParseException(const QString& x1, int x2, int x3, const QString& x4, const QString& x5) : QXmlParseException(x1, x2, x3, x4, x5) {
    }
    static void x_1(xargs *x) {
	// QXmlParseException(const QString&, int, int, const QString&)
	x_QXmlParseException* xret = new x_QXmlParseException(*(const QString *)x[1].x_voidp,(int)x[2].x_int,(int)x[3].x_int,*(const QString *)x[4].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QXmlParseException(const QString& x1, int x2, int x3, const QString& x4) : QXmlParseException(x1, x2, x3, x4) {
    }
    static void x_2(xargs *x) {
	// QXmlParseException(const QString&, int, int)
	x_QXmlParseException* xret = new x_QXmlParseException(*(const QString *)x[1].x_voidp,(int)x[2].x_int,(int)x[3].x_int);
	x[0].x_voidp = (void*)xret;
    }
    x_QXmlParseException(const QString& x1, int x2, int x3) : QXmlParseException(x1, x2, x3) {
    }
    static void x_3(xargs *x) {
	// QXmlParseException(const QString&, int)
	x_QXmlParseException* xret = new x_QXmlParseException(*(const QString *)x[1].x_voidp,(int)x[2].x_int);
	x[0].x_voidp = (void*)xret;
    }
    x_QXmlParseException(const QString& x1, int x2) : QXmlParseException(x1, x2) {
    }
    static void x_4(xargs *x) {
	// QXmlParseException(const QString&)
	x_QXmlParseException* xret = new x_QXmlParseException(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QXmlParseException(const QString& x1) : QXmlParseException(x1) {
    }
    static void x_5(xargs *x) {
	// QXmlParseException()
	x_QXmlParseException* xret = new x_QXmlParseException();
	x[0].x_voidp = (void*)xret;
    }
    x_QXmlParseException() : QXmlParseException() {
    }
    void x_6(xargs *x) const {
	// columnNumber()
	int xret = this->QXmlParseException::columnNumber();
	x[0].x_int = (int)xret;
    }
    void x_7(xargs *x) const {
	// lineNumber()
	int xret = this->QXmlParseException::lineNumber();
	x[0].x_int = (int)xret;
    }
    void x_8(xargs *x) const {
	// publicId()
	QString xret = this->QXmlParseException::publicId();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_9(xargs *x) const {
	// systemId()
	QString xret = this->QXmlParseException::systemId();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_10(xargs *x) const {
	// message()
	QString xret = this->QXmlParseException::message();
	x[0].x_voidp = (void*)new QString(xret);
    }
    ~x_QXmlParseException() {}
};
void xcall_QXmlParseException(xargs *x, void *s, int xi) {
    x_QXmlParseException *xself = (x_QXmlParseException*)s;
    switch(xi) {
	case 0: x_QXmlParseException::x_0(x);	break;
	case 1: x_QXmlParseException::x_1(x);	break;
	case 2: x_QXmlParseException::x_2(x);	break;
	case 3: x_QXmlParseException::x_3(x);	break;
	case 4: x_QXmlParseException::x_4(x);	break;
	case 5: x_QXmlParseException::x_5(x);	break;
	case 6: xself->x_6(x);	break;
	case 7: xself->x_7(x);	break;
	case 8: xself->x_8(x);	break;
	case 9: xself->x_9(x);	break;
	case 10: xself->x_10(x);	break;
    }
}
