//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke.h>
#include <qstring.h>
#include <qxml.h>

class x_QXmlLexicalHandler {
private:
    QXmlLexicalHandler *xthis;
public:
    x_QXmlLexicalHandler(void *x) : xthis((QXmlLexicalHandler*)x) {}
    void x_0(Smoke::Stack x) {
	// startDTD(const QString&, const QString&, const QString&)
	bool xret = xthis->QXmlLexicalHandler::startDTD(*(const QString *)x[1].s_voidp,*(const QString *)x[2].s_voidp,*(const QString *)x[3].s_voidp);
	x[0].s_bool = (bool)xret;
    }
    void x_1(Smoke::Stack x) {
	// endDTD()
	bool xret = xthis->QXmlLexicalHandler::endDTD();
	x[0].s_bool = (bool)xret;
    }
    void x_2(Smoke::Stack x) {
	// startEntity(const QString&)
	bool xret = xthis->QXmlLexicalHandler::startEntity(*(const QString *)x[1].s_voidp);
	x[0].s_bool = (bool)xret;
    }
    void x_3(Smoke::Stack x) {
	// endEntity(const QString&)
	bool xret = xthis->QXmlLexicalHandler::endEntity(*(const QString *)x[1].s_voidp);
	x[0].s_bool = (bool)xret;
    }
    void x_4(Smoke::Stack x) {
	// startCDATA()
	bool xret = xthis->QXmlLexicalHandler::startCDATA();
	x[0].s_bool = (bool)xret;
    }
    void x_5(Smoke::Stack x) {
	// endCDATA()
	bool xret = xthis->QXmlLexicalHandler::endCDATA();
	x[0].s_bool = (bool)xret;
    }
    void x_6(Smoke::Stack x) {
	// comment(const QString&)
	bool xret = xthis->QXmlLexicalHandler::comment(*(const QString *)x[1].s_voidp);
	x[0].s_bool = (bool)xret;
    }
    void x_7(Smoke::Stack x) {
	// errorString()
	QString xret = xthis->QXmlLexicalHandler::errorString();
	x[0].s_voidp = (void*)new QString(xret);
    }
    ~x_QXmlLexicalHandler() {}
};
void xcall_QXmlLexicalHandler(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QXmlLexicalHandler xtmp(obj), *xself = &xtmp;
    switch(xi) {
	case 0: xself->x_0(args);	break;
	case 1: xself->x_1(args);	break;
	case 2: xself->x_2(args);	break;
	case 3: xself->x_3(args);	break;
	case 4: xself->x_4(args);	break;
	case 5: xself->x_5(args);	break;
	case 6: xself->x_6(args);	break;
	case 7: xself->x_7(args);	break;
    }
}
