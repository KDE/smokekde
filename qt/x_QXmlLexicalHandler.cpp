//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qstring.h>
#include <qxml.h>

class x_QXmlLexicalHandler {
private:
    QXmlLexicalHandler *xthis;
public:
    x_QXmlLexicalHandler(void *x) : xthis((QXmlLexicalHandler*)x) {}
    void x_0(xargs *x) {
	// startDTD(const QString&, const QString&, const QString&)
	bool xret = xthis->QXmlLexicalHandler::startDTD(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp,*(const QString *)x[3].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_1(xargs *x) {
	// endDTD()
	bool xret = xthis->QXmlLexicalHandler::endDTD();
	x[0].x_bool = (bool)xret;
    }
    void x_2(xargs *x) {
	// startEntity(const QString&)
	bool xret = xthis->QXmlLexicalHandler::startEntity(*(const QString *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_3(xargs *x) {
	// endEntity(const QString&)
	bool xret = xthis->QXmlLexicalHandler::endEntity(*(const QString *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_4(xargs *x) {
	// startCDATA()
	bool xret = xthis->QXmlLexicalHandler::startCDATA();
	x[0].x_bool = (bool)xret;
    }
    void x_5(xargs *x) {
	// endCDATA()
	bool xret = xthis->QXmlLexicalHandler::endCDATA();
	x[0].x_bool = (bool)xret;
    }
    void x_6(xargs *x) {
	// comment(const QString&)
	bool xret = xthis->QXmlLexicalHandler::comment(*(const QString *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_7(xargs *x) {
	// errorString()
	QString xret = xthis->QXmlLexicalHandler::errorString();
	x[0].x_voidp = (void*)new QString(xret);
    }
    ~x_QXmlLexicalHandler() {}
};
void xcall_QXmlLexicalHandler(xargs *x, void *s, int xi) {
    x_QXmlLexicalHandler xtmp(s), *xself = &xtmp;
    switch(xi) {
	case 0: xself->x_0(x);	break;
	case 1: xself->x_1(x);	break;
	case 2: xself->x_2(x);	break;
	case 3: xself->x_3(x);	break;
	case 4: xself->x_4(x);	break;
	case 5: xself->x_5(x);	break;
	case 6: xself->x_6(x);	break;
	case 7: xself->x_7(x);	break;
    }
}
