//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke.h>
#include <qt_smoke.h>
#include <qstring.h>
#include <qxml.h>

class x_QXmlErrorHandler : public QXmlErrorHandler {
public:
    static void x_0(Smoke::Stack x) {
	// QXmlErrorHandler()
	x_QXmlErrorHandler* xret = new x_QXmlErrorHandler();
	x[0].s_class = (void*)xret;
    }
    x_QXmlErrorHandler() : QXmlErrorHandler() {
    }
    static void x_1(Smoke::Stack x) {
	// QXmlErrorHandler(const QXmlErrorHandler&)
	x_QXmlErrorHandler* xret = new x_QXmlErrorHandler(*(const QXmlErrorHandler *)x[1].s_class);
	x[0].s_class = (void*)xret;
    }
    x_QXmlErrorHandler(const QXmlErrorHandler& x1) : QXmlErrorHandler(x1) {
    }
    virtual bool error(const QXmlParseException& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	qt_Smoke->binding->callMethod(12473, (void*)this, x, true /*pure virtual*/);
	return (bool)x[0].s_bool;
	// ABSTRACT
    }
    virtual QString errorString() {
	Smoke::StackItem x[1];
	qt_Smoke->binding->callMethod(12475, (void*)this, x, true /*pure virtual*/);
	QString *xptr = (QString *)x[0].s_class;
	QString xret(*xptr);
	delete xptr;
	return xret;
	// ABSTRACT
    }
    virtual bool fatalError(const QXmlParseException& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	qt_Smoke->binding->callMethod(12474, (void*)this, x, true /*pure virtual*/);
	return (bool)x[0].s_bool;
	// ABSTRACT
    }
    virtual bool warning(const QXmlParseException& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	qt_Smoke->binding->callMethod(12472, (void*)this, x, true /*pure virtual*/);
	return (bool)x[0].s_bool;
	// ABSTRACT
    }
    ~x_QXmlErrorHandler() { qt_Smoke->binding->deleted(383, (void*)this); }
};
void xcall_QXmlErrorHandler(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QXmlErrorHandler *xself = (x_QXmlErrorHandler*)obj;
    switch(xi) {
	case 0: x_QXmlErrorHandler::x_0(args);	break;
	case 1: x_QXmlErrorHandler::x_1(args);	break;
	case 2: delete (QXmlErrorHandler*)xself;	break;
    }
}
