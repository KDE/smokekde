//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke.h>
#include <qt_smoke.h>
#include <qstring.h>
#include <qxml.h>

class x_QXmlErrorHandler : public QXmlErrorHandler {
public:
    static void x_0(Smoke::Stack x) {
	// QXmlErrorHandler()
	x_QXmlErrorHandler* xret = new x_QXmlErrorHandler();
	x[0].s_class = (void*)xret;
    }
    x_QXmlErrorHandler() : QXmlErrorHandler() {
    }
    virtual bool error(const QXmlParseException& x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)&x1;
	qt_Smoke->callMethod(10044, (void*)this, x, true /*pure virtual*/);
	return (bool)x[0].s_bool;
	// ABSTRACT
    }
    virtual QString errorString() {
	Smoke::StackItem x[1];
	qt_Smoke->callMethod(10046, (void*)this, x, true /*pure virtual*/);
	QString *xptr = (QString *)x[0].s_class;
	QString xret(*xptr);
	delete xptr;
	return xret;
	// ABSTRACT
    }
    virtual bool fatalError(const QXmlParseException& x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)&x1;
	qt_Smoke->callMethod(10045, (void*)this, x, true /*pure virtual*/);
	return (bool)x[0].s_bool;
	// ABSTRACT
    }
    virtual bool warning(const QXmlParseException& x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)&x1;
	qt_Smoke->callMethod(10043, (void*)this, x, true /*pure virtual*/);
	return (bool)x[0].s_bool;
	// ABSTRACT
    }
    ~x_QXmlErrorHandler() {}
};
void xcall_QXmlErrorHandler(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QXmlErrorHandler *xself = (x_QXmlErrorHandler*)obj;
    switch(xi) {
	case 0: x_QXmlErrorHandler::x_0(args);	break;
	case 1: delete (QXmlErrorHandler*)xself;	break;
    }
}
