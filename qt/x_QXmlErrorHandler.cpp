//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke.h>
#include <qt_smoke.h>
#include <qstring.h>
#include <qxml.h>

class x_QXmlErrorHandler {
private:
    QXmlErrorHandler *xthis;
public:
    x_QXmlErrorHandler(void *x) : xthis((QXmlErrorHandler*)x) {}
    void x_0(Smoke::Stack x) {
	// warning(const QXmlParseException&)
	bool xret = xthis->QXmlErrorHandler::warning(*(const QXmlParseException *)x[1].s_class);
	x[0].s_bool = (bool)xret;
    }
    void x_1(Smoke::Stack x) {
	// error(const QXmlParseException&)
	bool xret = xthis->QXmlErrorHandler::error(*(const QXmlParseException *)x[1].s_class);
	x[0].s_bool = (bool)xret;
    }
    void x_2(Smoke::Stack x) {
	// fatalError(const QXmlParseException&)
	bool xret = xthis->QXmlErrorHandler::fatalError(*(const QXmlParseException *)x[1].s_class);
	x[0].s_bool = (bool)xret;
    }
    void x_3(Smoke::Stack x) {
	// errorString()
	QString xret = xthis->QXmlErrorHandler::errorString();
	x[0].s_class = (void*)new QString(xret);
    }
    ~x_QXmlErrorHandler() {}
};
void xcall_QXmlErrorHandler(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QXmlErrorHandler xtmp(obj), *xself = &xtmp;
    switch(xi) {
	case 0: xself->x_0(args);	break;
	case 1: xself->x_1(args);	break;
	case 2: xself->x_2(args);	break;
	case 3: xself->x_3(args);	break;
    }
}
