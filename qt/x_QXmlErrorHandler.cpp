//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qstring.h>
#include <qxml.h>

class x_QXmlErrorHandler {
private:
    QXmlErrorHandler *xthis;
public:
    x_QXmlErrorHandler(void *x) : xthis((QXmlErrorHandler*)x) {}
    void x_0(xargs *x) {
	// warning(const QXmlParseException&)
	bool xret = xthis->QXmlErrorHandler::warning(*(const QXmlParseException *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_1(xargs *x) {
	// error(const QXmlParseException&)
	bool xret = xthis->QXmlErrorHandler::error(*(const QXmlParseException *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_2(xargs *x) {
	// fatalError(const QXmlParseException&)
	bool xret = xthis->QXmlErrorHandler::fatalError(*(const QXmlParseException *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_3(xargs *x) {
	// errorString()
	QString xret = xthis->QXmlErrorHandler::errorString();
	x[0].x_voidp = (void*)new QString(xret);
    }
    ~x_QXmlErrorHandler() {}
};
void xcall_QXmlErrorHandler(xargs *x, void *s, int xi) {
    x_QXmlErrorHandler xtmp(s), *xself = &xtmp;
    switch(xi) {
	case 0: xself->x_0(x);	break;
	case 1: xself->x_1(x);	break;
	case 2: xself->x_2(x);	break;
	case 3: xself->x_3(x);	break;
    }
}
