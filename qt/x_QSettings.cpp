//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke.h>
#include <qt_smoke.h>
#include <qsettings.h>
#include <qstring.h>
#include <qstringlist.h>

class x_QSettings : public QSettings {
public:
    static void x_0(Smoke::Stack x) {
	x[0].s_enum = (long)QSettings::Unix;
    }
    static void x_1(Smoke::Stack x) {
	x[0].s_enum = (long)QSettings::Windows;
    }
    static void x_2(Smoke::Stack x) {
	x[0].s_enum = (long)QSettings::Mac;
    }
    static void x_3(Smoke::Stack x) {
	// QSettings()
	x_QSettings* xret = new x_QSettings();
	x[0].s_class = (void*)xret;
    }
    x_QSettings() : QSettings() {
    }
    void x_4(Smoke::Stack x) {
	// writeEntry(const QString&, bool)
	bool xret = this->QSettings::writeEntry(*(const QString *)x[1].s_voidp,(bool)x[2].s_bool);
	x[0].s_bool = xret;
    }
    void x_5(Smoke::Stack x) {
	// writeEntry(const QString&, double)
	bool xret = this->QSettings::writeEntry(*(const QString *)x[1].s_voidp,(double)x[2].s_double);
	x[0].s_bool = xret;
    }
    void x_6(Smoke::Stack x) {
	// writeEntry(const QString&, int)
	bool xret = this->QSettings::writeEntry(*(const QString *)x[1].s_voidp,(int)x[2].s_int);
	x[0].s_bool = xret;
    }
    void x_7(Smoke::Stack x) {
	// writeEntry(const QString&, const char*)
	bool xret = this->QSettings::writeEntry(*(const QString *)x[1].s_voidp,(const char*)x[2].s_voidp);
	x[0].s_bool = xret;
    }
    void x_8(Smoke::Stack x) {
	// writeEntry(const QString&, const QString&)
	bool xret = this->QSettings::writeEntry(*(const QString *)x[1].s_voidp,*(const QString *)x[2].s_voidp);
	x[0].s_bool = xret;
    }
    void x_9(Smoke::Stack x) {
	// writeEntry(const QString&, const QStringList&)
	bool xret = this->QSettings::writeEntry(*(const QString *)x[1].s_voidp,*(const QStringList *)x[2].s_voidp);
	x[0].s_bool = xret;
    }
    void x_10(Smoke::Stack x) {
	// writeEntry(const QString&, const QStringList&, const QChar&)
	bool xret = this->QSettings::writeEntry(*(const QString *)x[1].s_voidp,*(const QStringList *)x[2].s_voidp,*(const QChar *)x[3].s_class);
	x[0].s_bool = xret;
    }
    void x_11(Smoke::Stack x) const {
	// entryList(const QString&)
	QStringList xret = this->QSettings::entryList(*(const QString *)x[1].s_voidp);
	x[0].s_voidp = (void*)new QStringList(xret);
    }
    void x_12(Smoke::Stack x) const {
	// subkeyList(const QString&)
	QStringList xret = this->QSettings::subkeyList(*(const QString *)x[1].s_voidp);
	x[0].s_voidp = (void*)new QStringList(xret);
    }
    void x_13(Smoke::Stack x) {
	// readListEntry(const QString&, bool*)
	QStringList xret = this->QSettings::readListEntry(*(const QString *)x[1].s_voidp,(bool*)x[2].s_voidp);
	x[0].s_voidp = (void*)new QStringList(xret);
    }
    void x_14(Smoke::Stack x) {
	// readListEntry(const QString&)
	QStringList xret = this->QSettings::readListEntry(*(const QString *)x[1].s_voidp);
	x[0].s_voidp = (void*)new QStringList(xret);
    }
    void x_15(Smoke::Stack x) {
	// readListEntry(const QString&, const QChar&, bool*)
	QStringList xret = this->QSettings::readListEntry(*(const QString *)x[1].s_voidp,*(const QChar *)x[2].s_class,(bool*)x[3].s_voidp);
	x[0].s_voidp = (void*)new QStringList(xret);
    }
    void x_16(Smoke::Stack x) {
	// readListEntry(const QString&, const QChar&)
	QStringList xret = this->QSettings::readListEntry(*(const QString *)x[1].s_voidp,*(const QChar *)x[2].s_class);
	x[0].s_voidp = (void*)new QStringList(xret);
    }
    void x_17(Smoke::Stack x) {
	// readEntry(const QString&, const QString&, bool*)
	QString xret = this->QSettings::readEntry(*(const QString *)x[1].s_voidp,*(const QString *)x[2].s_voidp,(bool*)x[3].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_18(Smoke::Stack x) {
	// readEntry(const QString&, const QString&)
	QString xret = this->QSettings::readEntry(*(const QString *)x[1].s_voidp,*(const QString *)x[2].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_19(Smoke::Stack x) {
	// readEntry(const QString&)
	QString xret = this->QSettings::readEntry(*(const QString *)x[1].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_20(Smoke::Stack x) {
	// readNumEntry(const QString&, int, bool*)
	int xret = this->QSettings::readNumEntry(*(const QString *)x[1].s_voidp,(int)x[2].s_int,(bool*)x[3].s_voidp);
	x[0].s_int = xret;
    }
    void x_21(Smoke::Stack x) {
	// readNumEntry(const QString&, int)
	int xret = this->QSettings::readNumEntry(*(const QString *)x[1].s_voidp,(int)x[2].s_int);
	x[0].s_int = xret;
    }
    void x_22(Smoke::Stack x) {
	// readNumEntry(const QString&)
	int xret = this->QSettings::readNumEntry(*(const QString *)x[1].s_voidp);
	x[0].s_int = xret;
    }
    void x_23(Smoke::Stack x) {
	// readDoubleEntry(const QString&, double, bool*)
	double xret = this->QSettings::readDoubleEntry(*(const QString *)x[1].s_voidp,(double)x[2].s_double,(bool*)x[3].s_voidp);
	x[0].s_double = xret;
    }
    void x_24(Smoke::Stack x) {
	// readDoubleEntry(const QString&, double)
	double xret = this->QSettings::readDoubleEntry(*(const QString *)x[1].s_voidp,(double)x[2].s_double);
	x[0].s_double = xret;
    }
    void x_25(Smoke::Stack x) {
	// readDoubleEntry(const QString&)
	double xret = this->QSettings::readDoubleEntry(*(const QString *)x[1].s_voidp);
	x[0].s_double = xret;
    }
    void x_26(Smoke::Stack x) {
	// readBoolEntry(const QString&, bool, bool*)
	bool xret = this->QSettings::readBoolEntry(*(const QString *)x[1].s_voidp,(bool)x[2].s_bool,(bool*)x[3].s_voidp);
	x[0].s_bool = xret;
    }
    void x_27(Smoke::Stack x) {
	// readBoolEntry(const QString&, bool)
	bool xret = this->QSettings::readBoolEntry(*(const QString *)x[1].s_voidp,(bool)x[2].s_bool);
	x[0].s_bool = xret;
    }
    void x_28(Smoke::Stack x) {
	// readBoolEntry(const QString&)
	bool xret = this->QSettings::readBoolEntry(*(const QString *)x[1].s_voidp);
	x[0].s_bool = xret;
    }
    void x_29(Smoke::Stack x) {
	// removeEntry(const QString&)
	bool xret = this->QSettings::removeEntry(*(const QString *)x[1].s_voidp);
	x[0].s_bool = xret;
    }
    void x_30(Smoke::Stack x) {
	// insertSearchPath(QSettings::System, const QString&)
	this->QSettings::insertSearchPath((QSettings::System)x[1].s_enum,*(const QString *)x[2].s_voidp);
	(void)x; // noop (for compiler warning)
    }
    void x_31(Smoke::Stack x) {
	// removeSearchPath(QSettings::System, const QString&)
	this->QSettings::removeSearchPath((QSettings::System)x[1].s_enum,*(const QString *)x[2].s_voidp);
	(void)x; // noop (for compiler warning)
    }
    static void xenum_operation(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
	switch(xtype) {
	  case 493: //QSettings::System
	    switch(xop) {
	      case Smoke::EnumNew:
		xdata = (void*)new QSettings::System;
		break;
	      case Smoke::EnumDelete:
		delete (QSettings::System*)xdata;
		break;
	      case Smoke::EnumFromLong:
		*(QSettings::System*)xdata = (QSettings::System)xvalue;
		break;
	      case Smoke::EnumToLong:
		xvalue = (long)*(QSettings::System*)xdata;
		break;
	    }
	    break;
	}
    }
    ~x_QSettings() { qt_Smoke->binding->deleted(256, (void*)this); }
};
void xenum_QSettings(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
    x_QSettings::xenum_operation(xop, xtype, xdata, xvalue);
}
void xcall_QSettings(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QSettings *xself = (x_QSettings*)obj;
    switch(xi) {
	case 0: x_QSettings::x_0(args);	break;
	case 1: x_QSettings::x_1(args);	break;
	case 2: x_QSettings::x_2(args);	break;
	case 3: x_QSettings::x_3(args);	break;
	case 4: xself->x_4(args);	break;
	case 5: xself->x_5(args);	break;
	case 6: xself->x_6(args);	break;
	case 7: xself->x_7(args);	break;
	case 8: xself->x_8(args);	break;
	case 9: xself->x_9(args);	break;
	case 10: xself->x_10(args);	break;
	case 11: xself->x_11(args);	break;
	case 12: xself->x_12(args);	break;
	case 13: xself->x_13(args);	break;
	case 14: xself->x_14(args);	break;
	case 15: xself->x_15(args);	break;
	case 16: xself->x_16(args);	break;
	case 17: xself->x_17(args);	break;
	case 18: xself->x_18(args);	break;
	case 19: xself->x_19(args);	break;
	case 20: xself->x_20(args);	break;
	case 21: xself->x_21(args);	break;
	case 22: xself->x_22(args);	break;
	case 23: xself->x_23(args);	break;
	case 24: xself->x_24(args);	break;
	case 25: xself->x_25(args);	break;
	case 26: xself->x_26(args);	break;
	case 27: xself->x_27(args);	break;
	case 28: xself->x_28(args);	break;
	case 29: xself->x_29(args);	break;
	case 30: xself->x_30(args);	break;
	case 31: xself->x_31(args);	break;
	case 32: delete (QSettings*)xself;	break;
    }
}
