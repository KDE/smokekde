//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke.h>
#include <qt_smoke.h>
#include <qstrlist.h>

class x_QStrList : public QStrList {
public:
    static void x_0(Smoke::Stack x) {
	// QStrList(bool)
	x_QStrList* xret = new x_QStrList((bool)x[1].s_bool);
	x[0].s_class = (void*)xret;
    }
    x_QStrList(bool x1) : QStrList(x1) {
    }
    static void x_1(Smoke::Stack x) {
	// QStrList()
	x_QStrList* xret = new x_QStrList();
	x[0].s_class = (void*)xret;
    }
    x_QStrList() : QStrList() {
    }
    static void x_2(Smoke::Stack x) {
	// QStrList(const QStrList&)
	x_QStrList* xret = new x_QStrList(*(const QStrList *)x[1].s_class);
	x[0].s_class = (void*)xret;
    }
    x_QStrList(const QStrList& x1) : QStrList(x1) {
    }
    void x_3(Smoke::Stack x) {
	// operator=(const QStrList&)
	QStrList& xret = this->QStrList::operator=(*(const QStrList *)x[1].s_class);
	x[0].s_class = (void*)&xret;
    }
    ~x_QStrList() { qt_Smoke->binding->deleted(294, (void*)this); }
};
void xcall_QStrList(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QStrList *xself = (x_QStrList*)obj;
    switch(xi) {
	case 0: x_QStrList::x_0(args);	break;
	case 1: x_QStrList::x_1(args);	break;
	case 2: x_QStrList::x_2(args);	break;
	case 3: xself->x_3(args);	break;
	case 4: delete (QStrList*)xself;	break;
    }
}
