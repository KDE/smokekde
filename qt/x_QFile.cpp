//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qglobal.h>
#include <qfile.h>
#include <qiodevice.h>
#include <qcstring.h>
#include <qstring.h>

class x_QFile : public QFile {
public:
    static void x_0(xargs *x) {
	// QFile()
	x_QFile* xret = new x_QFile();
	x[0].x_voidp = (void*)xret;
    }
    x_QFile() : QFile() {
    }
    static void x_1(xargs *x) {
	// QFile(const QString&)
	x_QFile* xret = new x_QFile(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QFile(const QString& x1) : QFile(x1) {
    }
    void x_2(xargs *x) const {
	// name()
	QString xret = this->QFile::name();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_3(xargs *x) {
	// setName(const QString&)
	this->QFile::setName(*(const QString *)x[1].x_voidp);
    }
    void x_4(xargs *x) const {
	// exists()
	bool xret = this->QFile::exists();
	x[0].x_bool = (bool)xret;
    }
    void x_5(xargs *x) {
	// remove()
	bool xret = this->QFile::remove();
	x[0].x_bool = (bool)xret;
    }
    void x_6(xargs *x) {
	// open(int)
	bool xret = this->QFile::open((int)x[1].x_int);
	x[0].x_bool = (bool)xret;
    }
    void x_7(xargs *x) {
	// open(int, FILE*)
	bool xret = this->QFile::open((int)x[1].x_int,(FILE*)x[2].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_8(xargs *x) {
	// open(int, int)
	bool xret = this->QFile::open((int)x[1].x_int,(int)x[2].x_int);
	x[0].x_bool = (bool)xret;
    }
    void x_9(xargs *x) {
	// close()
	this->QFile::close();
    }
    void x_10(xargs *x) {
	// flush()
	this->QFile::flush();
    }
    void x_11(xargs *x) const {
	// size()
	QIODevice::Offset xret = this->QFile::size();
	x[0].x_voidp = (void*)new QIODevice::Offset(xret);
    }
    void x_12(xargs *x) const {
	// at()
	QIODevice::Offset xret = this->QFile::at();
	x[0].x_voidp = (void*)new QIODevice::Offset(xret);
    }
    void x_13(xargs *x) {
	// at(QIODevice::Offset)
	bool xret = this->QFile::at(*(QIODevice::Offset *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_14(xargs *x) const {
	// atEnd()
	bool xret = this->QFile::atEnd();
	x[0].x_bool = (bool)xret;
    }
    void x_15(xargs *x) {
	// readBlock(char*, Q_ULONG)
	Q_LONG xret = this->QFile::readBlock((char*)x[1].x_voidp,*(Q_ULONG *)x[2].x_voidp);
	x[0].x_voidp = (void*)new Q_LONG(xret);
    }
    void x_16(xargs *x) {
	// writeBlock(const char*, Q_ULONG)
	Q_LONG xret = this->QFile::writeBlock((const char*)x[1].x_voidp,*(Q_ULONG *)x[2].x_voidp);
	x[0].x_voidp = (void*)new Q_LONG(xret);
    }
    void x_17(xargs *x) {
	// writeBlock(const QByteArray&)
	Q_LONG xret = this->QFile::writeBlock(*(const QByteArray *)x[1].x_voidp);
	x[0].x_voidp = (void*)new Q_LONG(xret);
    }
    void x_18(xargs *x) {
	// readLine(char*, Q_ULONG)
	Q_LONG xret = this->QFile::readLine((char*)x[1].x_voidp,*(Q_ULONG *)x[2].x_voidp);
	x[0].x_voidp = (void*)new Q_LONG(xret);
    }
    void x_19(xargs *x) {
	// readLine(QString&, Q_ULONG)
	Q_LONG xret = this->QFile::readLine(*(QString *)x[1].x_voidp,*(Q_ULONG *)x[2].x_voidp);
	x[0].x_voidp = (void*)new Q_LONG(xret);
    }
    void x_20(xargs *x) {
	// getch()
	int xret = this->QFile::getch();
	x[0].x_int = (int)xret;
    }
    void x_21(xargs *x) {
	// putch(int)
	int xret = this->QFile::putch((int)x[1].x_int);
	x[0].x_int = (int)xret;
    }
    void x_22(xargs *x) {
	// ungetch(int)
	int xret = this->QFile::ungetch((int)x[1].x_int);
	x[0].x_int = (int)xret;
    }
    void x_23(xargs *x) const {
	// handle()
	int xret = this->QFile::handle();
	x[0].x_int = (int)xret;
    }
    static void x_24(xargs *x) {
	// encodeName(const QString&)
	QCString xret = QFile::encodeName(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QCString(xret);
    }
    static void x_25(xargs *x) {
	// decodeName(const QCString&)
	QString xret = QFile::decodeName(*(const QCString *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QString(xret);
    }
    static void x_26(xargs *x) {
	// exists(const QString&)
	bool xret = QFile::exists(*(const QString *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    static void x_27(xargs *x) {
	// remove(const QString&)
	bool xret = QFile::remove(*(const QString *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    virtual QIODevice::Offset at() const {
	xargs x[1];
	if(call_method((void*)this, 2461, x)) {
	    QIODevice::Offset *xptr = (QIODevice::Offset *)x[0].x_voidp;
	    QIODevice::Offset xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QFile::at();
    }
    virtual bool at(QIODevice::Offset x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 2462, x)) return (bool)x[0].x_bool;
	return this->QFile::at(x1);
    }
    virtual bool atEnd() const {
	xargs x[1];
	if(call_method((void*)this, 2463, x)) return (bool)x[0].x_bool;
	return this->QFile::atEnd();
    }
    virtual void close() {
	xargs x[1];
	if(call_method((void*)this, 2458, x)) return;
	this->QFile::close();
    }
    virtual void flush() {
	xargs x[1];
	if(call_method((void*)this, 2459, x)) return;
	this->QFile::flush();
    }
    virtual int getch() {
	xargs x[1];
	if(call_method((void*)this, 2469, x)) return (int)x[0].x_int;
	return this->QFile::getch();
    }
    virtual bool open(int x1) {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 2455, x)) return (bool)x[0].x_bool;
	return this->QFile::open(x1);
    }
    virtual int putch(int x1) {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 2470, x)) return (int)x[0].x_int;
	return this->QFile::putch(x1);
    }
    virtual QByteArray readAll() {
	xargs x[1];
	if(call_method((void*)this, 3398, x)) {
	    QByteArray *xptr = (QByteArray *)x[0].x_voidp;
	    QByteArray xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QIODevice::readAll();
    }
    virtual Q_LONG readBlock(char* x1, Q_ULONG x2) {
	xargs x[3];
	x[1].x_voidp = (void*)x1;
	x[2].x_voidp = (void*)&x2;
	if(call_method((void*)this, 2464, x)) {
	    Q_LONG *xptr = (Q_LONG *)x[0].x_voidp;
	    Q_LONG xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QFile::readBlock(x1, x2);
    }
    virtual Q_LONG readLine(char* x1, Q_ULONG x2) {
	xargs x[3];
	x[1].x_voidp = (void*)x1;
	x[2].x_voidp = (void*)&x2;
	if(call_method((void*)this, 2467, x)) {
	    Q_LONG *xptr = (Q_LONG *)x[0].x_voidp;
	    Q_LONG xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QFile::readLine(x1, x2);
    }
    virtual QIODevice::Offset size() const {
	xargs x[1];
	if(call_method((void*)this, 2460, x)) {
	    QIODevice::Offset *xptr = (QIODevice::Offset *)x[0].x_voidp;
	    QIODevice::Offset xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QFile::size();
    }
    virtual int ungetch(int x1) {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 2471, x)) return (int)x[0].x_int;
	return this->QFile::ungetch(x1);
    }
    virtual Q_LONG writeBlock(const char* x1, Q_ULONG x2) {
	xargs x[3];
	x[1].x_voidp = (void*)x1;
	x[2].x_voidp = (void*)&x2;
	if(call_method((void*)this, 2465, x)) {
	    Q_LONG *xptr = (Q_LONG *)x[0].x_voidp;
	    Q_LONG xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QFile::writeBlock(x1, x2);
    }
    ~x_QFile() {}
};
void xcall_QFile(xargs *x, void *s, int xi) {
    x_QFile *xself = (x_QFile*)s;
    switch(xi) {
	case 0: x_QFile::x_0(x);	break;
	case 1: x_QFile::x_1(x);	break;
	case 2: xself->x_2(x);	break;
	case 3: xself->x_3(x);	break;
	case 4: xself->x_4(x);	break;
	case 5: xself->x_5(x);	break;
	case 6: xself->x_6(x);	break;
	case 7: xself->x_7(x);	break;
	case 8: xself->x_8(x);	break;
	case 9: xself->x_9(x);	break;
	case 10: xself->x_10(x);	break;
	case 11: xself->x_11(x);	break;
	case 12: xself->x_12(x);	break;
	case 13: xself->x_13(x);	break;
	case 14: xself->x_14(x);	break;
	case 15: xself->x_15(x);	break;
	case 16: xself->x_16(x);	break;
	case 17: xself->x_17(x);	break;
	case 18: xself->x_18(x);	break;
	case 19: xself->x_19(x);	break;
	case 20: xself->x_20(x);	break;
	case 21: xself->x_21(x);	break;
	case 22: xself->x_22(x);	break;
	case 23: xself->x_23(x);	break;
	case 24: x_QFile::x_24(x);	break;
	case 25: x_QFile::x_25(x);	break;
	case 26: x_QFile::x_26(x);	break;
	case 27: x_QFile::x_27(x);	break;
	case 28: delete (QFile*)xself;	break;
    }
}
