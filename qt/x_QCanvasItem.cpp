//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qrect.h>
#include <qpainter.h>
#include <qcanvas.h>

class x_QCanvasItem : public QCanvasItem {
public:
    static void x_0(xargs *x) {
	x[0].x_long = (long)QCanvasItem::Rtti_Item;
    }
    static void x_1(xargs *x) {
	x[0].x_long = (long)QCanvasItem::Rtti_Sprite;
    }
    static void x_2(xargs *x) {
	x[0].x_long = (long)QCanvasItem::Rtti_PolygonalItem;
    }
    static void x_3(xargs *x) {
	x[0].x_long = (long)QCanvasItem::Rtti_Text;
    }
    static void x_4(xargs *x) {
	x[0].x_long = (long)QCanvasItem::Rtti_Polygon;
    }
    static void x_5(xargs *x) {
	x[0].x_long = (long)QCanvasItem::Rtti_Rectangle;
    }
    static void x_6(xargs *x) {
	x[0].x_long = (long)QCanvasItem::Rtti_Ellipse;
    }
    static void x_7(xargs *x) {
	x[0].x_long = (long)QCanvasItem::Rtti_Line;
    }
    static void x_8(xargs *x) {
	x[0].x_long = (long)QCanvasItem::Rtti_Spline;
    }
    x_QCanvasItem(QCanvas* x1) : QCanvasItem(x1) {}
    void x_10(xargs *x) const {
	// x()
	double xret = this->QCanvasItem::x();
	x[0].x_double = (double)xret;
    }
    void x_11(xargs *x) const {
	// y()
	double xret = this->QCanvasItem::y();
	x[0].x_double = (double)xret;
    }
    void x_12(xargs *x) const {
	// z()
	double xret = this->QCanvasItem::z();
	x[0].x_double = (double)xret;
    }
    void x_13(xargs *x) {
	// moveBy(double, double)
	this->QCanvasItem::moveBy((double)x[1].x_double,(double)x[2].x_double);
    }
    void x_14(xargs *x) {
	// move(double, double)
	this->QCanvasItem::move((double)x[1].x_double,(double)x[2].x_double);
    }
    void x_15(xargs *x) {
	// setX(double)
	this->QCanvasItem::setX((double)x[1].x_double);
    }
    void x_16(xargs *x) {
	// setY(double)
	this->QCanvasItem::setY((double)x[1].x_double);
    }
    void x_17(xargs *x) {
	// setZ(double)
	this->QCanvasItem::setZ((double)x[1].x_double);
    }
    void x_18(xargs *x) const {
	// animated()
	bool xret = this->QCanvasItem::animated();
	x[0].x_bool = (bool)xret;
    }
    void x_19(xargs *x) {
	// setAnimated(bool)
	this->QCanvasItem::setAnimated((bool)x[1].x_bool);
    }
    void x_20(xargs *x) {
	// setVelocity(double, double)
	this->QCanvasItem::setVelocity((double)x[1].x_double,(double)x[2].x_double);
    }
    void x_21(xargs *x) {
	// setXVelocity(double)
	this->QCanvasItem::setXVelocity((double)x[1].x_double);
    }
    void x_22(xargs *x) {
	// setYVelocity(double)
	this->QCanvasItem::setYVelocity((double)x[1].x_double);
    }
    void x_23(xargs *x) const {
	// xVelocity()
	double xret = this->QCanvasItem::xVelocity();
	x[0].x_double = (double)xret;
    }
    void x_24(xargs *x) const {
	// yVelocity()
	double xret = this->QCanvasItem::yVelocity();
	x[0].x_double = (double)xret;
    }
    void x_25(xargs *x) {
	// advance(int)
	this->QCanvasItem::advance((int)x[1].x_int);
    }
    void x_26(xargs *x) const {
	// collidesWith(const QCanvasItem*)
	bool xret = this->QCanvasItem::collidesWith((const QCanvasItem*)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_27(xargs *x) const {
	// collisions(bool)
	QCanvasItemList xret = this->QCanvasItem::collisions((bool)x[1].x_bool);
	x[0].x_voidp = (void*)new QCanvasItemList(xret);
    }
    void x_28(xargs *x) {
	// setCanvas(QCanvas*)
	this->QCanvasItem::setCanvas((QCanvas*)x[1].x_voidp);
    }
    void x_29(xargs *x) {
	// draw(QPainter&)
	this->QCanvasItem::draw(*(QPainter *)x[1].x_voidp);
    }
    void x_30(xargs *x) {
	// show()
	this->QCanvasItem::show();
    }
    void x_31(xargs *x) {
	// hide()
	this->QCanvasItem::hide();
    }
    void x_32(xargs *x) {
	// setVisible(bool)
	this->QCanvasItem::setVisible((bool)x[1].x_bool);
    }
    void x_33(xargs *x) const {
	// isVisible()
	bool xret = this->QCanvasItem::isVisible();
	x[0].x_bool = (bool)xret;
    }
    void x_34(xargs *x) {
	// setSelected(bool)
	this->QCanvasItem::setSelected((bool)x[1].x_bool);
    }
    void x_35(xargs *x) const {
	// isSelected()
	bool xret = this->QCanvasItem::isSelected();
	x[0].x_bool = (bool)xret;
    }
    void x_36(xargs *x) {
	// setEnabled(bool)
	this->QCanvasItem::setEnabled((bool)x[1].x_bool);
    }
    void x_37(xargs *x) const {
	// isEnabled()
	bool xret = this->QCanvasItem::isEnabled();
	x[0].x_bool = (bool)xret;
    }
    void x_38(xargs *x) {
	// setActive(bool)
	this->QCanvasItem::setActive((bool)x[1].x_bool);
    }
    void x_39(xargs *x) const {
	// isActive()
	bool xret = this->QCanvasItem::isActive();
	x[0].x_bool = (bool)xret;
    }
    void x_40(xargs *x) const {
	// visible()
	bool xret = this->QCanvasItem::visible();
	x[0].x_bool = (bool)xret;
    }
    void x_41(xargs *x) const {
	// selected()
	bool xret = this->QCanvasItem::selected();
	x[0].x_bool = (bool)xret;
    }
    void x_42(xargs *x) const {
	// enabled()
	bool xret = this->QCanvasItem::enabled();
	x[0].x_bool = (bool)xret;
    }
    void x_43(xargs *x) const {
	// active()
	bool xret = this->QCanvasItem::active();
	x[0].x_bool = (bool)xret;
    }
    void x_44(xargs *x) const {
	// rtti()
	int xret = this->QCanvasItem::rtti();
	x[0].x_int = (int)xret;
    }
    void x_45(xargs *x) const {
	// boundingRect()
	QRect xret = this->QCanvasItem::boundingRect();
	x[0].x_voidp = (void*)new QRect(xret);
    }
    void x_46(xargs *x) const {
	// boundingRectAdvanced()
	QRect xret = this->QCanvasItem::boundingRectAdvanced();
	x[0].x_voidp = (void*)new QRect(xret);
    }
    void x_47(xargs *x) const {
	// canvas()
	QCanvas* xret = this->QCanvasItem::canvas();
	x[0].x_voidp = (void*)xret;
    }
    void x_48(xargs *x) {
	// update()
	this->QCanvasItem::update();
    }
    ~x_QCanvasItem() {}
};
void xcall_QCanvasItem(xargs *x, void *s, int xi) {
    x_QCanvasItem *xself = (x_QCanvasItem*)s;
    switch(xi) {
	case 0: x_QCanvasItem::x_0(x);	break;
	case 1: x_QCanvasItem::x_1(x);	break;
	case 2: x_QCanvasItem::x_2(x);	break;
	case 3: x_QCanvasItem::x_3(x);	break;
	case 4: x_QCanvasItem::x_4(x);	break;
	case 5: x_QCanvasItem::x_5(x);	break;
	case 6: x_QCanvasItem::x_6(x);	break;
	case 7: x_QCanvasItem::x_7(x);	break;
	case 8: x_QCanvasItem::x_8(x);	break;
	case 10: xself->x_10(x);	break;
	case 11: xself->x_11(x);	break;
	case 12: xself->x_12(x);	break;
	case 13: xself->x_13(x);	break;
	case 14: xself->x_14(x);	break;
	case 15: xself->x_15(x);	break;
	case 16: xself->x_16(x);	break;
	case 17: xself->x_17(x);	break;
	case 18: xself->x_18(x);	break;
	case 19: xself->x_19(x);	break;
	case 20: xself->x_20(x);	break;
	case 21: xself->x_21(x);	break;
	case 22: xself->x_22(x);	break;
	case 23: xself->x_23(x);	break;
	case 24: xself->x_24(x);	break;
	case 25: xself->x_25(x);	break;
	case 26: xself->x_26(x);	break;
	case 27: xself->x_27(x);	break;
	case 28: xself->x_28(x);	break;
	case 29: xself->x_29(x);	break;
	case 30: xself->x_30(x);	break;
	case 31: xself->x_31(x);	break;
	case 32: xself->x_32(x);	break;
	case 33: xself->x_33(x);	break;
	case 34: xself->x_34(x);	break;
	case 35: xself->x_35(x);	break;
	case 36: xself->x_36(x);	break;
	case 37: xself->x_37(x);	break;
	case 38: xself->x_38(x);	break;
	case 39: xself->x_39(x);	break;
	case 40: xself->x_40(x);	break;
	case 41: xself->x_41(x);	break;
	case 42: xself->x_42(x);	break;
	case 43: xself->x_43(x);	break;
	case 44: xself->x_44(x);	break;
	case 45: xself->x_45(x);	break;
	case 46: xself->x_46(x);	break;
	case 47: xself->x_47(x);	break;
	case 48: xself->x_48(x);	break;
    }
}
