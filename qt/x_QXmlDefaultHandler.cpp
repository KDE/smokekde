//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qstring.h>
#include <qxml.h>

class x_QXmlDefaultHandler : public QXmlDefaultHandler {
public:
    static void x_0(xargs *x) {
	// QXmlDefaultHandler()
	x_QXmlDefaultHandler* xret = new x_QXmlDefaultHandler();
	x[0].x_voidp = (void*)xret;
    }
    x_QXmlDefaultHandler() : QXmlDefaultHandler() {
    }
    void x_1(xargs *x) {
	// setDocumentLocator(QXmlLocator*)
	this->QXmlDefaultHandler::setDocumentLocator((QXmlLocator*)x[1].x_voidp);
    }
    void x_2(xargs *x) {
	// startDocument()
	bool xret = this->QXmlDefaultHandler::startDocument();
	x[0].x_bool = (bool)xret;
    }
    void x_3(xargs *x) {
	// endDocument()
	bool xret = this->QXmlDefaultHandler::endDocument();
	x[0].x_bool = (bool)xret;
    }
    void x_4(xargs *x) {
	// startPrefixMapping(const QString&, const QString&)
	bool xret = this->QXmlDefaultHandler::startPrefixMapping(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_5(xargs *x) {
	// endPrefixMapping(const QString&)
	bool xret = this->QXmlDefaultHandler::endPrefixMapping(*(const QString *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_6(xargs *x) {
	// startElement(const QString&, const QString&, const QString&, const QXmlAttributes&)
	bool xret = this->QXmlDefaultHandler::startElement(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp,*(const QString *)x[3].x_voidp,*(const QXmlAttributes *)x[4].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_7(xargs *x) {
	// endElement(const QString&, const QString&, const QString&)
	bool xret = this->QXmlDefaultHandler::endElement(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp,*(const QString *)x[3].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_8(xargs *x) {
	// characters(const QString&)
	bool xret = this->QXmlDefaultHandler::characters(*(const QString *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_9(xargs *x) {
	// ignorableWhitespace(const QString&)
	bool xret = this->QXmlDefaultHandler::ignorableWhitespace(*(const QString *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_10(xargs *x) {
	// processingInstruction(const QString&, const QString&)
	bool xret = this->QXmlDefaultHandler::processingInstruction(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_11(xargs *x) {
	// skippedEntity(const QString&)
	bool xret = this->QXmlDefaultHandler::skippedEntity(*(const QString *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_12(xargs *x) {
	// warning(const QXmlParseException&)
	bool xret = this->QXmlDefaultHandler::warning(*(const QXmlParseException *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_13(xargs *x) {
	// error(const QXmlParseException&)
	bool xret = this->QXmlDefaultHandler::error(*(const QXmlParseException *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_14(xargs *x) {
	// fatalError(const QXmlParseException&)
	bool xret = this->QXmlDefaultHandler::fatalError(*(const QXmlParseException *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_15(xargs *x) {
	// notationDecl(const QString&, const QString&, const QString&)
	bool xret = this->QXmlDefaultHandler::notationDecl(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp,*(const QString *)x[3].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_16(xargs *x) {
	// unparsedEntityDecl(const QString&, const QString&, const QString&, const QString&)
	bool xret = this->QXmlDefaultHandler::unparsedEntityDecl(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp,*(const QString *)x[3].x_voidp,*(const QString *)x[4].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_17(xargs *x) {
	// startDTD(const QString&, const QString&, const QString&)
	bool xret = this->QXmlDefaultHandler::startDTD(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp,*(const QString *)x[3].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_18(xargs *x) {
	// endDTD()
	bool xret = this->QXmlDefaultHandler::endDTD();
	x[0].x_bool = (bool)xret;
    }
    void x_19(xargs *x) {
	// startEntity(const QString&)
	bool xret = this->QXmlDefaultHandler::startEntity(*(const QString *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_20(xargs *x) {
	// endEntity(const QString&)
	bool xret = this->QXmlDefaultHandler::endEntity(*(const QString *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_21(xargs *x) {
	// startCDATA()
	bool xret = this->QXmlDefaultHandler::startCDATA();
	x[0].x_bool = (bool)xret;
    }
    void x_22(xargs *x) {
	// endCDATA()
	bool xret = this->QXmlDefaultHandler::endCDATA();
	x[0].x_bool = (bool)xret;
    }
    void x_23(xargs *x) {
	// comment(const QString&)
	bool xret = this->QXmlDefaultHandler::comment(*(const QString *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_24(xargs *x) {
	// attributeDecl(const QString&, const QString&, const QString&, const QString&, const QString&)
	bool xret = this->QXmlDefaultHandler::attributeDecl(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp,*(const QString *)x[3].x_voidp,*(const QString *)x[4].x_voidp,*(const QString *)x[5].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_25(xargs *x) {
	// internalEntityDecl(const QString&, const QString&)
	bool xret = this->QXmlDefaultHandler::internalEntityDecl(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_26(xargs *x) {
	// externalEntityDecl(const QString&, const QString&, const QString&)
	bool xret = this->QXmlDefaultHandler::externalEntityDecl(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp,*(const QString *)x[3].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_27(xargs *x) {
	// errorString()
	QString xret = this->QXmlDefaultHandler::errorString();
	x[0].x_voidp = (void*)new QString(xret);
    }
    virtual bool attributeDecl(const QString& x1, const QString& x2, const QString& x3, const QString& x4, const QString& x5) {
	xargs x[6];
	x[1].x_voidp = (void*)&x1;
	x[2].x_voidp = (void*)&x2;
	x[3].x_voidp = (void*)&x3;
	x[4].x_voidp = (void*)&x4;
	x[5].x_voidp = (void*)&x5;
	if(call_method((void*)this, 9947, x)) return (bool)x[0].x_bool;
	return this->QXmlDefaultHandler::attributeDecl(x1, x2, x3, x4, x5);
    }
    virtual bool characters(const QString& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9930, x)) return (bool)x[0].x_bool;
	return this->QXmlDefaultHandler::characters(x1);
    }
    virtual bool comment(const QString& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9946, x)) return (bool)x[0].x_bool;
	return this->QXmlDefaultHandler::comment(x1);
    }
    virtual bool endCDATA() {
	xargs x[1];
	if(call_method((void*)this, 9945, x)) return (bool)x[0].x_bool;
	return this->QXmlDefaultHandler::endCDATA();
    }
    virtual bool endDTD() {
	xargs x[1];
	if(call_method((void*)this, 9941, x)) return (bool)x[0].x_bool;
	return this->QXmlDefaultHandler::endDTD();
    }
    virtual bool endDocument() {
	xargs x[1];
	if(call_method((void*)this, 9925, x)) return (bool)x[0].x_bool;
	return this->QXmlDefaultHandler::endDocument();
    }
    virtual bool endElement(const QString& x1, const QString& x2, const QString& x3) {
	xargs x[4];
	x[1].x_voidp = (void*)&x1;
	x[2].x_voidp = (void*)&x2;
	x[3].x_voidp = (void*)&x3;
	if(call_method((void*)this, 9929, x)) return (bool)x[0].x_bool;
	return this->QXmlDefaultHandler::endElement(x1, x2, x3);
    }
    virtual bool endEntity(const QString& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9943, x)) return (bool)x[0].x_bool;
	return this->QXmlDefaultHandler::endEntity(x1);
    }
    virtual bool endPrefixMapping(const QString& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9927, x)) return (bool)x[0].x_bool;
	return this->QXmlDefaultHandler::endPrefixMapping(x1);
    }
    virtual bool error(const QXmlParseException& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9935, x)) return (bool)x[0].x_bool;
	return this->QXmlDefaultHandler::error(x1);
    }
    virtual QString errorString() {
	xargs x[1];
	if(call_method((void*)this, 9950, x)) {
	    QString *xptr = (QString *)x[0].x_voidp;
	    QString xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QXmlDefaultHandler::errorString();
    }
    virtual bool externalEntityDecl(const QString& x1, const QString& x2, const QString& x3) {
	xargs x[4];
	x[1].x_voidp = (void*)&x1;
	x[2].x_voidp = (void*)&x2;
	x[3].x_voidp = (void*)&x3;
	if(call_method((void*)this, 9949, x)) return (bool)x[0].x_bool;
	return this->QXmlDefaultHandler::externalEntityDecl(x1, x2, x3);
    }
    virtual bool fatalError(const QXmlParseException& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9936, x)) return (bool)x[0].x_bool;
	return this->QXmlDefaultHandler::fatalError(x1);
    }
    virtual bool ignorableWhitespace(const QString& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9931, x)) return (bool)x[0].x_bool;
	return this->QXmlDefaultHandler::ignorableWhitespace(x1);
    }
    virtual bool internalEntityDecl(const QString& x1, const QString& x2) {
	xargs x[3];
	x[1].x_voidp = (void*)&x1;
	x[2].x_voidp = (void*)&x2;
	if(call_method((void*)this, 9948, x)) return (bool)x[0].x_bool;
	return this->QXmlDefaultHandler::internalEntityDecl(x1, x2);
    }
    virtual bool notationDecl(const QString& x1, const QString& x2, const QString& x3) {
	xargs x[4];
	x[1].x_voidp = (void*)&x1;
	x[2].x_voidp = (void*)&x2;
	x[3].x_voidp = (void*)&x3;
	if(call_method((void*)this, 9937, x)) return (bool)x[0].x_bool;
	return this->QXmlDefaultHandler::notationDecl(x1, x2, x3);
    }
    virtual bool processingInstruction(const QString& x1, const QString& x2) {
	xargs x[3];
	x[1].x_voidp = (void*)&x1;
	x[2].x_voidp = (void*)&x2;
	if(call_method((void*)this, 9932, x)) return (bool)x[0].x_bool;
	return this->QXmlDefaultHandler::processingInstruction(x1, x2);
    }
    virtual bool resolveEntity(const QString& x1, const QString& x2, QXmlInputSource*& x3) {
	xargs x[4];
	x[1].x_voidp = (void*)&x1;
	x[2].x_voidp = (void*)&x2;
	x[3].x_voidp = (void*)&x3;
	if(call_method((void*)this, 9939, x)) return (bool)x[0].x_bool;
	return this->QXmlDefaultHandler::resolveEntity(x1, x2, x3);
    }
    virtual void setDocumentLocator(QXmlLocator* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 9923, x)) return;
	this->QXmlDefaultHandler::setDocumentLocator(x1);
    }
    virtual bool skippedEntity(const QString& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9933, x)) return (bool)x[0].x_bool;
	return this->QXmlDefaultHandler::skippedEntity(x1);
    }
    virtual bool startCDATA() {
	xargs x[1];
	if(call_method((void*)this, 9944, x)) return (bool)x[0].x_bool;
	return this->QXmlDefaultHandler::startCDATA();
    }
    virtual bool startDTD(const QString& x1, const QString& x2, const QString& x3) {
	xargs x[4];
	x[1].x_voidp = (void*)&x1;
	x[2].x_voidp = (void*)&x2;
	x[3].x_voidp = (void*)&x3;
	if(call_method((void*)this, 9940, x)) return (bool)x[0].x_bool;
	return this->QXmlDefaultHandler::startDTD(x1, x2, x3);
    }
    virtual bool startDocument() {
	xargs x[1];
	if(call_method((void*)this, 9924, x)) return (bool)x[0].x_bool;
	return this->QXmlDefaultHandler::startDocument();
    }
    virtual bool startElement(const QString& x1, const QString& x2, const QString& x3, const QXmlAttributes& x4) {
	xargs x[5];
	x[1].x_voidp = (void*)&x1;
	x[2].x_voidp = (void*)&x2;
	x[3].x_voidp = (void*)&x3;
	x[4].x_voidp = (void*)&x4;
	if(call_method((void*)this, 9928, x)) return (bool)x[0].x_bool;
	return this->QXmlDefaultHandler::startElement(x1, x2, x3, x4);
    }
    virtual bool startEntity(const QString& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9942, x)) return (bool)x[0].x_bool;
	return this->QXmlDefaultHandler::startEntity(x1);
    }
    virtual bool startPrefixMapping(const QString& x1, const QString& x2) {
	xargs x[3];
	x[1].x_voidp = (void*)&x1;
	x[2].x_voidp = (void*)&x2;
	if(call_method((void*)this, 9926, x)) return (bool)x[0].x_bool;
	return this->QXmlDefaultHandler::startPrefixMapping(x1, x2);
    }
    virtual bool unparsedEntityDecl(const QString& x1, const QString& x2, const QString& x3, const QString& x4) {
	xargs x[5];
	x[1].x_voidp = (void*)&x1;
	x[2].x_voidp = (void*)&x2;
	x[3].x_voidp = (void*)&x3;
	x[4].x_voidp = (void*)&x4;
	if(call_method((void*)this, 9938, x)) return (bool)x[0].x_bool;
	return this->QXmlDefaultHandler::unparsedEntityDecl(x1, x2, x3, x4);
    }
    virtual bool warning(const QXmlParseException& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 9934, x)) return (bool)x[0].x_bool;
	return this->QXmlDefaultHandler::warning(x1);
    }
    ~x_QXmlDefaultHandler() {}
};
void xcall_QXmlDefaultHandler(xargs *x, void *s, int xi) {
    x_QXmlDefaultHandler *xself = (x_QXmlDefaultHandler*)s;
    switch(xi) {
	case 0: x_QXmlDefaultHandler::x_0(x);	break;
	case 1: xself->x_1(x);	break;
	case 2: xself->x_2(x);	break;
	case 3: xself->x_3(x);	break;
	case 4: xself->x_4(x);	break;
	case 5: xself->x_5(x);	break;
	case 6: xself->x_6(x);	break;
	case 7: xself->x_7(x);	break;
	case 8: xself->x_8(x);	break;
	case 9: xself->x_9(x);	break;
	case 10: xself->x_10(x);	break;
	case 11: xself->x_11(x);	break;
	case 12: xself->x_12(x);	break;
	case 13: xself->x_13(x);	break;
	case 14: xself->x_14(x);	break;
	case 15: xself->x_15(x);	break;
	case 16: xself->x_16(x);	break;
	case 17: xself->x_17(x);	break;
	case 18: xself->x_18(x);	break;
	case 19: xself->x_19(x);	break;
	case 20: xself->x_20(x);	break;
	case 21: xself->x_21(x);	break;
	case 22: xself->x_22(x);	break;
	case 23: xself->x_23(x);	break;
	case 24: xself->x_24(x);	break;
	case 25: xself->x_25(x);	break;
	case 26: xself->x_26(x);	break;
	case 27: xself->x_27(x);	break;
	case 28: delete (QXmlDefaultHandler*)xself;	break;
    }
}
