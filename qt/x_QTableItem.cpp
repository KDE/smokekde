//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qpalette.h>
#include <qstring.h>
#include <qrect.h>
#include <qpixmap.h>
#include <qsize.h>
#include <qtable.h>

class x_QTableItem : public QTableItem {
public:
    static void x_0(xargs *x) {
	x[0].x_long = (long)QTableItem::Never;
    }
    static void x_1(xargs *x) {
	x[0].x_long = (long)QTableItem::OnTyping;
    }
    static void x_2(xargs *x) {
	x[0].x_long = (long)QTableItem::WhenCurrent;
    }
    static void x_3(xargs *x) {
	x[0].x_long = (long)QTableItem::Always;
    }
    static void x_4(xargs *x) {
	// QTableItem(QTable*, QTableItem::EditType, const QString&)
	x_QTableItem* xret = new x_QTableItem((QTable*)x[1].x_voidp,(QTableItem::EditType)x[2].x_long,*(const QString *)x[3].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QTableItem(QTable* x1, QTableItem::EditType x2, const QString& x3) : QTableItem(x1, x2, x3) {
    }
    static void x_5(xargs *x) {
	// QTableItem(QTable*, QTableItem::EditType, const QString&, const QPixmap&)
	x_QTableItem* xret = new x_QTableItem((QTable*)x[1].x_voidp,(QTableItem::EditType)x[2].x_long,*(const QString *)x[3].x_voidp,*(const QPixmap *)x[4].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QTableItem(QTable* x1, QTableItem::EditType x2, const QString& x3, const QPixmap& x4) : QTableItem(x1, x2, x3, x4) {
    }
    void x_6(xargs *x) const {
	// pixmap()
	QPixmap xret = this->QTableItem::pixmap();
	x[0].x_voidp = (void*)new QPixmap(xret);
    }
    void x_7(xargs *x) const {
	// text()
	QString xret = this->QTableItem::text();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_8(xargs *x) {
	// setPixmap(const QPixmap&)
	this->QTableItem::setPixmap(*(const QPixmap *)x[1].x_voidp);
    }
    void x_9(xargs *x) {
	// setText(const QString&)
	this->QTableItem::setText(*(const QString *)x[1].x_voidp);
    }
    void x_10(xargs *x) const {
	// table()
	QTable* xret = this->QTableItem::table();
	x[0].x_voidp = (void*)xret;
    }
    void x_11(xargs *x) const {
	// alignment()
	int xret = this->QTableItem::alignment();
	x[0].x_int = (int)xret;
    }
    void x_12(xargs *x) {
	// setWordWrap(bool)
	this->QTableItem::setWordWrap((bool)x[1].x_bool);
    }
    void x_13(xargs *x) const {
	// wordWrap()
	bool xret = this->QTableItem::wordWrap();
	x[0].x_bool = (bool)xret;
    }
    void x_14(xargs *x) const {
	// editType()
	QTableItem::EditType xret = this->QTableItem::editType();
	x[0].x_long = (long)xret;
    }
    void x_15(xargs *x) const {
	// createEditor()
	QWidget* xret = this->QTableItem::createEditor();
	x[0].x_voidp = (void*)xret;
    }
    void x_16(xargs *x) {
	// setContentFromEditor(QWidget*)
	this->QTableItem::setContentFromEditor((QWidget*)x[1].x_voidp);
    }
    void x_17(xargs *x) {
	// setReplaceable(bool)
	this->QTableItem::setReplaceable((bool)x[1].x_bool);
    }
    void x_18(xargs *x) const {
	// isReplaceable()
	bool xret = this->QTableItem::isReplaceable();
	x[0].x_bool = (bool)xret;
    }
    void x_19(xargs *x) const {
	// key()
	QString xret = this->QTableItem::key();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_20(xargs *x) const {
	// sizeHint()
	QSize xret = this->QTableItem::sizeHint();
	x[0].x_voidp = (void*)new QSize(xret);
    }
    void x_21(xargs *x) {
	// setSpan(int, int)
	this->QTableItem::setSpan((int)x[1].x_int,(int)x[2].x_int);
    }
    void x_22(xargs *x) const {
	// rowSpan()
	int xret = this->QTableItem::rowSpan();
	x[0].x_int = (int)xret;
    }
    void x_23(xargs *x) const {
	// colSpan()
	int xret = this->QTableItem::colSpan();
	x[0].x_int = (int)xret;
    }
    void x_24(xargs *x) {
	// setRow(int)
	this->QTableItem::setRow((int)x[1].x_int);
    }
    void x_25(xargs *x) {
	// setCol(int)
	this->QTableItem::setCol((int)x[1].x_int);
    }
    void x_26(xargs *x) const {
	// row()
	int xret = this->QTableItem::row();
	x[0].x_int = (int)xret;
    }
    void x_27(xargs *x) const {
	// col()
	int xret = this->QTableItem::col();
	x[0].x_int = (int)xret;
    }
    void x_28(xargs *x) {
	// paint(QPainter*, const QColorGroup&, const QRect&, bool)
	this->QTableItem::paint((QPainter*)x[1].x_voidp,*(const QColorGroup *)x[2].x_voidp,*(const QRect *)x[3].x_voidp,(bool)x[4].x_bool);
    }
    void x_29(xargs *x) {
	// updateEditor(int, int)
	this->QTableItem::updateEditor((int)x[1].x_int,(int)x[2].x_int);
    }
    void x_30(xargs *x) {
	// setEnabled(bool)
	this->QTableItem::setEnabled((bool)x[1].x_bool);
    }
    void x_31(xargs *x) const {
	// isEnabled()
	bool xret = this->QTableItem::isEnabled();
	x[0].x_bool = (bool)xret;
    }
    void x_32(xargs *x) const {
	// rtti()
	int xret = this->QTableItem::rtti();
	x[0].x_int = (int)xret;
    }
    virtual int alignment() const {
	xargs x[1];
	if(call_method((void*)this, 8383, x)) return (int)x[0].x_int;
	return this->QTableItem::alignment();
    }
    virtual QWidget* createEditor() const {
	xargs x[1];
	if(call_method((void*)this, 8387, x)) 	return (QWidget*)x[0].x_voidp;
	return this->QTableItem::createEditor();
    }
    virtual QString key() const {
	xargs x[1];
	if(call_method((void*)this, 8391, x)) {
	    QString *xptr = (QString *)x[0].x_voidp;
	    QString xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QTableItem::key();
    }
    virtual void paint(QPainter* x1, const QColorGroup& x2, const QRect& x3, bool x4) {
	xargs x[5];
	x[1].x_voidp = (void*)x1;
	x[2].x_voidp = (void*)&x2;
	x[3].x_voidp = (void*)&x3;
	x[4].x_bool = (bool)x4;
	if(call_method((void*)this, 8400, x)) return;
	this->QTableItem::paint(x1, x2, x3, x4);
    }
    virtual QPixmap pixmap() const {
	xargs x[1];
	if(call_method((void*)this, 8378, x)) {
	    QPixmap *xptr = (QPixmap *)x[0].x_voidp;
	    QPixmap xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QTableItem::pixmap();
    }
    virtual int rtti() const {
	xargs x[1];
	if(call_method((void*)this, 8404, x)) return (int)x[0].x_int;
	return this->QTableItem::rtti();
    }
    virtual void setCol(int x1) {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 8397, x)) return;
	this->QTableItem::setCol(x1);
    }
    virtual void setContentFromEditor(QWidget* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 8388, x)) return;
	this->QTableItem::setContentFromEditor(x1);
    }
    virtual void setEnabled(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 8402, x)) return;
	this->QTableItem::setEnabled(x1);
    }
    virtual void setPixmap(const QPixmap& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 8380, x)) return;
	this->QTableItem::setPixmap(x1);
    }
    virtual void setReplaceable(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 8389, x)) return;
	this->QTableItem::setReplaceable(x1);
    }
    virtual void setRow(int x1) {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 8396, x)) return;
	this->QTableItem::setRow(x1);
    }
    virtual void setSpan(int x1, int x2) {
	xargs x[3];
	x[1].x_int = (int)x1;
	x[2].x_int = (int)x2;
	if(call_method((void*)this, 8393, x)) return;
	this->QTableItem::setSpan(x1, x2);
    }
    virtual void setText(const QString& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 8381, x)) return;
	this->QTableItem::setText(x1);
    }
    virtual void setWordWrap(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 8384, x)) return;
	this->QTableItem::setWordWrap(x1);
    }
    virtual QSize sizeHint() const {
	xargs x[1];
	if(call_method((void*)this, 8392, x)) {
	    QSize *xptr = (QSize *)x[0].x_voidp;
	    QSize xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QTableItem::sizeHint();
    }
    virtual QString text() const {
	xargs x[1];
	if(call_method((void*)this, 8379, x)) {
	    QString *xptr = (QString *)x[0].x_voidp;
	    QString xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QTableItem::text();
    }
    ~x_QTableItem() {}
};
void xcall_QTableItem(xargs *x, void *s, int xi) {
    x_QTableItem *xself = (x_QTableItem*)s;
    switch(xi) {
	case 0: x_QTableItem::x_0(x);	break;
	case 1: x_QTableItem::x_1(x);	break;
	case 2: x_QTableItem::x_2(x);	break;
	case 3: x_QTableItem::x_3(x);	break;
	case 4: x_QTableItem::x_4(x);	break;
	case 5: x_QTableItem::x_5(x);	break;
	case 6: xself->x_6(x);	break;
	case 7: xself->x_7(x);	break;
	case 8: xself->x_8(x);	break;
	case 9: xself->x_9(x);	break;
	case 10: xself->x_10(x);	break;
	case 11: xself->x_11(x);	break;
	case 12: xself->x_12(x);	break;
	case 13: xself->x_13(x);	break;
	case 14: xself->x_14(x);	break;
	case 15: xself->x_15(x);	break;
	case 16: xself->x_16(x);	break;
	case 17: xself->x_17(x);	break;
	case 18: xself->x_18(x);	break;
	case 19: xself->x_19(x);	break;
	case 20: xself->x_20(x);	break;
	case 21: xself->x_21(x);	break;
	case 22: xself->x_22(x);	break;
	case 23: xself->x_23(x);	break;
	case 24: xself->x_24(x);	break;
	case 25: xself->x_25(x);	break;
	case 26: xself->x_26(x);	break;
	case 27: xself->x_27(x);	break;
	case 28: xself->x_28(x);	break;
	case 29: xself->x_29(x);	break;
	case 30: xself->x_30(x);	break;
	case 31: xself->x_31(x);	break;
	case 32: xself->x_32(x);	break;
	case 33: delete (QTableItem*)xself;	break;
    }
}
