//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qwindowdefs.h>
#include <qsize.h>

class x_QSize : public QSize {
public:
    static void x_0(xargs *x) {
	// QSize()
	x_QSize* xret = new x_QSize();
	x[0].x_voidp = (void*)xret;
    }
    x_QSize() : QSize() {
    }
    static void x_1(xargs *x) {
	// QSize(int, int)
	x_QSize* xret = new x_QSize((int)x[1].x_int,(int)x[2].x_int);
	x[0].x_voidp = (void*)xret;
    }
    x_QSize(int x1, int x2) : QSize(x1, x2) {
    }
    void x_2(xargs *x) const {
	// isNull()
	bool xret = this->QSize::isNull();
	x[0].x_bool = (bool)xret;
    }
    void x_3(xargs *x) const {
	// isEmpty()
	bool xret = this->QSize::isEmpty();
	x[0].x_bool = (bool)xret;
    }
    void x_4(xargs *x) const {
	// isValid()
	bool xret = this->QSize::isValid();
	x[0].x_bool = (bool)xret;
    }
    void x_5(xargs *x) const {
	// width()
	int xret = this->QSize::width();
	x[0].x_int = (int)xret;
    }
    void x_6(xargs *x) const {
	// height()
	int xret = this->QSize::height();
	x[0].x_int = (int)xret;
    }
    void x_7(xargs *x) {
	// setWidth(int)
	this->QSize::setWidth((int)x[1].x_int);
    }
    void x_8(xargs *x) {
	// setHeight(int)
	this->QSize::setHeight((int)x[1].x_int);
    }
    void x_9(xargs *x) {
	// transpose()
	this->QSize::transpose();
    }
    void x_10(xargs *x) const {
	// expandedTo(const QSize&)
	QSize xret = this->QSize::expandedTo(*(const QSize *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QSize(xret);
    }
    void x_11(xargs *x) const {
	// boundedTo(const QSize&)
	QSize xret = this->QSize::boundedTo(*(const QSize *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QSize(xret);
    }
    void x_12(xargs *x) {
	// rwidth()
	QCOORD& xret = this->QSize::rwidth();
	x[0].x_voidp = (void*)&xret;
    }
    void x_13(xargs *x) {
	// rheight()
	QCOORD& xret = this->QSize::rheight();
	x[0].x_voidp = (void*)&xret;
    }
    void x_14(xargs *x) {
	// operator+=(const QSize&)
	QSize& xret = this->QSize::operator+=(*(const QSize *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_15(xargs *x) {
	// operator-=(const QSize&)
	QSize& xret = this->QSize::operator-=(*(const QSize *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_16(xargs *x) {
	// operator*=(int)
	QSize& xret = this->QSize::operator*=((int)x[1].x_int);
	x[0].x_voidp = (void*)&xret;
    }
    void x_17(xargs *x) {
	// operator*=(double)
	QSize& xret = this->QSize::operator*=((double)x[1].x_double);
	x[0].x_voidp = (void*)&xret;
    }
    void x_18(xargs *x) {
	// operator/=(int)
	QSize& xret = this->QSize::operator/=((int)x[1].x_int);
	x[0].x_voidp = (void*)&xret;
    }
    void x_19(xargs *x) {
	// operator/=(double)
	QSize& xret = this->QSize::operator/=((double)x[1].x_double);
	x[0].x_voidp = (void*)&xret;
    }
    ~x_QSize() {}
};
void xcall_QSize(xargs *x, void *s, int xi) {
    x_QSize *xself = (x_QSize*)s;
    switch(xi) {
	case 0: x_QSize::x_0(x);	break;
	case 1: x_QSize::x_1(x);	break;
	case 2: xself->x_2(x);	break;
	case 3: xself->x_3(x);	break;
	case 4: xself->x_4(x);	break;
	case 5: xself->x_5(x);	break;
	case 6: xself->x_6(x);	break;
	case 7: xself->x_7(x);	break;
	case 8: xself->x_8(x);	break;
	case 9: xself->x_9(x);	break;
	case 10: xself->x_10(x);	break;
	case 11: xself->x_11(x);	break;
	case 12: xself->x_12(x);	break;
	case 13: xself->x_13(x);	break;
	case 14: xself->x_14(x);	break;
	case 15: xself->x_15(x);	break;
	case 16: xself->x_16(x);	break;
	case 17: xself->x_17(x);	break;
	case 18: xself->x_18(x);	break;
	case 19: xself->x_19(x);	break;
    }
}
