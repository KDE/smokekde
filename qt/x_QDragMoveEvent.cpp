//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qpoint.h>
#include <qevent.h>
#include <qcstring.h>
#include <qrect.h>

class x_QDragMoveEvent : public QDragMoveEvent {
public:
    static void x_0(xargs *x) {
	// QDragMoveEvent(const QPoint&, QEvent::Type)
	x_QDragMoveEvent* xret = new x_QDragMoveEvent(*(const QPoint *)x[1].x_voidp,(QEvent::Type)x[2].x_long);
	x[0].x_voidp = (void*)xret;
    }
    x_QDragMoveEvent(const QPoint& x1, QEvent::Type x2) : QDragMoveEvent(x1, x2) {
    }
    static void x_1(xargs *x) {
	// QDragMoveEvent(const QPoint&)
	x_QDragMoveEvent* xret = new x_QDragMoveEvent(*(const QPoint *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QDragMoveEvent(const QPoint& x1) : QDragMoveEvent(x1) {
    }
    void x_2(xargs *x) const {
	// answerRect()
	QRect xret = this->QDragMoveEvent::answerRect();
	x[0].x_voidp = (void*)new QRect(xret);
    }
    void x_3(xargs *x) {
	// accept(bool)
	this->QDragMoveEvent::accept((bool)x[1].x_bool);
    }
    void x_4(xargs *x) {
	// accept()
	this->QDragMoveEvent::accept();
    }
    void x_5(xargs *x) {
	// accept(const QRect&)
	this->QDragMoveEvent::accept(*(const QRect *)x[1].x_voidp);
    }
    void x_6(xargs *x) {
	// ignore(const QRect&)
	this->QDragMoveEvent::ignore(*(const QRect *)x[1].x_voidp);
    }
    void x_7(xargs *x) {
	// ignore()
	this->QDragMoveEvent::ignore();
    }
    virtual QByteArray encodedData(const char* x1) const {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 2341, x)) {
	    QByteArray *xptr = (QByteArray *)x[0].x_voidp;
	    QByteArray xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDropEvent::encodedData(x1);
    }
    virtual const char* format(int x1) const {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 2339, x)) 	return (const char*)x[0].x_voidp;
	return this->QDropEvent::format(x1);
    }
    virtual bool provides(const char* x1) const {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 2342, x)) return (bool)x[0].x_bool;
	return this->QDropEvent::provides(x1);
    }
    ~x_QDragMoveEvent() {}
};
void xcall_QDragMoveEvent(xargs *x, void *s, int xi) {
    x_QDragMoveEvent *xself = (x_QDragMoveEvent*)s;
    switch(xi) {
	case 0: x_QDragMoveEvent::x_0(x);	break;
	case 1: x_QDragMoveEvent::x_1(x);	break;
	case 2: xself->x_2(x);	break;
	case 3: xself->x_3(x);	break;
	case 4: xself->x_4(x);	break;
	case 5: xself->x_5(x);	break;
	case 6: xself->x_6(x);	break;
	case 7: xself->x_7(x);	break;
    }
}
