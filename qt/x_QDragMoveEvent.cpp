//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke.h>
#include <qt_smoke.h>
#include <qpoint.h>
#include <qevent.h>
#include <qcstring.h>
#include <qrect.h>

class x_QDragMoveEvent : public QDragMoveEvent {
public:
    static void x_0(Smoke::Stack x) {
	// QDragMoveEvent(const QPoint&, QEvent::Type)
	x_QDragMoveEvent* xret = new x_QDragMoveEvent(*(const QPoint *)x[1].s_class,(QEvent::Type)x[2].s_enum);
	x[0].s_class = (void*)xret;
    }
    x_QDragMoveEvent(const QPoint& x1, QEvent::Type x2) : QDragMoveEvent(x1, x2) {
    }
    static void x_1(Smoke::Stack x) {
	// QDragMoveEvent(const QPoint&)
	x_QDragMoveEvent* xret = new x_QDragMoveEvent(*(const QPoint *)x[1].s_class);
	x[0].s_class = (void*)xret;
    }
    x_QDragMoveEvent(const QPoint& x1) : QDragMoveEvent(x1) {
    }
    void x_2(Smoke::Stack x) const {
	// answerRect()
	QRect xret = this->QDragMoveEvent::answerRect();
	x[0].s_class = (void*)new QRect(xret);
    }
    void x_3(Smoke::Stack x) {
	// accept(bool)
	this->QDragMoveEvent::accept((bool)x[1].s_bool);
	(void)x; // noop (for compiler warning)
    }
    void x_4(Smoke::Stack x) {
	// accept()
	this->QDragMoveEvent::accept();
	(void)x; // noop (for compiler warning)
    }
    void x_5(Smoke::Stack x) {
	// accept(const QRect&)
	this->QDragMoveEvent::accept(*(const QRect *)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_6(Smoke::Stack x) {
	// ignore(const QRect&)
	this->QDragMoveEvent::ignore(*(const QRect *)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_7(Smoke::Stack x) {
	// ignore()
	this->QDragMoveEvent::ignore();
	(void)x; // noop (for compiler warning)
    }
    static void x_8(Smoke::Stack x) {
	// QDragMoveEvent(const QDragMoveEvent&)
	x_QDragMoveEvent* xret = new x_QDragMoveEvent(*(const QDragMoveEvent *)x[1].s_class);
	x[0].s_class = (void*)xret;
    }
    x_QDragMoveEvent(const QDragMoveEvent& x1) : QDragMoveEvent(x1) {
    }
    virtual QByteArray encodedData(const char* x1) const {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(2825, (void*)this, x)) {
	    QByteArray *xptr = (QByteArray *)x[0].s_class;
	    QByteArray xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDropEvent::encodedData(x1);
    }
    virtual const char* format(int x1) const {
	Smoke::StackItem x[2];
	x[1].s_int = x1;
	if(qt_Smoke->binding->callMethod(2823, (void*)this, x)) return (const char*)x[0].s_class;
	return this->QDropEvent::format(x1);
    }
    virtual bool provides(const char* x1) const {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(2826, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDropEvent::provides(x1);
    }
    ~x_QDragMoveEvent() { qt_Smoke->binding->deleted(97, (void*)this); }
};
void xcall_QDragMoveEvent(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QDragMoveEvent *xself = (x_QDragMoveEvent*)obj;
    switch(xi) {
	case 0: x_QDragMoveEvent::x_0(args);	break;
	case 1: x_QDragMoveEvent::x_1(args);	break;
	case 2: xself->x_2(args);	break;
	case 3: xself->x_3(args);	break;
	case 4: xself->x_4(args);	break;
	case 5: xself->x_5(args);	break;
	case 6: xself->x_6(args);	break;
	case 7: xself->x_7(args);	break;
	case 8: x_QDragMoveEvent::x_8(args);	break;
	case 9: delete (QDragMoveEvent*)xself;	break;
    }
}
