//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qpaintdevice.h>

class x_QPaintDevice : public QPaintDevice {
public:
    static void x_0(xargs *x) {
	x[0].x_long = (long)QPaintDevice::PdcNOP;
    }
    static void x_1(xargs *x) {
	x[0].x_long = (long)QPaintDevice::PdcDrawPoint;
    }
    static void x_2(xargs *x) {
	x[0].x_long = (long)QPaintDevice::PdcDrawFirst;
    }
    static void x_3(xargs *x) {
	x[0].x_long = (long)QPaintDevice::PdcMoveTo;
    }
    static void x_4(xargs *x) {
	x[0].x_long = (long)QPaintDevice::PdcLineTo;
    }
    static void x_5(xargs *x) {
	x[0].x_long = (long)QPaintDevice::PdcDrawLine;
    }
    static void x_6(xargs *x) {
	x[0].x_long = (long)QPaintDevice::PdcDrawRect;
    }
    static void x_7(xargs *x) {
	x[0].x_long = (long)QPaintDevice::PdcDrawRoundRect;
    }
    static void x_8(xargs *x) {
	x[0].x_long = (long)QPaintDevice::PdcDrawEllipse;
    }
    static void x_9(xargs *x) {
	x[0].x_long = (long)QPaintDevice::PdcDrawArc;
    }
    static void x_10(xargs *x) {
	x[0].x_long = (long)QPaintDevice::PdcDrawPie;
    }
    static void x_11(xargs *x) {
	x[0].x_long = (long)QPaintDevice::PdcDrawChord;
    }
    static void x_12(xargs *x) {
	x[0].x_long = (long)QPaintDevice::PdcDrawLineSegments;
    }
    static void x_13(xargs *x) {
	x[0].x_long = (long)QPaintDevice::PdcDrawPolyline;
    }
    static void x_14(xargs *x) {
	x[0].x_long = (long)QPaintDevice::PdcDrawPolygon;
    }
    static void x_15(xargs *x) {
	x[0].x_long = (long)QPaintDevice::PdcDrawCubicBezier;
    }
    static void x_16(xargs *x) {
	x[0].x_long = (long)QPaintDevice::PdcDrawText;
    }
    static void x_17(xargs *x) {
	x[0].x_long = (long)QPaintDevice::PdcDrawTextFormatted;
    }
    static void x_18(xargs *x) {
	x[0].x_long = (long)QPaintDevice::PdcDrawPixmap;
    }
    static void x_19(xargs *x) {
	x[0].x_long = (long)QPaintDevice::PdcDrawImage;
    }
    static void x_20(xargs *x) {
	x[0].x_long = (long)QPaintDevice::PdcDrawText2;
    }
    static void x_21(xargs *x) {
	x[0].x_long = (long)QPaintDevice::PdcDrawText2Formatted;
    }
    static void x_22(xargs *x) {
	x[0].x_long = (long)QPaintDevice::PdcDrawLast;
    }
    static void x_23(xargs *x) {
	x[0].x_long = (long)QPaintDevice::PdcBegin;
    }
    static void x_24(xargs *x) {
	x[0].x_long = (long)QPaintDevice::PdcEnd;
    }
    static void x_25(xargs *x) {
	x[0].x_long = (long)QPaintDevice::PdcSave;
    }
    static void x_26(xargs *x) {
	x[0].x_long = (long)QPaintDevice::PdcRestore;
    }
    static void x_27(xargs *x) {
	x[0].x_long = (long)QPaintDevice::PdcSetdev;
    }
    static void x_28(xargs *x) {
	x[0].x_long = (long)QPaintDevice::PdcSetBkColor;
    }
    static void x_29(xargs *x) {
	x[0].x_long = (long)QPaintDevice::PdcSetBkMode;
    }
    static void x_30(xargs *x) {
	x[0].x_long = (long)QPaintDevice::PdcSetROP;
    }
    static void x_31(xargs *x) {
	x[0].x_long = (long)QPaintDevice::PdcSetBrushOrigin;
    }
    static void x_32(xargs *x) {
	x[0].x_long = (long)QPaintDevice::PdcSetFont;
    }
    static void x_33(xargs *x) {
	x[0].x_long = (long)QPaintDevice::PdcSetPen;
    }
    static void x_34(xargs *x) {
	x[0].x_long = (long)QPaintDevice::PdcSetBrush;
    }
    static void x_35(xargs *x) {
	x[0].x_long = (long)QPaintDevice::PdcSetTabStops;
    }
    static void x_36(xargs *x) {
	x[0].x_long = (long)QPaintDevice::PdcSetTabArray;
    }
    static void x_37(xargs *x) {
	x[0].x_long = (long)QPaintDevice::PdcSetUnit;
    }
    static void x_38(xargs *x) {
	x[0].x_long = (long)QPaintDevice::PdcSetVXform;
    }
    static void x_39(xargs *x) {
	x[0].x_long = (long)QPaintDevice::PdcSetWindow;
    }
    static void x_40(xargs *x) {
	x[0].x_long = (long)QPaintDevice::PdcSetViewport;
    }
    static void x_41(xargs *x) {
	x[0].x_long = (long)QPaintDevice::PdcSetWXform;
    }
    static void x_42(xargs *x) {
	x[0].x_long = (long)QPaintDevice::PdcSetWMatrix;
    }
    static void x_43(xargs *x) {
	x[0].x_long = (long)QPaintDevice::PdcSaveWMatrix;
    }
    static void x_44(xargs *x) {
	x[0].x_long = (long)QPaintDevice::PdcRestoreWMatrix;
    }
    static void x_45(xargs *x) {
	x[0].x_long = (long)QPaintDevice::PdcSetClip;
    }
    static void x_46(xargs *x) {
	x[0].x_long = (long)QPaintDevice::PdcSetClipRegion;
    }
    static void x_47(xargs *x) {
	x[0].x_long = (long)QPaintDevice::PdcReservedStart;
    }
    static void x_48(xargs *x) {
	x[0].x_long = (long)QPaintDevice::PdcReservedStop;
    }
    void x_49(xargs *x) const {
	// devType()
	int xret = this->QPaintDevice::devType();
	x[0].x_int = (int)xret;
    }
    void x_50(xargs *x) const {
	// isExtDev()
	bool xret = this->QPaintDevice::isExtDev();
	x[0].x_bool = (bool)xret;
    }
    void x_51(xargs *x) const {
	// paintingActive()
	bool xret = this->QPaintDevice::paintingActive();
	x[0].x_bool = (bool)xret;
    }
    void x_52(xargs *x) {
	// setResolution(int)
	this->QPaintDevice::setResolution((int)x[1].x_int);
    }
    void x_53(xargs *x) const {
	// resolution()
	int xret = this->QPaintDevice::resolution();
	x[0].x_int = (int)xret;
    }
    static void x_54(xargs *x) {
	// QPaintDevice(uint)
	x_QPaintDevice* xret = new x_QPaintDevice((uint)x[1].x_uint);
	x[0].x_voidp = (void*)xret;
    }
    x_QPaintDevice(uint x1) : QPaintDevice(x1) {
    }
    void x_55(xargs *x) {
	// cmd(int, QPainter*, QPDevCmdParam*)
	bool xret = this->QPaintDevice::cmd((int)x[1].x_int,(QPainter*)x[2].x_voidp,(QPDevCmdParam*)x[3].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_56(xargs *x) const {
	// metric(int)
	int xret = this->QPaintDevice::metric((int)x[1].x_int);
	x[0].x_int = (int)xret;
    }
    void x_57(xargs *x) const {
	// fontMet(QFont*, int, const char*, int)
	int xret = this->QPaintDevice::fontMet((QFont*)x[1].x_voidp,(int)x[2].x_int,(const char*)x[3].x_voidp,(int)x[4].x_int);
	x[0].x_int = (int)xret;
    }
    void x_58(xargs *x) const {
	// fontMet(QFont*, int, const char*)
	int xret = this->QPaintDevice::fontMet((QFont*)x[1].x_voidp,(int)x[2].x_int,(const char*)x[3].x_voidp);
	x[0].x_int = (int)xret;
    }
    void x_59(xargs *x) const {
	// fontMet(QFont*, int)
	int xret = this->QPaintDevice::fontMet((QFont*)x[1].x_voidp,(int)x[2].x_int);
	x[0].x_int = (int)xret;
    }
    void x_60(xargs *x) const {
	// fontInf(QFont*, int)
	int xret = this->QPaintDevice::fontInf((QFont*)x[1].x_voidp,(int)x[2].x_int);
	x[0].x_int = (int)xret;
    }
    virtual bool cmd(int x1, QPainter* x2, QPDevCmdParam* x3) {
	xargs x[4];
	x[1].x_int = (int)x1;
	x[2].x_voidp = (void*)x2;
	x[3].x_voidp = (void*)x3;
	if(call_method((void*)this, 5558, x)) return (bool)x[0].x_bool;
	return this->QPaintDevice::cmd(x1, x2, x3);
    }
    virtual int fontInf(QFont* x1, int x2) const {
	xargs x[3];
	x[1].x_voidp = (void*)x1;
	x[2].x_int = (int)x2;
	if(call_method((void*)this, 5563, x)) return (int)x[0].x_int;
	return this->QPaintDevice::fontInf(x1, x2);
    }
    virtual int fontMet(QFont* x1, int x2, const char* x3, int x4) const {
	xargs x[5];
	x[1].x_voidp = (void*)x1;
	x[2].x_int = (int)x2;
	x[3].x_voidp = (void*)x3;
	x[4].x_int = (int)x4;
	if(call_method((void*)this, 5560, x)) return (int)x[0].x_int;
	return this->QPaintDevice::fontMet(x1, x2, x3, x4);
    }
    virtual int metric(int x1) const {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 5559, x)) return (int)x[0].x_int;
	return this->QPaintDevice::metric(x1);
    }
    virtual int resolution() const {
	xargs x[1];
	if(call_method((void*)this, 5556, x)) return (int)x[0].x_int;
	return this->QPaintDevice::resolution();
    }
    virtual void setResolution(int x1) {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 5555, x)) return;
	this->QPaintDevice::setResolution(x1);
    }
    ~x_QPaintDevice() {}
};
void xcall_QPaintDevice(xargs *x, void *s, int xi) {
    x_QPaintDevice *xself = (x_QPaintDevice*)s;
    switch(xi) {
	case 0: x_QPaintDevice::x_0(x);	break;
	case 1: x_QPaintDevice::x_1(x);	break;
	case 2: x_QPaintDevice::x_2(x);	break;
	case 3: x_QPaintDevice::x_3(x);	break;
	case 4: x_QPaintDevice::x_4(x);	break;
	case 5: x_QPaintDevice::x_5(x);	break;
	case 6: x_QPaintDevice::x_6(x);	break;
	case 7: x_QPaintDevice::x_7(x);	break;
	case 8: x_QPaintDevice::x_8(x);	break;
	case 9: x_QPaintDevice::x_9(x);	break;
	case 10: x_QPaintDevice::x_10(x);	break;
	case 11: x_QPaintDevice::x_11(x);	break;
	case 12: x_QPaintDevice::x_12(x);	break;
	case 13: x_QPaintDevice::x_13(x);	break;
	case 14: x_QPaintDevice::x_14(x);	break;
	case 15: x_QPaintDevice::x_15(x);	break;
	case 16: x_QPaintDevice::x_16(x);	break;
	case 17: x_QPaintDevice::x_17(x);	break;
	case 18: x_QPaintDevice::x_18(x);	break;
	case 19: x_QPaintDevice::x_19(x);	break;
	case 20: x_QPaintDevice::x_20(x);	break;
	case 21: x_QPaintDevice::x_21(x);	break;
	case 22: x_QPaintDevice::x_22(x);	break;
	case 23: x_QPaintDevice::x_23(x);	break;
	case 24: x_QPaintDevice::x_24(x);	break;
	case 25: x_QPaintDevice::x_25(x);	break;
	case 26: x_QPaintDevice::x_26(x);	break;
	case 27: x_QPaintDevice::x_27(x);	break;
	case 28: x_QPaintDevice::x_28(x);	break;
	case 29: x_QPaintDevice::x_29(x);	break;
	case 30: x_QPaintDevice::x_30(x);	break;
	case 31: x_QPaintDevice::x_31(x);	break;
	case 32: x_QPaintDevice::x_32(x);	break;
	case 33: x_QPaintDevice::x_33(x);	break;
	case 34: x_QPaintDevice::x_34(x);	break;
	case 35: x_QPaintDevice::x_35(x);	break;
	case 36: x_QPaintDevice::x_36(x);	break;
	case 37: x_QPaintDevice::x_37(x);	break;
	case 38: x_QPaintDevice::x_38(x);	break;
	case 39: x_QPaintDevice::x_39(x);	break;
	case 40: x_QPaintDevice::x_40(x);	break;
	case 41: x_QPaintDevice::x_41(x);	break;
	case 42: x_QPaintDevice::x_42(x);	break;
	case 43: x_QPaintDevice::x_43(x);	break;
	case 44: x_QPaintDevice::x_44(x);	break;
	case 45: x_QPaintDevice::x_45(x);	break;
	case 46: x_QPaintDevice::x_46(x);	break;
	case 47: x_QPaintDevice::x_47(x);	break;
	case 48: x_QPaintDevice::x_48(x);	break;
	case 49: xself->x_49(x);	break;
	case 50: xself->x_50(x);	break;
	case 51: xself->x_51(x);	break;
	case 52: xself->x_52(x);	break;
	case 53: xself->x_53(x);	break;
	case 54: x_QPaintDevice::x_54(x);	break;
	case 55: xself->x_55(x);	break;
	case 56: xself->x_56(x);	break;
	case 57: xself->x_57(x);	break;
	case 58: xself->x_58(x);	break;
	case 59: xself->x_59(x);	break;
	case 60: xself->x_60(x);	break;
	case 61: delete (QPaintDevice*)xself;	break;
    }
}
