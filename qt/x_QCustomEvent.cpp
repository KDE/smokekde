//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke.h>
#include <qt_smoke.h>
#include <qevent.h>

class x_QCustomEvent : public QCustomEvent {
public:
    static void x_0(Smoke::Stack x) {
	// QCustomEvent(int)
	x_QCustomEvent* xret = new x_QCustomEvent((int)x[1].s_int);
	x[0].s_class = (void*)xret;
    }
    x_QCustomEvent(int x1) : QCustomEvent(x1) {
    }
    static void x_1(Smoke::Stack x) {
	// QCustomEvent(QEvent::Type, void*)
	x_QCustomEvent* xret = new x_QCustomEvent((QEvent::Type)x[1].s_enum,(void*)x[2].s_voidp);
	x[0].s_class = (void*)xret;
    }
    x_QCustomEvent(QEvent::Type x1, void* x2) : QCustomEvent(x1, x2) {
    }
    void x_2(Smoke::Stack x) const {
	// data()
	void* xret = this->QCustomEvent::data();
	x[0].s_voidp = (void*)xret;
    }
    void x_3(Smoke::Stack x) {
	// setData(void*)
	this->QCustomEvent::setData((void*)x[1].s_voidp);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    ~x_QCustomEvent() {}
};
void xcall_QCustomEvent(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QCustomEvent *xself = (x_QCustomEvent*)obj;
    switch(xi) {
	case 0: x_QCustomEvent::x_0(args);	break;
	case 1: x_QCustomEvent::x_1(args);	break;
	case 2: xself->x_2(args);	break;
	case 3: xself->x_3(args);	break;
	case 4: delete (QCustomEvent*)xself;	break;
    }
}
