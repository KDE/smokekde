//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qgdict.h>

class x_QBaseBucket : public QBaseBucket {
public:
    void x_0(xargs *x) {
	// getData()
	QPtrCollection::Item xret = this->QBaseBucket::getData();
	x[0].x_voidp = (void*)new QPtrCollection::Item(xret);
    }
    void x_1(xargs *x) {
	// setData(QPtrCollection::Item)
	QPtrCollection::Item xret = this->QBaseBucket::setData(*(QPtrCollection::Item *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QPtrCollection::Item(xret);
    }
    void x_2(xargs *x) {
	// getNext()
	QBaseBucket* xret = this->QBaseBucket::getNext();
	x[0].x_voidp = (void*)xret;
    }
    void x_3(xargs *x) {
	// setNext(QBaseBucket*)
	this->QBaseBucket::setNext((QBaseBucket*)x[1].x_voidp);
    }
    static void x_4(xargs *x) {
	// QBaseBucket(QPtrCollection::Item, QBaseBucket*)
	x_QBaseBucket* xret = new x_QBaseBucket(*(QPtrCollection::Item *)x[1].x_voidp,(QBaseBucket*)x[2].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QBaseBucket(QPtrCollection::Item x1, QBaseBucket* x2) : QBaseBucket(x1, x2) {
    }
    ~x_QBaseBucket() {}
};
void xcall_QBaseBucket(xargs *x, void *s, int xi) {
    x_QBaseBucket *xself = (x_QBaseBucket*)s;
    switch(xi) {
	case 0: xself->x_0(x);	break;
	case 1: xself->x_1(x);	break;
	case 2: xself->x_2(x);	break;
	case 3: xself->x_3(x);	break;
	case 4: x_QBaseBucket::x_4(x);	break;
    }
}
