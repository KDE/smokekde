//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke.h>
#include <qt_smoke.h>
#include <qvariant.h>
#include <qstring.h>
#include <qsocketnotifier.h>

class x_QSocketNotifier : public QSocketNotifier {
public:
    static void x_0(Smoke::Stack x) {
	x[0].s_enum = (long)QSocketNotifier::Read;
    }
    static void x_1(Smoke::Stack x) {
	x[0].s_enum = (long)QSocketNotifier::Write;
    }
    static void x_2(Smoke::Stack x) {
	x[0].s_enum = (long)QSocketNotifier::Exception;
    }
    void x_3(Smoke::Stack x) const {
	// metaObject()
	QMetaObject* xret = this->QSocketNotifier::metaObject();
	x[0].s_class = (void*)xret;
    }
    void x_4(Smoke::Stack x) const {
	// className()
	const char* xret = this->QSocketNotifier::className();
	x[0].s_voidp = (void*)xret;
    }
    void x_5(Smoke::Stack x) {
	// qt_cast(const char*)
	void* xret = this->QSocketNotifier::qt_cast((const char*)x[1].s_voidp);
	x[0].s_voidp = (void*)xret;
    }
    void x_6(Smoke::Stack x) {
	// qt_invoke(int, QUObject*)
	bool xret = this->QSocketNotifier::qt_invoke((int)x[1].s_int,(QUObject*)x[2].s_voidp);
	x[0].s_bool = xret;
    }
    void x_7(Smoke::Stack x) {
	// qt_emit(int, QUObject*)
	bool xret = this->QSocketNotifier::qt_emit((int)x[1].s_int,(QUObject*)x[2].s_voidp);
	x[0].s_bool = xret;
    }
    void x_8(Smoke::Stack x) {
	// qt_property(int, int, QVariant*)
	bool xret = this->QSocketNotifier::qt_property((int)x[1].s_int,(int)x[2].s_int,(QVariant*)x[3].s_class);
	x[0].s_bool = xret;
    }
    void x_9(Smoke::Stack x) {
	// qObject()
	QObject* xret = this->QSocketNotifier::qObject();
	x[0].s_class = (void*)xret;
    }
    static void x_10(Smoke::Stack x) {
	// QSocketNotifier(int, QSocketNotifier::Type, QObject*, const char*)
	x_QSocketNotifier* xret = new x_QSocketNotifier((int)x[1].s_int,(QSocketNotifier::Type)x[2].s_enum,(QObject*)x[3].s_class,(const char*)x[4].s_voidp);
	x[0].s_class = (void*)xret;
    }
    x_QSocketNotifier(int x1, QSocketNotifier::Type x2, QObject* x3, const char* x4) : QSocketNotifier(x1, x2, x3, x4) {
    }
    static void x_11(Smoke::Stack x) {
	// QSocketNotifier(int, QSocketNotifier::Type, QObject*)
	x_QSocketNotifier* xret = new x_QSocketNotifier((int)x[1].s_int,(QSocketNotifier::Type)x[2].s_enum,(QObject*)x[3].s_class);
	x[0].s_class = (void*)xret;
    }
    x_QSocketNotifier(int x1, QSocketNotifier::Type x2, QObject* x3) : QSocketNotifier(x1, x2, x3) {
    }
    static void x_12(Smoke::Stack x) {
	// QSocketNotifier(int, QSocketNotifier::Type)
	x_QSocketNotifier* xret = new x_QSocketNotifier((int)x[1].s_int,(QSocketNotifier::Type)x[2].s_enum);
	x[0].s_class = (void*)xret;
    }
    x_QSocketNotifier(int x1, QSocketNotifier::Type x2) : QSocketNotifier(x1, x2) {
    }
    void x_13(Smoke::Stack x) const {
	// socket()
	int xret = this->QSocketNotifier::socket();
	x[0].s_int = xret;
    }
    void x_14(Smoke::Stack x) const {
	// type()
	QSocketNotifier::Type xret = this->QSocketNotifier::type();
	x[0].s_enum = xret;
    }
    void x_15(Smoke::Stack x) const {
	// isEnabled()
	bool xret = this->QSocketNotifier::isEnabled();
	x[0].s_bool = xret;
    }
    void x_16(Smoke::Stack x) {
	// setEnabled(bool)
	this->QSocketNotifier::setEnabled((bool)x[1].s_bool);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    void x_17(Smoke::Stack x) {
	// activated(int)
	this->QSocketNotifier::activated((int)x[1].s_int);
	(void)x[0].s_int; // noop (for compiler warning)
    }
    static void x_18(Smoke::Stack x) {
	// staticMetaObject()
	QMetaObject* xret = QSocketNotifier::staticMetaObject();
	x[0].s_class = (void*)xret;
    }
    static void x_19(Smoke::Stack x) {
	// tr(const char*, const char*)
	QString xret = QSocketNotifier::tr((const char*)x[1].s_voidp,(const char*)x[2].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    static void x_20(Smoke::Stack x) {
	// tr(const char*)
	QString xret = QSocketNotifier::tr((const char*)x[1].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    static void x_21(Smoke::Stack x) {
	// trUtf8(const char*, const char*)
	QString xret = QSocketNotifier::trUtf8((const char*)x[1].s_voidp,(const char*)x[2].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    static void x_22(Smoke::Stack x) {
	// trUtf8(const char*)
	QString xret = QSocketNotifier::trUtf8((const char*)x[1].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_23(Smoke::Stack x) {
	// event(QEvent*)
	bool xret = this->QSocketNotifier::event((QEvent*)x[1].s_class);
	x[0].s_bool = xret;
    }
    virtual bool checkConnectArgs(const char* x1, const QObject* x2, const char* x3) {
	Smoke::StackItem x[4];
	x[1].s_voidp = (void*)x1;
	x[2].s_class = (void*)x2;
	x[3].s_voidp = (void*)x3;
	if(qt_Smoke->binding->callMethod(6496, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QObject::checkConnectArgs(x1, x2, x3);
    }
    virtual void childEvent(QChildEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(6492, (void*)this, x)) return;
	this->QObject::childEvent(x1);
    }
    virtual const char* className() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(8413, (void*)this, x)) return (const char*)x[0].s_class;
	return this->QSocketNotifier::className();
    }
    virtual void connectNotify(const char* x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(6494, (void*)this, x)) return;
	this->QObject::connectNotify(x1);
    }
    virtual void customEvent(QCustomEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(6493, (void*)this, x)) return;
	this->QObject::customEvent(x1);
    }
    virtual void disconnectNotify(const char* x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(6495, (void*)this, x)) return;
	this->QObject::disconnectNotify(x1);
    }
    virtual bool event(QEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(8433, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QSocketNotifier::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
	Smoke::StackItem x[3];
	x[1].s_class = (void*)x1;
	x[2].s_class = (void*)x2;
	if(qt_Smoke->binding->callMethod(6427, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QObject::eventFilter(x1, x2);
    }
    virtual void insertChild(QObject* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(6449, (void*)this, x)) return;
	this->QObject::insertChild(x1);
    }
    virtual QMetaObject* metaObject() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(8412, (void*)this, x)) return (QMetaObject*)x[0].s_class;
	return this->QSocketNotifier::metaObject();
    }
    virtual QVariant property(const char* x1) const {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(6463, (void*)this, x)) {
	    QVariant *xptr = (QVariant *)x[0].s_class;
	    QVariant xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QObject::property(x1);
    }
    virtual void* qt_cast(const char* x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(8414, (void*)this, x)) return (void*)x[0].s_voidp;
	return this->QSocketNotifier::qt_cast(x1);
    }
    virtual bool qt_emit(int x1, QUObject* x2) {
	Smoke::StackItem x[3];
	x[1].s_int = x1;
	x[2].s_voidp = (void*)x2;
	if(qt_Smoke->binding->callMethod(8416, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QSocketNotifier::qt_emit(x1, x2);
    }
    virtual bool qt_invoke(int x1, QUObject* x2) {
	Smoke::StackItem x[3];
	x[1].s_int = x1;
	x[2].s_voidp = (void*)x2;
	if(qt_Smoke->binding->callMethod(8415, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QSocketNotifier::qt_invoke(x1, x2);
    }
    virtual bool qt_property(int x1, int x2, QVariant* x3) {
	Smoke::StackItem x[4];
	x[1].s_int = x1;
	x[2].s_int = x2;
	x[3].s_class = (void*)x3;
	if(qt_Smoke->binding->callMethod(8417, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QSocketNotifier::qt_property(x1, x2, x3);
    }
    virtual void removeChild(QObject* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(6450, (void*)this, x)) return;
	this->QObject::removeChild(x1);
    }
    virtual void setEnabled(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(8426, (void*)this, x)) return;
	this->QSocketNotifier::setEnabled(x1);
    }
    virtual void setName(const char* x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(6432, (void*)this, x)) return;
	this->QObject::setName(x1);
    }
    virtual bool setProperty(const char* x1, const QVariant& x2) {
	Smoke::StackItem x[3];
	x[1].s_voidp = (void*)x1;
	x[2].s_class = (void*)&x2;
	if(qt_Smoke->binding->callMethod(6462, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QObject::setProperty(x1, x2);
    }
    virtual void timerEvent(QTimerEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(6491, (void*)this, x)) return;
	this->QObject::timerEvent(x1);
    }
    static void xenum_operation(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
	switch(xtype) {
	  case 592: //QSocketNotifier::Type
	    switch(xop) {
	      case Smoke::EnumNew:
		xdata = (void*)new QSocketNotifier::Type;
		break;
	      case Smoke::EnumDelete:
		delete (QSocketNotifier::Type*)xdata;
		break;
	      case Smoke::EnumFromLong:
		*(QSocketNotifier::Type*)xdata = (QSocketNotifier::Type)xvalue;
		break;
	      case Smoke::EnumToLong:
		xvalue = (long)*(QSocketNotifier::Type*)xdata;
		break;
	    }
	    break;
	}
    }
    ~x_QSocketNotifier() { qt_Smoke->binding->deleted(267, (void*)this); }
};
void xenum_QSocketNotifier(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
    x_QSocketNotifier::xenum_operation(xop, xtype, xdata, xvalue);
}
void xcall_QSocketNotifier(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QSocketNotifier *xself = (x_QSocketNotifier*)obj;
    switch(xi) {
	case 0: x_QSocketNotifier::x_0(args);	break;
	case 1: x_QSocketNotifier::x_1(args);	break;
	case 2: x_QSocketNotifier::x_2(args);	break;
	case 3: xself->x_3(args);	break;
	case 4: xself->x_4(args);	break;
	case 5: xself->x_5(args);	break;
	case 6: xself->x_6(args);	break;
	case 7: xself->x_7(args);	break;
	case 8: xself->x_8(args);	break;
	case 9: xself->x_9(args);	break;
	case 10: x_QSocketNotifier::x_10(args);	break;
	case 11: x_QSocketNotifier::x_11(args);	break;
	case 12: x_QSocketNotifier::x_12(args);	break;
	case 13: xself->x_13(args);	break;
	case 14: xself->x_14(args);	break;
	case 15: xself->x_15(args);	break;
	case 16: xself->x_16(args);	break;
	case 17: xself->x_17(args);	break;
	case 18: x_QSocketNotifier::x_18(args);	break;
	case 19: x_QSocketNotifier::x_19(args);	break;
	case 20: x_QSocketNotifier::x_20(args);	break;
	case 21: x_QSocketNotifier::x_21(args);	break;
	case 22: x_QSocketNotifier::x_22(args);	break;
	case 23: xself->x_23(args);	break;
	case 24: delete (QSocketNotifier*)xself;	break;
    }
}
