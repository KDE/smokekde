//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke.h>
#include <qt_smoke.h>
#include <qstring.h>
#include <qhttp.h>

class x_QHttpRequestHeader : public QHttpRequestHeader {
public:
    static void x_0(Smoke::Stack x) {
	// QHttpRequestHeader()
	x_QHttpRequestHeader* xret = new x_QHttpRequestHeader();
	x[0].s_class = (void*)xret;
    }
    x_QHttpRequestHeader() : QHttpRequestHeader() {
    }
    static void x_1(Smoke::Stack x) {
	// QHttpRequestHeader(const QString&, const QString&, int, int)
	x_QHttpRequestHeader* xret = new x_QHttpRequestHeader(*(const QString *)x[1].s_voidp,*(const QString *)x[2].s_voidp,(int)x[3].s_int,(int)x[4].s_int);
	x[0].s_class = (void*)xret;
    }
    x_QHttpRequestHeader(const QString& x1, const QString& x2, int x3, int x4) : QHttpRequestHeader(x1, x2, x3, x4) {
    }
    static void x_2(Smoke::Stack x) {
	// QHttpRequestHeader(const QString&, const QString&, int)
	x_QHttpRequestHeader* xret = new x_QHttpRequestHeader(*(const QString *)x[1].s_voidp,*(const QString *)x[2].s_voidp,(int)x[3].s_int);
	x[0].s_class = (void*)xret;
    }
    x_QHttpRequestHeader(const QString& x1, const QString& x2, int x3) : QHttpRequestHeader(x1, x2, x3) {
    }
    static void x_3(Smoke::Stack x) {
	// QHttpRequestHeader(const QString&, const QString&)
	x_QHttpRequestHeader* xret = new x_QHttpRequestHeader(*(const QString *)x[1].s_voidp,*(const QString *)x[2].s_voidp);
	x[0].s_class = (void*)xret;
    }
    x_QHttpRequestHeader(const QString& x1, const QString& x2) : QHttpRequestHeader(x1, x2) {
    }
    static void x_4(Smoke::Stack x) {
	// QHttpRequestHeader(const QHttpRequestHeader&)
	x_QHttpRequestHeader* xret = new x_QHttpRequestHeader(*(const QHttpRequestHeader *)x[1].s_class);
	x[0].s_class = (void*)xret;
    }
    x_QHttpRequestHeader(const QHttpRequestHeader& x1) : QHttpRequestHeader(x1) {
    }
    static void x_5(Smoke::Stack x) {
	// QHttpRequestHeader(const QString&)
	x_QHttpRequestHeader* xret = new x_QHttpRequestHeader(*(const QString *)x[1].s_voidp);
	x[0].s_class = (void*)xret;
    }
    x_QHttpRequestHeader(const QString& x1) : QHttpRequestHeader(x1) {
    }
    void x_6(Smoke::Stack x) {
	// setRequest(const QString&, const QString&, int, int)
	this->QHttpRequestHeader::setRequest(*(const QString *)x[1].s_voidp,*(const QString *)x[2].s_voidp,(int)x[3].s_int,(int)x[4].s_int);
	(void)x; // noop (for compiler warning)
    }
    void x_7(Smoke::Stack x) {
	// setRequest(const QString&, const QString&, int)
	this->QHttpRequestHeader::setRequest(*(const QString *)x[1].s_voidp,*(const QString *)x[2].s_voidp,(int)x[3].s_int);
	(void)x; // noop (for compiler warning)
    }
    void x_8(Smoke::Stack x) {
	// setRequest(const QString&, const QString&)
	this->QHttpRequestHeader::setRequest(*(const QString *)x[1].s_voidp,*(const QString *)x[2].s_voidp);
	(void)x; // noop (for compiler warning)
    }
    void x_9(Smoke::Stack x) const {
	// method()
	QString xret = this->QHttpRequestHeader::method();
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_10(Smoke::Stack x) const {
	// path()
	QString xret = this->QHttpRequestHeader::path();
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_11(Smoke::Stack x) const {
	// majorVersion()
	int xret = this->QHttpRequestHeader::majorVersion();
	x[0].s_int = xret;
    }
    void x_12(Smoke::Stack x) const {
	// minorVersion()
	int xret = this->QHttpRequestHeader::minorVersion();
	x[0].s_int = xret;
    }
    void x_13(Smoke::Stack x) const {
	// toString()
	QString xret = this->QHttpRequestHeader::toString();
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_14(Smoke::Stack x) {
	// parseLine(const QString&, int)
	bool xret = this->QHttpRequestHeader::parseLine(*(const QString *)x[1].s_voidp,(int)x[2].s_int);
	x[0].s_bool = xret;
    }
    virtual int majorVersion() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(4331, (void*)this, x)) return (int)x[0].s_int;
	return this->QHttpRequestHeader::majorVersion();
    }
    virtual int minorVersion() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(4332, (void*)this, x)) return (int)x[0].s_int;
	return this->QHttpRequestHeader::minorVersion();
    }
    virtual bool parseLine(const QString& x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_voidp = (void*)&x1;
	x[2].s_int = x2;
	if(qt_Smoke->binding->callMethod(4335, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QHttpRequestHeader::parseLine(x1, x2);
    }
    virtual QString toString() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(4333, (void*)this, x)) {
	    QString *xptr = (QString *)x[0].s_class;
	    QString xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QHttpRequestHeader::toString();
    }
    ~x_QHttpRequestHeader() { qt_Smoke->binding->deleted(150, (void*)this); }
};
void xcall_QHttpRequestHeader(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QHttpRequestHeader *xself = (x_QHttpRequestHeader*)obj;
    switch(xi) {
	case 0: x_QHttpRequestHeader::x_0(args);	break;
	case 1: x_QHttpRequestHeader::x_1(args);	break;
	case 2: x_QHttpRequestHeader::x_2(args);	break;
	case 3: x_QHttpRequestHeader::x_3(args);	break;
	case 4: x_QHttpRequestHeader::x_4(args);	break;
	case 5: x_QHttpRequestHeader::x_5(args);	break;
	case 6: xself->x_6(args);	break;
	case 7: xself->x_7(args);	break;
	case 8: xself->x_8(args);	break;
	case 9: xself->x_9(args);	break;
	case 10: xself->x_10(args);	break;
	case 11: xself->x_11(args);	break;
	case 12: xself->x_12(args);	break;
	case 13: xself->x_13(args);	break;
	case 14: xself->x_14(args);	break;
	case 15: delete (QHttpRequestHeader*)xself;	break;
    }
}
