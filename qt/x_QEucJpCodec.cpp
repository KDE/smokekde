//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qstring.h>
#include <qcstring.h>
#include <qeucjpcodec.h>

class x_QEucJpCodec : public QEucJpCodec {
public:
    void x_0(xargs *x) const {
	// mibEnum()
	int xret = this->QEucJpCodec::mibEnum();
	x[0].x_int = (int)xret;
    }
    void x_1(xargs *x) const {
	// name()
	const char* xret = this->QEucJpCodec::name();
	x[0].x_voidp = (void*)xret;
    }
    void x_2(xargs *x) const {
	// mimeName()
	const char* xret = this->QEucJpCodec::mimeName();
	x[0].x_voidp = (void*)xret;
    }
    void x_3(xargs *x) const {
	// makeDecoder()
	QTextDecoder* xret = this->QEucJpCodec::makeDecoder();
	x[0].x_voidp = (void*)xret;
    }
    void x_4(xargs *x) const {
	// fromUnicode(const QString&, int&)
	QCString xret = this->QEucJpCodec::fromUnicode(*(const QString *)x[1].x_voidp,*(int *)x[2].x_voidp);
	x[0].x_voidp = (void*)new QCString(xret);
    }
    void x_5(xargs *x) const {
	// toUnicode(const char*, int)
	QString xret = this->QEucJpCodec::toUnicode((const char*)x[1].x_voidp,(int)x[2].x_int);
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_6(xargs *x) const {
	// heuristicContentMatch(const char*, int)
	int xret = this->QEucJpCodec::heuristicContentMatch((const char*)x[1].x_voidp,(int)x[2].x_int);
	x[0].x_int = (int)xret;
    }
    void x_7(xargs *x) const {
	// heuristicNameMatch(const char*)
	int xret = this->QEucJpCodec::heuristicNameMatch((const char*)x[1].x_voidp);
	x[0].x_int = (int)xret;
    }
    static void x_8(xargs *x) {
	// QEucJpCodec()
	x_QEucJpCodec* xret = new x_QEucJpCodec();
	x[0].x_voidp = (void*)xret;
    }
    x_QEucJpCodec() : QEucJpCodec() {
    }
    virtual bool canEncode(QChar x1) const {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 8468, x)) return (bool)x[0].x_bool;
	return this->QTextCodec::canEncode(x1);
    }
    virtual bool canEncode(const QString& x1) const {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 8469, x)) return (bool)x[0].x_bool;
	return this->QTextCodec::canEncode(x1);
    }
    virtual unsigned short characterFromUnicode(const QString& x1, int x2) const {
	xargs x[3];
	x[1].x_voidp = (void*)&x1;
	x[2].x_int = (int)x2;
	if(call_method((void*)this, 8473, x)) {
	    unsigned short *xptr = (unsigned short *)x[0].x_voidp;
	    unsigned short xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QTextCodec::characterFromUnicode(x1, x2);
    }
    virtual QCString fromUnicode(const QString& x1, int& x2) const {
	xargs x[3];
	x[1].x_voidp = (void*)&x1;
	x[2].x_voidp = (void*)&x2;
	if(call_method((void*)this, 2364, x)) {
	    QCString *xptr = (QCString *)x[0].x_voidp;
	    QCString xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QEucJpCodec::fromUnicode(x1, x2);
    }
    virtual QByteArray fromUnicode(const QString& x1, int x2, int x3) const {
	xargs x[4];
	x[1].x_voidp = (void*)&x1;
	x[2].x_int = (int)x2;
	x[3].x_int = (int)x3;
	if(call_method((void*)this, 8472, x)) {
	    QByteArray *xptr = (QByteArray *)x[0].x_voidp;
	    QByteArray xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QTextCodec::fromUnicode(x1, x2, x3);
    }
    virtual int heuristicContentMatch(const char* x1, int x2) const {
	xargs x[3];
	x[1].x_voidp = (void*)x1;
	x[2].x_int = (int)x2;
	if(call_method((void*)this, 2366, x)) return (int)x[0].x_int;
	return this->QEucJpCodec::heuristicContentMatch(x1, x2);
    }
    virtual int heuristicNameMatch(const char* x1) const {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 2367, x)) return (int)x[0].x_int;
	return this->QEucJpCodec::heuristicNameMatch(x1);
    }
    virtual QTextDecoder* makeDecoder() const {
	xargs x[1];
	if(call_method((void*)this, 2363, x)) 	return (QTextDecoder*)x[0].x_voidp;
	return this->QEucJpCodec::makeDecoder();
    }
    virtual QTextEncoder* makeEncoder() const {
	xargs x[1];
	if(call_method((void*)this, 8459, x)) 	return (QTextEncoder*)x[0].x_voidp;
	return this->QTextCodec::makeEncoder();
    }
    virtual int mibEnum() const {
	xargs x[1];
	if(call_method((void*)this, 2360, x)) return (int)x[0].x_int;
	return this->QEucJpCodec::mibEnum();
    }
    virtual const char* mimeName() const {
	xargs x[1];
	if(call_method((void*)this, 2362, x)) 	return (const char*)x[0].x_voidp;
	return this->QEucJpCodec::mimeName();
    }
    virtual const char* name() const {
	xargs x[1];
	if(call_method((void*)this, 2361, x)) 	return (const char*)x[0].x_voidp;
	return this->QEucJpCodec::name();
    }
    virtual QString toUnicode(const char* x1, int x2) const {
	xargs x[3];
	x[1].x_voidp = (void*)x1;
	x[2].x_int = (int)x2;
	if(call_method((void*)this, 2365, x)) {
	    QString *xptr = (QString *)x[0].x_voidp;
	    QString xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QEucJpCodec::toUnicode(x1, x2);
    }
    ~x_QEucJpCodec() {}
};
void xcall_QEucJpCodec(xargs *x, void *s, int xi) {
    x_QEucJpCodec *xself = (x_QEucJpCodec*)s;
    switch(xi) {
	case 0: xself->x_0(x);	break;
	case 1: xself->x_1(x);	break;
	case 2: xself->x_2(x);	break;
	case 3: xself->x_3(x);	break;
	case 4: xself->x_4(x);	break;
	case 5: xself->x_5(x);	break;
	case 6: xself->x_6(x);	break;
	case 7: xself->x_7(x);	break;
	case 8: x_QEucJpCodec::x_8(x);	break;
	case 9: delete (QEucJpCodec*)xself;	break;
    }
}
