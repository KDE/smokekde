//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke.h>
#include <qt_smoke.h>
#include <qvariant.h>
#include <qaction.h>
#include <qkeysequence.h>
#include <qiconset.h>
#include <qstring.h>

class x_QAction : public QAction {
public:
    void x_0(Smoke::Stack x) const {
	// metaObject()
	QMetaObject* xret = this->QAction::metaObject();
	x[0].s_class = (void*)xret;
    }
    void x_1(Smoke::Stack x) const {
	// className()
	const char* xret = this->QAction::className();
	x[0].s_voidp = (void*)xret;
    }
    void x_2(Smoke::Stack x) {
	// qt_cast(const char*)
	void* xret = this->QAction::qt_cast((const char*)x[1].s_voidp);
	x[0].s_voidp = (void*)xret;
    }
    void x_3(Smoke::Stack x) {
	// qt_invoke(int, QUObject*)
	bool xret = this->QAction::qt_invoke((int)x[1].s_int,(QUObject*)x[2].s_voidp);
	x[0].s_bool = xret;
    }
    void x_4(Smoke::Stack x) {
	// qt_emit(int, QUObject*)
	bool xret = this->QAction::qt_emit((int)x[1].s_int,(QUObject*)x[2].s_voidp);
	x[0].s_bool = xret;
    }
    void x_5(Smoke::Stack x) {
	// qt_property(int, int, QVariant*)
	bool xret = this->QAction::qt_property((int)x[1].s_int,(int)x[2].s_int,(QVariant*)x[3].s_class);
	x[0].s_bool = xret;
    }
    void x_6(Smoke::Stack x) {
	// qObject()
	QObject* xret = this->QAction::qObject();
	x[0].s_class = (void*)xret;
    }
    static void x_7(Smoke::Stack x) {
	// QAction(QObject*, const char*, bool)
	x_QAction* xret = new x_QAction((QObject*)x[1].s_class,(const char*)x[2].s_voidp,(bool)x[3].s_bool);
	x[0].s_class = (void*)xret;
    }
    x_QAction(QObject* x1, const char* x2, bool x3) : QAction(x1, x2, x3) {
    }
    static void x_8(Smoke::Stack x) {
	// QAction(QObject*, const char*)
	x_QAction* xret = new x_QAction((QObject*)x[1].s_class,(const char*)x[2].s_voidp);
	x[0].s_class = (void*)xret;
    }
    x_QAction(QObject* x1, const char* x2) : QAction(x1, x2) {
    }
    static void x_9(Smoke::Stack x) {
	// QAction(QObject*)
	x_QAction* xret = new x_QAction((QObject*)x[1].s_class);
	x[0].s_class = (void*)xret;
    }
    x_QAction(QObject* x1) : QAction(x1) {
    }
    static void x_10(Smoke::Stack x) {
	// QAction(const QString&, const QIconSet&, const QString&, QKeySequence, QObject*, const char*, bool)
	x_QAction* xret = new x_QAction(*(const QString *)x[1].s_voidp,*(const QIconSet *)x[2].s_class,*(const QString *)x[3].s_voidp,*(QKeySequence *)x[4].s_class,(QObject*)x[5].s_class,(const char*)x[6].s_voidp,(bool)x[7].s_bool);
	x[0].s_class = (void*)xret;
    }
    x_QAction(const QString& x1, const QIconSet& x2, const QString& x3, QKeySequence x4, QObject* x5, const char* x6, bool x7) : QAction(x1, x2, x3, x4, x5, x6, x7) {
    }
    static void x_11(Smoke::Stack x) {
	// QAction(const QString&, const QIconSet&, const QString&, QKeySequence, QObject*, const char*)
	x_QAction* xret = new x_QAction(*(const QString *)x[1].s_voidp,*(const QIconSet *)x[2].s_class,*(const QString *)x[3].s_voidp,*(QKeySequence *)x[4].s_class,(QObject*)x[5].s_class,(const char*)x[6].s_voidp);
	x[0].s_class = (void*)xret;
    }
    x_QAction(const QString& x1, const QIconSet& x2, const QString& x3, QKeySequence x4, QObject* x5, const char* x6) : QAction(x1, x2, x3, x4, x5, x6) {
    }
    static void x_12(Smoke::Stack x) {
	// QAction(const QString&, const QIconSet&, const QString&, QKeySequence, QObject*)
	x_QAction* xret = new x_QAction(*(const QString *)x[1].s_voidp,*(const QIconSet *)x[2].s_class,*(const QString *)x[3].s_voidp,*(QKeySequence *)x[4].s_class,(QObject*)x[5].s_class);
	x[0].s_class = (void*)xret;
    }
    x_QAction(const QString& x1, const QIconSet& x2, const QString& x3, QKeySequence x4, QObject* x5) : QAction(x1, x2, x3, x4, x5) {
    }
    static void x_13(Smoke::Stack x) {
	// QAction(const QString&, const QString&, QKeySequence, QObject*, const char*, bool)
	x_QAction* xret = new x_QAction(*(const QString *)x[1].s_voidp,*(const QString *)x[2].s_voidp,*(QKeySequence *)x[3].s_class,(QObject*)x[4].s_class,(const char*)x[5].s_voidp,(bool)x[6].s_bool);
	x[0].s_class = (void*)xret;
    }
    x_QAction(const QString& x1, const QString& x2, QKeySequence x3, QObject* x4, const char* x5, bool x6) : QAction(x1, x2, x3, x4, x5, x6) {
    }
    static void x_14(Smoke::Stack x) {
	// QAction(const QString&, const QString&, QKeySequence, QObject*, const char*)
	x_QAction* xret = new x_QAction(*(const QString *)x[1].s_voidp,*(const QString *)x[2].s_voidp,*(QKeySequence *)x[3].s_class,(QObject*)x[4].s_class,(const char*)x[5].s_voidp);
	x[0].s_class = (void*)xret;
    }
    x_QAction(const QString& x1, const QString& x2, QKeySequence x3, QObject* x4, const char* x5) : QAction(x1, x2, x3, x4, x5) {
    }
    static void x_15(Smoke::Stack x) {
	// QAction(const QString&, const QString&, QKeySequence, QObject*)
	x_QAction* xret = new x_QAction(*(const QString *)x[1].s_voidp,*(const QString *)x[2].s_voidp,*(QKeySequence *)x[3].s_class,(QObject*)x[4].s_class);
	x[0].s_class = (void*)xret;
    }
    x_QAction(const QString& x1, const QString& x2, QKeySequence x3, QObject* x4) : QAction(x1, x2, x3, x4) {
    }
    void x_16(Smoke::Stack x) {
	// setIconSet(const QIconSet&)
	this->QAction::setIconSet(*(const QIconSet *)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_17(Smoke::Stack x) const {
	// iconSet()
	QIconSet xret = this->QAction::iconSet();
	x[0].s_class = (void*)new QIconSet(xret);
    }
    void x_18(Smoke::Stack x) {
	// setText(const QString&)
	this->QAction::setText(*(const QString *)x[1].s_voidp);
	(void)x; // noop (for compiler warning)
    }
    void x_19(Smoke::Stack x) const {
	// text()
	QString xret = this->QAction::text();
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_20(Smoke::Stack x) {
	// setMenuText(const QString&)
	this->QAction::setMenuText(*(const QString *)x[1].s_voidp);
	(void)x; // noop (for compiler warning)
    }
    void x_21(Smoke::Stack x) const {
	// menuText()
	QString xret = this->QAction::menuText();
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_22(Smoke::Stack x) {
	// setToolTip(const QString&)
	this->QAction::setToolTip(*(const QString *)x[1].s_voidp);
	(void)x; // noop (for compiler warning)
    }
    void x_23(Smoke::Stack x) const {
	// toolTip()
	QString xret = this->QAction::toolTip();
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_24(Smoke::Stack x) {
	// setStatusTip(const QString&)
	this->QAction::setStatusTip(*(const QString *)x[1].s_voidp);
	(void)x; // noop (for compiler warning)
    }
    void x_25(Smoke::Stack x) const {
	// statusTip()
	QString xret = this->QAction::statusTip();
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_26(Smoke::Stack x) {
	// setWhatsThis(const QString&)
	this->QAction::setWhatsThis(*(const QString *)x[1].s_voidp);
	(void)x; // noop (for compiler warning)
    }
    void x_27(Smoke::Stack x) const {
	// whatsThis()
	QString xret = this->QAction::whatsThis();
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_28(Smoke::Stack x) {
	// setAccel(const QKeySequence&)
	this->QAction::setAccel(*(const QKeySequence *)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_29(Smoke::Stack x) const {
	// accel()
	QKeySequence xret = this->QAction::accel();
	x[0].s_class = (void*)new QKeySequence(xret);
    }
    void x_30(Smoke::Stack x) {
	// setToggleAction(bool)
	this->QAction::setToggleAction((bool)x[1].s_bool);
	(void)x; // noop (for compiler warning)
    }
    void x_31(Smoke::Stack x) const {
	// isToggleAction()
	bool xret = this->QAction::isToggleAction();
	x[0].s_bool = xret;
    }
    void x_32(Smoke::Stack x) const {
	// isOn()
	bool xret = this->QAction::isOn();
	x[0].s_bool = xret;
    }
    void x_33(Smoke::Stack x) const {
	// isEnabled()
	bool xret = this->QAction::isEnabled();
	x[0].s_bool = xret;
    }
    void x_34(Smoke::Stack x) {
	// addTo(QWidget*)
	bool xret = this->QAction::addTo((QWidget*)x[1].s_class);
	x[0].s_bool = xret;
    }
    void x_35(Smoke::Stack x) {
	// removeFrom(QWidget*)
	bool xret = this->QAction::removeFrom((QWidget*)x[1].s_class);
	x[0].s_bool = xret;
    }
    void x_36(Smoke::Stack x) {
	// toggle()
	this->QAction::toggle();
	(void)x; // noop (for compiler warning)
    }
    void x_37(Smoke::Stack x) {
	// setOn(bool)
	this->QAction::setOn((bool)x[1].s_bool);
	(void)x; // noop (for compiler warning)
    }
    void x_38(Smoke::Stack x) {
	// setEnabled(bool)
	this->QAction::setEnabled((bool)x[1].s_bool);
	(void)x; // noop (for compiler warning)
    }
    void x_39(Smoke::Stack x) {
	// activated()
	this->QAction::activated();
	(void)x; // noop (for compiler warning)
    }
    void x_40(Smoke::Stack x) {
	// toggled(bool)
	this->QAction::toggled((bool)x[1].s_bool);
	(void)x; // noop (for compiler warning)
    }
    static void x_41(Smoke::Stack x) {
	// staticMetaObject()
	QMetaObject* xret = QAction::staticMetaObject();
	x[0].s_class = (void*)xret;
    }
    static void x_42(Smoke::Stack x) {
	// tr(const char*, const char*)
	QString xret = QAction::tr((const char*)x[1].s_voidp,(const char*)x[2].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    static void x_43(Smoke::Stack x) {
	// tr(const char*)
	QString xret = QAction::tr((const char*)x[1].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    static void x_44(Smoke::Stack x) {
	// trUtf8(const char*, const char*)
	QString xret = QAction::trUtf8((const char*)x[1].s_voidp,(const char*)x[2].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    static void x_45(Smoke::Stack x) {
	// trUtf8(const char*)
	QString xret = QAction::trUtf8((const char*)x[1].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_46(Smoke::Stack x) {
	// addedTo(QWidget*, QWidget*)
	this->QAction::addedTo((QWidget*)x[1].s_class,(QWidget*)x[2].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_47(Smoke::Stack x) {
	// addedTo(int, QPopupMenu*)
	this->QAction::addedTo((int)x[1].s_int,(QPopupMenu*)x[2].s_class);
	(void)x; // noop (for compiler warning)
    }
    virtual bool addTo(QWidget* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(75, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QAction::addTo(x1);
    }
    virtual void addedTo(QWidget* x1, QWidget* x2) {
	Smoke::StackItem x[3];
	x[1].s_class = (void*)x1;
	x[2].s_class = (void*)x2;
	if(qt_Smoke->binding->callMethod(87, (void*)this, x)) return;
	this->QAction::addedTo(x1, x2);
    }
    virtual void addedTo(int x1, QPopupMenu* x2) {
	Smoke::StackItem x[3];
	x[1].s_int = x1;
	x[2].s_class = (void*)x2;
	if(qt_Smoke->binding->callMethod(88, (void*)this, x)) return;
	this->QAction::addedTo(x1, x2);
    }
    virtual bool checkConnectArgs(const char* x1, const QObject* x2, const char* x3) {
	Smoke::StackItem x[4];
	x[1].s_voidp = (void*)x1;
	x[2].s_class = (void*)x2;
	x[3].s_voidp = (void*)x3;
	if(qt_Smoke->binding->callMethod(6521, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QObject::checkConnectArgs(x1, x2, x3);
    }
    virtual void childEvent(QChildEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(6517, (void*)this, x)) return;
	this->QObject::childEvent(x1);
    }
    virtual const char* className() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(41, (void*)this, x)) return (const char*)x[0].s_class;
	return this->QAction::className();
    }
    virtual void connectNotify(const char* x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(6519, (void*)this, x)) return;
	this->QObject::connectNotify(x1);
    }
    virtual void customEvent(QCustomEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(6518, (void*)this, x)) return;
	this->QObject::customEvent(x1);
    }
    virtual void disconnectNotify(const char* x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(6520, (void*)this, x)) return;
	this->QObject::disconnectNotify(x1);
    }
    virtual bool event(QEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(6455, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
	Smoke::StackItem x[3];
	x[1].s_class = (void*)x1;
	x[2].s_class = (void*)x2;
	if(qt_Smoke->binding->callMethod(6456, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QObject::eventFilter(x1, x2);
    }
    virtual void insertChild(QObject* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(6478, (void*)this, x)) return;
	this->QObject::insertChild(x1);
    }
    virtual QMetaObject* metaObject() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(40, (void*)this, x)) return (QMetaObject*)x[0].s_class;
	return this->QAction::metaObject();
    }
    virtual QVariant property(const char* x1) const {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(6492, (void*)this, x)) {
	    QVariant *xptr = (QVariant *)x[0].s_class;
	    QVariant xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QObject::property(x1);
    }
    virtual void* qt_cast(const char* x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(42, (void*)this, x)) return (void*)x[0].s_voidp;
	return this->QAction::qt_cast(x1);
    }
    virtual bool qt_emit(int x1, QUObject* x2) {
	Smoke::StackItem x[3];
	x[1].s_int = x1;
	x[2].s_voidp = (void*)x2;
	if(qt_Smoke->binding->callMethod(44, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QAction::qt_emit(x1, x2);
    }
    virtual bool qt_invoke(int x1, QUObject* x2) {
	Smoke::StackItem x[3];
	x[1].s_int = x1;
	x[2].s_voidp = (void*)x2;
	if(qt_Smoke->binding->callMethod(43, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QAction::qt_invoke(x1, x2);
    }
    virtual bool qt_property(int x1, int x2, QVariant* x3) {
	Smoke::StackItem x[4];
	x[1].s_int = x1;
	x[2].s_int = x2;
	x[3].s_class = (void*)x3;
	if(qt_Smoke->binding->callMethod(45, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QAction::qt_property(x1, x2, x3);
    }
    virtual void removeChild(QObject* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(6479, (void*)this, x)) return;
	this->QObject::removeChild(x1);
    }
    virtual bool removeFrom(QWidget* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(76, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QAction::removeFrom(x1);
    }
    virtual void setAccel(const QKeySequence& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(69, (void*)this, x)) return;
	this->QAction::setAccel(x1);
    }
    virtual void setEnabled(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(79, (void*)this, x)) return;
	this->QAction::setEnabled(x1);
    }
    virtual void setIconSet(const QIconSet& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(57, (void*)this, x)) return;
	this->QAction::setIconSet(x1);
    }
    virtual void setMenuText(const QString& x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)&x1;
	if(qt_Smoke->binding->callMethod(61, (void*)this, x)) return;
	this->QAction::setMenuText(x1);
    }
    virtual void setName(const char* x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)x1;
	if(qt_Smoke->binding->callMethod(6461, (void*)this, x)) return;
	this->QObject::setName(x1);
    }
    virtual void setOn(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(78, (void*)this, x)) return;
	this->QAction::setOn(x1);
    }
    virtual bool setProperty(const char* x1, const QVariant& x2) {
	Smoke::StackItem x[3];
	x[1].s_voidp = (void*)x1;
	x[2].s_class = (void*)&x2;
	if(qt_Smoke->binding->callMethod(6491, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QObject::setProperty(x1, x2);
    }
    virtual void setStatusTip(const QString& x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)&x1;
	if(qt_Smoke->binding->callMethod(65, (void*)this, x)) return;
	this->QAction::setStatusTip(x1);
    }
    virtual void setText(const QString& x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)&x1;
	if(qt_Smoke->binding->callMethod(59, (void*)this, x)) return;
	this->QAction::setText(x1);
    }
    virtual void setToggleAction(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(71, (void*)this, x)) return;
	this->QAction::setToggleAction(x1);
    }
    virtual void setToolTip(const QString& x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)&x1;
	if(qt_Smoke->binding->callMethod(63, (void*)this, x)) return;
	this->QAction::setToolTip(x1);
    }
    virtual void setWhatsThis(const QString& x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)&x1;
	if(qt_Smoke->binding->callMethod(67, (void*)this, x)) return;
	this->QAction::setWhatsThis(x1);
    }
    virtual void timerEvent(QTimerEvent* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	if(qt_Smoke->binding->callMethod(6516, (void*)this, x)) return;
	this->QObject::timerEvent(x1);
    }
    ~x_QAction() { qt_Smoke->binding->deleted(2, (void*)this); }
};
void xcall_QAction(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QAction *xself = (x_QAction*)obj;
    switch(xi) {
	case 0: xself->x_0(args);	break;
	case 1: xself->x_1(args);	break;
	case 2: xself->x_2(args);	break;
	case 3: xself->x_3(args);	break;
	case 4: xself->x_4(args);	break;
	case 5: xself->x_5(args);	break;
	case 6: xself->x_6(args);	break;
	case 7: x_QAction::x_7(args);	break;
	case 8: x_QAction::x_8(args);	break;
	case 9: x_QAction::x_9(args);	break;
	case 10: x_QAction::x_10(args);	break;
	case 11: x_QAction::x_11(args);	break;
	case 12: x_QAction::x_12(args);	break;
	case 13: x_QAction::x_13(args);	break;
	case 14: x_QAction::x_14(args);	break;
	case 15: x_QAction::x_15(args);	break;
	case 16: xself->x_16(args);	break;
	case 17: xself->x_17(args);	break;
	case 18: xself->x_18(args);	break;
	case 19: xself->x_19(args);	break;
	case 20: xself->x_20(args);	break;
	case 21: xself->x_21(args);	break;
	case 22: xself->x_22(args);	break;
	case 23: xself->x_23(args);	break;
	case 24: xself->x_24(args);	break;
	case 25: xself->x_25(args);	break;
	case 26: xself->x_26(args);	break;
	case 27: xself->x_27(args);	break;
	case 28: xself->x_28(args);	break;
	case 29: xself->x_29(args);	break;
	case 30: xself->x_30(args);	break;
	case 31: xself->x_31(args);	break;
	case 32: xself->x_32(args);	break;
	case 33: xself->x_33(args);	break;
	case 34: xself->x_34(args);	break;
	case 35: xself->x_35(args);	break;
	case 36: xself->x_36(args);	break;
	case 37: xself->x_37(args);	break;
	case 38: xself->x_38(args);	break;
	case 39: xself->x_39(args);	break;
	case 40: xself->x_40(args);	break;
	case 41: x_QAction::x_41(args);	break;
	case 42: x_QAction::x_42(args);	break;
	case 43: x_QAction::x_43(args);	break;
	case 44: x_QAction::x_44(args);	break;
	case 45: x_QAction::x_45(args);	break;
	case 46: xself->x_46(args);	break;
	case 47: xself->x_47(args);	break;
	case 48: delete (QAction*)xself;	break;
    }
}
