//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qvariant.h>
#include <qstring.h>
#include <qsqlfield.h>

class x_QSqlField : public QSqlField {
public:
    static void x_0(xargs *x) {
	// QSqlField(const QString&, QVariant::Type)
	x_QSqlField* xret = new x_QSqlField(*(const QString *)x[1].x_voidp,(QVariant::Type)x[2].x_long);
	x[0].x_voidp = (void*)xret;
    }
    x_QSqlField(const QString& x1, QVariant::Type x2) : QSqlField(x1, x2) {
    }
    static void x_1(xargs *x) {
	// QSqlField(const QString&)
	x_QSqlField* xret = new x_QSqlField(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QSqlField(const QString& x1) : QSqlField(x1) {
    }
    static void x_2(xargs *x) {
	// QSqlField()
	x_QSqlField* xret = new x_QSqlField();
	x[0].x_voidp = (void*)xret;
    }
    x_QSqlField() : QSqlField() {
    }
    static void x_3(xargs *x) {
	// QSqlField(const QSqlField&)
	x_QSqlField* xret = new x_QSqlField(*(const QSqlField *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QSqlField(const QSqlField& x1) : QSqlField(x1) {
    }
    void x_4(xargs *x) {
	// operator=(const QSqlField&)
	QSqlField& xret = this->QSqlField::operator=(*(const QSqlField *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_5(xargs *x) const {
	// operator==(const QSqlField&)
	bool xret = this->QSqlField::operator==(*(const QSqlField *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_6(xargs *x) {
	// setValue(const QVariant&)
	this->QSqlField::setValue(*(const QVariant *)x[1].x_voidp);
    }
    void x_7(xargs *x) const {
	// value()
	QVariant xret = this->QSqlField::value();
	x[0].x_voidp = (void*)new QVariant(xret);
    }
    void x_8(xargs *x) {
	// setName(const QString&)
	this->QSqlField::setName(*(const QString *)x[1].x_voidp);
    }
    void x_9(xargs *x) const {
	// name()
	QString xret = this->QSqlField::name();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_10(xargs *x) {
	// setNull()
	this->QSqlField::setNull();
    }
    void x_11(xargs *x) const {
	// isNull()
	bool xret = this->QSqlField::isNull();
	x[0].x_bool = (bool)xret;
    }
    void x_12(xargs *x) {
	// setReadOnly(bool)
	this->QSqlField::setReadOnly((bool)x[1].x_bool);
    }
    void x_13(xargs *x) const {
	// isReadOnly()
	bool xret = this->QSqlField::isReadOnly();
	x[0].x_bool = (bool)xret;
    }
    void x_14(xargs *x) {
	// clear(bool)
	this->QSqlField::clear((bool)x[1].x_bool);
    }
    void x_15(xargs *x) {
	// clear()
	this->QSqlField::clear();
    }
    void x_16(xargs *x) const {
	// type()
	QVariant::Type xret = this->QSqlField::type();
	x[0].x_long = (long)xret;
    }
    virtual void setName(const QString& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 7422, x)) return;
	this->QSqlField::setName(x1);
    }
    virtual void setNull() {
	xargs x[1];
	if(call_method((void*)this, 7424, x)) return;
	this->QSqlField::setNull();
    }
    virtual void setReadOnly(bool x1) {
	xargs x[2];
	x[1].x_bool = (bool)x1;
	if(call_method((void*)this, 7426, x)) return;
	this->QSqlField::setReadOnly(x1);
    }
    virtual void setValue(const QVariant& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 7420, x)) return;
	this->QSqlField::setValue(x1);
    }
    virtual QVariant value() const {
	xargs x[1];
	if(call_method((void*)this, 7421, x)) {
	    QVariant *xptr = (QVariant *)x[0].x_voidp;
	    QVariant xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QSqlField::value();
    }
    ~x_QSqlField() {}
};
void xcall_QSqlField(xargs *x, void *s, int xi) {
    x_QSqlField *xself = (x_QSqlField*)s;
    switch(xi) {
	case 0: x_QSqlField::x_0(x);	break;
	case 1: x_QSqlField::x_1(x);	break;
	case 2: x_QSqlField::x_2(x);	break;
	case 3: x_QSqlField::x_3(x);	break;
	case 4: xself->x_4(x);	break;
	case 5: xself->x_5(x);	break;
	case 6: xself->x_6(x);	break;
	case 7: xself->x_7(x);	break;
	case 8: xself->x_8(x);	break;
	case 9: xself->x_9(x);	break;
	case 10: xself->x_10(x);	break;
	case 11: xself->x_11(x);	break;
	case 12: xself->x_12(x);	break;
	case 13: xself->x_13(x);	break;
	case 14: xself->x_14(x);	break;
	case 15: xself->x_15(x);	break;
	case 16: xself->x_16(x);	break;
	case 17: delete (QSqlField*)xself;	break;
    }
}
