//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qvariant.h>
#include <qsound.h>
#include <qstring.h>

class x_QAuServer : public QAuServer {
public:
    static void x_0(xargs *x) {
	// QAuServer(QObject*, const char*)
	x_QAuServer* xret = new x_QAuServer((QObject*)x[1].x_voidp,(const char*)x[2].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QAuServer(QObject* x1, const char* x2) : QAuServer(x1, x2) {
    }
    void x_1(xargs *x) {
	// init(QSound*)
	this->QAuServer::init((QSound*)x[1].x_voidp);
    }
    void x_2(xargs *x) {
	// play(const QString&)
	this->QAuServer::play(*(const QString *)x[1].x_voidp);
    }
    void x_3(xargs *x) {
	// play(QSound*)
	this->QAuServer::play((QSound*)x[1].x_voidp);
    }
    void x_4(xargs *x) {
	// stop(QSound*)
	this->QAuServer::stop((QSound*)x[1].x_voidp);
    }
    void x_5(xargs *x) {
	// okay()
	bool xret = this->QAuServer::okay();
	x[0].x_bool = (bool)xret;
    }
    void x_6(xargs *x) {
	// setBucket(QSound*, QAuBucket*)
	this->QAuServer::setBucket((QSound*)x[1].x_voidp,(QAuBucket*)x[2].x_voidp);
    }
    void x_7(xargs *x) {
	// bucket(QSound*)
	QAuBucket* xret = this->QAuServer::bucket((QSound*)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    void x_8(xargs *x) {
	// decLoop(QSound*)
	int xret = this->QAuServer::decLoop((QSound*)x[1].x_voidp);
	x[0].x_int = (int)xret;
    }
    virtual bool checkConnectArgs(const char* x1, const QObject* x2, const char* x3) {
	xargs x[4];
	x[1].x_voidp = (void*)x1;
	x[2].x_voidp = (void*)x2;
	x[3].x_voidp = (void*)x3;
	if(call_method((void*)this, 5475, x)) return (bool)x[0].x_bool;
	return this->QObject::checkConnectArgs(x1, x2, x3);
    }
    virtual void childEvent(QChildEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5471, x)) return;
	this->QObject::childEvent(x1);
    }
    virtual void connectNotify(const char* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5473, x)) return;
	this->QObject::connectNotify(x1);
    }
    virtual void customEvent(QCustomEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5472, x)) return;
	this->QObject::customEvent(x1);
    }
    virtual void disconnectNotify(const char* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5474, x)) return;
	this->QObject::disconnectNotify(x1);
    }
    virtual bool event(QEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5410, x)) return (bool)x[0].x_bool;
	return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
	xargs x[3];
	x[1].x_voidp = (void*)x1;
	x[2].x_voidp = (void*)x2;
	if(call_method((void*)this, 5411, x)) return (bool)x[0].x_bool;
	return this->QObject::eventFilter(x1, x2);
    }
    virtual void init(QSound* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 219, x)) return;
	this->QAuServer::init(x1);
    }
    virtual void insertChild(QObject* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5433, x)) return;
	this->QObject::insertChild(x1);
    }
    virtual bool okay() {
	xargs x[1];
	call_method_abstract((void*)this, 223, x);
return (bool)x[0].x_bool;
	// ABSTRACT
    }
    virtual void play(QSound* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	call_method_abstract((void*)this, 221, x);
	return;
	// ABSTRACT
    }
    virtual void play(const QString& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 220, x)) return;
	this->QAuServer::play(x1);
    }
    virtual QVariant property(const char* x1) const {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5447, x)) {
	    QVariant *xptr = (QVariant *)x[0].x_voidp;
	    QVariant xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QObject::property(x1);
    }
    virtual void removeChild(QObject* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5434, x)) return;
	this->QObject::removeChild(x1);
    }
    virtual void setName(const char* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5416, x)) return;
	this->QObject::setName(x1);
    }
    virtual bool setProperty(const char* x1, const QVariant& x2) {
	xargs x[3];
	x[1].x_voidp = (void*)x1;
	x[2].x_voidp = (void*)&x2;
	if(call_method((void*)this, 5446, x)) return (bool)x[0].x_bool;
	return this->QObject::setProperty(x1, x2);
    }
    virtual void stop(QSound* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	call_method_abstract((void*)this, 222, x);
	return;
	// ABSTRACT
    }
    virtual void timerEvent(QTimerEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5470, x)) return;
	this->QObject::timerEvent(x1);
    }
    ~x_QAuServer() {}
};
void xcall_QAuServer(xargs *x, void *s, int xi) {
    x_QAuServer *xself = (x_QAuServer*)s;
    switch(xi) {
	case 0: x_QAuServer::x_0(x);	break;
	case 1: xself->x_1(x);	break;
	case 2: xself->x_2(x);	break;
	case 3: xself->x_3(x);	break;
	case 4: xself->x_4(x);	break;
	case 5: xself->x_5(x);	break;
	case 6: xself->x_6(x);	break;
	case 7: xself->x_7(x);	break;
	case 8: xself->x_8(x);	break;
	case 9: delete (QAuServer*)xself;	break;
    }
}
