//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke.h>
#include <qt_smoke.h>
#include <qobjectlist.h>

class x_QObjectList : public QObjectList {
public:
    static void x_0(Smoke::Stack x) {
	// QObjectList()
	x_QObjectList* xret = new x_QObjectList();
	x[0].s_class = (void*)xret;
    }
    x_QObjectList() : QObjectList() {
    }
    static void x_1(Smoke::Stack x) {
	// QObjectList(const QObjectList&)
	x_QObjectList* xret = new x_QObjectList(*(const QObjectList *)x[1].s_class);
	x[0].s_class = (void*)xret;
    }
    x_QObjectList(const QObjectList& x1) : QObjectList(x1) {
    }
    void x_2(Smoke::Stack x) {
	// operator=(const QObjectList&)
	QObjectList& xret = this->QObjectList::operator=(*(const QObjectList *)x[1].s_class);
	x[0].s_class = (void*)&xret;
    }
    ~x_QObjectList() {}
};
void xcall_QObjectList(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QObjectList *xself = (x_QObjectList*)obj;
    switch(xi) {
	case 0: x_QObjectList::x_0(args);	break;
	case 1: x_QObjectList::x_1(args);	break;
	case 2: xself->x_2(args);	break;
	case 3: delete (QObjectList*)xself;	break;
    }
}
