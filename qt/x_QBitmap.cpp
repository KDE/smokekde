//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qimage.h>
#include <qwmatrix.h>
#include <qstring.h>
#include <qpixmap.h>
#include <qbitmap.h>
#include <qsize.h>

class x_QBitmap : public QBitmap {
public:
    static void x_0(xargs *x) {
	// QBitmap()
	x_QBitmap* xret = new x_QBitmap();
	x[0].x_voidp = (void*)xret;
    }
    x_QBitmap() : QBitmap() {
    }
    static void x_1(xargs *x) {
	// QBitmap(int, int, bool, QPixmap::Optimization)
	x_QBitmap* xret = new x_QBitmap((int)x[1].x_int,(int)x[2].x_int,(bool)x[3].x_bool,(QPixmap::Optimization)x[4].x_long);
	x[0].x_voidp = (void*)xret;
    }
    x_QBitmap(int x1, int x2, bool x3, QPixmap::Optimization x4) : QBitmap(x1, x2, x3, x4) {
    }
    static void x_2(xargs *x) {
	// QBitmap(int, int, bool)
	x_QBitmap* xret = new x_QBitmap((int)x[1].x_int,(int)x[2].x_int,(bool)x[3].x_bool);
	x[0].x_voidp = (void*)xret;
    }
    x_QBitmap(int x1, int x2, bool x3) : QBitmap(x1, x2, x3) {
    }
    static void x_3(xargs *x) {
	// QBitmap(int, int)
	x_QBitmap* xret = new x_QBitmap((int)x[1].x_int,(int)x[2].x_int);
	x[0].x_voidp = (void*)xret;
    }
    x_QBitmap(int x1, int x2) : QBitmap(x1, x2) {
    }
    static void x_4(xargs *x) {
	// QBitmap(const QSize&, bool, QPixmap::Optimization)
	x_QBitmap* xret = new x_QBitmap(*(const QSize *)x[1].x_voidp,(bool)x[2].x_bool,(QPixmap::Optimization)x[3].x_long);
	x[0].x_voidp = (void*)xret;
    }
    x_QBitmap(const QSize& x1, bool x2, QPixmap::Optimization x3) : QBitmap(x1, x2, x3) {
    }
    static void x_5(xargs *x) {
	// QBitmap(const QSize&, bool)
	x_QBitmap* xret = new x_QBitmap(*(const QSize *)x[1].x_voidp,(bool)x[2].x_bool);
	x[0].x_voidp = (void*)xret;
    }
    x_QBitmap(const QSize& x1, bool x2) : QBitmap(x1, x2) {
    }
    static void x_6(xargs *x) {
	// QBitmap(const QSize&)
	x_QBitmap* xret = new x_QBitmap(*(const QSize *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QBitmap(const QSize& x1) : QBitmap(x1) {
    }
    static void x_7(xargs *x) {
	// QBitmap(int, int, const uchar*, bool)
	x_QBitmap* xret = new x_QBitmap((int)x[1].x_int,(int)x[2].x_int,(const uchar*)x[3].x_voidp,(bool)x[4].x_bool);
	x[0].x_voidp = (void*)xret;
    }
    x_QBitmap(int x1, int x2, const uchar* x3, bool x4) : QBitmap(x1, x2, x3, x4) {
    }
    static void x_8(xargs *x) {
	// QBitmap(int, int, const uchar*)
	x_QBitmap* xret = new x_QBitmap((int)x[1].x_int,(int)x[2].x_int,(const uchar*)x[3].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QBitmap(int x1, int x2, const uchar* x3) : QBitmap(x1, x2, x3) {
    }
    static void x_9(xargs *x) {
	// QBitmap(const QSize&, const uchar*, bool)
	x_QBitmap* xret = new x_QBitmap(*(const QSize *)x[1].x_voidp,(const uchar*)x[2].x_voidp,(bool)x[3].x_bool);
	x[0].x_voidp = (void*)xret;
    }
    x_QBitmap(const QSize& x1, const uchar* x2, bool x3) : QBitmap(x1, x2, x3) {
    }
    static void x_10(xargs *x) {
	// QBitmap(const QSize&, const uchar*)
	x_QBitmap* xret = new x_QBitmap(*(const QSize *)x[1].x_voidp,(const uchar*)x[2].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QBitmap(const QSize& x1, const uchar* x2) : QBitmap(x1, x2) {
    }
    static void x_11(xargs *x) {
	// QBitmap(const QBitmap&)
	x_QBitmap* xret = new x_QBitmap(*(const QBitmap *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QBitmap(const QBitmap& x1) : QBitmap(x1) {
    }
    static void x_12(xargs *x) {
	// QBitmap(const QString&, const char*)
	x_QBitmap* xret = new x_QBitmap(*(const QString *)x[1].x_voidp,(const char*)x[2].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QBitmap(const QString& x1, const char* x2) : QBitmap(x1, x2) {
    }
    static void x_13(xargs *x) {
	// QBitmap(const QString&)
	x_QBitmap* xret = new x_QBitmap(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QBitmap(const QString& x1) : QBitmap(x1) {
    }
    void x_14(xargs *x) {
	// operator=(const QBitmap&)
	QBitmap& xret = this->QBitmap::operator=(*(const QBitmap *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_15(xargs *x) {
	// operator=(const QPixmap&)
	QBitmap& xret = this->QBitmap::operator=(*(const QPixmap *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_16(xargs *x) {
	// operator=(const QImage&)
	QBitmap& xret = this->QBitmap::operator=(*(const QImage *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_17(xargs *x) const {
	// xForm(const QWMatrix&)
	QBitmap xret = this->QBitmap::xForm(*(const QWMatrix *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QBitmap(xret);
    }
    virtual bool cmd(int x1, QPainter* x2, QPDevCmdParam* x3) {
	xargs x[4];
	x[1].x_int = (int)x1;
	x[2].x_voidp = (void*)x2;
	x[3].x_voidp = (void*)x3;
	if(call_method((void*)this, 5558, x)) return (bool)x[0].x_bool;
	return this->QPaintDevice::cmd(x1, x2, x3);
    }
    virtual void detach() {
	xargs x[1];
	if(call_method((void*)this, 5926, x)) return;
	this->QPixmap::detach();
    }
    virtual int fontInf(QFont* x1, int x2) const {
	xargs x[3];
	x[1].x_voidp = (void*)x1;
	x[2].x_int = (int)x2;
	if(call_method((void*)this, 5563, x)) return (int)x[0].x_int;
	return this->QPaintDevice::fontInf(x1, x2);
    }
    virtual int fontMet(QFont* x1, int x2, const char* x3, int x4) const {
	xargs x[5];
	x[1].x_voidp = (void*)x1;
	x[2].x_int = (int)x2;
	x[3].x_voidp = (void*)x3;
	x[4].x_int = (int)x4;
	if(call_method((void*)this, 5560, x)) return (int)x[0].x_int;
	return this->QPaintDevice::fontMet(x1, x2, x3, x4);
    }
    virtual int metric(int x1) const {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 5944, x)) return (int)x[0].x_int;
	return this->QPixmap::metric(x1);
    }
    virtual int resolution() const {
	xargs x[1];
	if(call_method((void*)this, 5556, x)) return (int)x[0].x_int;
	return this->QPaintDevice::resolution();
    }
    virtual void setResolution(int x1) {
	xargs x[2];
	x[1].x_int = (int)x1;
	if(call_method((void*)this, 5555, x)) return;
	this->QPaintDevice::setResolution(x1);
    }
    ~x_QBitmap() {}
};
void xcall_QBitmap(xargs *x, void *s, int xi) {
    x_QBitmap *xself = (x_QBitmap*)s;
    switch(xi) {
	case 0: x_QBitmap::x_0(x);	break;
	case 1: x_QBitmap::x_1(x);	break;
	case 2: x_QBitmap::x_2(x);	break;
	case 3: x_QBitmap::x_3(x);	break;
	case 4: x_QBitmap::x_4(x);	break;
	case 5: x_QBitmap::x_5(x);	break;
	case 6: x_QBitmap::x_6(x);	break;
	case 7: x_QBitmap::x_7(x);	break;
	case 8: x_QBitmap::x_8(x);	break;
	case 9: x_QBitmap::x_9(x);	break;
	case 10: x_QBitmap::x_10(x);	break;
	case 11: x_QBitmap::x_11(x);	break;
	case 12: x_QBitmap::x_12(x);	break;
	case 13: x_QBitmap::x_13(x);	break;
	case 14: xself->x_14(x);	break;
	case 15: xself->x_15(x);	break;
	case 16: xself->x_16(x);	break;
	case 17: xself->x_17(x);	break;
    }
}
