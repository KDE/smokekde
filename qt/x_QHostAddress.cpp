//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qglobal.h>
#include <qstring.h>
#include <qhostaddress.h>

class x_QHostAddress : public QHostAddress {
public:
    static void x_0(xargs *x) {
	// QHostAddress()
	x_QHostAddress* xret = new x_QHostAddress();
	x[0].x_voidp = (void*)xret;
    }
    x_QHostAddress() : QHostAddress() {
    }
    static void x_1(xargs *x) {
	// QHostAddress(Q_UINT32)
	x_QHostAddress* xret = new x_QHostAddress(*(Q_UINT32 *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QHostAddress(Q_UINT32 x1) : QHostAddress(x1) {
    }
    static void x_2(xargs *x) {
	// QHostAddress(Q_UINT8*)
	x_QHostAddress* xret = new x_QHostAddress((Q_UINT8*)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QHostAddress(Q_UINT8* x1) : QHostAddress(x1) {
    }
    static void x_3(xargs *x) {
	// QHostAddress(const QHostAddress&)
	x_QHostAddress* xret = new x_QHostAddress(*(const QHostAddress *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QHostAddress(const QHostAddress& x1) : QHostAddress(x1) {
    }
    void x_4(xargs *x) {
	// operator=(const QHostAddress&)
	QHostAddress& xret = this->QHostAddress::operator=(*(const QHostAddress *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_5(xargs *x) {
	// setAddress(Q_UINT32)
	this->QHostAddress::setAddress(*(Q_UINT32 *)x[1].x_voidp);
    }
    void x_6(xargs *x) {
	// setAddress(Q_UINT8*)
	this->QHostAddress::setAddress((Q_UINT8*)x[1].x_voidp);
    }
    void x_7(xargs *x) {
	// setAddress(const QString&)
	bool xret = this->QHostAddress::setAddress(*(const QString *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_8(xargs *x) const {
	// isIp4Addr()
	bool xret = this->QHostAddress::isIp4Addr();
	x[0].x_bool = (bool)xret;
    }
    void x_9(xargs *x) const {
	// ip4Addr()
	Q_UINT32 xret = this->QHostAddress::ip4Addr();
	x[0].x_voidp = (void*)new Q_UINT32(xret);
    }
    void x_10(xargs *x) const {
	// toString()
	QString xret = this->QHostAddress::toString();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_11(xargs *x) const {
	// operator==(const QHostAddress&)
	bool xret = this->QHostAddress::operator==(*(const QHostAddress *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    ~x_QHostAddress() {}
};
void xcall_QHostAddress(xargs *x, void *s, int xi) {
    x_QHostAddress *xself = (x_QHostAddress*)s;
    switch(xi) {
	case 0: x_QHostAddress::x_0(x);	break;
	case 1: x_QHostAddress::x_1(x);	break;
	case 2: x_QHostAddress::x_2(x);	break;
	case 3: x_QHostAddress::x_3(x);	break;
	case 4: xself->x_4(x);	break;
	case 5: xself->x_5(x);	break;
	case 6: xself->x_6(x);	break;
	case 7: xself->x_7(x);	break;
	case 8: xself->x_8(x);	break;
	case 9: xself->x_9(x);	break;
	case 10: xself->x_10(x);	break;
	case 11: xself->x_11(x);	break;
	case 12: delete (QHostAddress*)xself;	break;
    }
}
