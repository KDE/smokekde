//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke.h>
#include <qt_smoke.h>
#include <qvariant.h>
#include <qstring.h>
#include <qsqlindex.h>
#include <qsqlfield.h>
#include <qstringlist.h>

class x_QSqlIndex : public QSqlIndex {
public:
    static void x_0(Smoke::Stack x) {
	// QSqlIndex(const QString&, const QString&)
	x_QSqlIndex* xret = new x_QSqlIndex(*(const QString *)x[1].s_voidp,*(const QString *)x[2].s_voidp);
	x[0].s_class = (void*)xret;
    }
    x_QSqlIndex(const QString& x1, const QString& x2) : QSqlIndex(x1, x2) {
    }
    static void x_1(Smoke::Stack x) {
	// QSqlIndex(const QString&)
	x_QSqlIndex* xret = new x_QSqlIndex(*(const QString *)x[1].s_voidp);
	x[0].s_class = (void*)xret;
    }
    x_QSqlIndex(const QString& x1) : QSqlIndex(x1) {
    }
    static void x_2(Smoke::Stack x) {
	// QSqlIndex()
	x_QSqlIndex* xret = new x_QSqlIndex();
	x[0].s_class = (void*)xret;
    }
    x_QSqlIndex() : QSqlIndex() {
    }
    static void x_3(Smoke::Stack x) {
	// QSqlIndex(const QSqlIndex&)
	x_QSqlIndex* xret = new x_QSqlIndex(*(const QSqlIndex *)x[1].s_class);
	x[0].s_class = (void*)xret;
    }
    x_QSqlIndex(const QSqlIndex& x1) : QSqlIndex(x1) {
    }
    void x_4(Smoke::Stack x) {
	// operator=(const QSqlIndex&)
	QSqlIndex& xret = this->QSqlIndex::operator=(*(const QSqlIndex *)x[1].s_class);
	x[0].s_class = (void*)&xret;
    }
    void x_5(Smoke::Stack x) {
	// setCursorName(const QString&)
	this->QSqlIndex::setCursorName(*(const QString *)x[1].s_voidp);
	(void)x; // noop (for compiler warning)
    }
    void x_6(Smoke::Stack x) const {
	// cursorName()
	QString xret = this->QSqlIndex::cursorName();
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_7(Smoke::Stack x) {
	// setName(const QString&)
	this->QSqlIndex::setName(*(const QString *)x[1].s_voidp);
	(void)x; // noop (for compiler warning)
    }
    void x_8(Smoke::Stack x) const {
	// name()
	QString xret = this->QSqlIndex::name();
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_9(Smoke::Stack x) {
	// append(const QSqlField&)
	this->QSqlIndex::append(*(const QSqlField *)x[1].s_class);
	(void)x; // noop (for compiler warning)
    }
    void x_10(Smoke::Stack x) {
	// append(const QSqlField&, bool)
	this->QSqlIndex::append(*(const QSqlField *)x[1].s_class,(bool)x[2].s_bool);
	(void)x; // noop (for compiler warning)
    }
    void x_11(Smoke::Stack x) const {
	// isDescending(int)
	bool xret = this->QSqlIndex::isDescending((int)x[1].s_int);
	x[0].s_bool = xret;
    }
    void x_12(Smoke::Stack x) {
	// setDescending(int, bool)
	this->QSqlIndex::setDescending((int)x[1].s_int,(bool)x[2].s_bool);
	(void)x; // noop (for compiler warning)
    }
    void x_13(Smoke::Stack x) const {
	// toString(const QString&, const QString&, bool)
	QString xret = this->QSqlIndex::toString(*(const QString *)x[1].s_voidp,*(const QString *)x[2].s_voidp,(bool)x[3].s_bool);
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_14(Smoke::Stack x) const {
	// toString(const QString&, const QString&)
	QString xret = this->QSqlIndex::toString(*(const QString *)x[1].s_voidp,*(const QString *)x[2].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_15(Smoke::Stack x) const {
	// toString(const QString&)
	QString xret = this->QSqlIndex::toString(*(const QString *)x[1].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_16(Smoke::Stack x) const {
	// toString()
	QString xret = this->QSqlIndex::toString();
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_17(Smoke::Stack x) const {
	// toStringList(const QString&, bool)
	QStringList xret = this->QSqlIndex::toStringList(*(const QString *)x[1].s_voidp,(bool)x[2].s_bool);
	x[0].s_voidp = (void*)new QStringList(xret);
    }
    void x_18(Smoke::Stack x) const {
	// toStringList(const QString&)
	QStringList xret = this->QSqlIndex::toStringList(*(const QString *)x[1].s_voidp);
	x[0].s_voidp = (void*)new QStringList(xret);
    }
    void x_19(Smoke::Stack x) const {
	// toStringList()
	QStringList xret = this->QSqlIndex::toStringList();
	x[0].s_voidp = (void*)new QStringList(xret);
    }
    static void x_20(Smoke::Stack x) {
	// fromStringList(const QStringList&, const QSqlCursor*)
	QSqlIndex xret = QSqlIndex::fromStringList(*(const QStringList *)x[1].s_voidp,(const QSqlCursor*)x[2].s_class);
	x[0].s_class = (void*)new QSqlIndex(xret);
    }
    virtual void append(const QSqlField& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	if(qt_Smoke->binding->callMethod(9194, (void*)this, x)) return;
	this->QSqlIndex::append(x1);
    }
    virtual void append(const QSqlField& x1, bool x2) {
	Smoke::StackItem x[3];
	x[1].s_class = (void*)&x1;
	x[2].s_bool = x2;
	if(qt_Smoke->binding->callMethod(9195, (void*)this, x)) return;
	this->QSqlIndex::append(x1, x2);
    }
    virtual void clear() {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(9278, (void*)this, x)) return;
	this->QSqlRecord::clear();
    }
    virtual void clearValues(bool x1) {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->binding->callMethod(9279, (void*)this, x)) return;
	this->QSqlRecord::clearValues(x1);
    }
    virtual void insert(int x1, const QSqlField& x2) {
	Smoke::StackItem x[3];
	x[1].s_int = x1;
	x[2].s_class = (void*)&x2;
	if(qt_Smoke->binding->callMethod(9274, (void*)this, x)) return;
	this->QSqlRecord::insert(x1, x2);
    }
    virtual void remove(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = x1;
	if(qt_Smoke->binding->callMethod(9275, (void*)this, x)) return;
	this->QSqlRecord::remove(x1);
    }
    virtual void setCursorName(const QString& x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)&x1;
	if(qt_Smoke->binding->callMethod(9190, (void*)this, x)) return;
	this->QSqlIndex::setCursorName(x1);
    }
    virtual void setDescending(int x1, bool x2) {
	Smoke::StackItem x[3];
	x[1].s_int = x1;
	x[2].s_bool = x2;
	if(qt_Smoke->binding->callMethod(9197, (void*)this, x)) return;
	this->QSqlIndex::setDescending(x1, x2);
    }
    virtual void setGenerated(const QString& x1, bool x2) {
	Smoke::StackItem x[3];
	x[1].s_voidp = (void*)&x1;
	x[2].s_bool = x2;
	if(qt_Smoke->binding->callMethod(9259, (void*)this, x)) return;
	this->QSqlRecord::setGenerated(x1, x2);
    }
    virtual void setGenerated(int x1, bool x2) {
	Smoke::StackItem x[3];
	x[1].s_int = x1;
	x[2].s_bool = x2;
	if(qt_Smoke->binding->callMethod(9260, (void*)this, x)) return;
	this->QSqlRecord::setGenerated(x1, x2);
    }
    virtual void setName(const QString& x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)&x1;
	if(qt_Smoke->binding->callMethod(9192, (void*)this, x)) return;
	this->QSqlIndex::setName(x1);
    }
    virtual void setNull(const QString& x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)&x1;
	if(qt_Smoke->binding->callMethod(9262, (void*)this, x)) return;
	this->QSqlRecord::setNull(x1);
    }
    virtual void setNull(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = x1;
	if(qt_Smoke->binding->callMethod(9261, (void*)this, x)) return;
	this->QSqlRecord::setNull(x1);
    }
    virtual void setValue(const QString& x1, const QVariant& x2) {
	Smoke::StackItem x[3];
	x[1].s_voidp = (void*)&x1;
	x[2].s_class = (void*)&x2;
	if(qt_Smoke->binding->callMethod(9256, (void*)this, x)) return;
	this->QSqlRecord::setValue(x1, x2);
    }
    virtual void setValue(int x1, const QVariant& x2) {
	Smoke::StackItem x[3];
	x[1].s_int = x1;
	x[2].s_class = (void*)&x2;
	if(qt_Smoke->binding->callMethod(9255, (void*)this, x)) return;
	this->QSqlRecord::setValue(x1, x2);
    }
    virtual QString toString(const QString& x1, const QString& x2) const {
	Smoke::StackItem x[3];
	x[1].s_voidp = (void*)&x1;
	x[2].s_voidp = (void*)&x2;
	if(qt_Smoke->binding->callMethod(9282, (void*)this, x)) {
	    QString *xptr = (QString *)x[0].s_class;
	    QString xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QSqlRecord::toString(x1, x2);
    }
    virtual QStringList toStringList(const QString& x1) const {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)&x1;
	if(qt_Smoke->binding->callMethod(9285, (void*)this, x)) {
	    QStringList *xptr = (QStringList *)x[0].s_class;
	    QStringList xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QSqlRecord::toStringList(x1);
    }
    virtual QVariant value(const QString& x1) const {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)&x1;
	if(qt_Smoke->binding->callMethod(9254, (void*)this, x)) {
	    QVariant *xptr = (QVariant *)x[0].s_class;
	    QVariant xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QSqlRecord::value(x1);
    }
    virtual QVariant value(int x1) const {
	Smoke::StackItem x[2];
	x[1].s_int = x1;
	if(qt_Smoke->binding->callMethod(9253, (void*)this, x)) {
	    QVariant *xptr = (QVariant *)x[0].s_class;
	    QVariant xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QSqlRecord::value(x1);
    }
    ~x_QSqlIndex() { qt_Smoke->binding->deleted(289, (void*)this); }
};
void xcall_QSqlIndex(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QSqlIndex *xself = (x_QSqlIndex*)obj;
    switch(xi) {
	case 0: x_QSqlIndex::x_0(args);	break;
	case 1: x_QSqlIndex::x_1(args);	break;
	case 2: x_QSqlIndex::x_2(args);	break;
	case 3: x_QSqlIndex::x_3(args);	break;
	case 4: xself->x_4(args);	break;
	case 5: xself->x_5(args);	break;
	case 6: xself->x_6(args);	break;
	case 7: xself->x_7(args);	break;
	case 8: xself->x_8(args);	break;
	case 9: xself->x_9(args);	break;
	case 10: xself->x_10(args);	break;
	case 11: xself->x_11(args);	break;
	case 12: xself->x_12(args);	break;
	case 13: xself->x_13(args);	break;
	case 14: xself->x_14(args);	break;
	case 15: xself->x_15(args);	break;
	case 16: xself->x_16(args);	break;
	case 17: xself->x_17(args);	break;
	case 18: xself->x_18(args);	break;
	case 19: xself->x_19(args);	break;
	case 20: x_QSqlIndex::x_20(args);	break;
	case 21: delete (QSqlIndex*)xself;	break;
    }
}
