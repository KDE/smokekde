//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qstring.h>
#include <qpointarray.h>
#include <qcanvas.h>

class x_QCanvasPixmapArray : public QCanvasPixmapArray {
public:
    static void x_0(xargs *x) {
	// QCanvasPixmapArray()
	x_QCanvasPixmapArray* xret = new x_QCanvasPixmapArray();
	x[0].x_voidp = (void*)xret;
    }
    x_QCanvasPixmapArray() : QCanvasPixmapArray() {
    }
    static void x_1(xargs *x) {
	// QCanvasPixmapArray(const QString&, int)
	x_QCanvasPixmapArray* xret = new x_QCanvasPixmapArray(*(const QString *)x[1].x_voidp,(int)x[2].x_int);
	x[0].x_voidp = (void*)xret;
    }
    x_QCanvasPixmapArray(const QString& x1, int x2) : QCanvasPixmapArray(x1, x2) {
    }
    static void x_2(xargs *x) {
	// QCanvasPixmapArray(const QString&)
	x_QCanvasPixmapArray* xret = new x_QCanvasPixmapArray(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QCanvasPixmapArray(const QString& x1) : QCanvasPixmapArray(x1) {
    }
    static void x_3(xargs *x) {
	// QCanvasPixmapArray(QPtrList<QPixmap>, QPtrList<QPoint>)
	x_QCanvasPixmapArray* xret = new x_QCanvasPixmapArray(*(QPtrList<QPixmap> *)x[1].x_voidp,*(QPtrList<QPoint> *)x[2].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QCanvasPixmapArray(QPtrList<QPixmap> x1, QPtrList<QPoint> x2) : QCanvasPixmapArray(x1, x2) {
    }
    static void x_4(xargs *x) {
	// QCanvasPixmapArray(QValueList<QPixmap>, QPointArray)
	x_QCanvasPixmapArray* xret = new x_QCanvasPixmapArray(*(QValueList<QPixmap> *)x[1].x_voidp,*(QPointArray *)x[2].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QCanvasPixmapArray(QValueList<QPixmap> x1, QPointArray x2) : QCanvasPixmapArray(x1, x2) {
    }
    static void x_5(xargs *x) {
	// QCanvasPixmapArray(QValueList<QPixmap>)
	x_QCanvasPixmapArray* xret = new x_QCanvasPixmapArray(*(QValueList<QPixmap> *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QCanvasPixmapArray(QValueList<QPixmap> x1) : QCanvasPixmapArray(x1) {
    }
    void x_6(xargs *x) {
	// readPixmaps(const QString&, int)
	bool xret = this->QCanvasPixmapArray::readPixmaps(*(const QString *)x[1].x_voidp,(int)x[2].x_int);
	x[0].x_bool = (bool)xret;
    }
    void x_7(xargs *x) {
	// readPixmaps(const QString&)
	bool xret = this->QCanvasPixmapArray::readPixmaps(*(const QString *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_8(xargs *x) {
	// readCollisionMasks(const QString&)
	bool xret = this->QCanvasPixmapArray::readCollisionMasks(*(const QString *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_9(xargs *x) {
	// operator!()
	bool xret = this->QCanvasPixmapArray::operator!();
	x[0].x_bool = (bool)xret;
    }
    void x_10(xargs *x) const {
	// isValid()
	bool xret = this->QCanvasPixmapArray::isValid();
	x[0].x_bool = (bool)xret;
    }
    void x_11(xargs *x) const {
	// image(int)
	QCanvasPixmap* xret = this->QCanvasPixmapArray::image((int)x[1].x_int);
	x[0].x_voidp = (void*)xret;
    }
    void x_12(xargs *x) {
	// setImage(int, QCanvasPixmap*)
	this->QCanvasPixmapArray::setImage((int)x[1].x_int,(QCanvasPixmap*)x[2].x_voidp);
    }
    void x_13(xargs *x) const {
	// count()
	uint xret = this->QCanvasPixmapArray::count();
	x[0].x_uint = (uint)xret;
    }
    ~x_QCanvasPixmapArray() {}
};
void xcall_QCanvasPixmapArray(xargs *x, void *s, int xi) {
    x_QCanvasPixmapArray *xself = (x_QCanvasPixmapArray*)s;
    switch(xi) {
	case 0: x_QCanvasPixmapArray::x_0(x);	break;
	case 1: x_QCanvasPixmapArray::x_1(x);	break;
	case 2: x_QCanvasPixmapArray::x_2(x);	break;
	case 3: x_QCanvasPixmapArray::x_3(x);	break;
	case 4: x_QCanvasPixmapArray::x_4(x);	break;
	case 5: x_QCanvasPixmapArray::x_5(x);	break;
	case 6: xself->x_6(x);	break;
	case 7: xself->x_7(x);	break;
	case 8: xself->x_8(x);	break;
	case 9: xself->x_9(x);	break;
	case 10: xself->x_10(x);	break;
	case 11: xself->x_11(x);	break;
	case 12: xself->x_12(x);	break;
	case 13: xself->x_13(x);	break;
	case 14: delete (QCanvasPixmapArray*)xself;	break;
    }
}
