//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qvariant.h>
#include <qurlinfo.h>
#include <qnetworkprotocol.h>
#include <qstring.h>
#include <qcstring.h>

class x_QNetworkProtocol : public QNetworkProtocol {
public:
    static void x_0(xargs *x) {
	x[0].x_long = (long)QNetworkProtocol::StWaiting;
    }
    static void x_1(xargs *x) {
	x[0].x_long = (long)QNetworkProtocol::StInProgress;
    }
    static void x_2(xargs *x) {
	x[0].x_long = (long)QNetworkProtocol::StDone;
    }
    static void x_3(xargs *x) {
	x[0].x_long = (long)QNetworkProtocol::StFailed;
    }
    static void x_4(xargs *x) {
	x[0].x_long = (long)QNetworkProtocol::StStopped;
    }
    static void x_5(xargs *x) {
	x[0].x_long = (long)QNetworkProtocol::OpListChildren;
    }
    static void x_6(xargs *x) {
	x[0].x_long = (long)QNetworkProtocol::OpMkDir;
    }
    static void x_7(xargs *x) {
	x[0].x_long = (long)QNetworkProtocol::OpMkdir;
    }
    static void x_8(xargs *x) {
	x[0].x_long = (long)QNetworkProtocol::OpRemove;
    }
    static void x_9(xargs *x) {
	x[0].x_long = (long)QNetworkProtocol::OpRename;
    }
    static void x_10(xargs *x) {
	x[0].x_long = (long)QNetworkProtocol::OpGet;
    }
    static void x_11(xargs *x) {
	x[0].x_long = (long)QNetworkProtocol::OpPut;
    }
    static void x_12(xargs *x) {
	x[0].x_long = (long)QNetworkProtocol::ConHostFound;
    }
    static void x_13(xargs *x) {
	x[0].x_long = (long)QNetworkProtocol::ConConnected;
    }
    static void x_14(xargs *x) {
	x[0].x_long = (long)QNetworkProtocol::ConClosed;
    }
    static void x_15(xargs *x) {
	x[0].x_long = (long)QNetworkProtocol::NoError;
    }
    static void x_16(xargs *x) {
	x[0].x_long = (long)QNetworkProtocol::ErrValid;
    }
    static void x_17(xargs *x) {
	x[0].x_long = (long)QNetworkProtocol::ErrUnknownProtocol;
    }
    static void x_18(xargs *x) {
	x[0].x_long = (long)QNetworkProtocol::ErrUnsupported;
    }
    static void x_19(xargs *x) {
	x[0].x_long = (long)QNetworkProtocol::ErrParse;
    }
    static void x_20(xargs *x) {
	x[0].x_long = (long)QNetworkProtocol::ErrLoginIncorrect;
    }
    static void x_21(xargs *x) {
	x[0].x_long = (long)QNetworkProtocol::ErrHostNotFound;
    }
    static void x_22(xargs *x) {
	x[0].x_long = (long)QNetworkProtocol::ErrListChildren;
    }
    static void x_23(xargs *x) {
	x[0].x_long = (long)QNetworkProtocol::ErrListChlidren;
    }
    static void x_24(xargs *x) {
	x[0].x_long = (long)QNetworkProtocol::ErrMkDir;
    }
    static void x_25(xargs *x) {
	x[0].x_long = (long)QNetworkProtocol::ErrMkdir;
    }
    static void x_26(xargs *x) {
	x[0].x_long = (long)QNetworkProtocol::ErrRemove;
    }
    static void x_27(xargs *x) {
	x[0].x_long = (long)QNetworkProtocol::ErrRename;
    }
    static void x_28(xargs *x) {
	x[0].x_long = (long)QNetworkProtocol::ErrGet;
    }
    static void x_29(xargs *x) {
	x[0].x_long = (long)QNetworkProtocol::ErrPut;
    }
    static void x_30(xargs *x) {
	x[0].x_long = (long)QNetworkProtocol::ErrFileNotExisting;
    }
    static void x_31(xargs *x) {
	x[0].x_long = (long)QNetworkProtocol::ErrPermissionDenied;
    }
    static void x_32(xargs *x) {
	// QNetworkProtocol()
	x_QNetworkProtocol* xret = new x_QNetworkProtocol();
	x[0].x_voidp = (void*)xret;
    }
    x_QNetworkProtocol() : QNetworkProtocol() {
    }
    void x_33(xargs *x) {
	// setUrl(QUrlOperator*)
	this->QNetworkProtocol::setUrl((QUrlOperator*)x[1].x_voidp);
    }
    void x_34(xargs *x) {
	// setAutoDelete(bool, int)
	this->QNetworkProtocol::setAutoDelete((bool)x[1].x_bool,(int)x[2].x_int);
    }
    void x_35(xargs *x) {
	// setAutoDelete(bool)
	this->QNetworkProtocol::setAutoDelete((bool)x[1].x_bool);
    }
    void x_36(xargs *x) const {
	// autoDelete()
	bool xret = this->QNetworkProtocol::autoDelete();
	x[0].x_bool = (bool)xret;
    }
    void x_37(xargs *x) const {
	// supportedOperations()
	int xret = this->QNetworkProtocol::supportedOperations();
	x[0].x_int = (int)xret;
    }
    void x_38(xargs *x) {
	// addOperation(QNetworkOperation*)
	this->QNetworkProtocol::addOperation((QNetworkOperation*)x[1].x_voidp);
    }
    void x_39(xargs *x) const {
	// url()
	QUrlOperator* xret = this->QNetworkProtocol::url();
	x[0].x_voidp = (void*)xret;
    }
    void x_40(xargs *x) const {
	// operationInProgress()
	QNetworkOperation* xret = this->QNetworkProtocol::operationInProgress();
	x[0].x_voidp = (void*)xret;
    }
    void x_41(xargs *x) {
	// clearOperationQueue()
	this->QNetworkProtocol::clearOperationQueue();
    }
    void x_42(xargs *x) {
	// stop()
	this->QNetworkProtocol::stop();
    }
    void x_43(xargs *x) {
	// data(const QByteArray&, QNetworkOperation*)
	this->QNetworkProtocol::data(*(const QByteArray *)x[1].x_voidp,(QNetworkOperation*)x[2].x_voidp);
    }
    void x_44(xargs *x) {
	// connectionStateChanged(int, const QString&)
	this->QNetworkProtocol::connectionStateChanged((int)x[1].x_int,*(const QString *)x[2].x_voidp);
    }
    void x_45(xargs *x) {
	// finished(QNetworkOperation*)
	this->QNetworkProtocol::finished((QNetworkOperation*)x[1].x_voidp);
    }
    void x_46(xargs *x) {
	// start(QNetworkOperation*)
	this->QNetworkProtocol::start((QNetworkOperation*)x[1].x_voidp);
    }
    void x_47(xargs *x) {
	// newChildren(const QValueList<QUrlInfo>&, QNetworkOperation*)
	this->QNetworkProtocol::newChildren(*(const QValueList<QUrlInfo> *)x[1].x_voidp,(QNetworkOperation*)x[2].x_voidp);
    }
    void x_48(xargs *x) {
	// newChild(const QUrlInfo&, QNetworkOperation*)
	this->QNetworkProtocol::newChild(*(const QUrlInfo *)x[1].x_voidp,(QNetworkOperation*)x[2].x_voidp);
    }
    void x_49(xargs *x) {
	// createdDirectory(const QUrlInfo&, QNetworkOperation*)
	this->QNetworkProtocol::createdDirectory(*(const QUrlInfo *)x[1].x_voidp,(QNetworkOperation*)x[2].x_voidp);
    }
    void x_50(xargs *x) {
	// removed(QNetworkOperation*)
	this->QNetworkProtocol::removed((QNetworkOperation*)x[1].x_voidp);
    }
    void x_51(xargs *x) {
	// itemChanged(QNetworkOperation*)
	this->QNetworkProtocol::itemChanged((QNetworkOperation*)x[1].x_voidp);
    }
    void x_52(xargs *x) {
	// dataTransferProgress(int, int, QNetworkOperation*)
	this->QNetworkProtocol::dataTransferProgress((int)x[1].x_int,(int)x[2].x_int,(QNetworkOperation*)x[3].x_voidp);
    }
    static void x_53(xargs *x) {
	// registerNetworkProtocol(const QString&, QNetworkProtocolFactoryBase*)
	QNetworkProtocol::registerNetworkProtocol(*(const QString *)x[1].x_voidp,(QNetworkProtocolFactoryBase*)x[2].x_voidp);
    }
    static void x_54(xargs *x) {
	// getNetworkProtocol(const QString&)
	QNetworkProtocol* xret = QNetworkProtocol::getNetworkProtocol(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    static void x_55(xargs *x) {
	// hasOnlyLocalFileSystem()
	bool xret = QNetworkProtocol::hasOnlyLocalFileSystem();
	x[0].x_bool = (bool)xret;
    }
    void x_56(xargs *x) {
	// processOperation(QNetworkOperation*)
	this->QNetworkProtocol::processOperation((QNetworkOperation*)x[1].x_voidp);
    }
    void x_57(xargs *x) {
	// operationListChildren(QNetworkOperation*)
	this->QNetworkProtocol::operationListChildren((QNetworkOperation*)x[1].x_voidp);
    }
    void x_58(xargs *x) {
	// operationMkDir(QNetworkOperation*)
	this->QNetworkProtocol::operationMkDir((QNetworkOperation*)x[1].x_voidp);
    }
    void x_59(xargs *x) {
	// operationRemove(QNetworkOperation*)
	this->QNetworkProtocol::operationRemove((QNetworkOperation*)x[1].x_voidp);
    }
    void x_60(xargs *x) {
	// operationRename(QNetworkOperation*)
	this->QNetworkProtocol::operationRename((QNetworkOperation*)x[1].x_voidp);
    }
    void x_61(xargs *x) {
	// operationGet(QNetworkOperation*)
	this->QNetworkProtocol::operationGet((QNetworkOperation*)x[1].x_voidp);
    }
    void x_62(xargs *x) {
	// operationPut(QNetworkOperation*)
	this->QNetworkProtocol::operationPut((QNetworkOperation*)x[1].x_voidp);
    }
    void x_63(xargs *x) {
	// operationPutChunk(QNetworkOperation*)
	this->QNetworkProtocol::operationPutChunk((QNetworkOperation*)x[1].x_voidp);
    }
    void x_64(xargs *x) {
	// checkConnection(QNetworkOperation*)
	bool xret = this->QNetworkProtocol::checkConnection((QNetworkOperation*)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    virtual void addOperation(QNetworkOperation* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5374, x)) return;
	this->QNetworkProtocol::addOperation(x1);
    }
    virtual bool checkConnectArgs(const char* x1, const QObject* x2, const char* x3) {
	xargs x[4];
	x[1].x_voidp = (void*)x1;
	x[2].x_voidp = (void*)x2;
	x[3].x_voidp = (void*)x3;
	if(call_method((void*)this, 5475, x)) return (bool)x[0].x_bool;
	return this->QObject::checkConnectArgs(x1, x2, x3);
    }
    virtual bool checkConnection(QNetworkOperation* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5400, x)) return (bool)x[0].x_bool;
	return this->QNetworkProtocol::checkConnection(x1);
    }
    virtual void childEvent(QChildEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5471, x)) return;
	this->QObject::childEvent(x1);
    }
    virtual void clearOperationQueue() {
	xargs x[1];
	if(call_method((void*)this, 5377, x)) return;
	this->QNetworkProtocol::clearOperationQueue();
    }
    virtual void connectNotify(const char* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5473, x)) return;
	this->QObject::connectNotify(x1);
    }
    virtual void customEvent(QCustomEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5472, x)) return;
	this->QObject::customEvent(x1);
    }
    virtual void disconnectNotify(const char* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5474, x)) return;
	this->QObject::disconnectNotify(x1);
    }
    virtual bool event(QEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5410, x)) return (bool)x[0].x_bool;
	return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
	xargs x[3];
	x[1].x_voidp = (void*)x1;
	x[2].x_voidp = (void*)x2;
	if(call_method((void*)this, 5411, x)) return (bool)x[0].x_bool;
	return this->QObject::eventFilter(x1, x2);
    }
    virtual void insertChild(QObject* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5433, x)) return;
	this->QObject::insertChild(x1);
    }
    virtual void operationGet(QNetworkOperation* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5397, x)) return;
	this->QNetworkProtocol::operationGet(x1);
    }
    virtual void operationListChildren(QNetworkOperation* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5393, x)) return;
	this->QNetworkProtocol::operationListChildren(x1);
    }
    virtual void operationMkDir(QNetworkOperation* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5394, x)) return;
	this->QNetworkProtocol::operationMkDir(x1);
    }
    virtual void operationPut(QNetworkOperation* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5398, x)) return;
	this->QNetworkProtocol::operationPut(x1);
    }
    virtual void operationPutChunk(QNetworkOperation* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5399, x)) return;
	this->QNetworkProtocol::operationPutChunk(x1);
    }
    virtual void operationRemove(QNetworkOperation* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5395, x)) return;
	this->QNetworkProtocol::operationRemove(x1);
    }
    virtual void operationRename(QNetworkOperation* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5396, x)) return;
	this->QNetworkProtocol::operationRename(x1);
    }
    virtual void processOperation(QNetworkOperation* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5392, x)) return;
	this->QNetworkProtocol::processOperation(x1);
    }
    virtual QVariant property(const char* x1) const {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5447, x)) {
	    QVariant *xptr = (QVariant *)x[0].x_voidp;
	    QVariant xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QObject::property(x1);
    }
    virtual void removeChild(QObject* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5434, x)) return;
	this->QObject::removeChild(x1);
    }
    virtual void setAutoDelete(bool x1, int x2) {
	xargs x[3];
	x[1].x_bool = (bool)x1;
	x[2].x_int = (int)x2;
	if(call_method((void*)this, 5370, x)) return;
	this->QNetworkProtocol::setAutoDelete(x1, x2);
    }
    virtual void setName(const char* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5416, x)) return;
	this->QObject::setName(x1);
    }
    virtual bool setProperty(const char* x1, const QVariant& x2) {
	xargs x[3];
	x[1].x_voidp = (void*)x1;
	x[2].x_voidp = (void*)&x2;
	if(call_method((void*)this, 5446, x)) return (bool)x[0].x_bool;
	return this->QObject::setProperty(x1, x2);
    }
    virtual void setUrl(QUrlOperator* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5369, x)) return;
	this->QNetworkProtocol::setUrl(x1);
    }
    virtual void stop() {
	xargs x[1];
	if(call_method((void*)this, 5378, x)) return;
	this->QNetworkProtocol::stop();
    }
    virtual int supportedOperations() const {
	xargs x[1];
	if(call_method((void*)this, 5373, x)) return (int)x[0].x_int;
	return this->QNetworkProtocol::supportedOperations();
    }
    virtual void timerEvent(QTimerEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5470, x)) return;
	this->QObject::timerEvent(x1);
    }
    ~x_QNetworkProtocol() {}
};
void xcall_QNetworkProtocol(xargs *x, void *s, int xi) {
    x_QNetworkProtocol *xself = (x_QNetworkProtocol*)s;
    switch(xi) {
	case 0: x_QNetworkProtocol::x_0(x);	break;
	case 1: x_QNetworkProtocol::x_1(x);	break;
	case 2: x_QNetworkProtocol::x_2(x);	break;
	case 3: x_QNetworkProtocol::x_3(x);	break;
	case 4: x_QNetworkProtocol::x_4(x);	break;
	case 5: x_QNetworkProtocol::x_5(x);	break;
	case 6: x_QNetworkProtocol::x_6(x);	break;
	case 7: x_QNetworkProtocol::x_7(x);	break;
	case 8: x_QNetworkProtocol::x_8(x);	break;
	case 9: x_QNetworkProtocol::x_9(x);	break;
	case 10: x_QNetworkProtocol::x_10(x);	break;
	case 11: x_QNetworkProtocol::x_11(x);	break;
	case 12: x_QNetworkProtocol::x_12(x);	break;
	case 13: x_QNetworkProtocol::x_13(x);	break;
	case 14: x_QNetworkProtocol::x_14(x);	break;
	case 15: x_QNetworkProtocol::x_15(x);	break;
	case 16: x_QNetworkProtocol::x_16(x);	break;
	case 17: x_QNetworkProtocol::x_17(x);	break;
	case 18: x_QNetworkProtocol::x_18(x);	break;
	case 19: x_QNetworkProtocol::x_19(x);	break;
	case 20: x_QNetworkProtocol::x_20(x);	break;
	case 21: x_QNetworkProtocol::x_21(x);	break;
	case 22: x_QNetworkProtocol::x_22(x);	break;
	case 23: x_QNetworkProtocol::x_23(x);	break;
	case 24: x_QNetworkProtocol::x_24(x);	break;
	case 25: x_QNetworkProtocol::x_25(x);	break;
	case 26: x_QNetworkProtocol::x_26(x);	break;
	case 27: x_QNetworkProtocol::x_27(x);	break;
	case 28: x_QNetworkProtocol::x_28(x);	break;
	case 29: x_QNetworkProtocol::x_29(x);	break;
	case 30: x_QNetworkProtocol::x_30(x);	break;
	case 31: x_QNetworkProtocol::x_31(x);	break;
	case 32: x_QNetworkProtocol::x_32(x);	break;
	case 33: xself->x_33(x);	break;
	case 34: xself->x_34(x);	break;
	case 35: xself->x_35(x);	break;
	case 36: xself->x_36(x);	break;
	case 37: xself->x_37(x);	break;
	case 38: xself->x_38(x);	break;
	case 39: xself->x_39(x);	break;
	case 40: xself->x_40(x);	break;
	case 41: xself->x_41(x);	break;
	case 42: xself->x_42(x);	break;
	case 43: xself->x_43(x);	break;
	case 44: xself->x_44(x);	break;
	case 45: xself->x_45(x);	break;
	case 46: xself->x_46(x);	break;
	case 47: xself->x_47(x);	break;
	case 48: xself->x_48(x);	break;
	case 49: xself->x_49(x);	break;
	case 50: xself->x_50(x);	break;
	case 51: xself->x_51(x);	break;
	case 52: xself->x_52(x);	break;
	case 53: x_QNetworkProtocol::x_53(x);	break;
	case 54: x_QNetworkProtocol::x_54(x);	break;
	case 55: x_QNetworkProtocol::x_55(x);	break;
	case 56: xself->x_56(x);	break;
	case 57: xself->x_57(x);	break;
	case 58: xself->x_58(x);	break;
	case 59: xself->x_59(x);	break;
	case 60: xself->x_60(x);	break;
	case 61: xself->x_61(x);	break;
	case 62: xself->x_62(x);	break;
	case 63: xself->x_63(x);	break;
	case 64: xself->x_64(x);	break;
	case 65: delete (QNetworkProtocol*)xself;	break;
    }
}
