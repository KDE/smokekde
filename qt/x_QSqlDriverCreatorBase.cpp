//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke.h>
#include <qt_smoke.h>
#include <qsqldatabase.h>

class x_QSqlDriverCreatorBase : public QSqlDriverCreatorBase {
public:
    static void x_0(Smoke::Stack x) {
	// QSqlDriverCreatorBase()
	x_QSqlDriverCreatorBase* xret = new x_QSqlDriverCreatorBase();
	x[0].s_class = (void*)xret;
    }
    x_QSqlDriverCreatorBase() : QSqlDriverCreatorBase() {
    }
    static void x_1(Smoke::Stack x) {
	// QSqlDriverCreatorBase(const QSqlDriverCreatorBase&)
	x_QSqlDriverCreatorBase* xret = new x_QSqlDriverCreatorBase(*(const QSqlDriverCreatorBase *)x[1].s_class);
	x[0].s_class = (void*)xret;
    }
    x_QSqlDriverCreatorBase(const QSqlDriverCreatorBase& x1) : QSqlDriverCreatorBase(x1) {
    }
    virtual QSqlDriver* createObject() {
	Smoke::StackItem x[1];
	qt_Smoke->binding->callMethod(9052, (void*)this, x, true /*pure virtual*/);
	return (QSqlDriver*)x[0].s_class;
	// ABSTRACT
    }
    ~x_QSqlDriverCreatorBase() { qt_Smoke->binding->deleted(281, (void*)this); }
};
void xcall_QSqlDriverCreatorBase(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QSqlDriverCreatorBase *xself = (x_QSqlDriverCreatorBase*)obj;
    switch(xi) {
	case 0: x_QSqlDriverCreatorBase::x_0(args);	break;
	case 1: x_QSqlDriverCreatorBase::x_1(args);	break;
	case 2: delete (QSqlDriverCreatorBase*)xself;	break;
    }
}
