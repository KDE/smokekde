//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke.h>
#include <qstring.h>
#include <qdom.h>

class x_QDomAttr : public QDomAttr {
public:
    static void x_0(Smoke::Stack x) {
	// QDomAttr()
	x_QDomAttr* xret = new x_QDomAttr();
	x[0].s_voidp = (void*)xret;
    }
    x_QDomAttr() : QDomAttr() {
    }
    static void x_1(Smoke::Stack x) {
	// QDomAttr(const QDomAttr&)
	x_QDomAttr* xret = new x_QDomAttr(*(const QDomAttr *)x[1].s_voidp);
	x[0].s_voidp = (void*)xret;
    }
    x_QDomAttr(const QDomAttr& x1) : QDomAttr(x1) {
    }
    void x_2(Smoke::Stack x) {
	// operator=(const QDomAttr&)
	QDomAttr& xret = this->QDomAttr::operator=(*(const QDomAttr *)x[1].s_voidp);
	x[0].s_voidp = (void*)&xret;
    }
    void x_3(Smoke::Stack x) const {
	// name()
	QString xret = this->QDomAttr::name();
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_4(Smoke::Stack x) const {
	// specified()
	bool xret = this->QDomAttr::specified();
	x[0].s_bool = (bool)xret;
    }
    void x_5(Smoke::Stack x) const {
	// ownerElement()
	QDomElement xret = this->QDomAttr::ownerElement();
	x[0].s_voidp = (void*)new QDomElement(xret);
    }
    void x_6(Smoke::Stack x) const {
	// value()
	QString xret = this->QDomAttr::value();
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_7(Smoke::Stack x) {
	// setValue(const QString&)
	this->QDomAttr::setValue(*(const QString *)x[1].s_voidp);
    }
    void x_8(Smoke::Stack x) const {
	// nodeType()
	QDomNode::NodeType xret = this->QDomAttr::nodeType();
	x[0].s_voidp = (void*)new QDomNode::NodeType(xret);
    }
    void x_9(Smoke::Stack x) const {
	// isAttr()
	bool xret = this->QDomAttr::isAttr();
	x[0].s_bool = (bool)xret;
    }
    virtual QDomNode appendChild(const QDomNode& x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)&x1;
	if(call_method((void*)this, 2187, x)) {
	    QDomNode *xptr = (QDomNode *)x[0].s_voidp;
	    QDomNode xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::appendChild(x1);
    }
    virtual QDomNamedNodeMap attributes() const {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 2201, x)) {
	    QDomNamedNodeMap *xptr = (QDomNamedNodeMap *)x[0].s_voidp;
	    QDomNamedNodeMap xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::attributes();
    }
    virtual QDomNodeList childNodes() const {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 2196, x)) {
	    QDomNodeList *xptr = (QDomNodeList *)x[0].s_voidp;
	    QDomNodeList xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::childNodes();
    }
    virtual QDomNode cloneNode(bool x1) const {
	Smoke::StackItem x[2];
	x[1].s_bool = (bool)x1;
	if(call_method((void*)this, 2189, x)) {
	    QDomNode *xptr = (QDomNode *)x[0].s_voidp;
	    QDomNode xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::cloneNode(x1);
    }
    virtual QDomNode firstChild() const {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 2197, x)) {
	    QDomNode *xptr = (QDomNode *)x[0].s_voidp;
	    QDomNode xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::firstChild();
    }
    virtual bool hasAttributes() const {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 2205, x)) return (bool)x[0].s_bool;
	return this->QDomNode::hasAttributes();
    }
    virtual bool hasChildNodes() const {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 2188, x)) return (bool)x[0].s_bool;
	return this->QDomNode::hasChildNodes();
    }
    virtual QDomNode insertAfter(const QDomNode& x1, const QDomNode& x2) {
	Smoke::StackItem x[3];
	x[1].s_voidp = (void*)&x1;
	x[2].s_voidp = (void*)&x2;
	if(call_method((void*)this, 2184, x)) {
	    QDomNode *xptr = (QDomNode *)x[0].s_voidp;
	    QDomNode xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::insertAfter(x1, x2);
    }
    virtual QDomNode insertBefore(const QDomNode& x1, const QDomNode& x2) {
	Smoke::StackItem x[3];
	x[1].s_voidp = (void*)&x1;
	x[2].s_voidp = (void*)&x2;
	if(call_method((void*)this, 2183, x)) {
	    QDomNode *xptr = (QDomNode *)x[0].s_voidp;
	    QDomNode xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::insertBefore(x1, x2);
    }
    virtual bool isAttr() const {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 1986, x)) return (bool)x[0].s_bool;
	return this->QDomAttr::isAttr();
    }
    virtual bool isCDATASection() const {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 2211, x)) return (bool)x[0].s_bool;
	return this->QDomNode::isCDATASection();
    }
    virtual bool isCharacterData() const {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 2221, x)) return (bool)x[0].s_bool;
	return this->QDomNode::isCharacterData();
    }
    virtual bool isComment() const {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 2222, x)) return (bool)x[0].s_bool;
	return this->QDomNode::isComment();
    }
    virtual bool isDocument() const {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 2213, x)) return (bool)x[0].s_bool;
	return this->QDomNode::isDocument();
    }
    virtual bool isDocumentFragment() const {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 2212, x)) return (bool)x[0].s_bool;
	return this->QDomNode::isDocumentFragment();
    }
    virtual bool isDocumentType() const {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 2214, x)) return (bool)x[0].s_bool;
	return this->QDomNode::isDocumentType();
    }
    virtual bool isElement() const {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 2215, x)) return (bool)x[0].s_bool;
	return this->QDomNode::isElement();
    }
    virtual bool isEntity() const {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 2218, x)) return (bool)x[0].s_bool;
	return this->QDomNode::isEntity();
    }
    virtual bool isEntityReference() const {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 2216, x)) return (bool)x[0].s_bool;
	return this->QDomNode::isEntityReference();
    }
    virtual bool isNotation() const {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 2219, x)) return (bool)x[0].s_bool;
	return this->QDomNode::isNotation();
    }
    virtual bool isProcessingInstruction() const {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 2220, x)) return (bool)x[0].s_bool;
	return this->QDomNode::isProcessingInstruction();
    }
    virtual bool isSupported(const QString& x1, const QString& x2) const {
	Smoke::StackItem x[3];
	x[1].s_voidp = (void*)&x1;
	x[2].s_voidp = (void*)&x2;
	if(call_method((void*)this, 2192, x)) return (bool)x[0].s_bool;
	return this->QDomNode::isSupported(x1, x2);
    }
    virtual bool isText() const {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 2217, x)) return (bool)x[0].s_bool;
	return this->QDomNode::isText();
    }
    virtual QDomNode lastChild() const {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 2198, x)) {
	    QDomNode *xptr = (QDomNode *)x[0].s_voidp;
	    QDomNode xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::lastChild();
    }
    virtual QString localName() const {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 2204, x)) {
	    QString *xptr = (QString *)x[0].s_voidp;
	    QString xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::localName();
    }
    virtual QString name() const {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 1980, x)) {
	    QString *xptr = (QString *)x[0].s_voidp;
	    QString xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomAttr::name();
    }
    virtual QString namespaceURI() const {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 2203, x)) {
	    QString *xptr = (QString *)x[0].s_voidp;
	    QString xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::namespaceURI();
    }
    virtual QDomNode nextSibling() const {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 2200, x)) {
	    QDomNode *xptr = (QDomNode *)x[0].s_voidp;
	    QDomNode xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::nextSibling();
    }
    virtual QString nodeName() const {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 2193, x)) {
	    QString *xptr = (QString *)x[0].s_voidp;
	    QString xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::nodeName();
    }
    virtual QDomNode::NodeType nodeType() const {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 1985, x)) {
	    QDomNode::NodeType *xptr = (QDomNode::NodeType *)x[0].s_voidp;
	    QDomNode::NodeType xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomAttr::nodeType();
    }
    virtual QString nodeValue() const {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 2206, x)) {
	    QString *xptr = (QString *)x[0].s_voidp;
	    QString xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::nodeValue();
    }
    virtual void normalize() {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 2191, x)) return;
	this->QDomNode::normalize();
    }
    virtual QDomDocument ownerDocument() const {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 2202, x)) {
	    QDomDocument *xptr = (QDomDocument *)x[0].s_voidp;
	    QDomDocument xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::ownerDocument();
    }
    virtual QDomElement ownerElement() const {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 1982, x)) {
	    QDomElement *xptr = (QDomElement *)x[0].s_voidp;
	    QDomElement xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomAttr::ownerElement();
    }
    virtual QDomNode parentNode() const {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 2195, x)) {
	    QDomNode *xptr = (QDomNode *)x[0].s_voidp;
	    QDomNode xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::parentNode();
    }
    virtual QString prefix() const {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 2208, x)) {
	    QString *xptr = (QString *)x[0].s_voidp;
	    QString xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::prefix();
    }
    virtual QDomNode previousSibling() const {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 2199, x)) {
	    QDomNode *xptr = (QDomNode *)x[0].s_voidp;
	    QDomNode xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::previousSibling();
    }
    virtual QDomNode removeChild(const QDomNode& x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)&x1;
	if(call_method((void*)this, 2186, x)) {
	    QDomNode *xptr = (QDomNode *)x[0].s_voidp;
	    QDomNode xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::removeChild(x1);
    }
    virtual QDomNode replaceChild(const QDomNode& x1, const QDomNode& x2) {
	Smoke::StackItem x[3];
	x[1].s_voidp = (void*)&x1;
	x[2].s_voidp = (void*)&x2;
	if(call_method((void*)this, 2185, x)) {
	    QDomNode *xptr = (QDomNode *)x[0].s_voidp;
	    QDomNode xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::replaceChild(x1, x2);
    }
    virtual void setNodeValue(const QString& x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)&x1;
	if(call_method((void*)this, 2207, x)) return;
	this->QDomNode::setNodeValue(x1);
    }
    virtual void setPrefix(const QString& x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)&x1;
	if(call_method((void*)this, 2209, x)) return;
	this->QDomNode::setPrefix(x1);
    }
    virtual void setValue(const QString& x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)&x1;
	if(call_method((void*)this, 1984, x)) return;
	this->QDomAttr::setValue(x1);
    }
    virtual bool specified() const {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 1981, x)) return (bool)x[0].s_bool;
	return this->QDomAttr::specified();
    }
    virtual QString value() const {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 1983, x)) {
	    QString *xptr = (QString *)x[0].s_voidp;
	    QString xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomAttr::value();
    }
    ~x_QDomAttr() {}
};
void xcall_QDomAttr(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QDomAttr *xself = (x_QDomAttr*)obj;
    switch(xi) {
	case 0: x_QDomAttr::x_0(args);	break;
	case 1: x_QDomAttr::x_1(args);	break;
	case 2: xself->x_2(args);	break;
	case 3: xself->x_3(args);	break;
	case 4: xself->x_4(args);	break;
	case 5: xself->x_5(args);	break;
	case 6: xself->x_6(args);	break;
	case 7: xself->x_7(args);	break;
	case 8: xself->x_8(args);	break;
	case 9: xself->x_9(args);	break;
	case 10: delete (QDomAttr*)xself;	break;
    }
}
