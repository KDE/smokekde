//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke.h>
#include <qpoint.h>
#include <qimage.h>
#include <qcolor.h>
#include <qcstring.h>
#include <qstring.h>
#include <qbitmap.h>
#include <qsize.h>
#include <qwmatrix.h>
#include <qpixmap.h>
#include <qrect.h>

class x_QPixmap : public QPixmap {
public:
    static void x_0(Smoke::Stack x) {
	x[0].s_long = (long)QPixmap::Auto;
    }
    static void x_1(Smoke::Stack x) {
	x[0].s_long = (long)QPixmap::Color;
    }
    static void x_2(Smoke::Stack x) {
	x[0].s_long = (long)QPixmap::Mono;
    }
    static void x_3(Smoke::Stack x) {
	x[0].s_long = (long)QPixmap::DefaultOptim;
    }
    static void x_4(Smoke::Stack x) {
	x[0].s_long = (long)QPixmap::NoOptim;
    }
    static void x_5(Smoke::Stack x) {
	x[0].s_long = (long)QPixmap::MemoryOptim;
    }
    static void x_6(Smoke::Stack x) {
	x[0].s_long = (long)QPixmap::NormalOptim;
    }
    static void x_7(Smoke::Stack x) {
	x[0].s_long = (long)QPixmap::BestOptim;
    }
    static void x_8(Smoke::Stack x) {
	// QPixmap()
	x_QPixmap* xret = new x_QPixmap();
	x[0].s_voidp = (void*)xret;
    }
    x_QPixmap() : QPixmap() {
    }
    static void x_9(Smoke::Stack x) {
	// QPixmap(const QImage&)
	x_QPixmap* xret = new x_QPixmap(*(const QImage *)x[1].s_voidp);
	x[0].s_voidp = (void*)xret;
    }
    x_QPixmap(const QImage& x1) : QPixmap(x1) {
    }
    static void x_10(Smoke::Stack x) {
	// QPixmap(int, int, int, QPixmap::Optimization)
	x_QPixmap* xret = new x_QPixmap((int)x[1].s_int,(int)x[2].s_int,(int)x[3].s_int,*(QPixmap::Optimization *)x[4].s_voidp);
	x[0].s_voidp = (void*)xret;
    }
    x_QPixmap(int x1, int x2, int x3, QPixmap::Optimization x4) : QPixmap(x1, x2, x3, x4) {
    }
    static void x_11(Smoke::Stack x) {
	// QPixmap(int, int, int)
	x_QPixmap* xret = new x_QPixmap((int)x[1].s_int,(int)x[2].s_int,(int)x[3].s_int);
	x[0].s_voidp = (void*)xret;
    }
    x_QPixmap(int x1, int x2, int x3) : QPixmap(x1, x2, x3) {
    }
    static void x_12(Smoke::Stack x) {
	// QPixmap(int, int)
	x_QPixmap* xret = new x_QPixmap((int)x[1].s_int,(int)x[2].s_int);
	x[0].s_voidp = (void*)xret;
    }
    x_QPixmap(int x1, int x2) : QPixmap(x1, x2) {
    }
    static void x_13(Smoke::Stack x) {
	// QPixmap(const QSize&, int, QPixmap::Optimization)
	x_QPixmap* xret = new x_QPixmap(*(const QSize *)x[1].s_voidp,(int)x[2].s_int,*(QPixmap::Optimization *)x[3].s_voidp);
	x[0].s_voidp = (void*)xret;
    }
    x_QPixmap(const QSize& x1, int x2, QPixmap::Optimization x3) : QPixmap(x1, x2, x3) {
    }
    static void x_14(Smoke::Stack x) {
	// QPixmap(const QSize&, int)
	x_QPixmap* xret = new x_QPixmap(*(const QSize *)x[1].s_voidp,(int)x[2].s_int);
	x[0].s_voidp = (void*)xret;
    }
    x_QPixmap(const QSize& x1, int x2) : QPixmap(x1, x2) {
    }
    static void x_15(Smoke::Stack x) {
	// QPixmap(const QSize&)
	x_QPixmap* xret = new x_QPixmap(*(const QSize *)x[1].s_voidp);
	x[0].s_voidp = (void*)xret;
    }
    x_QPixmap(const QSize& x1) : QPixmap(x1) {
    }
    static void x_16(Smoke::Stack x) {
	// QPixmap(const QString&, const char*, QPixmap::ColorMode)
	x_QPixmap* xret = new x_QPixmap(*(const QString *)x[1].s_voidp,(const char*)x[2].s_voidp,*(QPixmap::ColorMode *)x[3].s_voidp);
	x[0].s_voidp = (void*)xret;
    }
    x_QPixmap(const QString& x1, const char* x2, QPixmap::ColorMode x3) : QPixmap(x1, x2, x3) {
    }
    static void x_17(Smoke::Stack x) {
	// QPixmap(const QString&, const char*)
	x_QPixmap* xret = new x_QPixmap(*(const QString *)x[1].s_voidp,(const char*)x[2].s_voidp);
	x[0].s_voidp = (void*)xret;
    }
    x_QPixmap(const QString& x1, const char* x2) : QPixmap(x1, x2) {
    }
    static void x_18(Smoke::Stack x) {
	// QPixmap(const QString&)
	x_QPixmap* xret = new x_QPixmap(*(const QString *)x[1].s_voidp);
	x[0].s_voidp = (void*)xret;
    }
    x_QPixmap(const QString& x1) : QPixmap(x1) {
    }
    static void x_19(Smoke::Stack x) {
	// QPixmap(const QString&, const char*, int)
	x_QPixmap* xret = new x_QPixmap(*(const QString *)x[1].s_voidp,(const char*)x[2].s_voidp,(int)x[3].s_int);
	x[0].s_voidp = (void*)xret;
    }
    x_QPixmap(const QString& x1, const char* x2, int x3) : QPixmap(x1, x2, x3) {
    }
    static void x_20(Smoke::Stack x) {
	// QPixmap(const char**)
	x_QPixmap* xret = new x_QPixmap((const char**)x[1].s_voidp);
	x[0].s_voidp = (void*)xret;
    }
    x_QPixmap(const char** x1) : QPixmap(x1) {
    }
    static void x_21(Smoke::Stack x) {
	// QPixmap(const QByteArray&)
	x_QPixmap* xret = new x_QPixmap(*(const QByteArray *)x[1].s_voidp);
	x[0].s_voidp = (void*)xret;
    }
    x_QPixmap(const QByteArray& x1) : QPixmap(x1) {
    }
    static void x_22(Smoke::Stack x) {
	// QPixmap(const QPixmap&)
	x_QPixmap* xret = new x_QPixmap(*(const QPixmap *)x[1].s_voidp);
	x[0].s_voidp = (void*)xret;
    }
    x_QPixmap(const QPixmap& x1) : QPixmap(x1) {
    }
    void x_23(Smoke::Stack x) {
	// operator=(const QPixmap&)
	QPixmap& xret = this->QPixmap::operator=(*(const QPixmap *)x[1].s_voidp);
	x[0].s_voidp = (void*)&xret;
    }
    void x_24(Smoke::Stack x) {
	// operator=(const QImage&)
	QPixmap& xret = this->QPixmap::operator=(*(const QImage *)x[1].s_voidp);
	x[0].s_voidp = (void*)&xret;
    }
    void x_25(Smoke::Stack x) const {
	// isNull()
	bool xret = this->QPixmap::isNull();
	x[0].s_bool = (bool)xret;
    }
    void x_26(Smoke::Stack x) const {
	// width()
	int xret = this->QPixmap::width();
	x[0].s_int = (int)xret;
    }
    void x_27(Smoke::Stack x) const {
	// height()
	int xret = this->QPixmap::height();
	x[0].s_int = (int)xret;
    }
    void x_28(Smoke::Stack x) const {
	// size()
	QSize xret = this->QPixmap::size();
	x[0].s_voidp = (void*)new QSize(xret);
    }
    void x_29(Smoke::Stack x) const {
	// rect()
	QRect xret = this->QPixmap::rect();
	x[0].s_voidp = (void*)new QRect(xret);
    }
    void x_30(Smoke::Stack x) const {
	// depth()
	int xret = this->QPixmap::depth();
	x[0].s_int = (int)xret;
    }
    void x_31(Smoke::Stack x) {
	// fill(const QColor&)
	this->QPixmap::fill(*(const QColor *)x[1].s_voidp);
    }
    void x_32(Smoke::Stack x) {
	// fill()
	this->QPixmap::fill();
    }
    void x_33(Smoke::Stack x) {
	// fill(const QWidget*, int, int)
	this->QPixmap::fill((const QWidget*)x[1].s_voidp,(int)x[2].s_int,(int)x[3].s_int);
    }
    void x_34(Smoke::Stack x) {
	// fill(const QWidget*, const QPoint&)
	this->QPixmap::fill((const QWidget*)x[1].s_voidp,*(const QPoint *)x[2].s_voidp);
    }
    void x_35(Smoke::Stack x) {
	// resize(int, int)
	this->QPixmap::resize((int)x[1].s_int,(int)x[2].s_int);
    }
    void x_36(Smoke::Stack x) {
	// resize(const QSize&)
	this->QPixmap::resize(*(const QSize *)x[1].s_voidp);
    }
    void x_37(Smoke::Stack x) const {
	// mask()
	const QBitmap* xret = this->QPixmap::mask();
	x[0].s_voidp = (void*)xret;
    }
    void x_38(Smoke::Stack x) {
	// setMask(const QBitmap&)
	this->QPixmap::setMask(*(const QBitmap *)x[1].s_voidp);
    }
    void x_39(Smoke::Stack x) const {
	// selfMask()
	bool xret = this->QPixmap::selfMask();
	x[0].s_bool = (bool)xret;
    }
    void x_40(Smoke::Stack x) const {
	// createHeuristicMask(bool)
	QBitmap xret = this->QPixmap::createHeuristicMask((bool)x[1].s_bool);
	x[0].s_voidp = (void*)new QBitmap(xret);
    }
    void x_41(Smoke::Stack x) const {
	// createHeuristicMask()
	QBitmap xret = this->QPixmap::createHeuristicMask();
	x[0].s_voidp = (void*)new QBitmap(xret);
    }
    void x_42(Smoke::Stack x) const {
	// xForm(const QWMatrix&)
	QPixmap xret = this->QPixmap::xForm(*(const QWMatrix *)x[1].s_voidp);
	x[0].s_voidp = (void*)new QPixmap(xret);
    }
    void x_43(Smoke::Stack x) const {
	// convertToImage()
	QImage xret = this->QPixmap::convertToImage();
	x[0].s_voidp = (void*)new QImage(xret);
    }
    void x_44(Smoke::Stack x) {
	// convertFromImage(const QImage&, QPixmap::ColorMode)
	bool xret = this->QPixmap::convertFromImage(*(const QImage *)x[1].s_voidp,*(QPixmap::ColorMode *)x[2].s_voidp);
	x[0].s_bool = (bool)xret;
    }
    void x_45(Smoke::Stack x) {
	// convertFromImage(const QImage&)
	bool xret = this->QPixmap::convertFromImage(*(const QImage *)x[1].s_voidp);
	x[0].s_bool = (bool)xret;
    }
    void x_46(Smoke::Stack x) {
	// convertFromImage(const QImage&, int)
	bool xret = this->QPixmap::convertFromImage(*(const QImage *)x[1].s_voidp,(int)x[2].s_int);
	x[0].s_bool = (bool)xret;
    }
    void x_47(Smoke::Stack x) {
	// load(const QString&, const char*, QPixmap::ColorMode)
	bool xret = this->QPixmap::load(*(const QString *)x[1].s_voidp,(const char*)x[2].s_voidp,*(QPixmap::ColorMode *)x[3].s_voidp);
	x[0].s_bool = (bool)xret;
    }
    void x_48(Smoke::Stack x) {
	// load(const QString&, const char*)
	bool xret = this->QPixmap::load(*(const QString *)x[1].s_voidp,(const char*)x[2].s_voidp);
	x[0].s_bool = (bool)xret;
    }
    void x_49(Smoke::Stack x) {
	// load(const QString&)
	bool xret = this->QPixmap::load(*(const QString *)x[1].s_voidp);
	x[0].s_bool = (bool)xret;
    }
    void x_50(Smoke::Stack x) {
	// load(const QString&, const char*, int)
	bool xret = this->QPixmap::load(*(const QString *)x[1].s_voidp,(const char*)x[2].s_voidp,(int)x[3].s_int);
	x[0].s_bool = (bool)xret;
    }
    void x_51(Smoke::Stack x) {
	// loadFromData(const uchar*, uint, const char*, QPixmap::ColorMode)
	bool xret = this->QPixmap::loadFromData((const uchar*)x[1].s_voidp,(uint)x[2].s_uint,(const char*)x[3].s_voidp,*(QPixmap::ColorMode *)x[4].s_voidp);
	x[0].s_bool = (bool)xret;
    }
    void x_52(Smoke::Stack x) {
	// loadFromData(const uchar*, uint, const char*)
	bool xret = this->QPixmap::loadFromData((const uchar*)x[1].s_voidp,(uint)x[2].s_uint,(const char*)x[3].s_voidp);
	x[0].s_bool = (bool)xret;
    }
    void x_53(Smoke::Stack x) {
	// loadFromData(const uchar*, uint)
	bool xret = this->QPixmap::loadFromData((const uchar*)x[1].s_voidp,(uint)x[2].s_uint);
	x[0].s_bool = (bool)xret;
    }
    void x_54(Smoke::Stack x) {
	// loadFromData(const uchar*, uint, const char*, int)
	bool xret = this->QPixmap::loadFromData((const uchar*)x[1].s_voidp,(uint)x[2].s_uint,(const char*)x[3].s_voidp,(int)x[4].s_int);
	x[0].s_bool = (bool)xret;
    }
    void x_55(Smoke::Stack x) {
	// loadFromData(const QByteArray&, const char*, int)
	bool xret = this->QPixmap::loadFromData(*(const QByteArray *)x[1].s_voidp,(const char*)x[2].s_voidp,(int)x[3].s_int);
	x[0].s_bool = (bool)xret;
    }
    void x_56(Smoke::Stack x) {
	// loadFromData(const QByteArray&, const char*)
	bool xret = this->QPixmap::loadFromData(*(const QByteArray *)x[1].s_voidp,(const char*)x[2].s_voidp);
	x[0].s_bool = (bool)xret;
    }
    void x_57(Smoke::Stack x) {
	// loadFromData(const QByteArray&)
	bool xret = this->QPixmap::loadFromData(*(const QByteArray *)x[1].s_voidp);
	x[0].s_bool = (bool)xret;
    }
    void x_58(Smoke::Stack x) const {
	// save(const QString&, const char*, int)
	bool xret = this->QPixmap::save(*(const QString *)x[1].s_voidp,(const char*)x[2].s_voidp,(int)x[3].s_int);
	x[0].s_bool = (bool)xret;
    }
    void x_59(Smoke::Stack x) const {
	// save(const QString&, const char*)
	bool xret = this->QPixmap::save(*(const QString *)x[1].s_voidp,(const char*)x[2].s_voidp);
	x[0].s_bool = (bool)xret;
    }
    void x_60(Smoke::Stack x) const {
	// serialNumber()
	int xret = this->QPixmap::serialNumber();
	x[0].s_int = (int)xret;
    }
    void x_61(Smoke::Stack x) const {
	// optimization()
	QPixmap::Optimization xret = this->QPixmap::optimization();
	x[0].s_voidp = (void*)new QPixmap::Optimization(xret);
    }
    void x_62(Smoke::Stack x) {
	// setOptimization(QPixmap::Optimization)
	this->QPixmap::setOptimization(*(QPixmap::Optimization *)x[1].s_voidp);
    }
    void x_63(Smoke::Stack x) {
	// detach()
	this->QPixmap::detach();
    }
    void x_64(Smoke::Stack x) const {
	// isQBitmap()
	bool xret = this->QPixmap::isQBitmap();
	x[0].s_bool = (bool)xret;
    }
    static void x_65(Smoke::Stack x) {
	// defaultDepth()
	int xret = QPixmap::defaultDepth();
	x[0].s_int = (int)xret;
    }
    static void x_66(Smoke::Stack x) {
	// grabWindow(WId, int, int, int, int)
	QPixmap xret = QPixmap::grabWindow(*(WId *)x[1].s_voidp,(int)x[2].s_int,(int)x[3].s_int,(int)x[4].s_int,(int)x[5].s_int);
	x[0].s_voidp = (void*)new QPixmap(xret);
    }
    static void x_67(Smoke::Stack x) {
	// grabWindow(WId, int, int, int)
	QPixmap xret = QPixmap::grabWindow(*(WId *)x[1].s_voidp,(int)x[2].s_int,(int)x[3].s_int,(int)x[4].s_int);
	x[0].s_voidp = (void*)new QPixmap(xret);
    }
    static void x_68(Smoke::Stack x) {
	// grabWindow(WId, int, int)
	QPixmap xret = QPixmap::grabWindow(*(WId *)x[1].s_voidp,(int)x[2].s_int,(int)x[3].s_int);
	x[0].s_voidp = (void*)new QPixmap(xret);
    }
    static void x_69(Smoke::Stack x) {
	// grabWindow(WId, int)
	QPixmap xret = QPixmap::grabWindow(*(WId *)x[1].s_voidp,(int)x[2].s_int);
	x[0].s_voidp = (void*)new QPixmap(xret);
    }
    static void x_70(Smoke::Stack x) {
	// grabWindow(WId)
	QPixmap xret = QPixmap::grabWindow(*(WId *)x[1].s_voidp);
	x[0].s_voidp = (void*)new QPixmap(xret);
    }
    static void x_71(Smoke::Stack x) {
	// grabWidget(QWidget*, int, int, int, int)
	QPixmap xret = QPixmap::grabWidget((QWidget*)x[1].s_voidp,(int)x[2].s_int,(int)x[3].s_int,(int)x[4].s_int,(int)x[5].s_int);
	x[0].s_voidp = (void*)new QPixmap(xret);
    }
    static void x_72(Smoke::Stack x) {
	// grabWidget(QWidget*, int, int, int)
	QPixmap xret = QPixmap::grabWidget((QWidget*)x[1].s_voidp,(int)x[2].s_int,(int)x[3].s_int,(int)x[4].s_int);
	x[0].s_voidp = (void*)new QPixmap(xret);
    }
    static void x_73(Smoke::Stack x) {
	// grabWidget(QWidget*, int, int)
	QPixmap xret = QPixmap::grabWidget((QWidget*)x[1].s_voidp,(int)x[2].s_int,(int)x[3].s_int);
	x[0].s_voidp = (void*)new QPixmap(xret);
    }
    static void x_74(Smoke::Stack x) {
	// grabWidget(QWidget*, int)
	QPixmap xret = QPixmap::grabWidget((QWidget*)x[1].s_voidp,(int)x[2].s_int);
	x[0].s_voidp = (void*)new QPixmap(xret);
    }
    static void x_75(Smoke::Stack x) {
	// grabWidget(QWidget*)
	QPixmap xret = QPixmap::grabWidget((QWidget*)x[1].s_voidp);
	x[0].s_voidp = (void*)new QPixmap(xret);
    }
    static void x_76(Smoke::Stack x) {
	// trueMatrix(const QWMatrix&, int, int)
	QWMatrix xret = QPixmap::trueMatrix(*(const QWMatrix *)x[1].s_voidp,(int)x[2].s_int,(int)x[3].s_int);
	x[0].s_voidp = (void*)new QWMatrix(xret);
    }
    static void x_77(Smoke::Stack x) {
	// imageFormat(const QString&)
	const char* xret = QPixmap::imageFormat(*(const QString *)x[1].s_voidp);
	x[0].s_voidp = (void*)xret;
    }
    static void x_78(Smoke::Stack x) {
	// defaultOptimization()
	QPixmap::Optimization xret = QPixmap::defaultOptimization();
	x[0].s_voidp = (void*)new QPixmap::Optimization(xret);
    }
    static void x_79(Smoke::Stack x) {
	// setDefaultOptimization(QPixmap::Optimization)
	QPixmap::setDefaultOptimization(*(QPixmap::Optimization *)x[1].s_voidp);
    }
    static void x_80(Smoke::Stack x) {
	// QPixmap(int, int, const uchar*, bool)
	x_QPixmap* xret = new x_QPixmap((int)x[1].s_int,(int)x[2].s_int,(const uchar*)x[3].s_voidp,(bool)x[4].s_bool);
	x[0].s_voidp = (void*)xret;
    }
    x_QPixmap(int x1, int x2, const uchar* x3, bool x4) : QPixmap(x1, x2, x3, x4) {
    }
    void x_81(Smoke::Stack x) const {
	// metric(int)
	int xret = this->QPixmap::metric((int)x[1].s_int);
	x[0].s_int = (int)xret;
    }
    virtual bool cmd(int x1, QPainter* x2, QPDevCmdParam* x3) {
	Smoke::StackItem x[4];
	x[1].s_int = (int)x1;
	x[2].s_voidp = (void*)x2;
	x[3].s_voidp = (void*)x3;
	if(call_method((void*)this, 5556, x)) return (bool)x[0].s_bool;
	return this->QPaintDevice::cmd(x1, x2, x3);
    }
    virtual void detach() {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 5924, x)) return;
	this->QPixmap::detach();
    }
    virtual int fontInf(QFont* x1, int x2) const {
	Smoke::StackItem x[3];
	x[1].s_voidp = (void*)x1;
	x[2].s_int = (int)x2;
	if(call_method((void*)this, 5561, x)) return (int)x[0].s_int;
	return this->QPaintDevice::fontInf(x1, x2);
    }
    virtual int fontMet(QFont* x1, int x2, const char* x3, int x4) const {
	Smoke::StackItem x[5];
	x[1].s_voidp = (void*)x1;
	x[2].s_int = (int)x2;
	x[3].s_voidp = (void*)x3;
	x[4].s_int = (int)x4;
	if(call_method((void*)this, 5558, x)) return (int)x[0].s_int;
	return this->QPaintDevice::fontMet(x1, x2, x3, x4);
    }
    virtual int metric(int x1) const {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(call_method((void*)this, 5942, x)) return (int)x[0].s_int;
	return this->QPixmap::metric(x1);
    }
    virtual int resolution() const {
	Smoke::StackItem x[1];
	if(call_method((void*)this, 5554, x)) return (int)x[0].s_int;
	return this->QPaintDevice::resolution();
    }
    virtual void setResolution(int x1) {
	Smoke::StackItem x[2];
	x[1].s_int = (int)x1;
	if(call_method((void*)this, 5553, x)) return;
	this->QPaintDevice::setResolution(x1);
    }
    ~x_QPixmap() {}
};
void xcall_QPixmap(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QPixmap *xself = (x_QPixmap*)obj;
    switch(xi) {
	case 0: x_QPixmap::x_0(args);	break;
	case 1: x_QPixmap::x_1(args);	break;
	case 2: x_QPixmap::x_2(args);	break;
	case 3: x_QPixmap::x_3(args);	break;
	case 4: x_QPixmap::x_4(args);	break;
	case 5: x_QPixmap::x_5(args);	break;
	case 6: x_QPixmap::x_6(args);	break;
	case 7: x_QPixmap::x_7(args);	break;
	case 8: x_QPixmap::x_8(args);	break;
	case 9: x_QPixmap::x_9(args);	break;
	case 10: x_QPixmap::x_10(args);	break;
	case 11: x_QPixmap::x_11(args);	break;
	case 12: x_QPixmap::x_12(args);	break;
	case 13: x_QPixmap::x_13(args);	break;
	case 14: x_QPixmap::x_14(args);	break;
	case 15: x_QPixmap::x_15(args);	break;
	case 16: x_QPixmap::x_16(args);	break;
	case 17: x_QPixmap::x_17(args);	break;
	case 18: x_QPixmap::x_18(args);	break;
	case 19: x_QPixmap::x_19(args);	break;
	case 20: x_QPixmap::x_20(args);	break;
	case 21: x_QPixmap::x_21(args);	break;
	case 22: x_QPixmap::x_22(args);	break;
	case 23: xself->x_23(args);	break;
	case 24: xself->x_24(args);	break;
	case 25: xself->x_25(args);	break;
	case 26: xself->x_26(args);	break;
	case 27: xself->x_27(args);	break;
	case 28: xself->x_28(args);	break;
	case 29: xself->x_29(args);	break;
	case 30: xself->x_30(args);	break;
	case 31: xself->x_31(args);	break;
	case 32: xself->x_32(args);	break;
	case 33: xself->x_33(args);	break;
	case 34: xself->x_34(args);	break;
	case 35: xself->x_35(args);	break;
	case 36: xself->x_36(args);	break;
	case 37: xself->x_37(args);	break;
	case 38: xself->x_38(args);	break;
	case 39: xself->x_39(args);	break;
	case 40: xself->x_40(args);	break;
	case 41: xself->x_41(args);	break;
	case 42: xself->x_42(args);	break;
	case 43: xself->x_43(args);	break;
	case 44: xself->x_44(args);	break;
	case 45: xself->x_45(args);	break;
	case 46: xself->x_46(args);	break;
	case 47: xself->x_47(args);	break;
	case 48: xself->x_48(args);	break;
	case 49: xself->x_49(args);	break;
	case 50: xself->x_50(args);	break;
	case 51: xself->x_51(args);	break;
	case 52: xself->x_52(args);	break;
	case 53: xself->x_53(args);	break;
	case 54: xself->x_54(args);	break;
	case 55: xself->x_55(args);	break;
	case 56: xself->x_56(args);	break;
	case 57: xself->x_57(args);	break;
	case 58: xself->x_58(args);	break;
	case 59: xself->x_59(args);	break;
	case 60: xself->x_60(args);	break;
	case 61: xself->x_61(args);	break;
	case 62: xself->x_62(args);	break;
	case 63: xself->x_63(args);	break;
	case 64: xself->x_64(args);	break;
	case 65: x_QPixmap::x_65(args);	break;
	case 66: x_QPixmap::x_66(args);	break;
	case 67: x_QPixmap::x_67(args);	break;
	case 68: x_QPixmap::x_68(args);	break;
	case 69: x_QPixmap::x_69(args);	break;
	case 70: x_QPixmap::x_70(args);	break;
	case 71: x_QPixmap::x_71(args);	break;
	case 72: x_QPixmap::x_72(args);	break;
	case 73: x_QPixmap::x_73(args);	break;
	case 74: x_QPixmap::x_74(args);	break;
	case 75: x_QPixmap::x_75(args);	break;
	case 76: x_QPixmap::x_76(args);	break;
	case 77: x_QPixmap::x_77(args);	break;
	case 78: x_QPixmap::x_78(args);	break;
	case 79: x_QPixmap::x_79(args);	break;
	case 80: x_QPixmap::x_80(args);	break;
	case 81: xself->x_81(args);	break;
	case 82: delete (QPixmap*)xself;	break;
    }
}
