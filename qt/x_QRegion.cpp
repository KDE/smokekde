//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qpoint.h>
#include <qregion.h>
#include <qpointarray.h>
#include <qbitmap.h>
#include <qrect.h>

class x_QRegion : public QRegion {
public:
    static void x_0(xargs *x) {
	x[0].x_long = (long)QRegion::Rectangle;
    }
    static void x_1(xargs *x) {
	x[0].x_long = (long)QRegion::Ellipse;
    }
    static void x_2(xargs *x) {
	// QRegion()
	x_QRegion* xret = new x_QRegion();
	x[0].x_voidp = (void*)xret;
    }
    x_QRegion() : QRegion() {
    }
    static void x_3(xargs *x) {
	// QRegion(int, int, int, int, QRegion::RegionType)
	x_QRegion* xret = new x_QRegion((int)x[1].x_int,(int)x[2].x_int,(int)x[3].x_int,(int)x[4].x_int,(QRegion::RegionType)x[5].x_long);
	x[0].x_voidp = (void*)xret;
    }
    x_QRegion(int x1, int x2, int x3, int x4, QRegion::RegionType x5) : QRegion(x1, x2, x3, x4, x5) {
    }
    static void x_4(xargs *x) {
	// QRegion(int, int, int, int)
	x_QRegion* xret = new x_QRegion((int)x[1].x_int,(int)x[2].x_int,(int)x[3].x_int,(int)x[4].x_int);
	x[0].x_voidp = (void*)xret;
    }
    x_QRegion(int x1, int x2, int x3, int x4) : QRegion(x1, x2, x3, x4) {
    }
    static void x_5(xargs *x) {
	// QRegion(const QRect&, QRegion::RegionType)
	x_QRegion* xret = new x_QRegion(*(const QRect *)x[1].x_voidp,(QRegion::RegionType)x[2].x_long);
	x[0].x_voidp = (void*)xret;
    }
    x_QRegion(const QRect& x1, QRegion::RegionType x2) : QRegion(x1, x2) {
    }
    static void x_6(xargs *x) {
	// QRegion(const QRect&)
	x_QRegion* xret = new x_QRegion(*(const QRect *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QRegion(const QRect& x1) : QRegion(x1) {
    }
    static void x_7(xargs *x) {
	// QRegion(const QPointArray&, bool)
	x_QRegion* xret = new x_QRegion(*(const QPointArray *)x[1].x_voidp,(bool)x[2].x_bool);
	x[0].x_voidp = (void*)xret;
    }
    x_QRegion(const QPointArray& x1, bool x2) : QRegion(x1, x2) {
    }
    static void x_8(xargs *x) {
	// QRegion(const QPointArray&)
	x_QRegion* xret = new x_QRegion(*(const QPointArray *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QRegion(const QPointArray& x1) : QRegion(x1) {
    }
    static void x_9(xargs *x) {
	// QRegion(const QRegion&)
	x_QRegion* xret = new x_QRegion(*(const QRegion *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QRegion(const QRegion& x1) : QRegion(x1) {
    }
    static void x_10(xargs *x) {
	// QRegion(const QBitmap&)
	x_QRegion* xret = new x_QRegion(*(const QBitmap *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QRegion(const QBitmap& x1) : QRegion(x1) {
    }
    void x_11(xargs *x) {
	// operator=(const QRegion&)
	QRegion& xret = this->QRegion::operator=(*(const QRegion *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_12(xargs *x) const {
	// isNull()
	bool xret = this->QRegion::isNull();
	x[0].x_bool = (bool)xret;
    }
    void x_13(xargs *x) const {
	// isEmpty()
	bool xret = this->QRegion::isEmpty();
	x[0].x_bool = (bool)xret;
    }
    void x_14(xargs *x) const {
	// contains(const QPoint&)
	bool xret = this->QRegion::contains(*(const QPoint *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_15(xargs *x) const {
	// contains(const QRect&)
	bool xret = this->QRegion::contains(*(const QRect *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_16(xargs *x) {
	// translate(int, int)
	this->QRegion::translate((int)x[1].x_int,(int)x[2].x_int);
    }
    void x_17(xargs *x) const {
	// unite(const QRegion&)
	QRegion xret = this->QRegion::unite(*(const QRegion *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QRegion(xret);
    }
    void x_18(xargs *x) const {
	// intersect(const QRegion&)
	QRegion xret = this->QRegion::intersect(*(const QRegion *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QRegion(xret);
    }
    void x_19(xargs *x) const {
	// subtract(const QRegion&)
	QRegion xret = this->QRegion::subtract(*(const QRegion *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QRegion(xret);
    }
    void x_20(xargs *x) const {
	// eor(const QRegion&)
	QRegion xret = this->QRegion::eor(*(const QRegion *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QRegion(xret);
    }
    void x_21(xargs *x) const {
	// boundingRect()
	QRect xret = this->QRegion::boundingRect();
	x[0].x_voidp = (void*)new QRect(xret);
    }
    void x_22(xargs *x) const {
	// rects()
	QMemArray<QRect> xret = this->QRegion::rects();
	x[0].x_voidp = (void*)new QMemArray<QRect>(xret);
    }
    void x_23(xargs *x) {
	// setRects(const QRect*, int)
	this->QRegion::setRects((const QRect*)x[1].x_voidp,(int)x[2].x_int);
    }
    void x_24(xargs *x) const {
	// operator|(const QRegion&)
	const QRegion xret = this->QRegion::operator|(*(const QRegion *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QRegion(xret);
    }
    void x_25(xargs *x) const {
	// operator+(const QRegion&)
	const QRegion xret = this->QRegion::operator+(*(const QRegion *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QRegion(xret);
    }
    void x_26(xargs *x) const {
	// operator&(const QRegion&)
	const QRegion xret = this->QRegion::operator&(*(const QRegion *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QRegion(xret);
    }
    void x_27(xargs *x) const {
	// operator-(const QRegion&)
	const QRegion xret = this->QRegion::operator-(*(const QRegion *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QRegion(xret);
    }
    void x_28(xargs *x) const {
	// operator^(const QRegion&)
	const QRegion xret = this->QRegion::operator^(*(const QRegion *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QRegion(xret);
    }
    void x_29(xargs *x) {
	// operator|=(const QRegion&)
	QRegion& xret = this->QRegion::operator|=(*(const QRegion *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_30(xargs *x) {
	// operator+=(const QRegion&)
	QRegion& xret = this->QRegion::operator+=(*(const QRegion *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_31(xargs *x) {
	// operator&=(const QRegion&)
	QRegion& xret = this->QRegion::operator&=(*(const QRegion *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_32(xargs *x) {
	// operator-=(const QRegion&)
	QRegion& xret = this->QRegion::operator-=(*(const QRegion *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_33(xargs *x) {
	// operator^=(const QRegion&)
	QRegion& xret = this->QRegion::operator^=(*(const QRegion *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_34(xargs *x) const {
	// operator==(const QRegion&)
	bool xret = this->QRegion::operator==(*(const QRegion *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_35(xargs *x) const {
	// operator!=(const QRegion&)
	bool xret = this->QRegion::operator!=(*(const QRegion *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    ~x_QRegion() {}
};
void xcall_QRegion(xargs *x, void *s, int xi) {
    x_QRegion *xself = (x_QRegion*)s;
    switch(xi) {
	case 0: x_QRegion::x_0(x);	break;
	case 1: x_QRegion::x_1(x);	break;
	case 2: x_QRegion::x_2(x);	break;
	case 3: x_QRegion::x_3(x);	break;
	case 4: x_QRegion::x_4(x);	break;
	case 5: x_QRegion::x_5(x);	break;
	case 6: x_QRegion::x_6(x);	break;
	case 7: x_QRegion::x_7(x);	break;
	case 8: x_QRegion::x_8(x);	break;
	case 9: x_QRegion::x_9(x);	break;
	case 10: x_QRegion::x_10(x);	break;
	case 11: xself->x_11(x);	break;
	case 12: xself->x_12(x);	break;
	case 13: xself->x_13(x);	break;
	case 14: xself->x_14(x);	break;
	case 15: xself->x_15(x);	break;
	case 16: xself->x_16(x);	break;
	case 17: xself->x_17(x);	break;
	case 18: xself->x_18(x);	break;
	case 19: xself->x_19(x);	break;
	case 20: xself->x_20(x);	break;
	case 21: xself->x_21(x);	break;
	case 22: xself->x_22(x);	break;
	case 23: xself->x_23(x);	break;
	case 24: xself->x_24(x);	break;
	case 25: xself->x_25(x);	break;
	case 26: xself->x_26(x);	break;
	case 27: xself->x_27(x);	break;
	case 28: xself->x_28(x);	break;
	case 29: xself->x_29(x);	break;
	case 30: xself->x_30(x);	break;
	case 31: xself->x_31(x);	break;
	case 32: xself->x_32(x);	break;
	case 33: xself->x_33(x);	break;
	case 34: xself->x_34(x);	break;
	case 35: xself->x_35(x);	break;
	case 36: delete (QRegion*)xself;	break;
    }
}
