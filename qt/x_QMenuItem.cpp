//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke.h>
#include <qt_smoke.h>
#include <qkeysequence.h>
#include <qstring.h>
#include <qmenudata.h>

class x_QMenuItem : public QMenuItem {
public:
    static void x_0(Smoke::Stack x) {
	// QMenuItem()
	x_QMenuItem* xret = new x_QMenuItem();
	x[0].s_class = (void*)xret;
    }
    x_QMenuItem() : QMenuItem() {
    }
    void x_1(Smoke::Stack x) const {
	// id()
	int xret = this->QMenuItem::id();
	x[0].s_int = xret;
    }
    void x_2(Smoke::Stack x) const {
	// iconSet()
	QIconSet* xret = this->QMenuItem::iconSet();
	x[0].s_class = (void*)xret;
    }
    void x_3(Smoke::Stack x) const {
	// text()
	QString xret = this->QMenuItem::text();
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_4(Smoke::Stack x) const {
	// whatsThis()
	QString xret = this->QMenuItem::whatsThis();
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_5(Smoke::Stack x) const {
	// pixmap()
	QPixmap* xret = this->QMenuItem::pixmap();
	x[0].s_class = (void*)xret;
    }
    void x_6(Smoke::Stack x) const {
	// popup()
	QPopupMenu* xret = this->QMenuItem::popup();
	x[0].s_class = (void*)xret;
    }
    void x_7(Smoke::Stack x) const {
	// widget()
	QWidget* xret = this->QMenuItem::widget();
	x[0].s_class = (void*)xret;
    }
    void x_8(Smoke::Stack x) const {
	// custom()
	QCustomMenuItem* xret = this->QMenuItem::custom();
	x[0].s_class = (void*)xret;
    }
    void x_9(Smoke::Stack x) const {
	// key()
	QKeySequence xret = this->QMenuItem::key();
	x[0].s_class = (void*)new QKeySequence(xret);
    }
    void x_10(Smoke::Stack x) const {
	// signal()
	QSignal* xret = this->QMenuItem::signal();
	x[0].s_class = (void*)xret;
    }
    void x_11(Smoke::Stack x) const {
	// isSeparator()
	bool xret = this->QMenuItem::isSeparator();
	x[0].s_bool = xret;
    }
    void x_12(Smoke::Stack x) const {
	// isEnabled()
	bool xret = this->QMenuItem::isEnabled();
	x[0].s_bool = xret;
    }
    void x_13(Smoke::Stack x) const {
	// isChecked()
	bool xret = this->QMenuItem::isChecked();
	x[0].s_bool = xret;
    }
    void x_14(Smoke::Stack x) const {
	// isDirty()
	bool xret = this->QMenuItem::isDirty();
	x[0].s_bool = xret;
    }
    void x_15(Smoke::Stack x) const {
	// isVisible()
	bool xret = this->QMenuItem::isVisible();
	x[0].s_bool = xret;
    }
    void x_16(Smoke::Stack x) const {
	// isEnabledAndVisible()
	bool xret = this->QMenuItem::isEnabledAndVisible();
	x[0].s_bool = xret;
    }
    void x_17(Smoke::Stack x) {
	// setText(const QString&)
	this->QMenuItem::setText(*(const QString *)x[1].s_voidp);
	(void)x; // noop (for compiler warning)
    }
    void x_18(Smoke::Stack x) {
	// setDirty(bool)
	this->QMenuItem::setDirty((bool)x[1].s_bool);
	(void)x; // noop (for compiler warning)
    }
    void x_19(Smoke::Stack x) {
	// setVisible(bool)
	this->QMenuItem::setVisible((bool)x[1].s_bool);
	(void)x; // noop (for compiler warning)
    }
    void x_20(Smoke::Stack x) {
	// setWhatsThis(const QString&)
	this->QMenuItem::setWhatsThis(*(const QString *)x[1].s_voidp);
	(void)x; // noop (for compiler warning)
    }
    ~x_QMenuItem() { qt_Smoke->binding->deleted(199, (void*)this); }
};
void xcall_QMenuItem(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QMenuItem *xself = (x_QMenuItem*)obj;
    switch(xi) {
	case 0: x_QMenuItem::x_0(args);	break;
	case 1: xself->x_1(args);	break;
	case 2: xself->x_2(args);	break;
	case 3: xself->x_3(args);	break;
	case 4: xself->x_4(args);	break;
	case 5: xself->x_5(args);	break;
	case 6: xself->x_6(args);	break;
	case 7: xself->x_7(args);	break;
	case 8: xself->x_8(args);	break;
	case 9: xself->x_9(args);	break;
	case 10: xself->x_10(args);	break;
	case 11: xself->x_11(args);	break;
	case 12: xself->x_12(args);	break;
	case 13: xself->x_13(args);	break;
	case 14: xself->x_14(args);	break;
	case 15: xself->x_15(args);	break;
	case 16: xself->x_16(args);	break;
	case 17: xself->x_17(args);	break;
	case 18: xself->x_18(args);	break;
	case 19: xself->x_19(args);	break;
	case 20: xself->x_20(args);	break;
	case 21: delete (QMenuItem*)xself;	break;
    }
}
