//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qkeysequence.h>
#include <qstring.h>
#include <qmenudata.h>

class x_QMenuItem : public QMenuItem {
public:
    static void x_0(xargs *x) {
	// QMenuItem()
	x_QMenuItem* xret = new x_QMenuItem();
	x[0].x_voidp = (void*)xret;
    }
    x_QMenuItem() : QMenuItem() {
    }
    void x_1(xargs *x) const {
	// id()
	int xret = this->QMenuItem::id();
	x[0].x_int = (int)xret;
    }
    void x_2(xargs *x) const {
	// iconSet()
	QIconSet* xret = this->QMenuItem::iconSet();
	x[0].x_voidp = (void*)xret;
    }
    void x_3(xargs *x) const {
	// text()
	QString xret = this->QMenuItem::text();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_4(xargs *x) const {
	// whatsThis()
	QString xret = this->QMenuItem::whatsThis();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_5(xargs *x) const {
	// pixmap()
	QPixmap* xret = this->QMenuItem::pixmap();
	x[0].x_voidp = (void*)xret;
    }
    void x_6(xargs *x) const {
	// popup()
	QPopupMenu* xret = this->QMenuItem::popup();
	x[0].x_voidp = (void*)xret;
    }
    void x_7(xargs *x) const {
	// widget()
	QWidget* xret = this->QMenuItem::widget();
	x[0].x_voidp = (void*)xret;
    }
    void x_8(xargs *x) const {
	// custom()
	QCustomMenuItem* xret = this->QMenuItem::custom();
	x[0].x_voidp = (void*)xret;
    }
    void x_9(xargs *x) const {
	// key()
	QKeySequence xret = this->QMenuItem::key();
	x[0].x_voidp = (void*)new QKeySequence(xret);
    }
    void x_10(xargs *x) const {
	// signal()
	QSignal* xret = this->QMenuItem::signal();
	x[0].x_voidp = (void*)xret;
    }
    void x_11(xargs *x) const {
	// isSeparator()
	bool xret = this->QMenuItem::isSeparator();
	x[0].x_bool = (bool)xret;
    }
    void x_12(xargs *x) const {
	// isEnabled()
	bool xret = this->QMenuItem::isEnabled();
	x[0].x_bool = (bool)xret;
    }
    void x_13(xargs *x) const {
	// isChecked()
	bool xret = this->QMenuItem::isChecked();
	x[0].x_bool = (bool)xret;
    }
    void x_14(xargs *x) const {
	// isDirty()
	bool xret = this->QMenuItem::isDirty();
	x[0].x_bool = (bool)xret;
    }
    void x_15(xargs *x) {
	// setText(const QString&)
	this->QMenuItem::setText(*(const QString *)x[1].x_voidp);
    }
    void x_16(xargs *x) {
	// setDirty(bool)
	this->QMenuItem::setDirty((bool)x[1].x_bool);
    }
    void x_17(xargs *x) {
	// setWhatsThis(const QString&)
	this->QMenuItem::setWhatsThis(*(const QString *)x[1].x_voidp);
    }
    ~x_QMenuItem() {}
};
void xcall_QMenuItem(xargs *x, void *s, int xi) {
    x_QMenuItem *xself = (x_QMenuItem*)s;
    switch(xi) {
	case 0: x_QMenuItem::x_0(x);	break;
	case 1: xself->x_1(x);	break;
	case 2: xself->x_2(x);	break;
	case 3: xself->x_3(x);	break;
	case 4: xself->x_4(x);	break;
	case 5: xself->x_5(x);	break;
	case 6: xself->x_6(x);	break;
	case 7: xself->x_7(x);	break;
	case 8: xself->x_8(x);	break;
	case 9: xself->x_9(x);	break;
	case 10: xself->x_10(x);	break;
	case 11: xself->x_11(x);	break;
	case 12: xself->x_12(x);	break;
	case 13: xself->x_13(x);	break;
	case 14: xself->x_14(x);	break;
	case 15: xself->x_15(x);	break;
	case 16: xself->x_16(x);	break;
	case 17: xself->x_17(x);	break;
	case 18: delete (QMenuItem*)xself;	break;
    }
}
