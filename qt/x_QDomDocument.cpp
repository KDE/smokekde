//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke.h>
#include <qt_smoke.h>
#include <qcstring.h>
#include <qstring.h>
#include <qdom.h>

class x_QDomDocument : public QDomDocument {
public:
    static void x_0(Smoke::Stack x) {
	// QDomDocument()
	x_QDomDocument* xret = new x_QDomDocument();
	x[0].s_class = (void*)xret;
    }
    x_QDomDocument() : QDomDocument() {
    }
    static void x_1(Smoke::Stack x) {
	// QDomDocument(const QString&)
	x_QDomDocument* xret = new x_QDomDocument(*(const QString *)x[1].s_voidp);
	x[0].s_class = (void*)xret;
    }
    x_QDomDocument(const QString& x1) : QDomDocument(x1) {
    }
    static void x_2(Smoke::Stack x) {
	// QDomDocument(const QDomDocumentType&)
	x_QDomDocument* xret = new x_QDomDocument(*(const QDomDocumentType *)x[1].s_voidp);
	x[0].s_class = (void*)xret;
    }
    x_QDomDocument(const QDomDocumentType& x1) : QDomDocument(x1) {
    }
    static void x_3(Smoke::Stack x) {
	// QDomDocument(const QDomDocument&)
	x_QDomDocument* xret = new x_QDomDocument(*(const QDomDocument *)x[1].s_voidp);
	x[0].s_class = (void*)xret;
    }
    x_QDomDocument(const QDomDocument& x1) : QDomDocument(x1) {
    }
    void x_4(Smoke::Stack x) {
	// operator=(const QDomDocument&)
	QDomDocument& xret = this->QDomDocument::operator=(*(const QDomDocument *)x[1].s_voidp);
	x[0].s_voidp = (void*)&xret;
    }
    void x_5(Smoke::Stack x) {
	// createElement(const QString&)
	QDomElement xret = this->QDomDocument::createElement(*(const QString *)x[1].s_voidp);
	x[0].s_class = (void*)new QDomElement(xret);
    }
    void x_6(Smoke::Stack x) {
	// createDocumentFragment()
	QDomDocumentFragment xret = this->QDomDocument::createDocumentFragment();
	x[0].s_class = (void*)new QDomDocumentFragment(xret);
    }
    void x_7(Smoke::Stack x) {
	// createTextNode(const QString&)
	QDomText xret = this->QDomDocument::createTextNode(*(const QString *)x[1].s_voidp);
	x[0].s_class = (void*)new QDomText(xret);
    }
    void x_8(Smoke::Stack x) {
	// createComment(const QString&)
	QDomComment xret = this->QDomDocument::createComment(*(const QString *)x[1].s_voidp);
	x[0].s_class = (void*)new QDomComment(xret);
    }
    void x_9(Smoke::Stack x) {
	// createCDATASection(const QString&)
	QDomCDATASection xret = this->QDomDocument::createCDATASection(*(const QString *)x[1].s_voidp);
	x[0].s_class = (void*)new QDomCDATASection(xret);
    }
    void x_10(Smoke::Stack x) {
	// createProcessingInstruction(const QString&, const QString&)
	QDomProcessingInstruction xret = this->QDomDocument::createProcessingInstruction(*(const QString *)x[1].s_voidp,*(const QString *)x[2].s_voidp);
	x[0].s_class = (void*)new QDomProcessingInstruction(xret);
    }
    void x_11(Smoke::Stack x) {
	// createAttribute(const QString&)
	QDomAttr xret = this->QDomDocument::createAttribute(*(const QString *)x[1].s_voidp);
	x[0].s_class = (void*)new QDomAttr(xret);
    }
    void x_12(Smoke::Stack x) {
	// createEntityReference(const QString&)
	QDomEntityReference xret = this->QDomDocument::createEntityReference(*(const QString *)x[1].s_voidp);
	x[0].s_class = (void*)new QDomEntityReference(xret);
    }
    void x_13(Smoke::Stack x) const {
	// elementsByTagName(const QString&)
	QDomNodeList xret = this->QDomDocument::elementsByTagName(*(const QString *)x[1].s_voidp);
	x[0].s_class = (void*)new QDomNodeList(xret);
    }
    void x_14(Smoke::Stack x) {
	// importNode(const QDomNode&, bool)
	QDomNode xret = this->QDomDocument::importNode(*(const QDomNode *)x[1].s_voidp,(bool)x[2].s_bool);
	x[0].s_class = (void*)new QDomNode(xret);
    }
    void x_15(Smoke::Stack x) {
	// createElementNS(const QString&, const QString&)
	QDomElement xret = this->QDomDocument::createElementNS(*(const QString *)x[1].s_voidp,*(const QString *)x[2].s_voidp);
	x[0].s_class = (void*)new QDomElement(xret);
    }
    void x_16(Smoke::Stack x) {
	// createAttributeNS(const QString&, const QString&)
	QDomAttr xret = this->QDomDocument::createAttributeNS(*(const QString *)x[1].s_voidp,*(const QString *)x[2].s_voidp);
	x[0].s_class = (void*)new QDomAttr(xret);
    }
    void x_17(Smoke::Stack x) {
	// elementsByTagNameNS(const QString&, const QString&)
	QDomNodeList xret = this->QDomDocument::elementsByTagNameNS(*(const QString *)x[1].s_voidp,*(const QString *)x[2].s_voidp);
	x[0].s_class = (void*)new QDomNodeList(xret);
    }
    void x_18(Smoke::Stack x) {
	// elementById(const QString&)
	QDomElement xret = this->QDomDocument::elementById(*(const QString *)x[1].s_voidp);
	x[0].s_class = (void*)new QDomElement(xret);
    }
    void x_19(Smoke::Stack x) const {
	// doctype()
	QDomDocumentType xret = this->QDomDocument::doctype();
	x[0].s_class = (void*)new QDomDocumentType(xret);
    }
    void x_20(Smoke::Stack x) const {
	// implementation()
	QDomImplementation xret = this->QDomDocument::implementation();
	x[0].s_class = (void*)new QDomImplementation(xret);
    }
    void x_21(Smoke::Stack x) const {
	// documentElement()
	QDomElement xret = this->QDomDocument::documentElement();
	x[0].s_class = (void*)new QDomElement(xret);
    }
    void x_22(Smoke::Stack x) {
	// setContent(const QCString&, bool, QString*, int*, int*)
	bool xret = this->QDomDocument::setContent(*(const QCString *)x[1].s_voidp,(bool)x[2].s_bool,(QString*)x[3].s_voidp,(int*)x[4].s_voidp,(int*)x[5].s_voidp);
	x[0].s_bool = xret;
    }
    void x_23(Smoke::Stack x) {
	// setContent(const QCString&, bool, QString*, int*)
	bool xret = this->QDomDocument::setContent(*(const QCString *)x[1].s_voidp,(bool)x[2].s_bool,(QString*)x[3].s_voidp,(int*)x[4].s_voidp);
	x[0].s_bool = xret;
    }
    void x_24(Smoke::Stack x) {
	// setContent(const QCString&, bool, QString*)
	bool xret = this->QDomDocument::setContent(*(const QCString *)x[1].s_voidp,(bool)x[2].s_bool,(QString*)x[3].s_voidp);
	x[0].s_bool = xret;
    }
    void x_25(Smoke::Stack x) {
	// setContent(const QCString&, bool)
	bool xret = this->QDomDocument::setContent(*(const QCString *)x[1].s_voidp,(bool)x[2].s_bool);
	x[0].s_bool = xret;
    }
    void x_26(Smoke::Stack x) {
	// setContent(const QByteArray&, bool, QString*, int*, int*)
	bool xret = this->QDomDocument::setContent(*(const QByteArray *)x[1].s_voidp,(bool)x[2].s_bool,(QString*)x[3].s_voidp,(int*)x[4].s_voidp,(int*)x[5].s_voidp);
	x[0].s_bool = xret;
    }
    void x_27(Smoke::Stack x) {
	// setContent(const QByteArray&, bool, QString*, int*)
	bool xret = this->QDomDocument::setContent(*(const QByteArray *)x[1].s_voidp,(bool)x[2].s_bool,(QString*)x[3].s_voidp,(int*)x[4].s_voidp);
	x[0].s_bool = xret;
    }
    void x_28(Smoke::Stack x) {
	// setContent(const QByteArray&, bool, QString*)
	bool xret = this->QDomDocument::setContent(*(const QByteArray *)x[1].s_voidp,(bool)x[2].s_bool,(QString*)x[3].s_voidp);
	x[0].s_bool = xret;
    }
    void x_29(Smoke::Stack x) {
	// setContent(const QByteArray&, bool)
	bool xret = this->QDomDocument::setContent(*(const QByteArray *)x[1].s_voidp,(bool)x[2].s_bool);
	x[0].s_bool = xret;
    }
    void x_30(Smoke::Stack x) {
	// setContent(const QString&, bool, QString*, int*, int*)
	bool xret = this->QDomDocument::setContent(*(const QString *)x[1].s_voidp,(bool)x[2].s_bool,(QString*)x[3].s_voidp,(int*)x[4].s_voidp,(int*)x[5].s_voidp);
	x[0].s_bool = xret;
    }
    void x_31(Smoke::Stack x) {
	// setContent(const QString&, bool, QString*, int*)
	bool xret = this->QDomDocument::setContent(*(const QString *)x[1].s_voidp,(bool)x[2].s_bool,(QString*)x[3].s_voidp,(int*)x[4].s_voidp);
	x[0].s_bool = xret;
    }
    void x_32(Smoke::Stack x) {
	// setContent(const QString&, bool, QString*)
	bool xret = this->QDomDocument::setContent(*(const QString *)x[1].s_voidp,(bool)x[2].s_bool,(QString*)x[3].s_voidp);
	x[0].s_bool = xret;
    }
    void x_33(Smoke::Stack x) {
	// setContent(const QString&, bool)
	bool xret = this->QDomDocument::setContent(*(const QString *)x[1].s_voidp,(bool)x[2].s_bool);
	x[0].s_bool = xret;
    }
    void x_34(Smoke::Stack x) {
	// setContent(QIODevice*, bool, QString*, int*, int*)
	bool xret = this->QDomDocument::setContent((QIODevice*)x[1].s_voidp,(bool)x[2].s_bool,(QString*)x[3].s_voidp,(int*)x[4].s_voidp,(int*)x[5].s_voidp);
	x[0].s_bool = xret;
    }
    void x_35(Smoke::Stack x) {
	// setContent(QIODevice*, bool, QString*, int*)
	bool xret = this->QDomDocument::setContent((QIODevice*)x[1].s_voidp,(bool)x[2].s_bool,(QString*)x[3].s_voidp,(int*)x[4].s_voidp);
	x[0].s_bool = xret;
    }
    void x_36(Smoke::Stack x) {
	// setContent(QIODevice*, bool, QString*)
	bool xret = this->QDomDocument::setContent((QIODevice*)x[1].s_voidp,(bool)x[2].s_bool,(QString*)x[3].s_voidp);
	x[0].s_bool = xret;
    }
    void x_37(Smoke::Stack x) {
	// setContent(QIODevice*, bool)
	bool xret = this->QDomDocument::setContent((QIODevice*)x[1].s_voidp,(bool)x[2].s_bool);
	x[0].s_bool = xret;
    }
    void x_38(Smoke::Stack x) {
	// setContent(const QCString&, QString*, int*, int*)
	bool xret = this->QDomDocument::setContent(*(const QCString *)x[1].s_voidp,(QString*)x[2].s_voidp,(int*)x[3].s_voidp,(int*)x[4].s_voidp);
	x[0].s_bool = xret;
    }
    void x_39(Smoke::Stack x) {
	// setContent(const QCString&, QString*, int*)
	bool xret = this->QDomDocument::setContent(*(const QCString *)x[1].s_voidp,(QString*)x[2].s_voidp,(int*)x[3].s_voidp);
	x[0].s_bool = xret;
    }
    void x_40(Smoke::Stack x) {
	// setContent(const QCString&, QString*)
	bool xret = this->QDomDocument::setContent(*(const QCString *)x[1].s_voidp,(QString*)x[2].s_voidp);
	x[0].s_bool = xret;
    }
    void x_41(Smoke::Stack x) {
	// setContent(const QCString&)
	bool xret = this->QDomDocument::setContent(*(const QCString *)x[1].s_voidp);
	x[0].s_bool = xret;
    }
    void x_42(Smoke::Stack x) {
	// setContent(const QByteArray&, QString*, int*, int*)
	bool xret = this->QDomDocument::setContent(*(const QByteArray *)x[1].s_voidp,(QString*)x[2].s_voidp,(int*)x[3].s_voidp,(int*)x[4].s_voidp);
	x[0].s_bool = xret;
    }
    void x_43(Smoke::Stack x) {
	// setContent(const QByteArray&, QString*, int*)
	bool xret = this->QDomDocument::setContent(*(const QByteArray *)x[1].s_voidp,(QString*)x[2].s_voidp,(int*)x[3].s_voidp);
	x[0].s_bool = xret;
    }
    void x_44(Smoke::Stack x) {
	// setContent(const QByteArray&, QString*)
	bool xret = this->QDomDocument::setContent(*(const QByteArray *)x[1].s_voidp,(QString*)x[2].s_voidp);
	x[0].s_bool = xret;
    }
    void x_45(Smoke::Stack x) {
	// setContent(const QByteArray&)
	bool xret = this->QDomDocument::setContent(*(const QByteArray *)x[1].s_voidp);
	x[0].s_bool = xret;
    }
    void x_46(Smoke::Stack x) {
	// setContent(const QString&, QString*, int*, int*)
	bool xret = this->QDomDocument::setContent(*(const QString *)x[1].s_voidp,(QString*)x[2].s_voidp,(int*)x[3].s_voidp,(int*)x[4].s_voidp);
	x[0].s_bool = xret;
    }
    void x_47(Smoke::Stack x) {
	// setContent(const QString&, QString*, int*)
	bool xret = this->QDomDocument::setContent(*(const QString *)x[1].s_voidp,(QString*)x[2].s_voidp,(int*)x[3].s_voidp);
	x[0].s_bool = xret;
    }
    void x_48(Smoke::Stack x) {
	// setContent(const QString&, QString*)
	bool xret = this->QDomDocument::setContent(*(const QString *)x[1].s_voidp,(QString*)x[2].s_voidp);
	x[0].s_bool = xret;
    }
    void x_49(Smoke::Stack x) {
	// setContent(const QString&)
	bool xret = this->QDomDocument::setContent(*(const QString *)x[1].s_voidp);
	x[0].s_bool = xret;
    }
    void x_50(Smoke::Stack x) {
	// setContent(QIODevice*, QString*, int*, int*)
	bool xret = this->QDomDocument::setContent((QIODevice*)x[1].s_voidp,(QString*)x[2].s_voidp,(int*)x[3].s_voidp,(int*)x[4].s_voidp);
	x[0].s_bool = xret;
    }
    void x_51(Smoke::Stack x) {
	// setContent(QIODevice*, QString*, int*)
	bool xret = this->QDomDocument::setContent((QIODevice*)x[1].s_voidp,(QString*)x[2].s_voidp,(int*)x[3].s_voidp);
	x[0].s_bool = xret;
    }
    void x_52(Smoke::Stack x) {
	// setContent(QIODevice*, QString*)
	bool xret = this->QDomDocument::setContent((QIODevice*)x[1].s_voidp,(QString*)x[2].s_voidp);
	x[0].s_bool = xret;
    }
    void x_53(Smoke::Stack x) {
	// setContent(QIODevice*)
	bool xret = this->QDomDocument::setContent((QIODevice*)x[1].s_voidp);
	x[0].s_bool = xret;
    }
    void x_54(Smoke::Stack x) const {
	// nodeType()
	QDomNode::NodeType xret = this->QDomDocument::nodeType();
	x[0].s_enum = xret;
    }
    void x_55(Smoke::Stack x) const {
	// isDocument()
	bool xret = this->QDomDocument::isDocument();
	x[0].s_bool = xret;
    }
    void x_56(Smoke::Stack x) const {
	// toString()
	QString xret = this->QDomDocument::toString();
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_57(Smoke::Stack x) const {
	// toCString()
	QCString xret = this->QDomDocument::toCString();
	x[0].s_voidp = (void*)new QCString(xret);
    }
    virtual QDomNode appendChild(const QDomNode& x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)&x1;
	if(qt_Smoke->callMethod(2195, (void*)this, x)) {
	    QDomNode *xptr = (QDomNode *)x[0].s_class;
	    QDomNode xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::appendChild(x1);
    }
    virtual QDomNamedNodeMap attributes() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2209, (void*)this, x)) {
	    QDomNamedNodeMap *xptr = (QDomNamedNodeMap *)x[0].s_class;
	    QDomNamedNodeMap xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::attributes();
    }
    virtual QDomNodeList childNodes() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2204, (void*)this, x)) {
	    QDomNodeList *xptr = (QDomNodeList *)x[0].s_class;
	    QDomNodeList xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::childNodes();
    }
    virtual QDomNode cloneNode(bool x1) const {
	Smoke::StackItem x[2];
	x[1].s_bool = x1;
	if(qt_Smoke->callMethod(2197, (void*)this, x)) {
	    QDomNode *xptr = (QDomNode *)x[0].s_class;
	    QDomNode xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::cloneNode(x1);
    }
    virtual QDomNode firstChild() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2205, (void*)this, x)) {
	    QDomNode *xptr = (QDomNode *)x[0].s_class;
	    QDomNode xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::firstChild();
    }
    virtual bool hasAttributes() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2213, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDomNode::hasAttributes();
    }
    virtual bool hasChildNodes() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2196, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDomNode::hasChildNodes();
    }
    virtual QDomNode insertAfter(const QDomNode& x1, const QDomNode& x2) {
	Smoke::StackItem x[3];
	x[1].s_voidp = (void*)&x1;
	x[2].s_voidp = (void*)&x2;
	if(qt_Smoke->callMethod(2192, (void*)this, x)) {
	    QDomNode *xptr = (QDomNode *)x[0].s_class;
	    QDomNode xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::insertAfter(x1, x2);
    }
    virtual QDomNode insertBefore(const QDomNode& x1, const QDomNode& x2) {
	Smoke::StackItem x[3];
	x[1].s_voidp = (void*)&x1;
	x[2].s_voidp = (void*)&x2;
	if(qt_Smoke->callMethod(2191, (void*)this, x)) {
	    QDomNode *xptr = (QDomNode *)x[0].s_class;
	    QDomNode xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::insertBefore(x1, x2);
    }
    virtual bool isAttr() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2218, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDomNode::isAttr();
    }
    virtual bool isCDATASection() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2219, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDomNode::isCDATASection();
    }
    virtual bool isCharacterData() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2229, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDomNode::isCharacterData();
    }
    virtual bool isComment() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2230, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDomNode::isComment();
    }
    virtual bool isDocument() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2077, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDomDocument::isDocument();
    }
    virtual bool isDocumentFragment() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2220, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDomNode::isDocumentFragment();
    }
    virtual bool isDocumentType() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2222, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDomNode::isDocumentType();
    }
    virtual bool isElement() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2223, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDomNode::isElement();
    }
    virtual bool isEntity() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2226, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDomNode::isEntity();
    }
    virtual bool isEntityReference() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2224, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDomNode::isEntityReference();
    }
    virtual bool isNotation() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2227, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDomNode::isNotation();
    }
    virtual bool isProcessingInstruction() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2228, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDomNode::isProcessingInstruction();
    }
    virtual bool isSupported(const QString& x1, const QString& x2) const {
	Smoke::StackItem x[3];
	x[1].s_voidp = (void*)&x1;
	x[2].s_voidp = (void*)&x2;
	if(qt_Smoke->callMethod(2200, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDomNode::isSupported(x1, x2);
    }
    virtual bool isText() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2225, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QDomNode::isText();
    }
    virtual QDomNode lastChild() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2206, (void*)this, x)) {
	    QDomNode *xptr = (QDomNode *)x[0].s_class;
	    QDomNode xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::lastChild();
    }
    virtual QString localName() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2212, (void*)this, x)) {
	    QString *xptr = (QString *)x[0].s_class;
	    QString xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::localName();
    }
    virtual QString namespaceURI() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2211, (void*)this, x)) {
	    QString *xptr = (QString *)x[0].s_class;
	    QString xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::namespaceURI();
    }
    virtual QDomNode nextSibling() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2208, (void*)this, x)) {
	    QDomNode *xptr = (QDomNode *)x[0].s_class;
	    QDomNode xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::nextSibling();
    }
    virtual QString nodeName() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2201, (void*)this, x)) {
	    QString *xptr = (QString *)x[0].s_class;
	    QString xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::nodeName();
    }
    virtual QDomNode::NodeType nodeType() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2076, (void*)this, x)) {
	    QDomNode::NodeType *xptr = (QDomNode::NodeType *)x[0].s_class;
	    QDomNode::NodeType xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomDocument::nodeType();
    }
    virtual QString nodeValue() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2214, (void*)this, x)) {
	    QString *xptr = (QString *)x[0].s_class;
	    QString xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::nodeValue();
    }
    virtual void normalize() {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2199, (void*)this, x)) return;
	this->QDomNode::normalize();
    }
    virtual QDomDocument ownerDocument() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2210, (void*)this, x)) {
	    QDomDocument *xptr = (QDomDocument *)x[0].s_class;
	    QDomDocument xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::ownerDocument();
    }
    virtual QDomNode parentNode() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2203, (void*)this, x)) {
	    QDomNode *xptr = (QDomNode *)x[0].s_class;
	    QDomNode xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::parentNode();
    }
    virtual QString prefix() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2216, (void*)this, x)) {
	    QString *xptr = (QString *)x[0].s_class;
	    QString xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::prefix();
    }
    virtual QDomNode previousSibling() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->callMethod(2207, (void*)this, x)) {
	    QDomNode *xptr = (QDomNode *)x[0].s_class;
	    QDomNode xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::previousSibling();
    }
    virtual QDomNode removeChild(const QDomNode& x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)&x1;
	if(qt_Smoke->callMethod(2194, (void*)this, x)) {
	    QDomNode *xptr = (QDomNode *)x[0].s_class;
	    QDomNode xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::removeChild(x1);
    }
    virtual QDomNode replaceChild(const QDomNode& x1, const QDomNode& x2) {
	Smoke::StackItem x[3];
	x[1].s_voidp = (void*)&x1;
	x[2].s_voidp = (void*)&x2;
	if(qt_Smoke->callMethod(2193, (void*)this, x)) {
	    QDomNode *xptr = (QDomNode *)x[0].s_class;
	    QDomNode xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QDomNode::replaceChild(x1, x2);
    }
    virtual void setNodeValue(const QString& x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)&x1;
	if(qt_Smoke->callMethod(2215, (void*)this, x)) return;
	this->QDomNode::setNodeValue(x1);
    }
    virtual void setPrefix(const QString& x1) {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)&x1;
	if(qt_Smoke->callMethod(2217, (void*)this, x)) return;
	this->QDomNode::setPrefix(x1);
    }
    ~x_QDomDocument() {}
};
void xcall_QDomDocument(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QDomDocument *xself = (x_QDomDocument*)obj;
    switch(xi) {
	case 0: x_QDomDocument::x_0(args);	break;
	case 1: x_QDomDocument::x_1(args);	break;
	case 2: x_QDomDocument::x_2(args);	break;
	case 3: x_QDomDocument::x_3(args);	break;
	case 4: xself->x_4(args);	break;
	case 5: xself->x_5(args);	break;
	case 6: xself->x_6(args);	break;
	case 7: xself->x_7(args);	break;
	case 8: xself->x_8(args);	break;
	case 9: xself->x_9(args);	break;
	case 10: xself->x_10(args);	break;
	case 11: xself->x_11(args);	break;
	case 12: xself->x_12(args);	break;
	case 13: xself->x_13(args);	break;
	case 14: xself->x_14(args);	break;
	case 15: xself->x_15(args);	break;
	case 16: xself->x_16(args);	break;
	case 17: xself->x_17(args);	break;
	case 18: xself->x_18(args);	break;
	case 19: xself->x_19(args);	break;
	case 20: xself->x_20(args);	break;
	case 21: xself->x_21(args);	break;
	case 22: xself->x_22(args);	break;
	case 23: xself->x_23(args);	break;
	case 24: xself->x_24(args);	break;
	case 25: xself->x_25(args);	break;
	case 26: xself->x_26(args);	break;
	case 27: xself->x_27(args);	break;
	case 28: xself->x_28(args);	break;
	case 29: xself->x_29(args);	break;
	case 30: xself->x_30(args);	break;
	case 31: xself->x_31(args);	break;
	case 32: xself->x_32(args);	break;
	case 33: xself->x_33(args);	break;
	case 34: xself->x_34(args);	break;
	case 35: xself->x_35(args);	break;
	case 36: xself->x_36(args);	break;
	case 37: xself->x_37(args);	break;
	case 38: xself->x_38(args);	break;
	case 39: xself->x_39(args);	break;
	case 40: xself->x_40(args);	break;
	case 41: xself->x_41(args);	break;
	case 42: xself->x_42(args);	break;
	case 43: xself->x_43(args);	break;
	case 44: xself->x_44(args);	break;
	case 45: xself->x_45(args);	break;
	case 46: xself->x_46(args);	break;
	case 47: xself->x_47(args);	break;
	case 48: xself->x_48(args);	break;
	case 49: xself->x_49(args);	break;
	case 50: xself->x_50(args);	break;
	case 51: xself->x_51(args);	break;
	case 52: xself->x_52(args);	break;
	case 53: xself->x_53(args);	break;
	case 54: xself->x_54(args);	break;
	case 55: xself->x_55(args);	break;
	case 56: xself->x_56(args);	break;
	case 57: xself->x_57(args);	break;
	case 58: delete (QDomDocument*)xself;	break;
    }
}
