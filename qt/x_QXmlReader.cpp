//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke.h>
#include <qstring.h>
#include <qxml.h>

class x_QXmlReader {
private:
    QXmlReader *xthis;
public:
    x_QXmlReader(void *x) : xthis((QXmlReader*)x) {}
    void x_0(Smoke::Stack x) const {
	// feature(const QString&, bool*)
	bool xret = xthis->QXmlReader::feature(*(const QString *)x[1].s_class,(bool*)x[2].s_class);
	x[0].s_bool = (bool)xret;
    }
    void x_1(Smoke::Stack x) const {
	// feature(const QString&)
	bool xret = xthis->QXmlReader::feature(*(const QString *)x[1].s_class);
	x[0].s_bool = (bool)xret;
    }
    void x_2(Smoke::Stack x) {
	// setFeature(const QString&, bool)
	xthis->QXmlReader::setFeature(*(const QString *)x[1].s_class,(bool)x[2].s_bool);
    }
    void x_3(Smoke::Stack x) const {
	// hasFeature(const QString&)
	bool xret = xthis->QXmlReader::hasFeature(*(const QString *)x[1].s_class);
	x[0].s_bool = (bool)xret;
    }
    void x_4(Smoke::Stack x) const {
	// property(const QString&, bool*)
	void* xret = xthis->QXmlReader::property(*(const QString *)x[1].s_class,(bool*)x[2].s_class);
	x[0].s_voidp = (void*)xret;
    }
    void x_5(Smoke::Stack x) const {
	// property(const QString&)
	void* xret = xthis->QXmlReader::property(*(const QString *)x[1].s_class);
	x[0].s_voidp = (void*)xret;
    }
    void x_6(Smoke::Stack x) {
	// setProperty(const QString&, void*)
	xthis->QXmlReader::setProperty(*(const QString *)x[1].s_class,(void*)x[2].s_voidp);
    }
    void x_7(Smoke::Stack x) const {
	// hasProperty(const QString&)
	bool xret = xthis->QXmlReader::hasProperty(*(const QString *)x[1].s_class);
	x[0].s_bool = (bool)xret;
    }
    void x_8(Smoke::Stack x) {
	// setEntityResolver(QXmlEntityResolver*)
	xthis->QXmlReader::setEntityResolver((QXmlEntityResolver*)x[1].s_class);
    }
    void x_9(Smoke::Stack x) const {
	// entityResolver()
	QXmlEntityResolver* xret = xthis->QXmlReader::entityResolver();
	x[0].s_class = (void*)xret;
    }
    void x_10(Smoke::Stack x) {
	// setDTDHandler(QXmlDTDHandler*)
	xthis->QXmlReader::setDTDHandler((QXmlDTDHandler*)x[1].s_class);
    }
    void x_11(Smoke::Stack x) const {
	// DTDHandler()
	QXmlDTDHandler* xret = xthis->QXmlReader::DTDHandler();
	x[0].s_class = (void*)xret;
    }
    void x_12(Smoke::Stack x) {
	// setContentHandler(QXmlContentHandler*)
	xthis->QXmlReader::setContentHandler((QXmlContentHandler*)x[1].s_class);
    }
    void x_13(Smoke::Stack x) const {
	// contentHandler()
	QXmlContentHandler* xret = xthis->QXmlReader::contentHandler();
	x[0].s_class = (void*)xret;
    }
    void x_14(Smoke::Stack x) {
	// setErrorHandler(QXmlErrorHandler*)
	xthis->QXmlReader::setErrorHandler((QXmlErrorHandler*)x[1].s_class);
    }
    void x_15(Smoke::Stack x) const {
	// errorHandler()
	QXmlErrorHandler* xret = xthis->QXmlReader::errorHandler();
	x[0].s_class = (void*)xret;
    }
    void x_16(Smoke::Stack x) {
	// setLexicalHandler(QXmlLexicalHandler*)
	xthis->QXmlReader::setLexicalHandler((QXmlLexicalHandler*)x[1].s_class);
    }
    void x_17(Smoke::Stack x) const {
	// lexicalHandler()
	QXmlLexicalHandler* xret = xthis->QXmlReader::lexicalHandler();
	x[0].s_class = (void*)xret;
    }
    void x_18(Smoke::Stack x) {
	// setDeclHandler(QXmlDeclHandler*)
	xthis->QXmlReader::setDeclHandler((QXmlDeclHandler*)x[1].s_class);
    }
    void x_19(Smoke::Stack x) const {
	// declHandler()
	QXmlDeclHandler* xret = xthis->QXmlReader::declHandler();
	x[0].s_class = (void*)xret;
    }
    void x_20(Smoke::Stack x) {
	// parse(const QXmlInputSource&)
	bool xret = xthis->QXmlReader::parse(*(const QXmlInputSource *)x[1].s_class);
	x[0].s_bool = (bool)xret;
    }
    void x_21(Smoke::Stack x) {
	// parse(const QXmlInputSource*)
	bool xret = xthis->QXmlReader::parse((const QXmlInputSource*)x[1].s_class);
	x[0].s_bool = (bool)xret;
    }
    ~x_QXmlReader() {}
};
void xcall_QXmlReader(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QXmlReader xtmp(obj), *xself = &xtmp;
    switch(xi) {
	case 0: xself->x_0(args);	break;
	case 1: xself->x_1(args);	break;
	case 2: xself->x_2(args);	break;
	case 3: xself->x_3(args);	break;
	case 4: xself->x_4(args);	break;
	case 5: xself->x_5(args);	break;
	case 6: xself->x_6(args);	break;
	case 7: xself->x_7(args);	break;
	case 8: xself->x_8(args);	break;
	case 9: xself->x_9(args);	break;
	case 10: xself->x_10(args);	break;
	case 11: xself->x_11(args);	break;
	case 12: xself->x_12(args);	break;
	case 13: xself->x_13(args);	break;
	case 14: xself->x_14(args);	break;
	case 15: xself->x_15(args);	break;
	case 16: xself->x_16(args);	break;
	case 17: xself->x_17(args);	break;
	case 18: xself->x_18(args);	break;
	case 19: xself->x_19(args);	break;
	case 20: xself->x_20(args);	break;
	case 21: xself->x_21(args);	break;
    }
}
