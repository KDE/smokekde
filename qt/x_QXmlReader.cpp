//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke.h>
#include <qt_smoke.h>
#include <qstring.h>
#include <qxml.h>

class x_QXmlReader : public QXmlReader {
public:
    static void x_0(Smoke::Stack x) {
	// QXmlReader()
	x_QXmlReader* xret = new x_QXmlReader();
	x[0].s_class = (void*)xret;
    }
    x_QXmlReader() : QXmlReader() {
    }
    static void x_1(Smoke::Stack x) {
	// QXmlReader(const QXmlReader&)
	x_QXmlReader* xret = new x_QXmlReader(*(const QXmlReader *)x[1].s_class);
	x[0].s_class = (void*)xret;
    }
    x_QXmlReader(const QXmlReader& x1) : QXmlReader(x1) {
    }
    virtual QXmlDTDHandler* DTDHandler() const {
	Smoke::StackItem x[1];
	qt_Smoke->binding->callMethod(12329, (void*)this, x, true /*pure virtual*/);
	return (QXmlDTDHandler*)x[0].s_class;
	// ABSTRACT
    }
    virtual QXmlContentHandler* contentHandler() const {
	Smoke::StackItem x[1];
	qt_Smoke->binding->callMethod(12331, (void*)this, x, true /*pure virtual*/);
	return (QXmlContentHandler*)x[0].s_class;
	// ABSTRACT
    }
    virtual QXmlDeclHandler* declHandler() const {
	Smoke::StackItem x[1];
	qt_Smoke->binding->callMethod(12337, (void*)this, x, true /*pure virtual*/);
	return (QXmlDeclHandler*)x[0].s_class;
	// ABSTRACT
    }
    virtual QXmlEntityResolver* entityResolver() const {
	Smoke::StackItem x[1];
	qt_Smoke->binding->callMethod(12327, (void*)this, x, true /*pure virtual*/);
	return (QXmlEntityResolver*)x[0].s_class;
	// ABSTRACT
    }
    virtual QXmlErrorHandler* errorHandler() const {
	Smoke::StackItem x[1];
	qt_Smoke->binding->callMethod(12333, (void*)this, x, true /*pure virtual*/);
	return (QXmlErrorHandler*)x[0].s_class;
	// ABSTRACT
    }
    virtual bool feature(const QString& x1, bool* x2) const {
	Smoke::StackItem x[3];
	x[1].s_voidp = (void*)&x1;
	x[2].s_voidp = (void*)x2;
	qt_Smoke->binding->callMethod(12318, (void*)this, x, true /*pure virtual*/);
	return (bool)x[0].s_bool;
	// ABSTRACT
    }
    virtual bool hasFeature(const QString& x1) const {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)&x1;
	qt_Smoke->binding->callMethod(12321, (void*)this, x, true /*pure virtual*/);
	return (bool)x[0].s_bool;
	// ABSTRACT
    }
    virtual bool hasProperty(const QString& x1) const {
	Smoke::StackItem x[2];
	x[1].s_voidp = (void*)&x1;
	qt_Smoke->binding->callMethod(12325, (void*)this, x, true /*pure virtual*/);
	return (bool)x[0].s_bool;
	// ABSTRACT
    }
    virtual QXmlLexicalHandler* lexicalHandler() const {
	Smoke::StackItem x[1];
	qt_Smoke->binding->callMethod(12335, (void*)this, x, true /*pure virtual*/);
	return (QXmlLexicalHandler*)x[0].s_class;
	// ABSTRACT
    }
    virtual bool parse(const QXmlInputSource& x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)&x1;
	qt_Smoke->binding->callMethod(12338, (void*)this, x, true /*pure virtual*/);
	return (bool)x[0].s_bool;
	// ABSTRACT
    }
    virtual bool parse(const QXmlInputSource* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	qt_Smoke->binding->callMethod(12339, (void*)this, x, true /*pure virtual*/);
	return (bool)x[0].s_bool;
	// ABSTRACT
    }
    virtual void* property(const QString& x1, bool* x2) const {
	Smoke::StackItem x[3];
	x[1].s_voidp = (void*)&x1;
	x[2].s_voidp = (void*)x2;
	qt_Smoke->binding->callMethod(12322, (void*)this, x, true /*pure virtual*/);
	return (void*)x[0].s_voidp;
	// ABSTRACT
    }
    virtual void setContentHandler(QXmlContentHandler* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	qt_Smoke->binding->callMethod(12330, (void*)this, x, true /*pure virtual*/);
	return;
	// ABSTRACT
    }
    virtual void setDTDHandler(QXmlDTDHandler* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	qt_Smoke->binding->callMethod(12328, (void*)this, x, true /*pure virtual*/);
	return;
	// ABSTRACT
    }
    virtual void setDeclHandler(QXmlDeclHandler* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	qt_Smoke->binding->callMethod(12336, (void*)this, x, true /*pure virtual*/);
	return;
	// ABSTRACT
    }
    virtual void setEntityResolver(QXmlEntityResolver* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	qt_Smoke->binding->callMethod(12326, (void*)this, x, true /*pure virtual*/);
	return;
	// ABSTRACT
    }
    virtual void setErrorHandler(QXmlErrorHandler* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	qt_Smoke->binding->callMethod(12332, (void*)this, x, true /*pure virtual*/);
	return;
	// ABSTRACT
    }
    virtual void setFeature(const QString& x1, bool x2) {
	Smoke::StackItem x[3];
	x[1].s_voidp = (void*)&x1;
	x[2].s_bool = x2;
	qt_Smoke->binding->callMethod(12320, (void*)this, x, true /*pure virtual*/);
	return;
	// ABSTRACT
    }
    virtual void setLexicalHandler(QXmlLexicalHandler* x1) {
	Smoke::StackItem x[2];
	x[1].s_class = (void*)x1;
	qt_Smoke->binding->callMethod(12334, (void*)this, x, true /*pure virtual*/);
	return;
	// ABSTRACT
    }
    virtual void setProperty(const QString& x1, void* x2) {
	Smoke::StackItem x[3];
	x[1].s_voidp = (void*)&x1;
	x[2].s_voidp = (void*)x2;
	qt_Smoke->binding->callMethod(12324, (void*)this, x, true /*pure virtual*/);
	return;
	// ABSTRACT
    }
    ~x_QXmlReader() { qt_Smoke->binding->deleted(382, (void*)this); }
};
void xcall_QXmlReader(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QXmlReader *xself = (x_QXmlReader*)obj;
    switch(xi) {
	case 0: x_QXmlReader::x_0(args);	break;
	case 1: x_QXmlReader::x_1(args);	break;
	case 2: delete (QXmlReader*)xself;	break;
    }
}
