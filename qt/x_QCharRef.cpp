//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qglobal.h>
#include <qstring.h>

class x_QCharRef {
private:
    QCharRef *xthis;
public:
    x_QCharRef(void *x) : xthis((QCharRef*)x) {}
    void x_0(xargs *x) const {
	// unicode()
	ushort xret = xthis->QCharRef::unicode();
	x[0].x_ushort = (ushort)xret;
    }
    void x_1(xargs *x) const {
	// latin1()
	char xret = xthis->QCharRef::latin1();
	x[0].x_char = (char)xret;
    }
    void x_2(xargs *x) {
	// operator=(char)
	QCharRef xret = xthis->QCharRef::operator=((char)x[1].x_char);
	x[0].x_voidp = (void*)new QCharRef(xret);
    }
    void x_3(xargs *x) {
	// operator=(uchar)
	QCharRef xret = xthis->QCharRef::operator=(*(uchar *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QCharRef(xret);
    }
    void x_4(xargs *x) {
	// operator=(QChar)
	QCharRef xret = xthis->QCharRef::operator=(*(QChar *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QCharRef(xret);
    }
    void x_5(xargs *x) {
	// operator=(const QCharRef&)
	QCharRef xret = xthis->QCharRef::operator=(*(const QCharRef *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QCharRef(xret);
    }
    void x_6(xargs *x) {
	// operator=(ushort)
	QCharRef xret = xthis->QCharRef::operator=((ushort)x[1].x_ushort);
	x[0].x_voidp = (void*)new QCharRef(xret);
    }
    void x_7(xargs *x) {
	// operator=(short)
	QCharRef xret = xthis->QCharRef::operator=(*(short *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QCharRef(xret);
    }
    void x_8(xargs *x) {
	// operator=(uint)
	QCharRef xret = xthis->QCharRef::operator=((uint)x[1].x_uint);
	x[0].x_voidp = (void*)new QCharRef(xret);
    }
    void x_9(xargs *x) {
	// operator=(int)
	QCharRef xret = xthis->QCharRef::operator=((int)x[1].x_int);
	x[0].x_voidp = (void*)new QCharRef(xret);
    }
    void x_10(xargs *x) const {
	// isNull()
	bool xret = xthis->QCharRef::isNull();
	x[0].x_bool = (bool)xret;
    }
    void x_11(xargs *x) const {
	// isPrint()
	bool xret = xthis->QCharRef::isPrint();
	x[0].x_bool = (bool)xret;
    }
    void x_12(xargs *x) const {
	// isPunct()
	bool xret = xthis->QCharRef::isPunct();
	x[0].x_bool = (bool)xret;
    }
    void x_13(xargs *x) const {
	// isSpace()
	bool xret = xthis->QCharRef::isSpace();
	x[0].x_bool = (bool)xret;
    }
    void x_14(xargs *x) const {
	// isMark()
	bool xret = xthis->QCharRef::isMark();
	x[0].x_bool = (bool)xret;
    }
    void x_15(xargs *x) const {
	// isLetter()
	bool xret = xthis->QCharRef::isLetter();
	x[0].x_bool = (bool)xret;
    }
    void x_16(xargs *x) const {
	// isNumber()
	bool xret = xthis->QCharRef::isNumber();
	x[0].x_bool = (bool)xret;
    }
    void x_17(xargs *x) {
	// isLetterOrNumber()
	bool xret = xthis->QCharRef::isLetterOrNumber();
	x[0].x_bool = (bool)xret;
    }
    void x_18(xargs *x) const {
	// isDigit()
	bool xret = xthis->QCharRef::isDigit();
	x[0].x_bool = (bool)xret;
    }
    void x_19(xargs *x) const {
	// digitValue()
	int xret = xthis->QCharRef::digitValue();
	x[0].x_int = (int)xret;
    }
    void x_20(xargs *x) const {
	// lower()
	QChar xret = xthis->QCharRef::lower();
	x[0].x_voidp = (void*)new QChar(xret);
    }
    void x_21(xargs *x) const {
	// upper()
	QChar xret = xthis->QCharRef::upper();
	x[0].x_voidp = (void*)new QChar(xret);
    }
    void x_22(xargs *x) const {
	// category()
	QChar::Category xret = xthis->QCharRef::category();
	x[0].x_long = (long)xret;
    }
    void x_23(xargs *x) const {
	// direction()
	QChar::Direction xret = xthis->QCharRef::direction();
	x[0].x_long = (long)xret;
    }
    void x_24(xargs *x) const {
	// joining()
	QChar::Joining xret = xthis->QCharRef::joining();
	x[0].x_long = (long)xret;
    }
    void x_25(xargs *x) const {
	// mirrored()
	bool xret = xthis->QCharRef::mirrored();
	x[0].x_bool = (bool)xret;
    }
    void x_26(xargs *x) const {
	// mirroredChar()
	QChar xret = xthis->QCharRef::mirroredChar();
	x[0].x_voidp = (void*)new QChar(xret);
    }
    void x_27(xargs *x) const {
	// decomposition()
	const QString& xret = xthis->QCharRef::decomposition();
	x[0].x_voidp = (void*)&xret;
    }
    void x_28(xargs *x) const {
	// decompositionTag()
	QChar::Decomposition xret = xthis->QCharRef::decompositionTag();
	x[0].x_long = (long)xret;
    }
    void x_29(xargs *x) const {
	// combiningClass()
	unsigned char xret = xthis->QCharRef::combiningClass();
	x[0].x_voidp = (void*)new unsigned char(xret);
    }
    void x_30(xargs *x) const {
	// cell()
	uchar xret = xthis->QCharRef::cell();
	x[0].x_voidp = (void*)new uchar(xret);
    }
    void x_31(xargs *x) const {
	// row()
	uchar xret = xthis->QCharRef::row();
	x[0].x_voidp = (void*)new uchar(xret);
    }
    ~x_QCharRef() {}
};
void xcall_QCharRef(xargs *x, void *s, int xi) {
    x_QCharRef xtmp(s), *xself = &xtmp;
    switch(xi) {
	case 0: xself->x_0(x);	break;
	case 1: xself->x_1(x);	break;
	case 2: xself->x_2(x);	break;
	case 3: xself->x_3(x);	break;
	case 4: xself->x_4(x);	break;
	case 5: xself->x_5(x);	break;
	case 6: xself->x_6(x);	break;
	case 7: xself->x_7(x);	break;
	case 8: xself->x_8(x);	break;
	case 9: xself->x_9(x);	break;
	case 10: xself->x_10(x);	break;
	case 11: xself->x_11(x);	break;
	case 12: xself->x_12(x);	break;
	case 13: xself->x_13(x);	break;
	case 14: xself->x_14(x);	break;
	case 15: xself->x_15(x);	break;
	case 16: xself->x_16(x);	break;
	case 17: xself->x_17(x);	break;
	case 18: xself->x_18(x);	break;
	case 19: xself->x_19(x);	break;
	case 20: xself->x_20(x);	break;
	case 21: xself->x_21(x);	break;
	case 22: xself->x_22(x);	break;
	case 23: xself->x_23(x);	break;
	case 24: xself->x_24(x);	break;
	case 25: xself->x_25(x);	break;
	case 26: xself->x_26(x);	break;
	case 27: xself->x_27(x);	break;
	case 28: xself->x_28(x);	break;
	case 29: xself->x_29(x);	break;
	case 30: xself->x_30(x);	break;
	case 31: xself->x_31(x);	break;
    }
}
