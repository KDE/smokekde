//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qstring.h>
#include <qlibrary.h>

class x_QLibrary : public QLibrary {
public:
    static void x_0(xargs *x) {
	// QLibrary(const QString&)
	x_QLibrary* xret = new x_QLibrary(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QLibrary(const QString& x1) : QLibrary(x1) {
    }
    void x_1(xargs *x) {
	// resolve(const char*)
	void* xret = this->QLibrary::resolve((const char*)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    void x_2(xargs *x) {
	// load()
	bool xret = this->QLibrary::load();
	x[0].x_bool = (bool)xret;
    }
    void x_3(xargs *x) {
	// unload()
	bool xret = this->QLibrary::unload();
	x[0].x_bool = (bool)xret;
    }
    void x_4(xargs *x) const {
	// isLoaded()
	bool xret = this->QLibrary::isLoaded();
	x[0].x_bool = (bool)xret;
    }
    void x_5(xargs *x) const {
	// autoUnload()
	bool xret = this->QLibrary::autoUnload();
	x[0].x_bool = (bool)xret;
    }
    void x_6(xargs *x) {
	// setAutoUnload(bool)
	this->QLibrary::setAutoUnload((bool)x[1].x_bool);
    }
    void x_7(xargs *x) const {
	// library()
	QString xret = this->QLibrary::library();
	x[0].x_voidp = (void*)new QString(xret);
    }
    static void x_8(xargs *x) {
	// resolve(const QString&, const char*)
	void* xret = QLibrary::resolve(*(const QString *)x[1].x_voidp,(const char*)x[2].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    virtual bool unload() {
	xargs x[1];
	if(call_method((void*)this, 4145, x)) return (bool)x[0].x_bool;
	return this->QLibrary::unload();
    }
    ~x_QLibrary() {}
};
void xcall_QLibrary(xargs *x, void *s, int xi) {
    x_QLibrary *xself = (x_QLibrary*)s;
    switch(xi) {
	case 0: x_QLibrary::x_0(x);	break;
	case 1: xself->x_1(x);	break;
	case 2: xself->x_2(x);	break;
	case 3: xself->x_3(x);	break;
	case 4: xself->x_4(x);	break;
	case 5: xself->x_5(x);	break;
	case 6: xself->x_6(x);	break;
	case 7: xself->x_7(x);	break;
	case 8: x_QLibrary::x_8(x);	break;
	case 9: delete (QLibrary*)xself;	break;
    }
}
