//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke.h>
#include <qt_smoke.h>
#include <qstring.h>
#include <qhttp.h>
#include <qstringlist.h>

class x_QHttpHeader : public QHttpHeader {
public:
    static void x_0(Smoke::Stack x) {
	// QHttpHeader()
	x_QHttpHeader* xret = new x_QHttpHeader();
	x[0].s_class = (void*)xret;
    }
    x_QHttpHeader() : QHttpHeader() {
    }
    static void x_1(Smoke::Stack x) {
	// QHttpHeader(const QHttpHeader&)
	x_QHttpHeader* xret = new x_QHttpHeader(*(const QHttpHeader *)x[1].s_class);
	x[0].s_class = (void*)xret;
    }
    x_QHttpHeader(const QHttpHeader& x1) : QHttpHeader(x1) {
    }
    static void x_2(Smoke::Stack x) {
	// QHttpHeader(const QString&)
	x_QHttpHeader* xret = new x_QHttpHeader(*(const QString *)x[1].s_voidp);
	x[0].s_class = (void*)xret;
    }
    x_QHttpHeader(const QString& x1) : QHttpHeader(x1) {
    }
    void x_3(Smoke::Stack x) {
	// operator=(const QHttpHeader&)
	QHttpHeader& xret = this->QHttpHeader::operator=(*(const QHttpHeader *)x[1].s_class);
	x[0].s_class = (void*)&xret;
    }
    void x_4(Smoke::Stack x) const {
	// value(const QString&)
	QString xret = this->QHttpHeader::value(*(const QString *)x[1].s_voidp);
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_5(Smoke::Stack x) {
	// setValue(const QString&, const QString&)
	this->QHttpHeader::setValue(*(const QString *)x[1].s_voidp,*(const QString *)x[2].s_voidp);
	(void)x; // noop (for compiler warning)
    }
    void x_6(Smoke::Stack x) {
	// removeValue(const QString&)
	this->QHttpHeader::removeValue(*(const QString *)x[1].s_voidp);
	(void)x; // noop (for compiler warning)
    }
    void x_7(Smoke::Stack x) const {
	// keys()
	QStringList xret = this->QHttpHeader::keys();
	x[0].s_voidp = (void*)new QStringList(xret);
    }
    void x_8(Smoke::Stack x) const {
	// hasKey(const QString&)
	bool xret = this->QHttpHeader::hasKey(*(const QString *)x[1].s_voidp);
	x[0].s_bool = xret;
    }
    void x_9(Smoke::Stack x) const {
	// hasContentLength()
	bool xret = this->QHttpHeader::hasContentLength();
	x[0].s_bool = xret;
    }
    void x_10(Smoke::Stack x) const {
	// contentLength()
	uint xret = this->QHttpHeader::contentLength();
	x[0].s_uint = xret;
    }
    void x_11(Smoke::Stack x) {
	// setContentLength(int)
	this->QHttpHeader::setContentLength((int)x[1].s_int);
	(void)x; // noop (for compiler warning)
    }
    void x_12(Smoke::Stack x) const {
	// hasContentType()
	bool xret = this->QHttpHeader::hasContentType();
	x[0].s_bool = xret;
    }
    void x_13(Smoke::Stack x) const {
	// contentType()
	QString xret = this->QHttpHeader::contentType();
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_14(Smoke::Stack x) {
	// setContentType(const QString&)
	this->QHttpHeader::setContentType(*(const QString *)x[1].s_voidp);
	(void)x; // noop (for compiler warning)
    }
    void x_15(Smoke::Stack x) const {
	// toString()
	QString xret = this->QHttpHeader::toString();
	x[0].s_voidp = (void*)new QString(xret);
    }
    void x_16(Smoke::Stack x) const {
	// isValid()
	bool xret = this->QHttpHeader::isValid();
	x[0].s_bool = xret;
    }
    void x_17(Smoke::Stack x) {
	// parseLine(const QString&, int)
	bool xret = this->QHttpHeader::parseLine(*(const QString *)x[1].s_voidp,(int)x[2].s_int);
	x[0].s_bool = xret;
    }
    void x_18(Smoke::Stack x) {
	// parse(const QString&)
	bool xret = this->QHttpHeader::parse(*(const QString *)x[1].s_voidp);
	x[0].s_bool = xret;
    }
    void x_19(Smoke::Stack x) {
	// setValid(bool)
	this->QHttpHeader::setValid((bool)x[1].s_bool);
	(void)x; // noop (for compiler warning)
    }
    virtual int majorVersion() const {
	Smoke::StackItem x[1];
	qt_Smoke->binding->callMethod(4295, (void*)this, x, true /*pure virtual*/);
	return (int)x[0].s_int;
	// ABSTRACT
    }
    virtual int minorVersion() const {
	Smoke::StackItem x[1];
	qt_Smoke->binding->callMethod(4296, (void*)this, x, true /*pure virtual*/);
	return (int)x[0].s_int;
	// ABSTRACT
    }
    virtual bool parseLine(const QString& x1, int x2) {
	Smoke::StackItem x[3];
	x[1].s_voidp = (void*)&x1;
	x[2].s_int = x2;
	if(qt_Smoke->binding->callMethod(4297, (void*)this, x)) return (bool)x[0].s_bool;
	return this->QHttpHeader::parseLine(x1, x2);
    }
    virtual QString toString() const {
	Smoke::StackItem x[1];
	if(qt_Smoke->binding->callMethod(4293, (void*)this, x)) {
	    QString *xptr = (QString *)x[0].s_class;
	    QString xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QHttpHeader::toString();
    }
    ~x_QHttpHeader() { qt_Smoke->binding->deleted(148, (void*)this); }
};
void xcall_QHttpHeader(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QHttpHeader *xself = (x_QHttpHeader*)obj;
    switch(xi) {
	case 0: x_QHttpHeader::x_0(args);	break;
	case 1: x_QHttpHeader::x_1(args);	break;
	case 2: x_QHttpHeader::x_2(args);	break;
	case 3: xself->x_3(args);	break;
	case 4: xself->x_4(args);	break;
	case 5: xself->x_5(args);	break;
	case 6: xself->x_6(args);	break;
	case 7: xself->x_7(args);	break;
	case 8: xself->x_8(args);	break;
	case 9: xself->x_9(args);	break;
	case 10: xself->x_10(args);	break;
	case 11: xself->x_11(args);	break;
	case 12: xself->x_12(args);	break;
	case 13: xself->x_13(args);	break;
	case 14: xself->x_14(args);	break;
	case 15: xself->x_15(args);	break;
	case 16: xself->x_16(args);	break;
	case 17: xself->x_17(args);	break;
	case 18: xself->x_18(args);	break;
	case 19: xself->x_19(args);	break;
	case 20: delete (QHttpHeader*)xself;	break;
    }
}
