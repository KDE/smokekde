//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qstring.h>
#include <qfont.h>
#include <qstringlist.h>

class x_QFont : public QFont {
public:
    static void x_0(xargs *x) {
	x[0].x_long = (long)QFont::Helvetica;
    }
    static void x_1(xargs *x) {
	x[0].x_long = (long)QFont::SansSerif;
    }
    static void x_2(xargs *x) {
	x[0].x_long = (long)QFont::Times;
    }
    static void x_3(xargs *x) {
	x[0].x_long = (long)QFont::Serif;
    }
    static void x_4(xargs *x) {
	x[0].x_long = (long)QFont::Courier;
    }
    static void x_5(xargs *x) {
	x[0].x_long = (long)QFont::TypeWriter;
    }
    static void x_6(xargs *x) {
	x[0].x_long = (long)QFont::OldEnglish;
    }
    static void x_7(xargs *x) {
	x[0].x_long = (long)QFont::Decorative;
    }
    static void x_8(xargs *x) {
	x[0].x_long = (long)QFont::System;
    }
    static void x_9(xargs *x) {
	x[0].x_long = (long)QFont::AnyStyle;
    }
    static void x_10(xargs *x) {
	x[0].x_long = (long)QFont::PreferDefault;
    }
    static void x_11(xargs *x) {
	x[0].x_long = (long)QFont::PreferBitmap;
    }
    static void x_12(xargs *x) {
	x[0].x_long = (long)QFont::PreferDevice;
    }
    static void x_13(xargs *x) {
	x[0].x_long = (long)QFont::PreferOutline;
    }
    static void x_14(xargs *x) {
	x[0].x_long = (long)QFont::ForceOutline;
    }
    static void x_15(xargs *x) {
	x[0].x_long = (long)QFont::PreferMatch;
    }
    static void x_16(xargs *x) {
	x[0].x_long = (long)QFont::PreferQuality;
    }
    static void x_17(xargs *x) {
	x[0].x_long = (long)QFont::PreferAntialias;
    }
    static void x_18(xargs *x) {
	x[0].x_long = (long)QFont::NoAntialias;
    }
    static void x_19(xargs *x) {
	x[0].x_long = (long)QFont::Light;
    }
    static void x_20(xargs *x) {
	x[0].x_long = (long)QFont::Normal;
    }
    static void x_21(xargs *x) {
	x[0].x_long = (long)QFont::DemiBold;
    }
    static void x_22(xargs *x) {
	x[0].x_long = (long)QFont::Bold;
    }
    static void x_23(xargs *x) {
	x[0].x_long = (long)QFont::Black;
    }
    static void x_24(xargs *x) {
	x[0].x_long = (long)QFont::Latin;
    }
    static void x_25(xargs *x) {
	x[0].x_long = (long)QFont::Greek;
    }
    static void x_26(xargs *x) {
	x[0].x_long = (long)QFont::Cyrillic;
    }
    static void x_27(xargs *x) {
	x[0].x_long = (long)QFont::Armenian;
    }
    static void x_28(xargs *x) {
	x[0].x_long = (long)QFont::Georgian;
    }
    static void x_29(xargs *x) {
	x[0].x_long = (long)QFont::Runic;
    }
    static void x_30(xargs *x) {
	x[0].x_long = (long)QFont::Ogham;
    }
    static void x_31(xargs *x) {
	x[0].x_long = (long)QFont::SpacingModifiers;
    }
    static void x_32(xargs *x) {
	x[0].x_long = (long)QFont::CombiningMarks;
    }
    static void x_33(xargs *x) {
	x[0].x_long = (long)QFont::Hebrew;
    }
    static void x_34(xargs *x) {
	x[0].x_long = (long)QFont::Arabic;
    }
    static void x_35(xargs *x) {
	x[0].x_long = (long)QFont::Syriac;
    }
    static void x_36(xargs *x) {
	x[0].x_long = (long)QFont::Thaana;
    }
    static void x_37(xargs *x) {
	x[0].x_long = (long)QFont::Devanagari;
    }
    static void x_38(xargs *x) {
	x[0].x_long = (long)QFont::Bengali;
    }
    static void x_39(xargs *x) {
	x[0].x_long = (long)QFont::Gurmukhi;
    }
    static void x_40(xargs *x) {
	x[0].x_long = (long)QFont::Gujarati;
    }
    static void x_41(xargs *x) {
	x[0].x_long = (long)QFont::Oriya;
    }
    static void x_42(xargs *x) {
	x[0].x_long = (long)QFont::Tamil;
    }
    static void x_43(xargs *x) {
	x[0].x_long = (long)QFont::Telugu;
    }
    static void x_44(xargs *x) {
	x[0].x_long = (long)QFont::Kannada;
    }
    static void x_45(xargs *x) {
	x[0].x_long = (long)QFont::Malayalam;
    }
    static void x_46(xargs *x) {
	x[0].x_long = (long)QFont::Sinhala;
    }
    static void x_47(xargs *x) {
	x[0].x_long = (long)QFont::Thai;
    }
    static void x_48(xargs *x) {
	x[0].x_long = (long)QFont::Lao;
    }
    static void x_49(xargs *x) {
	x[0].x_long = (long)QFont::Tibetan;
    }
    static void x_50(xargs *x) {
	x[0].x_long = (long)QFont::Myanmar;
    }
    static void x_51(xargs *x) {
	x[0].x_long = (long)QFont::Khmer;
    }
    static void x_52(xargs *x) {
	x[0].x_long = (long)QFont::Han;
    }
    static void x_53(xargs *x) {
	x[0].x_long = (long)QFont::Hiragana;
    }
    static void x_54(xargs *x) {
	x[0].x_long = (long)QFont::Katakana;
    }
    static void x_55(xargs *x) {
	x[0].x_long = (long)QFont::Hangul;
    }
    static void x_56(xargs *x) {
	x[0].x_long = (long)QFont::Bopomofo;
    }
    static void x_57(xargs *x) {
	x[0].x_long = (long)QFont::Yi;
    }
    static void x_58(xargs *x) {
	x[0].x_long = (long)QFont::Ethiopic;
    }
    static void x_59(xargs *x) {
	x[0].x_long = (long)QFont::Cherokee;
    }
    static void x_60(xargs *x) {
	x[0].x_long = (long)QFont::CanadianAboriginal;
    }
    static void x_61(xargs *x) {
	x[0].x_long = (long)QFont::Mongolian;
    }
    static void x_62(xargs *x) {
	x[0].x_long = (long)QFont::CurrencySymbols;
    }
    static void x_63(xargs *x) {
	x[0].x_long = (long)QFont::LetterlikeSymbols;
    }
    static void x_64(xargs *x) {
	x[0].x_long = (long)QFont::NumberForms;
    }
    static void x_65(xargs *x) {
	x[0].x_long = (long)QFont::MathematicalOperators;
    }
    static void x_66(xargs *x) {
	x[0].x_long = (long)QFont::TechnicalSymbols;
    }
    static void x_67(xargs *x) {
	x[0].x_long = (long)QFont::GeometricSymbols;
    }
    static void x_68(xargs *x) {
	x[0].x_long = (long)QFont::MiscellaneousSymbols;
    }
    static void x_69(xargs *x) {
	x[0].x_long = (long)QFont::EnclosedAndSquare;
    }
    static void x_70(xargs *x) {
	x[0].x_long = (long)QFont::Braille;
    }
    static void x_71(xargs *x) {
	x[0].x_long = (long)QFont::Unicode;
    }
    static void x_72(xargs *x) {
	x[0].x_long = (long)QFont::NScripts;
    }
    static void x_73(xargs *x) {
	x[0].x_long = (long)QFont::UnknownScript;
    }
    static void x_74(xargs *x) {
	x[0].x_long = (long)QFont::NoScript;
    }
    static void x_75(xargs *x) {
	x[0].x_long = (long)QFont::HanX11;
    }
    static void x_76(xargs *x) {
	x[0].x_long = (long)QFont::LatinBasic;
    }
    static void x_77(xargs *x) {
	x[0].x_long = (long)QFont::LatinExtendedA_2;
    }
    static void x_78(xargs *x) {
	x[0].x_long = (long)QFont::LatinExtendedA_3;
    }
    static void x_79(xargs *x) {
	x[0].x_long = (long)QFont::LatinExtendedA_4;
    }
    static void x_80(xargs *x) {
	x[0].x_long = (long)QFont::LatinExtendedA_14;
    }
    static void x_81(xargs *x) {
	x[0].x_long = (long)QFont::LatinExtendedA_15;
    }
    static void x_82(xargs *x) {
	x[0].x_long = (long)QFont::LastPrivateScript;
    }
    static void x_83(xargs *x) {
	// QFont()
	x_QFont* xret = new x_QFont();
	x[0].x_voidp = (void*)xret;
    }
    x_QFont() : QFont() {
    }
    static void x_84(xargs *x) {
	// QFont(const QString&, int, int, bool)
	x_QFont* xret = new x_QFont(*(const QString *)x[1].x_voidp,(int)x[2].x_int,(int)x[3].x_int,(bool)x[4].x_bool);
	x[0].x_voidp = (void*)xret;
    }
    x_QFont(const QString& x1, int x2, int x3, bool x4) : QFont(x1, x2, x3, x4) {
    }
    static void x_85(xargs *x) {
	// QFont(const QString&, int, int)
	x_QFont* xret = new x_QFont(*(const QString *)x[1].x_voidp,(int)x[2].x_int,(int)x[3].x_int);
	x[0].x_voidp = (void*)xret;
    }
    x_QFont(const QString& x1, int x2, int x3) : QFont(x1, x2, x3) {
    }
    static void x_86(xargs *x) {
	// QFont(const QString&, int)
	x_QFont* xret = new x_QFont(*(const QString *)x[1].x_voidp,(int)x[2].x_int);
	x[0].x_voidp = (void*)xret;
    }
    x_QFont(const QString& x1, int x2) : QFont(x1, x2) {
    }
    static void x_87(xargs *x) {
	// QFont(const QString&)
	x_QFont* xret = new x_QFont(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QFont(const QString& x1) : QFont(x1) {
    }
    static void x_88(xargs *x) {
	// QFont(const QFont&)
	x_QFont* xret = new x_QFont(*(const QFont *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QFont(const QFont& x1) : QFont(x1) {
    }
    void x_89(xargs *x) const {
	// family()
	QString xret = this->QFont::family();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_90(xargs *x) {
	// setFamily(const QString&)
	this->QFont::setFamily(*(const QString *)x[1].x_voidp);
    }
    void x_91(xargs *x) const {
	// pointSize()
	int xret = this->QFont::pointSize();
	x[0].x_int = (int)xret;
    }
    void x_92(xargs *x) const {
	// pointSizeFloat()
	float xret = this->QFont::pointSizeFloat();
	x[0].x_float = (float)xret;
    }
    void x_93(xargs *x) {
	// setPointSize(int)
	this->QFont::setPointSize((int)x[1].x_int);
    }
    void x_94(xargs *x) {
	// setPointSizeFloat(float)
	this->QFont::setPointSizeFloat((float)x[1].x_float);
    }
    void x_95(xargs *x) const {
	// pixelSize()
	int xret = this->QFont::pixelSize();
	x[0].x_int = (int)xret;
    }
    void x_96(xargs *x) {
	// setPixelSize(int)
	this->QFont::setPixelSize((int)x[1].x_int);
    }
    void x_97(xargs *x) {
	// setPixelSizeFloat(float)
	this->QFont::setPixelSizeFloat((float)x[1].x_float);
    }
    void x_98(xargs *x) const {
	// weight()
	int xret = this->QFont::weight();
	x[0].x_int = (int)xret;
    }
    void x_99(xargs *x) {
	// setWeight(int)
	this->QFont::setWeight((int)x[1].x_int);
    }
    void x_100(xargs *x) const {
	// bold()
	bool xret = this->QFont::bold();
	x[0].x_bool = (bool)xret;
    }
    void x_101(xargs *x) {
	// setBold(bool)
	this->QFont::setBold((bool)x[1].x_bool);
    }
    void x_102(xargs *x) const {
	// italic()
	bool xret = this->QFont::italic();
	x[0].x_bool = (bool)xret;
    }
    void x_103(xargs *x) {
	// setItalic(bool)
	this->QFont::setItalic((bool)x[1].x_bool);
    }
    void x_104(xargs *x) const {
	// underline()
	bool xret = this->QFont::underline();
	x[0].x_bool = (bool)xret;
    }
    void x_105(xargs *x) {
	// setUnderline(bool)
	this->QFont::setUnderline((bool)x[1].x_bool);
    }
    void x_106(xargs *x) const {
	// strikeOut()
	bool xret = this->QFont::strikeOut();
	x[0].x_bool = (bool)xret;
    }
    void x_107(xargs *x) {
	// setStrikeOut(bool)
	this->QFont::setStrikeOut((bool)x[1].x_bool);
    }
    void x_108(xargs *x) const {
	// fixedPitch()
	bool xret = this->QFont::fixedPitch();
	x[0].x_bool = (bool)xret;
    }
    void x_109(xargs *x) {
	// setFixedPitch(bool)
	this->QFont::setFixedPitch((bool)x[1].x_bool);
    }
    void x_110(xargs *x) const {
	// styleHint()
	QFont::StyleHint xret = this->QFont::styleHint();
	x[0].x_long = (long)xret;
    }
    void x_111(xargs *x) const {
	// styleStrategy()
	QFont::StyleStrategy xret = this->QFont::styleStrategy();
	x[0].x_long = (long)xret;
    }
    void x_112(xargs *x) {
	// setStyleHint(QFont::StyleHint, QFont::StyleStrategy)
	this->QFont::setStyleHint((QFont::StyleHint)x[1].x_long,(QFont::StyleStrategy)x[2].x_long);
    }
    void x_113(xargs *x) {
	// setStyleHint(QFont::StyleHint)
	this->QFont::setStyleHint((QFont::StyleHint)x[1].x_long);
    }
    void x_114(xargs *x) {
	// setStyleStrategy(QFont::StyleStrategy)
	this->QFont::setStyleStrategy((QFont::StyleStrategy)x[1].x_long);
    }
    void x_115(xargs *x) const {
	// rawMode()
	bool xret = this->QFont::rawMode();
	x[0].x_bool = (bool)xret;
    }
    void x_116(xargs *x) {
	// setRawMode(bool)
	this->QFont::setRawMode((bool)x[1].x_bool);
    }
    void x_117(xargs *x) const {
	// exactMatch()
	bool xret = this->QFont::exactMatch();
	x[0].x_bool = (bool)xret;
    }
    void x_118(xargs *x) {
	// operator=(const QFont&)
	QFont& xret = this->QFont::operator=(*(const QFont *)x[1].x_voidp);
	x[0].x_voidp = (void*)&xret;
    }
    void x_119(xargs *x) const {
	// operator==(const QFont&)
	bool xret = this->QFont::operator==(*(const QFont *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_120(xargs *x) const {
	// operator!=(const QFont&)
	bool xret = this->QFont::operator!=(*(const QFont *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_121(xargs *x) const {
	// isCopyOf(const QFont&)
	bool xret = this->QFont::isCopyOf(*(const QFont *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_122(xargs *x) const {
	// handle()
	Qt::HANDLE xret = this->QFont::handle();
	x[0].x_voidp = (void*)new Qt::HANDLE(xret);
    }
    void x_123(xargs *x) {
	// setRawName(const QString&)
	this->QFont::setRawName(*(const QString *)x[1].x_voidp);
    }
    void x_124(xargs *x) const {
	// rawName()
	QString xret = this->QFont::rawName();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_125(xargs *x) const {
	// key()
	QString xret = this->QFont::key();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_126(xargs *x) const {
	// toString()
	QString xret = this->QFont::toString();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_127(xargs *x) {
	// fromString(const QString&)
	bool xret = this->QFont::fromString(*(const QString *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_128(xargs *x) const {
	// defaultFamily()
	QString xret = this->QFont::defaultFamily();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_129(xargs *x) const {
	// lastResortFamily()
	QString xret = this->QFont::lastResortFamily();
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_130(xargs *x) const {
	// lastResortFont()
	QString xret = this->QFont::lastResortFont();
	x[0].x_voidp = (void*)new QString(xret);
    }
    static void x_131(xargs *x) {
	// substitute(const QString&)
	QString xret = QFont::substitute(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QString(xret);
    }
    static void x_132(xargs *x) {
	// substitutes(const QString&)
	QStringList xret = QFont::substitutes(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)new QStringList(xret);
    }
    static void x_133(xargs *x) {
	// substitutions()
	QStringList xret = QFont::substitutions();
	x[0].x_voidp = (void*)new QStringList(xret);
    }
    static void x_134(xargs *x) {
	// insertSubstitution(const QString&, const QString&)
	QFont::insertSubstitution(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp);
    }
    static void x_135(xargs *x) {
	// insertSubstitutions(const QString&, const QStringList&)
	QFont::insertSubstitutions(*(const QString *)x[1].x_voidp,*(const QStringList *)x[2].x_voidp);
    }
    static void x_136(xargs *x) {
	// removeSubstitution(const QString&)
	QFont::removeSubstitution(*(const QString *)x[1].x_voidp);
    }
    static void x_137(xargs *x) {
	// initialize()
	QFont::initialize();
    }
    static void x_138(xargs *x) {
	// cleanup()
	QFont::cleanup();
    }
    static void x_139(xargs *x) {
	// cacheStatistics()
	QFont::cacheStatistics();
    }
    static void x_140(xargs *x) {
	// defaultFont()
	QFont xret = QFont::defaultFont();
	x[0].x_voidp = (void*)new QFont(xret);
    }
    static void x_141(xargs *x) {
	// setDefaultFont(const QFont&)
	QFont::setDefaultFont(*(const QFont *)x[1].x_voidp);
    }
    void x_142(xargs *x) const {
	// dirty()
	bool xret = this->QFont::dirty();
	x[0].x_bool = (bool)xret;
    }
    void x_143(xargs *x) const {
	// deciPointSize()
	int xret = this->QFont::deciPointSize();
	x[0].x_int = (int)xret;
    }
    ~x_QFont() {}
};
void xcall_QFont(xargs *x, void *s, int xi) {
    x_QFont *xself = (x_QFont*)s;
    switch(xi) {
	case 0: x_QFont::x_0(x);	break;
	case 1: x_QFont::x_1(x);	break;
	case 2: x_QFont::x_2(x);	break;
	case 3: x_QFont::x_3(x);	break;
	case 4: x_QFont::x_4(x);	break;
	case 5: x_QFont::x_5(x);	break;
	case 6: x_QFont::x_6(x);	break;
	case 7: x_QFont::x_7(x);	break;
	case 8: x_QFont::x_8(x);	break;
	case 9: x_QFont::x_9(x);	break;
	case 10: x_QFont::x_10(x);	break;
	case 11: x_QFont::x_11(x);	break;
	case 12: x_QFont::x_12(x);	break;
	case 13: x_QFont::x_13(x);	break;
	case 14: x_QFont::x_14(x);	break;
	case 15: x_QFont::x_15(x);	break;
	case 16: x_QFont::x_16(x);	break;
	case 17: x_QFont::x_17(x);	break;
	case 18: x_QFont::x_18(x);	break;
	case 19: x_QFont::x_19(x);	break;
	case 20: x_QFont::x_20(x);	break;
	case 21: x_QFont::x_21(x);	break;
	case 22: x_QFont::x_22(x);	break;
	case 23: x_QFont::x_23(x);	break;
	case 24: x_QFont::x_24(x);	break;
	case 25: x_QFont::x_25(x);	break;
	case 26: x_QFont::x_26(x);	break;
	case 27: x_QFont::x_27(x);	break;
	case 28: x_QFont::x_28(x);	break;
	case 29: x_QFont::x_29(x);	break;
	case 30: x_QFont::x_30(x);	break;
	case 31: x_QFont::x_31(x);	break;
	case 32: x_QFont::x_32(x);	break;
	case 33: x_QFont::x_33(x);	break;
	case 34: x_QFont::x_34(x);	break;
	case 35: x_QFont::x_35(x);	break;
	case 36: x_QFont::x_36(x);	break;
	case 37: x_QFont::x_37(x);	break;
	case 38: x_QFont::x_38(x);	break;
	case 39: x_QFont::x_39(x);	break;
	case 40: x_QFont::x_40(x);	break;
	case 41: x_QFont::x_41(x);	break;
	case 42: x_QFont::x_42(x);	break;
	case 43: x_QFont::x_43(x);	break;
	case 44: x_QFont::x_44(x);	break;
	case 45: x_QFont::x_45(x);	break;
	case 46: x_QFont::x_46(x);	break;
	case 47: x_QFont::x_47(x);	break;
	case 48: x_QFont::x_48(x);	break;
	case 49: x_QFont::x_49(x);	break;
	case 50: x_QFont::x_50(x);	break;
	case 51: x_QFont::x_51(x);	break;
	case 52: x_QFont::x_52(x);	break;
	case 53: x_QFont::x_53(x);	break;
	case 54: x_QFont::x_54(x);	break;
	case 55: x_QFont::x_55(x);	break;
	case 56: x_QFont::x_56(x);	break;
	case 57: x_QFont::x_57(x);	break;
	case 58: x_QFont::x_58(x);	break;
	case 59: x_QFont::x_59(x);	break;
	case 60: x_QFont::x_60(x);	break;
	case 61: x_QFont::x_61(x);	break;
	case 62: x_QFont::x_62(x);	break;
	case 63: x_QFont::x_63(x);	break;
	case 64: x_QFont::x_64(x);	break;
	case 65: x_QFont::x_65(x);	break;
	case 66: x_QFont::x_66(x);	break;
	case 67: x_QFont::x_67(x);	break;
	case 68: x_QFont::x_68(x);	break;
	case 69: x_QFont::x_69(x);	break;
	case 70: x_QFont::x_70(x);	break;
	case 71: x_QFont::x_71(x);	break;
	case 72: x_QFont::x_72(x);	break;
	case 73: x_QFont::x_73(x);	break;
	case 74: x_QFont::x_74(x);	break;
	case 75: x_QFont::x_75(x);	break;
	case 76: x_QFont::x_76(x);	break;
	case 77: x_QFont::x_77(x);	break;
	case 78: x_QFont::x_78(x);	break;
	case 79: x_QFont::x_79(x);	break;
	case 80: x_QFont::x_80(x);	break;
	case 81: x_QFont::x_81(x);	break;
	case 82: x_QFont::x_82(x);	break;
	case 83: x_QFont::x_83(x);	break;
	case 84: x_QFont::x_84(x);	break;
	case 85: x_QFont::x_85(x);	break;
	case 86: x_QFont::x_86(x);	break;
	case 87: x_QFont::x_87(x);	break;
	case 88: x_QFont::x_88(x);	break;
	case 89: xself->x_89(x);	break;
	case 90: xself->x_90(x);	break;
	case 91: xself->x_91(x);	break;
	case 92: xself->x_92(x);	break;
	case 93: xself->x_93(x);	break;
	case 94: xself->x_94(x);	break;
	case 95: xself->x_95(x);	break;
	case 96: xself->x_96(x);	break;
	case 97: xself->x_97(x);	break;
	case 98: xself->x_98(x);	break;
	case 99: xself->x_99(x);	break;
	case 100: xself->x_100(x);	break;
	case 101: xself->x_101(x);	break;
	case 102: xself->x_102(x);	break;
	case 103: xself->x_103(x);	break;
	case 104: xself->x_104(x);	break;
	case 105: xself->x_105(x);	break;
	case 106: xself->x_106(x);	break;
	case 107: xself->x_107(x);	break;
	case 108: xself->x_108(x);	break;
	case 109: xself->x_109(x);	break;
	case 110: xself->x_110(x);	break;
	case 111: xself->x_111(x);	break;
	case 112: xself->x_112(x);	break;
	case 113: xself->x_113(x);	break;
	case 114: xself->x_114(x);	break;
	case 115: xself->x_115(x);	break;
	case 116: xself->x_116(x);	break;
	case 117: xself->x_117(x);	break;
	case 118: xself->x_118(x);	break;
	case 119: xself->x_119(x);	break;
	case 120: xself->x_120(x);	break;
	case 121: xself->x_121(x);	break;
	case 122: xself->x_122(x);	break;
	case 123: xself->x_123(x);	break;
	case 124: xself->x_124(x);	break;
	case 125: xself->x_125(x);	break;
	case 126: xself->x_126(x);	break;
	case 127: xself->x_127(x);	break;
	case 128: xself->x_128(x);	break;
	case 129: xself->x_129(x);	break;
	case 130: xself->x_130(x);	break;
	case 131: x_QFont::x_131(x);	break;
	case 132: x_QFont::x_132(x);	break;
	case 133: x_QFont::x_133(x);	break;
	case 134: x_QFont::x_134(x);	break;
	case 135: x_QFont::x_135(x);	break;
	case 136: x_QFont::x_136(x);	break;
	case 137: x_QFont::x_137(x);	break;
	case 138: x_QFont::x_138(x);	break;
	case 139: x_QFont::x_139(x);	break;
	case 140: x_QFont::x_140(x);	break;
	case 141: x_QFont::x_141(x);	break;
	case 142: xself->x_142(x);	break;
	case 143: xself->x_143(x);	break;
	case 144: delete (QFont*)xself;	break;
    }
}
