//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke.h>
#include <qt_smoke.h>
#include <qstring.h>
#include <qfont.h>
#include <qstringlist.h>

class x_QFont : public QFont {
public:
    static void x_0(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::Helvetica;
    }
    static void x_1(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::SansSerif;
    }
    static void x_2(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::Times;
    }
    static void x_3(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::Serif;
    }
    static void x_4(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::Courier;
    }
    static void x_5(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::TypeWriter;
    }
    static void x_6(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::OldEnglish;
    }
    static void x_7(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::Decorative;
    }
    static void x_8(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::System;
    }
    static void x_9(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::AnyStyle;
    }
    static void x_10(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::PreferDefault;
    }
    static void x_11(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::PreferBitmap;
    }
    static void x_12(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::PreferDevice;
    }
    static void x_13(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::PreferOutline;
    }
    static void x_14(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::ForceOutline;
    }
    static void x_15(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::PreferMatch;
    }
    static void x_16(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::PreferQuality;
    }
    static void x_17(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::PreferAntialias;
    }
    static void x_18(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::NoAntialias;
    }
    static void x_19(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::Light;
    }
    static void x_20(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::Normal;
    }
    static void x_21(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::DemiBold;
    }
    static void x_22(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::Bold;
    }
    static void x_23(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::Black;
    }
    static void x_24(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::Latin;
    }
    static void x_25(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::Greek;
    }
    static void x_26(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::Cyrillic;
    }
    static void x_27(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::Armenian;
    }
    static void x_28(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::Georgian;
    }
    static void x_29(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::Runic;
    }
    static void x_30(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::Ogham;
    }
    static void x_31(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::SpacingModifiers;
    }
    static void x_32(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::CombiningMarks;
    }
    static void x_33(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::Hebrew;
    }
    static void x_34(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::Arabic;
    }
    static void x_35(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::Syriac;
    }
    static void x_36(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::Thaana;
    }
    static void x_37(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::Devanagari;
    }
    static void x_38(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::Bengali;
    }
    static void x_39(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::Gurmukhi;
    }
    static void x_40(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::Gujarati;
    }
    static void x_41(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::Oriya;
    }
    static void x_42(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::Tamil;
    }
    static void x_43(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::Telugu;
    }
    static void x_44(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::Kannada;
    }
    static void x_45(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::Malayalam;
    }
    static void x_46(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::Sinhala;
    }
    static void x_47(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::Thai;
    }
    static void x_48(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::Lao;
    }
    static void x_49(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::Tibetan;
    }
    static void x_50(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::Myanmar;
    }
    static void x_51(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::Khmer;
    }
    static void x_52(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::Han;
    }
    static void x_53(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::Hiragana;
    }
    static void x_54(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::Katakana;
    }
    static void x_55(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::Hangul;
    }
    static void x_56(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::Bopomofo;
    }
    static void x_57(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::Yi;
    }
    static void x_58(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::Ethiopic;
    }
    static void x_59(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::Cherokee;
    }
    static void x_60(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::CanadianAboriginal;
    }
    static void x_61(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::Mongolian;
    }
    static void x_62(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::CurrencySymbols;
    }
    static void x_63(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::LetterlikeSymbols;
    }
    static void x_64(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::NumberForms;
    }
    static void x_65(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::MathematicalOperators;
    }
    static void x_66(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::TechnicalSymbols;
    }
    static void x_67(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::GeometricSymbols;
    }
    static void x_68(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::MiscellaneousSymbols;
    }
    static void x_69(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::EnclosedAndSquare;
    }
    static void x_70(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::Braille;
    }
    static void x_71(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::Unicode;
    }
    static void x_72(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::NScripts;
    }
    static void x_73(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::UnknownScript;
    }
    static void x_74(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::NoScript;
    }
    static void x_75(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::HanX11;
    }
    static void x_76(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::LatinBasic;
    }
    static void x_77(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::LatinExtendedA_2;
    }
    static void x_78(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::LatinExtendedA_3;
    }
    static void x_79(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::LatinExtendedA_4;
    }
    static void x_80(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::LatinExtendedA_14;
    }
    static void x_81(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::LatinExtendedA_15;
    }
    static void x_82(Smoke::Stack x) {
	x[0].s_enum = (long)QFont::LastPrivateScript;
    }
    static void x_83(Smoke::Stack x) {
	// QFont()
	x_QFont* xret = new x_QFont();
	x[0].s_class = (void*)xret;
    }
    x_QFont() : QFont() {
    }
    static void x_84(Smoke::Stack x) {
	// QFont(const QString&, int, int, bool)
	x_QFont* xret = new x_QFont(*(const QString *)x[1].s_class,(int)x[2].s_int,(int)x[3].s_int,(bool)x[4].s_bool);
	x[0].s_class = (void*)xret;
    }
    x_QFont(const QString& x1, int x2, int x3, bool x4) : QFont(x1, x2, x3, x4) {
    }
    static void x_85(Smoke::Stack x) {
	// QFont(const QString&, int, int)
	x_QFont* xret = new x_QFont(*(const QString *)x[1].s_class,(int)x[2].s_int,(int)x[3].s_int);
	x[0].s_class = (void*)xret;
    }
    x_QFont(const QString& x1, int x2, int x3) : QFont(x1, x2, x3) {
    }
    static void x_86(Smoke::Stack x) {
	// QFont(const QString&, int)
	x_QFont* xret = new x_QFont(*(const QString *)x[1].s_class,(int)x[2].s_int);
	x[0].s_class = (void*)xret;
    }
    x_QFont(const QString& x1, int x2) : QFont(x1, x2) {
    }
    static void x_87(Smoke::Stack x) {
	// QFont(const QString&)
	x_QFont* xret = new x_QFont(*(const QString *)x[1].s_class);
	x[0].s_class = (void*)xret;
    }
    x_QFont(const QString& x1) : QFont(x1) {
    }
    static void x_88(Smoke::Stack x) {
	// QFont(const QFont&)
	x_QFont* xret = new x_QFont(*(const QFont *)x[1].s_class);
	x[0].s_class = (void*)xret;
    }
    x_QFont(const QFont& x1) : QFont(x1) {
    }
    void x_89(Smoke::Stack x) const {
	// family()
	QString xret = this->QFont::family();
	x[0].s_class = (void*)new QString(xret);
    }
    void x_90(Smoke::Stack x) {
	// setFamily(const QString&)
	this->QFont::setFamily(*(const QString *)x[1].s_class);
	x[0].s_int = x[0].s_int; // noop
    }
    void x_91(Smoke::Stack x) const {
	// pointSize()
	int xret = this->QFont::pointSize();
	x[0].s_int = (int)xret;
    }
    void x_92(Smoke::Stack x) const {
	// pointSizeFloat()
	float xret = this->QFont::pointSizeFloat();
	x[0].s_float = (float)xret;
    }
    void x_93(Smoke::Stack x) {
	// setPointSize(int)
	this->QFont::setPointSize((int)x[1].s_int);
	x[0].s_int = x[0].s_int; // noop
    }
    void x_94(Smoke::Stack x) {
	// setPointSizeFloat(float)
	this->QFont::setPointSizeFloat((float)x[1].s_float);
	x[0].s_int = x[0].s_int; // noop
    }
    void x_95(Smoke::Stack x) const {
	// pixelSize()
	int xret = this->QFont::pixelSize();
	x[0].s_int = (int)xret;
    }
    void x_96(Smoke::Stack x) {
	// setPixelSize(int)
	this->QFont::setPixelSize((int)x[1].s_int);
	x[0].s_int = x[0].s_int; // noop
    }
    void x_97(Smoke::Stack x) {
	// setPixelSizeFloat(float)
	this->QFont::setPixelSizeFloat((float)x[1].s_float);
	x[0].s_int = x[0].s_int; // noop
    }
    void x_98(Smoke::Stack x) const {
	// weight()
	int xret = this->QFont::weight();
	x[0].s_int = (int)xret;
    }
    void x_99(Smoke::Stack x) {
	// setWeight(int)
	this->QFont::setWeight((int)x[1].s_int);
	x[0].s_int = x[0].s_int; // noop
    }
    void x_100(Smoke::Stack x) const {
	// bold()
	bool xret = this->QFont::bold();
	x[0].s_bool = (bool)xret;
    }
    void x_101(Smoke::Stack x) {
	// setBold(bool)
	this->QFont::setBold((bool)x[1].s_bool);
	x[0].s_int = x[0].s_int; // noop
    }
    void x_102(Smoke::Stack x) const {
	// italic()
	bool xret = this->QFont::italic();
	x[0].s_bool = (bool)xret;
    }
    void x_103(Smoke::Stack x) {
	// setItalic(bool)
	this->QFont::setItalic((bool)x[1].s_bool);
	x[0].s_int = x[0].s_int; // noop
    }
    void x_104(Smoke::Stack x) const {
	// underline()
	bool xret = this->QFont::underline();
	x[0].s_bool = (bool)xret;
    }
    void x_105(Smoke::Stack x) {
	// setUnderline(bool)
	this->QFont::setUnderline((bool)x[1].s_bool);
	x[0].s_int = x[0].s_int; // noop
    }
    void x_106(Smoke::Stack x) const {
	// strikeOut()
	bool xret = this->QFont::strikeOut();
	x[0].s_bool = (bool)xret;
    }
    void x_107(Smoke::Stack x) {
	// setStrikeOut(bool)
	this->QFont::setStrikeOut((bool)x[1].s_bool);
	x[0].s_int = x[0].s_int; // noop
    }
    void x_108(Smoke::Stack x) const {
	// fixedPitch()
	bool xret = this->QFont::fixedPitch();
	x[0].s_bool = (bool)xret;
    }
    void x_109(Smoke::Stack x) {
	// setFixedPitch(bool)
	this->QFont::setFixedPitch((bool)x[1].s_bool);
	x[0].s_int = x[0].s_int; // noop
    }
    void x_110(Smoke::Stack x) const {
	// styleHint()
	QFont::StyleHint xret = this->QFont::styleHint();
	x[0].s_class = (void*)new QFont::StyleHint(xret);
    }
    void x_111(Smoke::Stack x) const {
	// styleStrategy()
	QFont::StyleStrategy xret = this->QFont::styleStrategy();
	x[0].s_class = (void*)new QFont::StyleStrategy(xret);
    }
    void x_112(Smoke::Stack x) {
	// setStyleHint(QFont::StyleHint, QFont::StyleStrategy)
	this->QFont::setStyleHint(*(QFont::StyleHint *)x[1].s_class,*(QFont::StyleStrategy *)x[2].s_class);
	x[0].s_int = x[0].s_int; // noop
    }
    void x_113(Smoke::Stack x) {
	// setStyleHint(QFont::StyleHint)
	this->QFont::setStyleHint(*(QFont::StyleHint *)x[1].s_class);
	x[0].s_int = x[0].s_int; // noop
    }
    void x_114(Smoke::Stack x) {
	// setStyleStrategy(QFont::StyleStrategy)
	this->QFont::setStyleStrategy(*(QFont::StyleStrategy *)x[1].s_class);
	x[0].s_int = x[0].s_int; // noop
    }
    void x_115(Smoke::Stack x) const {
	// rawMode()
	bool xret = this->QFont::rawMode();
	x[0].s_bool = (bool)xret;
    }
    void x_116(Smoke::Stack x) {
	// setRawMode(bool)
	this->QFont::setRawMode((bool)x[1].s_bool);
	x[0].s_int = x[0].s_int; // noop
    }
    void x_117(Smoke::Stack x) const {
	// exactMatch()
	bool xret = this->QFont::exactMatch();
	x[0].s_bool = (bool)xret;
    }
    void x_118(Smoke::Stack x) {
	// operator=(const QFont&)
	QFont& xret = this->QFont::operator=(*(const QFont *)x[1].s_class);
	x[0].s_class = (void*)&xret;
    }
    void x_119(Smoke::Stack x) const {
	// operator==(const QFont&)
	bool xret = this->QFont::operator==(*(const QFont *)x[1].s_class);
	x[0].s_bool = (bool)xret;
    }
    void x_120(Smoke::Stack x) const {
	// operator!=(const QFont&)
	bool xret = this->QFont::operator!=(*(const QFont *)x[1].s_class);
	x[0].s_bool = (bool)xret;
    }
    void x_121(Smoke::Stack x) const {
	// isCopyOf(const QFont&)
	bool xret = this->QFont::isCopyOf(*(const QFont *)x[1].s_class);
	x[0].s_bool = (bool)xret;
    }
    void x_122(Smoke::Stack x) const {
	// handle()
	Qt::HANDLE xret = this->QFont::handle();
	x[0].s_class = (void*)new Qt::HANDLE(xret);
    }
    void x_123(Smoke::Stack x) {
	// setRawName(const QString&)
	this->QFont::setRawName(*(const QString *)x[1].s_class);
	x[0].s_int = x[0].s_int; // noop
    }
    void x_124(Smoke::Stack x) const {
	// rawName()
	QString xret = this->QFont::rawName();
	x[0].s_class = (void*)new QString(xret);
    }
    void x_125(Smoke::Stack x) const {
	// key()
	QString xret = this->QFont::key();
	x[0].s_class = (void*)new QString(xret);
    }
    void x_126(Smoke::Stack x) const {
	// toString()
	QString xret = this->QFont::toString();
	x[0].s_class = (void*)new QString(xret);
    }
    void x_127(Smoke::Stack x) {
	// fromString(const QString&)
	bool xret = this->QFont::fromString(*(const QString *)x[1].s_class);
	x[0].s_bool = (bool)xret;
    }
    void x_128(Smoke::Stack x) const {
	// defaultFamily()
	QString xret = this->QFont::defaultFamily();
	x[0].s_class = (void*)new QString(xret);
    }
    void x_129(Smoke::Stack x) const {
	// lastResortFamily()
	QString xret = this->QFont::lastResortFamily();
	x[0].s_class = (void*)new QString(xret);
    }
    void x_130(Smoke::Stack x) const {
	// lastResortFont()
	QString xret = this->QFont::lastResortFont();
	x[0].s_class = (void*)new QString(xret);
    }
    static void x_131(Smoke::Stack x) {
	// substitute(const QString&)
	QString xret = QFont::substitute(*(const QString *)x[1].s_class);
	x[0].s_class = (void*)new QString(xret);
    }
    static void x_132(Smoke::Stack x) {
	// substitutes(const QString&)
	QStringList xret = QFont::substitutes(*(const QString *)x[1].s_class);
	x[0].s_class = (void*)new QStringList(xret);
    }
    static void x_133(Smoke::Stack x) {
	// substitutions()
	QStringList xret = QFont::substitutions();
	x[0].s_class = (void*)new QStringList(xret);
    }
    static void x_134(Smoke::Stack x) {
	// insertSubstitution(const QString&, const QString&)
	QFont::insertSubstitution(*(const QString *)x[1].s_class,*(const QString *)x[2].s_class);
	x[0].s_int = x[0].s_int; // noop
    }
    static void x_135(Smoke::Stack x) {
	// insertSubstitutions(const QString&, const QStringList&)
	QFont::insertSubstitutions(*(const QString *)x[1].s_class,*(const QStringList *)x[2].s_class);
	x[0].s_int = x[0].s_int; // noop
    }
    static void x_136(Smoke::Stack x) {
	// removeSubstitution(const QString&)
	QFont::removeSubstitution(*(const QString *)x[1].s_class);
	x[0].s_int = x[0].s_int; // noop
    }
    static void x_137(Smoke::Stack x) {
	// initialize()
	QFont::initialize();
	x[0].s_int = x[0].s_int; // noop
    }
    static void x_138(Smoke::Stack x) {
	// cleanup()
	QFont::cleanup();
	x[0].s_int = x[0].s_int; // noop
    }
    static void x_139(Smoke::Stack x) {
	// cacheStatistics()
	QFont::cacheStatistics();
	x[0].s_int = x[0].s_int; // noop
    }
    static void x_140(Smoke::Stack x) {
	// defaultFont()
	QFont xret = QFont::defaultFont();
	x[0].s_class = (void*)new QFont(xret);
    }
    static void x_141(Smoke::Stack x) {
	// setDefaultFont(const QFont&)
	QFont::setDefaultFont(*(const QFont *)x[1].s_class);
	x[0].s_int = x[0].s_int; // noop
    }
    void x_142(Smoke::Stack x) const {
	// dirty()
	bool xret = this->QFont::dirty();
	x[0].s_bool = (bool)xret;
    }
    void x_143(Smoke::Stack x) const {
	// deciPointSize()
	int xret = this->QFont::deciPointSize();
	x[0].s_int = (int)xret;
    }
    ~x_QFont() {}
};
void xcall_QFont(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QFont *xself = (x_QFont*)obj;
    switch(xi) {
	case 0: x_QFont::x_0(args);	break;
	case 1: x_QFont::x_1(args);	break;
	case 2: x_QFont::x_2(args);	break;
	case 3: x_QFont::x_3(args);	break;
	case 4: x_QFont::x_4(args);	break;
	case 5: x_QFont::x_5(args);	break;
	case 6: x_QFont::x_6(args);	break;
	case 7: x_QFont::x_7(args);	break;
	case 8: x_QFont::x_8(args);	break;
	case 9: x_QFont::x_9(args);	break;
	case 10: x_QFont::x_10(args);	break;
	case 11: x_QFont::x_11(args);	break;
	case 12: x_QFont::x_12(args);	break;
	case 13: x_QFont::x_13(args);	break;
	case 14: x_QFont::x_14(args);	break;
	case 15: x_QFont::x_15(args);	break;
	case 16: x_QFont::x_16(args);	break;
	case 17: x_QFont::x_17(args);	break;
	case 18: x_QFont::x_18(args);	break;
	case 19: x_QFont::x_19(args);	break;
	case 20: x_QFont::x_20(args);	break;
	case 21: x_QFont::x_21(args);	break;
	case 22: x_QFont::x_22(args);	break;
	case 23: x_QFont::x_23(args);	break;
	case 24: x_QFont::x_24(args);	break;
	case 25: x_QFont::x_25(args);	break;
	case 26: x_QFont::x_26(args);	break;
	case 27: x_QFont::x_27(args);	break;
	case 28: x_QFont::x_28(args);	break;
	case 29: x_QFont::x_29(args);	break;
	case 30: x_QFont::x_30(args);	break;
	case 31: x_QFont::x_31(args);	break;
	case 32: x_QFont::x_32(args);	break;
	case 33: x_QFont::x_33(args);	break;
	case 34: x_QFont::x_34(args);	break;
	case 35: x_QFont::x_35(args);	break;
	case 36: x_QFont::x_36(args);	break;
	case 37: x_QFont::x_37(args);	break;
	case 38: x_QFont::x_38(args);	break;
	case 39: x_QFont::x_39(args);	break;
	case 40: x_QFont::x_40(args);	break;
	case 41: x_QFont::x_41(args);	break;
	case 42: x_QFont::x_42(args);	break;
	case 43: x_QFont::x_43(args);	break;
	case 44: x_QFont::x_44(args);	break;
	case 45: x_QFont::x_45(args);	break;
	case 46: x_QFont::x_46(args);	break;
	case 47: x_QFont::x_47(args);	break;
	case 48: x_QFont::x_48(args);	break;
	case 49: x_QFont::x_49(args);	break;
	case 50: x_QFont::x_50(args);	break;
	case 51: x_QFont::x_51(args);	break;
	case 52: x_QFont::x_52(args);	break;
	case 53: x_QFont::x_53(args);	break;
	case 54: x_QFont::x_54(args);	break;
	case 55: x_QFont::x_55(args);	break;
	case 56: x_QFont::x_56(args);	break;
	case 57: x_QFont::x_57(args);	break;
	case 58: x_QFont::x_58(args);	break;
	case 59: x_QFont::x_59(args);	break;
	case 60: x_QFont::x_60(args);	break;
	case 61: x_QFont::x_61(args);	break;
	case 62: x_QFont::x_62(args);	break;
	case 63: x_QFont::x_63(args);	break;
	case 64: x_QFont::x_64(args);	break;
	case 65: x_QFont::x_65(args);	break;
	case 66: x_QFont::x_66(args);	break;
	case 67: x_QFont::x_67(args);	break;
	case 68: x_QFont::x_68(args);	break;
	case 69: x_QFont::x_69(args);	break;
	case 70: x_QFont::x_70(args);	break;
	case 71: x_QFont::x_71(args);	break;
	case 72: x_QFont::x_72(args);	break;
	case 73: x_QFont::x_73(args);	break;
	case 74: x_QFont::x_74(args);	break;
	case 75: x_QFont::x_75(args);	break;
	case 76: x_QFont::x_76(args);	break;
	case 77: x_QFont::x_77(args);	break;
	case 78: x_QFont::x_78(args);	break;
	case 79: x_QFont::x_79(args);	break;
	case 80: x_QFont::x_80(args);	break;
	case 81: x_QFont::x_81(args);	break;
	case 82: x_QFont::x_82(args);	break;
	case 83: x_QFont::x_83(args);	break;
	case 84: x_QFont::x_84(args);	break;
	case 85: x_QFont::x_85(args);	break;
	case 86: x_QFont::x_86(args);	break;
	case 87: x_QFont::x_87(args);	break;
	case 88: x_QFont::x_88(args);	break;
	case 89: xself->x_89(args);	break;
	case 90: xself->x_90(args);	break;
	case 91: xself->x_91(args);	break;
	case 92: xself->x_92(args);	break;
	case 93: xself->x_93(args);	break;
	case 94: xself->x_94(args);	break;
	case 95: xself->x_95(args);	break;
	case 96: xself->x_96(args);	break;
	case 97: xself->x_97(args);	break;
	case 98: xself->x_98(args);	break;
	case 99: xself->x_99(args);	break;
	case 100: xself->x_100(args);	break;
	case 101: xself->x_101(args);	break;
	case 102: xself->x_102(args);	break;
	case 103: xself->x_103(args);	break;
	case 104: xself->x_104(args);	break;
	case 105: xself->x_105(args);	break;
	case 106: xself->x_106(args);	break;
	case 107: xself->x_107(args);	break;
	case 108: xself->x_108(args);	break;
	case 109: xself->x_109(args);	break;
	case 110: xself->x_110(args);	break;
	case 111: xself->x_111(args);	break;
	case 112: xself->x_112(args);	break;
	case 113: xself->x_113(args);	break;
	case 114: xself->x_114(args);	break;
	case 115: xself->x_115(args);	break;
	case 116: xself->x_116(args);	break;
	case 117: xself->x_117(args);	break;
	case 118: xself->x_118(args);	break;
	case 119: xself->x_119(args);	break;
	case 120: xself->x_120(args);	break;
	case 121: xself->x_121(args);	break;
	case 122: xself->x_122(args);	break;
	case 123: xself->x_123(args);	break;
	case 124: xself->x_124(args);	break;
	case 125: xself->x_125(args);	break;
	case 126: xself->x_126(args);	break;
	case 127: xself->x_127(args);	break;
	case 128: xself->x_128(args);	break;
	case 129: xself->x_129(args);	break;
	case 130: xself->x_130(args);	break;
	case 131: x_QFont::x_131(args);	break;
	case 132: x_QFont::x_132(args);	break;
	case 133: x_QFont::x_133(args);	break;
	case 134: x_QFont::x_134(args);	break;
	case 135: x_QFont::x_135(args);	break;
	case 136: x_QFont::x_136(args);	break;
	case 137: x_QFont::x_137(args);	break;
	case 138: x_QFont::x_138(args);	break;
	case 139: x_QFont::x_139(args);	break;
	case 140: x_QFont::x_140(args);	break;
	case 141: x_QFont::x_141(args);	break;
	case 142: xself->x_142(args);	break;
	case 143: xself->x_143(args);	break;
	case 144: delete (QFont*)xself;	break;
    }
}
