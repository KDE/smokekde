//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qvariant.h>
#include <qtranslator.h>
#include <qstring.h>

class x_QTranslator : public QTranslator {
public:
    static void x_0(xargs *x) {
	x[0].x_long = (long)QTranslator::Everything;
    }
    static void x_1(xargs *x) {
	x[0].x_long = (long)QTranslator::Stripped;
    }
    static void x_2(xargs *x) {
	// QTranslator(QObject*, const char*)
	x_QTranslator* xret = new x_QTranslator((QObject*)x[1].x_voidp,(const char*)x[2].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QTranslator(QObject* x1, const char* x2) : QTranslator(x1, x2) {
    }
    static void x_3(xargs *x) {
	// QTranslator(QObject*)
	x_QTranslator* xret = new x_QTranslator((QObject*)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    x_QTranslator(QObject* x1) : QTranslator(x1) {
    }
    void x_4(xargs *x) const {
	// find(const char*, const char*, const char*)
	QString xret = this->QTranslator::find((const char*)x[1].x_voidp,(const char*)x[2].x_voidp,(const char*)x[3].x_voidp);
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_5(xargs *x) const {
	// find(const char*, const char*)
	QString xret = this->QTranslator::find((const char*)x[1].x_voidp,(const char*)x[2].x_voidp);
	x[0].x_voidp = (void*)new QString(xret);
    }
    void x_6(xargs *x) const {
	// findMessage(const char*, const char*, const char*)
	QTranslatorMessage xret = this->QTranslator::findMessage((const char*)x[1].x_voidp,(const char*)x[2].x_voidp,(const char*)x[3].x_voidp);
	x[0].x_voidp = (void*)new QTranslatorMessage(xret);
    }
    void x_7(xargs *x) {
	// load(const QString&, const QString&, const QString&, const QString&)
	bool xret = this->QTranslator::load(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp,*(const QString *)x[3].x_voidp,*(const QString *)x[4].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_8(xargs *x) {
	// load(const QString&, const QString&, const QString&)
	bool xret = this->QTranslator::load(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp,*(const QString *)x[3].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_9(xargs *x) {
	// load(const QString&, const QString&)
	bool xret = this->QTranslator::load(*(const QString *)x[1].x_voidp,*(const QString *)x[2].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_10(xargs *x) {
	// load(const QString&)
	bool xret = this->QTranslator::load(*(const QString *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_11(xargs *x) {
	// clear()
	this->QTranslator::clear();
    }
    void x_12(xargs *x) {
	// save(const QString&, QTranslator::SaveMode)
	bool xret = this->QTranslator::save(*(const QString *)x[1].x_voidp,(QTranslator::SaveMode)x[2].x_long);
	x[0].x_bool = (bool)xret;
    }
    void x_13(xargs *x) {
	// save(const QString&)
	bool xret = this->QTranslator::save(*(const QString *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_14(xargs *x) {
	// insert(const QTranslatorMessage&)
	this->QTranslator::insert(*(const QTranslatorMessage *)x[1].x_voidp);
    }
    void x_15(xargs *x) {
	// insert(const char*, const char*, const QString&)
	this->QTranslator::insert((const char*)x[1].x_voidp,(const char*)x[2].x_voidp,*(const QString *)x[3].x_voidp);
    }
    void x_16(xargs *x) {
	// remove(const QTranslatorMessage&)
	this->QTranslator::remove(*(const QTranslatorMessage *)x[1].x_voidp);
    }
    void x_17(xargs *x) {
	// remove(const char*, const char*)
	this->QTranslator::remove((const char*)x[1].x_voidp,(const char*)x[2].x_voidp);
    }
    void x_18(xargs *x) const {
	// contains(const char*, const char*, const char*)
	bool xret = this->QTranslator::contains((const char*)x[1].x_voidp,(const char*)x[2].x_voidp,(const char*)x[3].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_19(xargs *x) const {
	// contains(const char*, const char*)
	bool xret = this->QTranslator::contains((const char*)x[1].x_voidp,(const char*)x[2].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_20(xargs *x) {
	// squeeze(QTranslator::SaveMode)
	this->QTranslator::squeeze((QTranslator::SaveMode)x[1].x_long);
    }
    void x_21(xargs *x) {
	// squeeze()
	this->QTranslator::squeeze();
    }
    void x_22(xargs *x) {
	// unsqueeze()
	this->QTranslator::unsqueeze();
    }
    void x_23(xargs *x) const {
	// messages()
	QValueList<QTranslatorMessage> xret = this->QTranslator::messages();
	x[0].x_voidp = (void*)new QValueList<QTranslatorMessage>(xret);
    }
    virtual bool checkConnectArgs(const char* x1, const QObject* x2, const char* x3) {
	xargs x[4];
	x[1].x_voidp = (void*)x1;
	x[2].x_voidp = (void*)x2;
	x[3].x_voidp = (void*)x3;
	if(call_method((void*)this, 5475, x)) return (bool)x[0].x_bool;
	return this->QObject::checkConnectArgs(x1, x2, x3);
    }
    virtual void childEvent(QChildEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5471, x)) return;
	this->QObject::childEvent(x1);
    }
    virtual void connectNotify(const char* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5473, x)) return;
	this->QObject::connectNotify(x1);
    }
    virtual void customEvent(QCustomEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5472, x)) return;
	this->QObject::customEvent(x1);
    }
    virtual void disconnectNotify(const char* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5474, x)) return;
	this->QObject::disconnectNotify(x1);
    }
    virtual bool event(QEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5410, x)) return (bool)x[0].x_bool;
	return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
	xargs x[3];
	x[1].x_voidp = (void*)x1;
	x[2].x_voidp = (void*)x2;
	if(call_method((void*)this, 5411, x)) return (bool)x[0].x_bool;
	return this->QObject::eventFilter(x1, x2);
    }
    virtual QTranslatorMessage findMessage(const char* x1, const char* x2, const char* x3) const {
	xargs x[4];
	x[1].x_voidp = (void*)x1;
	x[2].x_voidp = (void*)x2;
	x[3].x_voidp = (void*)x3;
	if(call_method((void*)this, 9001, x)) {
	    QTranslatorMessage *xptr = (QTranslatorMessage *)x[0].x_voidp;
	    QTranslatorMessage xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QTranslator::findMessage(x1, x2, x3);
    }
    virtual void insertChild(QObject* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5433, x)) return;
	this->QObject::insertChild(x1);
    }
    virtual QVariant property(const char* x1) const {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5447, x)) {
	    QVariant *xptr = (QVariant *)x[0].x_voidp;
	    QVariant xret(*xptr);
	    delete xptr;
	    return xret;
	}
	return this->QObject::property(x1);
    }
    virtual void removeChild(QObject* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5434, x)) return;
	this->QObject::removeChild(x1);
    }
    virtual void setName(const char* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5416, x)) return;
	this->QObject::setName(x1);
    }
    virtual bool setProperty(const char* x1, const QVariant& x2) {
	xargs x[3];
	x[1].x_voidp = (void*)x1;
	x[2].x_voidp = (void*)&x2;
	if(call_method((void*)this, 5446, x)) return (bool)x[0].x_bool;
	return this->QObject::setProperty(x1, x2);
    }
    virtual void timerEvent(QTimerEvent* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 5470, x)) return;
	this->QObject::timerEvent(x1);
    }
    ~x_QTranslator() {}
};
void xcall_QTranslator(xargs *x, void *s, int xi) {
    x_QTranslator *xself = (x_QTranslator*)s;
    switch(xi) {
	case 0: x_QTranslator::x_0(x);	break;
	case 1: x_QTranslator::x_1(x);	break;
	case 2: x_QTranslator::x_2(x);	break;
	case 3: x_QTranslator::x_3(x);	break;
	case 4: xself->x_4(x);	break;
	case 5: xself->x_5(x);	break;
	case 6: xself->x_6(x);	break;
	case 7: xself->x_7(x);	break;
	case 8: xself->x_8(x);	break;
	case 9: xself->x_9(x);	break;
	case 10: xself->x_10(x);	break;
	case 11: xself->x_11(x);	break;
	case 12: xself->x_12(x);	break;
	case 13: xself->x_13(x);	break;
	case 14: xself->x_14(x);	break;
	case 15: xself->x_15(x);	break;
	case 16: xself->x_16(x);	break;
	case 17: xself->x_17(x);	break;
	case 18: xself->x_18(x);	break;
	case 19: xself->x_19(x);	break;
	case 20: xself->x_20(x);	break;
	case 21: xself->x_21(x);	break;
	case 22: xself->x_22(x);	break;
	case 23: xself->x_23(x);	break;
	case 24: delete (QTranslator*)xself;	break;
    }
}
