//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qevent.h>
#include <qstring.h>

class x_QIMEvent : public QIMEvent {
public:
    static void x_0(xargs *x) {
	// QIMEvent(QEvent::Type, const QString&, int)
	x_QIMEvent* xret = new x_QIMEvent((QEvent::Type)x[1].x_long,*(const QString *)x[2].x_voidp,(int)x[3].x_int);
	x[0].x_voidp = (void*)xret;
    }
    x_QIMEvent(QEvent::Type x1, const QString& x2, int x3) : QIMEvent(x1, x2, x3) {
    }
    void x_1(xargs *x) const {
	// text()
	const QString& xret = this->QIMEvent::text();
	x[0].x_voidp = (void*)&xret;
    }
    void x_2(xargs *x) const {
	// cursorPos()
	int xret = this->QIMEvent::cursorPos();
	x[0].x_int = (int)xret;
    }
    void x_3(xargs *x) const {
	// isAccepted()
	bool xret = this->QIMEvent::isAccepted();
	x[0].x_bool = (bool)xret;
    }
    void x_4(xargs *x) {
	// accept()
	this->QIMEvent::accept();
    }
    void x_5(xargs *x) {
	// ignore()
	this->QIMEvent::ignore();
    }
    ~x_QIMEvent() {}
};
void xcall_QIMEvent(xargs *x, void *s, int xi) {
    x_QIMEvent *xself = (x_QIMEvent*)s;
    switch(xi) {
	case 0: x_QIMEvent::x_0(x);	break;
	case 1: xself->x_1(x);	break;
	case 2: xself->x_2(x);	break;
	case 3: xself->x_3(x);	break;
	case 4: xself->x_4(x);	break;
	case 5: xself->x_5(x);	break;
    }
}
