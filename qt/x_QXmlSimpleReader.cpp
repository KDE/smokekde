//Auto-generated by kalyptus. DO NOT EDIT.
#include <smoke_types.h>
#include <qstring.h>
#include <qxml.h>

class x_QXmlSimpleReader : public QXmlSimpleReader {
public:
    static void x_0(xargs *x) {
	// QXmlSimpleReader()
	x_QXmlSimpleReader* xret = new x_QXmlSimpleReader();
	x[0].x_voidp = (void*)xret;
    }
    x_QXmlSimpleReader() : QXmlSimpleReader() {
    }
    void x_1(xargs *x) const {
	// feature(const QString&, bool*)
	bool xret = this->QXmlSimpleReader::feature(*(const QString *)x[1].x_voidp,(bool*)x[2].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_2(xargs *x) const {
	// feature(const QString&)
	bool xret = this->QXmlSimpleReader::feature(*(const QString *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_3(xargs *x) {
	// setFeature(const QString&, bool)
	this->QXmlSimpleReader::setFeature(*(const QString *)x[1].x_voidp,(bool)x[2].x_bool);
    }
    void x_4(xargs *x) const {
	// hasFeature(const QString&)
	bool xret = this->QXmlSimpleReader::hasFeature(*(const QString *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_5(xargs *x) const {
	// property(const QString&, bool*)
	void* xret = this->QXmlSimpleReader::property(*(const QString *)x[1].x_voidp,(bool*)x[2].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    void x_6(xargs *x) const {
	// property(const QString&)
	void* xret = this->QXmlSimpleReader::property(*(const QString *)x[1].x_voidp);
	x[0].x_voidp = (void*)xret;
    }
    void x_7(xargs *x) {
	// setProperty(const QString&, void*)
	this->QXmlSimpleReader::setProperty(*(const QString *)x[1].x_voidp,(void*)x[2].x_voidp);
    }
    void x_8(xargs *x) const {
	// hasProperty(const QString&)
	bool xret = this->QXmlSimpleReader::hasProperty(*(const QString *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_9(xargs *x) {
	// setEntityResolver(QXmlEntityResolver*)
	this->QXmlSimpleReader::setEntityResolver((QXmlEntityResolver*)x[1].x_voidp);
    }
    void x_10(xargs *x) const {
	// entityResolver()
	QXmlEntityResolver* xret = this->QXmlSimpleReader::entityResolver();
	x[0].x_voidp = (void*)xret;
    }
    void x_11(xargs *x) {
	// setDTDHandler(QXmlDTDHandler*)
	this->QXmlSimpleReader::setDTDHandler((QXmlDTDHandler*)x[1].x_voidp);
    }
    void x_12(xargs *x) const {
	// DTDHandler()
	QXmlDTDHandler* xret = this->QXmlSimpleReader::DTDHandler();
	x[0].x_voidp = (void*)xret;
    }
    void x_13(xargs *x) {
	// setContentHandler(QXmlContentHandler*)
	this->QXmlSimpleReader::setContentHandler((QXmlContentHandler*)x[1].x_voidp);
    }
    void x_14(xargs *x) const {
	// contentHandler()
	QXmlContentHandler* xret = this->QXmlSimpleReader::contentHandler();
	x[0].x_voidp = (void*)xret;
    }
    void x_15(xargs *x) {
	// setErrorHandler(QXmlErrorHandler*)
	this->QXmlSimpleReader::setErrorHandler((QXmlErrorHandler*)x[1].x_voidp);
    }
    void x_16(xargs *x) const {
	// errorHandler()
	QXmlErrorHandler* xret = this->QXmlSimpleReader::errorHandler();
	x[0].x_voidp = (void*)xret;
    }
    void x_17(xargs *x) {
	// setLexicalHandler(QXmlLexicalHandler*)
	this->QXmlSimpleReader::setLexicalHandler((QXmlLexicalHandler*)x[1].x_voidp);
    }
    void x_18(xargs *x) const {
	// lexicalHandler()
	QXmlLexicalHandler* xret = this->QXmlSimpleReader::lexicalHandler();
	x[0].x_voidp = (void*)xret;
    }
    void x_19(xargs *x) {
	// setDeclHandler(QXmlDeclHandler*)
	this->QXmlSimpleReader::setDeclHandler((QXmlDeclHandler*)x[1].x_voidp);
    }
    void x_20(xargs *x) const {
	// declHandler()
	QXmlDeclHandler* xret = this->QXmlSimpleReader::declHandler();
	x[0].x_voidp = (void*)xret;
    }
    void x_21(xargs *x) {
	// parse(const QXmlInputSource&)
	bool xret = this->QXmlSimpleReader::parse(*(const QXmlInputSource *)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_22(xargs *x) {
	// parse(const QXmlInputSource*)
	bool xret = this->QXmlSimpleReader::parse((const QXmlInputSource*)x[1].x_voidp);
	x[0].x_bool = (bool)xret;
    }
    void x_23(xargs *x) {
	// parse(const QXmlInputSource*, bool)
	bool xret = this->QXmlSimpleReader::parse((const QXmlInputSource*)x[1].x_voidp,(bool)x[2].x_bool);
	x[0].x_bool = (bool)xret;
    }
    void x_24(xargs *x) {
	// parseContinue()
	bool xret = this->QXmlSimpleReader::parseContinue();
	x[0].x_bool = (bool)xret;
    }
    virtual QXmlDTDHandler* DTDHandler() const {
	xargs x[1];
	if(call_method((void*)this, 10040, x)) 	return (QXmlDTDHandler*)x[0].x_voidp;
	return this->QXmlSimpleReader::DTDHandler();
    }
    virtual QXmlContentHandler* contentHandler() const {
	xargs x[1];
	if(call_method((void*)this, 10042, x)) 	return (QXmlContentHandler*)x[0].x_voidp;
	return this->QXmlSimpleReader::contentHandler();
    }
    virtual QXmlDeclHandler* declHandler() const {
	xargs x[1];
	if(call_method((void*)this, 10048, x)) 	return (QXmlDeclHandler*)x[0].x_voidp;
	return this->QXmlSimpleReader::declHandler();
    }
    virtual QXmlEntityResolver* entityResolver() const {
	xargs x[1];
	if(call_method((void*)this, 10038, x)) 	return (QXmlEntityResolver*)x[0].x_voidp;
	return this->QXmlSimpleReader::entityResolver();
    }
    virtual QXmlErrorHandler* errorHandler() const {
	xargs x[1];
	if(call_method((void*)this, 10044, x)) 	return (QXmlErrorHandler*)x[0].x_voidp;
	return this->QXmlSimpleReader::errorHandler();
    }
    virtual bool feature(const QString& x1, bool* x2) const {
	xargs x[3];
	x[1].x_voidp = (void*)&x1;
	x[2].x_voidp = (void*)x2;
	if(call_method((void*)this, 10029, x)) return (bool)x[0].x_bool;
	return this->QXmlSimpleReader::feature(x1, x2);
    }
    virtual bool hasFeature(const QString& x1) const {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 10032, x)) return (bool)x[0].x_bool;
	return this->QXmlSimpleReader::hasFeature(x1);
    }
    virtual bool hasProperty(const QString& x1) const {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 10036, x)) return (bool)x[0].x_bool;
	return this->QXmlSimpleReader::hasProperty(x1);
    }
    virtual QXmlLexicalHandler* lexicalHandler() const {
	xargs x[1];
	if(call_method((void*)this, 10046, x)) 	return (QXmlLexicalHandler*)x[0].x_voidp;
	return this->QXmlSimpleReader::lexicalHandler();
    }
    virtual bool parse(const QXmlInputSource& x1) {
	xargs x[2];
	x[1].x_voidp = (void*)&x1;
	if(call_method((void*)this, 10049, x)) return (bool)x[0].x_bool;
	return this->QXmlSimpleReader::parse(x1);
    }
    virtual bool parse(const QXmlInputSource* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 10050, x)) return (bool)x[0].x_bool;
	return this->QXmlSimpleReader::parse(x1);
    }
    virtual bool parse(const QXmlInputSource* x1, bool x2) {
	xargs x[3];
	x[1].x_voidp = (void*)x1;
	x[2].x_bool = (bool)x2;
	if(call_method((void*)this, 10051, x)) return (bool)x[0].x_bool;
	return this->QXmlSimpleReader::parse(x1, x2);
    }
    virtual bool parseContinue() {
	xargs x[1];
	if(call_method((void*)this, 10052, x)) return (bool)x[0].x_bool;
	return this->QXmlSimpleReader::parseContinue();
    }
    virtual void* property(const QString& x1, bool* x2) const {
	xargs x[3];
	x[1].x_voidp = (void*)&x1;
	x[2].x_voidp = (void*)x2;
	if(call_method((void*)this, 10033, x)) 	return (void*)x[0].x_voidp;
	return this->QXmlSimpleReader::property(x1, x2);
    }
    virtual void setContentHandler(QXmlContentHandler* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 10041, x)) return;
	this->QXmlSimpleReader::setContentHandler(x1);
    }
    virtual void setDTDHandler(QXmlDTDHandler* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 10039, x)) return;
	this->QXmlSimpleReader::setDTDHandler(x1);
    }
    virtual void setDeclHandler(QXmlDeclHandler* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 10047, x)) return;
	this->QXmlSimpleReader::setDeclHandler(x1);
    }
    virtual void setEntityResolver(QXmlEntityResolver* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 10037, x)) return;
	this->QXmlSimpleReader::setEntityResolver(x1);
    }
    virtual void setErrorHandler(QXmlErrorHandler* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 10043, x)) return;
	this->QXmlSimpleReader::setErrorHandler(x1);
    }
    virtual void setFeature(const QString& x1, bool x2) {
	xargs x[3];
	x[1].x_voidp = (void*)&x1;
	x[2].x_bool = (bool)x2;
	if(call_method((void*)this, 10031, x)) return;
	this->QXmlSimpleReader::setFeature(x1, x2);
    }
    virtual void setLexicalHandler(QXmlLexicalHandler* x1) {
	xargs x[2];
	x[1].x_voidp = (void*)x1;
	if(call_method((void*)this, 10045, x)) return;
	this->QXmlSimpleReader::setLexicalHandler(x1);
    }
    virtual void setProperty(const QString& x1, void* x2) {
	xargs x[3];
	x[1].x_voidp = (void*)&x1;
	x[2].x_voidp = (void*)x2;
	if(call_method((void*)this, 10035, x)) return;
	this->QXmlSimpleReader::setProperty(x1, x2);
    }
    ~x_QXmlSimpleReader() {}
};
void xcall_QXmlSimpleReader(xargs *x, void *s, int xi) {
    x_QXmlSimpleReader *xself = (x_QXmlSimpleReader*)s;
    switch(xi) {
	case 0: x_QXmlSimpleReader::x_0(x);	break;
	case 1: xself->x_1(x);	break;
	case 2: xself->x_2(x);	break;
	case 3: xself->x_3(x);	break;
	case 4: xself->x_4(x);	break;
	case 5: xself->x_5(x);	break;
	case 6: xself->x_6(x);	break;
	case 7: xself->x_7(x);	break;
	case 8: xself->x_8(x);	break;
	case 9: xself->x_9(x);	break;
	case 10: xself->x_10(x);	break;
	case 11: xself->x_11(x);	break;
	case 12: xself->x_12(x);	break;
	case 13: xself->x_13(x);	break;
	case 14: xself->x_14(x);	break;
	case 15: xself->x_15(x);	break;
	case 16: xself->x_16(x);	break;
	case 17: xself->x_17(x);	break;
	case 18: xself->x_18(x);	break;
	case 19: xself->x_19(x);	break;
	case 20: xself->x_20(x);	break;
	case 21: xself->x_21(x);	break;
	case 22: xself->x_22(x);	break;
	case 23: xself->x_23(x);	break;
	case 24: xself->x_24(x);	break;
	case 25: delete (QXmlSimpleReader*)xself;	break;
    }
}
